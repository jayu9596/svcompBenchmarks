var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]i8;

var $M.4: [ref]ref;

var $M.5: [ref]i64;

var $M.6: [ref]i32;

var $M.7: [ref]i8;

var $M.9: [ref]i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: i32;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 315403);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_urb_state: ref;

axiom ldv_urb_state == $sub.ref(0, 2056);

const ldv_coherent_state: ref;

axiom ldv_coherent_state == $sub.ref(0, 3084);

const {:count 11} llvm.used: ref;

axiom llvm.used == $sub.ref(0, 4196);

const {:count 87} __mod_author1555: ref;

axiom __mod_author1555 == $sub.ref(0, 5307);

const {:count 45} __mod_description1556: ref;

axiom __mod_description1556 == $sub.ref(0, 6376);

const {:count 12} __mod_license1557: ref;

axiom __mod_license1557 == $sub.ref(0, 7412);

const {:count 22} __mod_firmware1559: ref;

axiom __mod_firmware1559 == $sub.ref(0, 8458);

const {:count 29} __mod_firmware1560: ref;

axiom __mod_firmware1560 == $sub.ref(0, 9511);

const __param_urb_pool_size: ref;

axiom __param_urb_pool_size == $sub.ref(0, 10567);

const {:count 27} __mod_urb_pool_sizetype1562: ref;

axiom __mod_urb_pool_sizetype1562 == $sub.ref(0, 11618);

const {:count 55} __mod_urb_pool_size1563: ref;

axiom __mod_urb_pool_size1563 == $sub.ref(0, 12697);

const __param_debug: ref;

axiom __param_debug == $sub.ref(0, 13753);

const {:count 20} __mod_debugtype1565: ref;

axiom __mod_debugtype1565 == $sub.ref(0, 14797);

const {:count 32} __mod_debug1566: ref;

axiom __mod_debug1566 == $sub.ref(0, 15853);

const {:count 6} __param_str_debug: ref;

axiom __param_str_debug == $sub.ref(0, 16883);

const param_ops_bool: ref;

axiom param_ops_bool == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const debug: ref;

axiom debug == $sub.ref(0, 17911);

const {:count 14} __param_str_urb_pool_size: ref;

axiom __param_str_urb_pool_size == $sub.ref(0, 18949);

const param_ops_int: ref;

axiom param_ops_int == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const urb_pool_size: ref;

axiom urb_pool_size == $sub.ref(0, 19977);

const __key___11: ref;

axiom __key___11 == $sub.ref(0, 21009);

const __key___10: ref;

axiom __key___10 == $sub.ref(0, 22041);

const __key___9: ref;

axiom __key___9 == $sub.ref(0, 23073);

const __key___8: ref;

axiom __key___8 == $sub.ref(0, 24105);

const __key___7: ref;

axiom __key___7 == $sub.ref(0, 25137);

const whiteheat_driver: ref;

axiom whiteheat_driver == $sub.ref(0, 26457);

const id_table_std: ref;

axiom id_table_std == $sub.ref(0, 27505);

const whiteheat_device: ref;

axiom whiteheat_device == $sub.ref(0, 29041);

const id_table_prerenumeration: ref;

axiom id_table_prerenumeration == $sub.ref(0, 30089);

const whiteheat_fake_device: ref;

axiom whiteheat_fake_device == $sub.ref(0, 31625);

const {:count 2} id_table_combined: ref;

axiom id_table_combined == $sub.ref(0, 32697);

const res_whiteheat_open_4: ref;

axiom res_whiteheat_open_4 == $sub.ref(0, 33725);

const res_whiteheat_firmware_download_0: ref;

axiom res_whiteheat_firmware_download_0 == $sub.ref(0, 34753);

const {:count 45} .str.2: ref;

axiom .str.2 == $sub.ref(0, 35822);

const {:count 16} .str.3: ref;

axiom .str.3 == $sub.ref(0, 36862);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 37897);

const {:count 198} .str.10: ref;

axiom .str.10 == $sub.ref(0, 39119);

const {:count 28} .str.11: ref;

axiom .str.11 == $sub.ref(0, 40171);

const {:count 13} .str.12: ref;

axiom .str.12 == $sub.ref(0, 41208);

const {:count 36} .str.13: ref;

axiom .str.13 == $sub.ref(0, 42268);

const {:count 20} .str.14: ref;

axiom .str.14 == $sub.ref(0, 43312);

const {:count 43} .str.15: ref;

axiom .str.15 == $sub.ref(0, 44379);

const {:count 58} .str.16: ref;

axiom .str.16 == $sub.ref(0, 45461);

const {:count 71} .str.17: ref;

axiom .str.17 == $sub.ref(0, 46556);

const {:count 72} .str.18: ref;

axiom .str.18 == $sub.ref(0, 47652);

const {:count 38} .str.19: ref;

axiom .str.19 == $sub.ref(0, 48714);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 49763);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0, 50797);

const {:count 21} .str.20: ref;

axiom .str.20 == $sub.ref(0, 51842);

const {:count 25} .str.93: ref;

axiom .str.93 == $sub.ref(0, 52891);

const {:count 18} .str.91: ref;

axiom .str.91 == $sub.ref(0, 53933);

const {:count 52} .str.94: ref;

axiom .str.94 == $sub.ref(0, 55009);

const {:count 24} .str.90: ref;

axiom .str.90 == $sub.ref(0, 56057);

const {:count 51} .str.92: ref;

axiom .str.92 == $sub.ref(0, 57132);

const {:count 4} .str.73: ref;

axiom .str.73 == $sub.ref(0, 58160);

const {:count 26} .str.74: ref;

axiom .str.74 == $sub.ref(0, 59210);

const {:count 6} .str.75: ref;

axiom .str.75 == $sub.ref(0, 60240);

const {:count 2} .str.76: ref;

axiom .str.76 == $sub.ref(0, 61266);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 62309);

const {:count 24} .str.25: ref;

axiom .str.25 == $sub.ref(0, 63357);

const {:count 18} .str.26: ref;

axiom .str.26 == $sub.ref(0, 64399);

const {:count 31} .str.27: ref;

axiom .str.27 == $sub.ref(0, 65454);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 32} .str.28: ref;

axiom .str.28 == $sub.ref(0, 66510);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 67563);

const {:count 32} .str.30: ref;

axiom .str.30 == $sub.ref(0, 68619);

const {:count 19} .str.85: ref;

axiom .str.85 == $sub.ref(0, 69662);

const {:count 21} .str.89: ref;

axiom .str.89 == $sub.ref(0, 70707);

const {:count 45} .str.63: ref;

axiom .str.63 == $sub.ref(0, 71776);

const {:count 16} .str.64: ref;

axiom .str.64 == $sub.ref(0, 72816);

const {:count 19} .str.88: ref;

axiom .str.88 == $sub.ref(0, 73859);

const {:count 26} .str.87: ref;

axiom .str.87 == $sub.ref(0, 74909);

const {:count 24} .str.82: ref;

axiom .str.82 == $sub.ref(0, 75957);

const {:count 28} .str.31: ref;

axiom .str.31 == $sub.ref(0, 77009);

const {:count 16} .str.32: ref;

axiom .str.32 == $sub.ref(0, 78049);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 79098);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 80150);

const {:count 4} .str.35: ref;

axiom .str.35 == $sub.ref(0, 81178);

const .str.36: ref;

axiom .str.36 == $sub.ref(0, 82203);

const {:count 4} .str.37: ref;

axiom .str.37 == $sub.ref(0, 83231);

const {:count 4} .str.38: ref;

axiom .str.38 == $sub.ref(0, 84259);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 85287);

const {:count 49} .str.40: ref;

axiom .str.40 == $sub.ref(0, 86360);

const {:count 40} .str.41: ref;

axiom .str.41 == $sub.ref(0, 87424);

const {:count 35} .str.42: ref;

axiom .str.42 == $sub.ref(0, 88483);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 89535);

const {:count 33} .str.83: ref;

axiom .str.83 == $sub.ref(0, 90592);

const {:count 16} .str.84: ref;

axiom .str.84 == $sub.ref(0, 91632);

const {:count 21} .str.81: ref;

axiom .str.81 == $sub.ref(0, 92677);

const {:count 16} .str.78: ref;

axiom .str.78 == $sub.ref(0, 93717);

const {:count 38} .str.79: ref;

axiom .str.79 == $sub.ref(0, 94779);

const {:count 44} .str.80: ref;

axiom .str.80 == $sub.ref(0, 95847);

const {:count 16} .str.44: ref;

axiom .str.44 == $sub.ref(0, 96887);

const {:count 15} .str.21: ref;

axiom .str.21 == $sub.ref(0, 97926);

const {:count 43} .str.22: ref;

axiom .str.22 == $sub.ref(0, 98993);

const {:count 31} .str.23: ref;

axiom .str.23 == $sub.ref(0, 100048);

const {:count 19} .str.24: ref;

axiom .str.24 == $sub.ref(0, 101091);

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 102133);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 103189);

const {:count 34} .str.46: ref;

axiom .str.46 == $sub.ref(0, 104247);

const {:count 31} .str.47: ref;

axiom .str.47 == $sub.ref(0, 105302);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 106359);

const {:count 25} .str.49: ref;

axiom .str.49 == $sub.ref(0, 107408);

const {:count 34} .str.50: ref;

axiom .str.50 == $sub.ref(0, 108466);

const {:count 5} .str.51: ref;

axiom .str.51 == $sub.ref(0, 109495);

const {:count 39} .str.52: ref;

axiom .str.52 == $sub.ref(0, 110558);

const {:count 22} .str.53: ref;

axiom .str.53 == $sub.ref(0, 111604);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 112648);

const {:count 17} .str.55: ref;

axiom .str.55 == $sub.ref(0, 113689);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 114737);

const {:count 30} .str.57: ref;

axiom .str.57 == $sub.ref(0, 115791);

const {:count 31} .str.58: ref;

axiom .str.58 == $sub.ref(0, 116846);

const {:count 21} .str.59: ref;

axiom .str.59 == $sub.ref(0, 117891);

const {:count 57} .str.60: ref;

axiom .str.60 == $sub.ref(0, 118972);

const {:count 62} .str.61: ref;

axiom .str.61 == $sub.ref(0, 120058);

const {:count 44} .str.62: ref;

axiom .str.62 == $sub.ref(0, 121126);

const {:count 27} .str.67: ref;

axiom .str.67 == $sub.ref(0, 122177);

const {:count 44} .str.68: ref;

axiom .str.68 == $sub.ref(0, 123245);

const {:count 36} .str.69: ref;

axiom .str.69 == $sub.ref(0, 124305);

const {:count 28} .str.70: ref;

axiom .str.70 == $sub.ref(0, 125357);

const {:count 37} .str.71: ref;

axiom .str.71 == $sub.ref(0, 126418);

const {:count 52} .str.72: ref;

axiom .str.72 == $sub.ref(0, 127494);

const {:count 28} .str.65: ref;

axiom .str.65 == $sub.ref(0, 128546);

const {:count 31} .str.66: ref;

axiom .str.66 == $sub.ref(0, 129601);

const .str: ref;

axiom .str == $sub.ref(0, 130678);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 131710);

const {:count 3} .str.1.107: ref;

axiom .str.1.107 == $sub.ref(0, 132737);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 133775);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 134803);

const device_private_init: ref;

axiom device_private_init == $sub.ref(0, 135835);

procedure device_private_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation device_private_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := kzalloc(16, 208);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 136867);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 137899);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "kzalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2} {:cexpr "kzalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p2 := external_alloc();
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 138931);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const whiteheat_firmware_download: ref;

axiom whiteheat_firmware_download == $sub.ref(0, 139963);

procedure whiteheat_firmware_download($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation whiteheat_firmware_download($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i16;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i16;
  var $i48: i16;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p67: ref;
  var $p74: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i1;
  var $p77: ref;
  var $i78: i16;
  var $i79: i16;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i16;
  var $i92: i16;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $i101: i32;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i16;
  var $i117: i16;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i16;
  var $i130: i16;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $i139: i32;
  var $p141: ref;
  var $i142: i32;
  var $i16: i32;
  var $p143: ref;
  var $p144: ref;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, debug);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i10 := request_ihex_firmware($p3, .str.12, $p9);
    call {:si_unique_call 10} {:cexpr "tmp___7"} boogie_si_record_i32($i10);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i20 := request_ihex_firmware($p2, .str.14, $p19);
    call {:si_unique_call 15} {:cexpr "tmp___8"} boogie_si_record_i32($i20);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i26 := ezusb_set_reset($p0, 1);
    call {:si_unique_call 18} {:cexpr "response"} boogie_si_record_i32($i26);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p2);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p31 := $p29;
    goto $bb15;

  $bb15:
    call $p31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $i45, $p59 := whiteheat_firmware_download_loop_$bb15($p0, $p31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $i45, $p59);
    goto $bb15_last;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $ne.ref($p31, $0.ref);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i60 := ezusb_set_reset($p0, 0);
    call {:si_unique_call 26} {:cexpr "response"} boogie_si_record_i32($i60);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p3);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.2, $p62);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p65 := $p63;
    goto $bb25;

  $bb25:
    call $p65, $i66, $p68, $i69, $i70, $i71, $p72, $p67, $p74 := whiteheat_firmware_download_loop_$bb25($p65, $i66, $p68, $i69, $i70, $i71, $p72, $p67, $p74);
    goto $bb25_last;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i66 := $ne.ref($p65, $0.ref);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p67 := $p65;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p73 := $p67;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p75 := $p73;
    goto $bb35;

  $bb35:
    call $p75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $p84, $i85, $i86, $i87, $p88, $i89, $p103 := whiteheat_firmware_download_loop_$bb35($p0, $p75, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $p84, $i85, $i86, $i87, $p88, $i89, $p103);
    goto $bb35_last;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i76 := $ne.ref($p75, $0.ref);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i76 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i104 := ezusb_set_reset($p0, 1);
    call {:si_unique_call 43} {:cexpr "response"} boogie_si_record_i32($i104);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p3);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.2, $p106);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p109 := $p107;
    goto $bb45;

  $bb45:
    call $p109, $i110, $p111, $i112, $i113, $i114, $p115, $i116, $i117, $p118, $i119, $i120, $p122, $i123, $i124, $i125, $p126, $i127, $p141 := whiteheat_firmware_download_loop_$bb45($p0, $p109, $i110, $p111, $i112, $i113, $i114, $p115, $i116, $i117, $p118, $i119, $i120, $p122, $i123, $i124, $i125, $p126, $i127, $p141);
    goto $bb45_last;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i110 := $ne.ref($p109, $0.ref);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i110 == 1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i142 := ezusb_set_reset($p0, 0);
    call {:si_unique_call 52} {:cexpr "response"} boogie_si_record_i32($i142);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.1, $p2);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} release_firmware($p143);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p3);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} release_firmware($p144);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb47:
    assume $i110 == 1;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p109, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.3, $p111);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i113 := __fswab32($i112);
    call {:si_unique_call 50} {:cexpr "tmp___22"} boogie_si_record_i32($i113);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i114 := $ult.i32($i113, 6976);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i114 == 1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i114 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p109, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.3, $p115);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i117 := __fswab16($i116);
    call {:si_unique_call 54} {:cexpr "tmp___18"} boogie_si_record_i16($i117);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p109, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.3, $p118);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i120 := __fswab32($i119);
    call {:si_unique_call 56} {:cexpr "tmp___19"} boogie_si_record_i32($i120);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p109, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i117);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i124 := ezusb_writememory($p0, $i120, $p122, $i123, $sub.i8(0, 96));
    call {:si_unique_call 58} {:cexpr "response"} boogie_si_record_i32($i124);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p126, $i127 := $p109, $i124;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p109, $mul.ref(1, 6));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p109 := $p141;
    goto corral_source_split_217_dummy;

  $bb54:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p126, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.3, $p128);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i130 := __fswab16($i129);
    call {:si_unique_call 60} {:cexpr "tmp___20"} boogie_si_record_i16($i130);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p126, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.3, $p131);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i133 := __fswab32($i132);
    call {:si_unique_call 62} {:cexpr "tmp___21"} boogie_si_record_i32($i133);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i130);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_22 := dev_err.ref.ref.ref.i32.i32.ref.i32($p136, .str.18, .str.11, $i127, $i133, $p138, $i139);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb37:
    assume $i76 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p75, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.3, $p77);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i79 := __fswab16($i78);
    call {:si_unique_call 37} {:cexpr "tmp___14"} boogie_si_record_i16($i79);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p75, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.3, $p80);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i82 := __fswab32($i81);
    call {:si_unique_call 39} {:cexpr "tmp___15"} boogie_si_record_i32($i82);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i79);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i86 := ezusb_writememory($p0, $i82, $p84, $i85, $sub.i8(0, 93));
    call {:si_unique_call 41} {:cexpr "response"} boogie_si_record_i32($i86);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p88, $i89 := $p75, $i86;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p75, $mul.ref(1, 6));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p75 := $p103;
    goto corral_source_split_172_dummy;

  $bb41:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.3, $p90);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i92 := __fswab16($i91);
    call {:si_unique_call 45} {:cexpr "tmp___16"} boogie_si_record_i16($i92);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.3, $p93);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i95 := __fswab32($i94);
    call {:si_unique_call 47} {:cexpr "tmp___17"} boogie_si_record_i32($i95);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i92);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_21 := dev_err.ref.ref.ref.i32.i32.ref.i32($p98, .str.17, .str.11, $i89, $i95, $p100, $i101);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.3, $p68);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i70 := __fswab32($i69);
    call {:si_unique_call 34} {:cexpr "tmp___13"} boogie_si_record_i32($i70);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i70, 6976);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p72 := $p65;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p73 := $p72;
    goto $bb32;

  $bb29:
    assume $i71 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p74 := ihex_next_binrec($p65);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p65 := $p74;
    goto corral_source_split_131_dummy;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.3, $p33);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i35 := __fswab16($i34);
    call {:si_unique_call 20} {:cexpr "tmp___9"} boogie_si_record_i16($i35);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p31, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.3, $p36);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i38 := __fswab32($i37);
    call {:si_unique_call 22} {:cexpr "tmp___10"} boogie_si_record_i32($i38);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i35);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i42 := ezusb_writememory($p0, $i38, $p40, $i41, $sub.i8(0, 96));
    call {:si_unique_call 24} {:cexpr "response"} boogie_si_record_i32($i42);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p31, $i42;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p59 := ihex_next_binrec($p31);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p31 := $p59;
    goto corral_source_split_111_dummy;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.3, $p46);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i48 := __fswab16($i47);
    call {:si_unique_call 28} {:cexpr "tmp___11"} boogie_si_record_i16($i48);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p44, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.3, $p49);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i51 := __fswab32($i50);
    call {:si_unique_call 30} {:cexpr "tmp___12"} boogie_si_record_i32($i51);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i48);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_20 := dev_err.ref.ref.ref.i32.i32.ref.i32($p54, .str.16, .str.11, $i45, $i51, $p56, $i57);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_19 := dev_err.ref.ref.ref($p24, .str.15, .str.11);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_18 := dev_err.ref.ref.ref($p14, .str.13, .str.11);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb10;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_17 := printk.ref.ref.ref(.str.9, .str.10, .str.11);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_217_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  corral_source_split_172_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_131_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_111_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;
}



const whiteheat_firmware_attach: ref;

axiom whiteheat_firmware_attach == $sub.ref(0, 140995);

procedure whiteheat_firmware_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation whiteheat_firmware_attach($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 142027);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 64} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 65} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 67} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_ihex_firmware: ref;

axiom request_ihex_firmware == $sub.ref(0, 143059);

procedure request_ihex_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation request_ihex_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i6: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i4 := request_firmware($p3, $p1, $p2);
    call {:si_unique_call 78} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.4, $p3);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i8 := ihex_validate_fw($p7);
    call {:si_unique_call 80} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.4, $p3);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p0, $p12);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_23 := dev_err.ref.ref.ref($p2, .str.19, $p1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.4, $p3);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} release_firmware($p11);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 144091);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 86} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ezusb_set_reset: ref;

axiom ezusb_set_reset == $sub.ref(0, 145123);

procedure ezusb_set_reset($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation ezusb_set_reset($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} {:cexpr "ezusb_set_reset:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 146155);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 8);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 65280);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i3, $i6);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 147187);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i1 := __arch_swab32($i0);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ezusb_writememory: ref;

axiom ezusb_writememory == $sub.ref(0, 148219);

procedure ezusb_writememory($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i8) returns ($r: i32);
  free requires assertsPassed;



implementation ezusb_writememory($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i8) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} {:cexpr "ezusb_writememory:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 99} {:cexpr "ezusb_writememory:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 100} {:cexpr "ezusb_writememory:arg:arg4"} boogie_si_record_i8($i4);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ihex_next_binrec: ref;

axiom ihex_next_binrec == $sub.ref(0, 149251);

procedure ihex_next_binrec($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ihex_next_binrec($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.3, $p1);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i3 := __fswab16($i2);
    call {:si_unique_call 104} {:cexpr "tmp___7"} boogie_si_record_i16($i3);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 5);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 4));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 2);
    call {:si_unique_call 105} {:cexpr "next"} boogie_si_record_i32($i7);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref($i8, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.3, $p12);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i14 := __fswab16($i13);
    call {:si_unique_call 107} {:cexpr "tmp___10"} boogie_si_record_i16($i14);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p17 := $p10;
    goto $bb3;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 150283);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 151315);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 109} $i1 := devirtbounce(0, $i0);
    call {:si_unique_call 110} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 152347);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ihex_validate_fw: ref;

axiom ihex_validate_fw == $sub.ref(0, 153379);

procedure ihex_validate_fw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ihex_validate_fw($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i16;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i1, $p2, $i3, $i4, $i5, $p6, $p7, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24 := ihex_validate_fw_loop_$bb1($p0, $i1, $p2, $i3, $i4, $i5, $p6, $p7, $p8, $p9, $p10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24);
    goto $bb1_last;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.5, $p2);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, 6);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i1, $i4);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($i1, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.3, $p10);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i12 := __fswab16($i11);
    call {:si_unique_call 114} {:cexpr "tmp___7"} boogie_si_record_i16($i12);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.3, $p16);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i18 := __fswab16($i17);
    call {:si_unique_call 116} {:cexpr "tmp___8"} boogie_si_record_i16($i18);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i21 := $add.i64(6, $i20);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 3);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1152921504606846972);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i1, $i23);
    call {:si_unique_call 117} {:cexpr "ofs"} boogie_si_record_i64($i24);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i1 := $i24;
    goto corral_source_split_353_dummy;

  corral_source_split_353_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_320;
}



const whiteheat_attach: ref;

axiom whiteheat_attach == $sub.ref(0, 154411);

procedure whiteheat_attach($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, assertsPassed;



implementation whiteheat_attach($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $i119: i64;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p136: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i1;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i64;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i1;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $p191: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i1;
  var $i200: i32;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $i216: i32;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i1;
  var $i229: i32;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $p233: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i1;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i1;
  var $i262: i32;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $p266: ref;
  var $p267: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i32;
  var $i278: i32;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i32;
  var $p289: ref;
  var $i290: i32;
  var $p291: ref;
  var $p292: ref;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i344: i64;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $i350: i32;
  var $i351: i32;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p269: ref;
  var $i270: i32;
  var $i271: i32;
  var $p272: ref;
  var $p364: ref;
  var $p365: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $p258: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $p374: ref;
  var $p375: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p196: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i376: i32;
  var $p377: ref;
  var $i135: i32;
  var $i378: i32;
  var $i313: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_357#12;

  corral_source_split_357#12:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_358#12;

  corral_source_split_358#12:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_359#12;

  corral_source_split_359#12:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_360#12;

  corral_source_split_360#12:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_361#12;

  corral_source_split_361#12:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_362#12;

  corral_source_split_362#12:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_363#12;

  corral_source_split_363#12:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_364#12;

  corral_source_split_364#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i11 := __create_pipe($p7, $i10);
    call {:si_unique_call 121} {:cexpr "tmp___8"} boogie_si_record_i32($i11);
    goto corral_source_split_365#12;

  corral_source_split_365#12:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($sub.i32(0, 1073741824), $i11);
    call {:si_unique_call 122} {:cexpr "pipe"} boogie_si_record_i32($i12);
    goto corral_source_split_366#12;

  corral_source_split_366#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p13 := __kmalloc(2, 208);
    goto corral_source_split_367#12;

  corral_source_split_367#12:
    assume {:verifier.code 0} true;
    $i14 := $ne.ref($p13, $0.ref);
    goto corral_source_split_368#12;

  corral_source_split_368#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1#12, $bb2#12;

  $bb2#12:
    assume !($i14 == 1);
    goto corral_source_split_370#12;

  corral_source_split_370#12:
    assume {:verifier.code 0} true;
    goto $bb3#12;

  $bb1#12:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb4#12;

  $bb4#12:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref(0, 1));
    goto corral_source_split_372#12;

  corral_source_split_372#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 11);
    goto corral_source_split_373#12;

  corral_source_split_373#12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p13, $mul.ref(1, 1));
    goto corral_source_split_374#12;

  corral_source_split_374#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_375#12;

  corral_source_split_375#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p17 := __kmalloc(20, 208);
    goto corral_source_split_376#12;

  corral_source_split_376#12:
    assume {:verifier.code 0} true;
    $i18 := $ne.ref($p17, $0.ref);
    goto corral_source_split_377#12;

  corral_source_split_377#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5#12, $bb6#12;

  $bb6#12:
    assume !($i18 == 1);
    goto corral_source_split_379#12;

  corral_source_split_379#12:
    assume {:verifier.code 0} true;
    goto $bb7#12;

  $bb5#12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb8#12;

  $bb8#12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_383#12;

  corral_source_split_383#12:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_384#12;

  corral_source_split_384#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_24 := usb_clear_halt($p20, $i12);
    goto corral_source_split_385#12;

  corral_source_split_385#12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_386#12;

  corral_source_split_386#12:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_387#12;

  corral_source_split_387#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i24 := usb_bulk_msg($p23, $i12, $p13, 2, $p1, 2000);
    call {:si_unique_call 128} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_388#12;

  corral_source_split_388#12:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_389#12;

  corral_source_split_389#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9#12, $bb10#12;

  $bb10#12:
    assume !($i25 == 1);
    goto corral_source_split_401#12;

  corral_source_split_401#12:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p1);
    goto corral_source_split_402#12;

  corral_source_split_402#12:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 2);
    goto corral_source_split_403#12;

  corral_source_split_403#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12#12, $bb13#12;

  $bb13#12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14#12;

  $bb14#12:
    assume {:verifier.code 0} true;
    goto $bb15#12;

  $bb15#12:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_442#12;

  corral_source_split_442#12:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_443#12;

  corral_source_split_443#12:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_444#12;

  corral_source_split_444#12:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_445#12;

  corral_source_split_445#12:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_446#12;

  corral_source_split_446#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i50 := __create_pipe($p46, $i49);
    call {:si_unique_call 136} {:cexpr "tmp___11"} boogie_si_record_i32($i50);
    goto corral_source_split_447#12;

  corral_source_split_447#12:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($sub.i32(0, 1073741824), $i50);
    goto corral_source_split_448#12;

  corral_source_split_448#12:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 128);
    call {:si_unique_call 137} {:cexpr "pipe"} boogie_si_record_i32($i52);
    goto corral_source_split_449#12;

  corral_source_split_449#12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_450#12;

  corral_source_split_450#12:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_451#12;

  corral_source_split_451#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_30 := usb_clear_halt($p54, $i52);
    goto corral_source_split_452#12;

  corral_source_split_452#12:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_453#12;

  corral_source_split_453#12:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_454#12;

  corral_source_split_454#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i58 := usb_bulk_msg($p57, $i52, $p17, 20, $p1, 2000);
    call {:si_unique_call 140} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_455#12;

  corral_source_split_455#12:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_456#12;

  corral_source_split_456#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16#12, $bb17#12;

  $bb17#12:
    assume !($i59 == 1);
    goto corral_source_split_468#12;

  corral_source_split_468#12:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p1);
    goto corral_source_split_469#12;

  corral_source_split_469#12:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_470#12;

  corral_source_split_470#12:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 20);
    goto corral_source_split_471#12;

  corral_source_split_471#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb18#12, $bb19#12;

  $bb19#12:
    assume !($i70 == 1);
    goto corral_source_split_484#12;

  corral_source_split_484#12:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p17, $mul.ref(0, 1));
    goto corral_source_split_485#12;

  corral_source_split_485#12:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_486#12;

  corral_source_split_486#12:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_487#12;

  corral_source_split_487#12:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p13, $mul.ref(0, 1));
    goto corral_source_split_488#12;

  corral_source_split_488#12:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_489#12;

  corral_source_split_489#12:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_490#12;

  corral_source_split_490#12:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i82, $i85);
    goto corral_source_split_491#12;

  corral_source_split_491#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb20#12, $bb21#12;

  $bb21#12:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb22#12;

  $bb22#12:
    assume {:verifier.code 0} true;
    goto $bb23#12;

  $bb23#12:
    assume {:verifier.code 0} true;
    goto $bb24#12;

  $bb24#12:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_506#12;

  corral_source_split_506#12:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_507#12;

  corral_source_split_507#12:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_508#12;

  corral_source_split_508#12:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_509#12;

  corral_source_split_509#12:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_510#12;

  corral_source_split_510#12:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_511#12;

  corral_source_split_511#12:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_512#12;

  corral_source_split_512#12:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_513#12;

  corral_source_split_513#12:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_514#12;

  corral_source_split_514#12:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p99, $mul.ref(0, 19)), $mul.ref(1, 1));
    goto corral_source_split_515#12;

  corral_source_split_515#12:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_516#12;

  corral_source_split_516#12:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_517#12;

  corral_source_split_517#12:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p99, $mul.ref(0, 19)), $mul.ref(2, 1));
    goto corral_source_split_518#12;

  corral_source_split_518#12:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_519#12;

  corral_source_split_519#12:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_520#12;

  corral_source_split_520#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_34 := _dev_info.ref.ref.ref.ref.i32.i32($p102, .str.50, $p106, .str.51, $i109, $i112);
    goto corral_source_split_521#12;

  corral_source_split_521#12:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb25#12;

  $bb25#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#12;

  corral_source_split_523#12:
    assume {:verifier.code 0} true;
    goto $bb26#12;

  $bb26#12:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#12;

  corral_source_split_525#12:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#12;

  corral_source_split_526#12:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#12;

  corral_source_split_527#12:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#12;

  corral_source_split_528#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#12, $bb28#12;

  $bb27#12:
    assume $i118 == 1;
    goto corral_source_split_530#12;

  corral_source_split_530#12:
    assume {:verifier.code 0} true;
    goto $bb29#12;

  $bb29#12:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#12;

  corral_source_split_534#12:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#12;

  corral_source_split_535#12:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#12;

  corral_source_split_536#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#12;

  corral_source_split_537#12:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#12;

  corral_source_split_538#12:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#12;

  corral_source_split_539#12:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#12;

  corral_source_split_540#12:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#12;

  $bb32#12:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#12;

  $bb34#12:
    assume {:verifier.code 0} true;
    goto $bb35#12;

  $bb35#12:
    assume {:verifier.code 0} true;
    goto $bb36#12;

  $bb36#12:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#12;

  corral_source_split_558#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#12;

  corral_source_split_559#12:
    assume {:verifier.code 0} true;
    goto $bb37#12;

  $bb37#12:
    assume {:verifier.code 0} true;
    goto $bb38#12;

  $bb38#12:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#12;

  corral_source_split_561#12:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#12;

  corral_source_split_562#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#12;

  corral_source_split_563#12:
    assume {:verifier.code 0} true;
    goto $bb39#12;

  $bb39#12:
    assume {:verifier.code 0} true;
    goto $bb41#12;

  $bb41#12:
    assume {:verifier.code 0} true;
    goto $bb43#12;

  $bb43#12:
    assume {:verifier.code 0} true;
    goto $bb44#12;

  $bb44#12:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#12;

  corral_source_split_565#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#12;

  corral_source_split_566#12:
    assume {:verifier.code 0} true;
    goto $bb45#12;

  $bb45#12:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#12;

  corral_source_split_568#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#12;

  corral_source_split_569#12:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#12;

  corral_source_split_570#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#12;

  corral_source_split_571#12:
    assume {:verifier.code 0} true;
    goto $bb47#12;

  $bb47#12:
    assume {:verifier.code 0} true;
    goto $bb48#12;

  $bb48#12:
    assume {:verifier.code 0} true;
    goto $bb49#12;

  $bb49#12:
    assume {:verifier.code 0} true;
    goto $bb50#12;

  $bb50#12:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#12;

  corral_source_split_573#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#12;

  corral_source_split_574#12:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#12;

  corral_source_split_575#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#12;

  corral_source_split_576#12:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#12;

  corral_source_split_577#12:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#12;

  corral_source_split_578#12:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#12;

  corral_source_split_579#12:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#12;

  corral_source_split_580#12:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#12;

  corral_source_split_581#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#12;

  corral_source_split_582#12:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#12;

  corral_source_split_583#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#12;

  corral_source_split_584#12:
    assume {:verifier.code 0} true;
    goto $bb51#12;

  $bb51#12:
    assume {:verifier.code 0} true;
    goto $bb52#12;

  $bb52#12:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#12;

  corral_source_split_586#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#12;

  corral_source_split_587#12:
    assume {:verifier.code 0} true;
    goto $bb53#12;

  $bb53#12:
    assume {:verifier.code 0} true;
    goto $bb55#12;

  $bb55#12:
    assume {:verifier.code 0} true;
    goto $bb57#12;

  $bb57#12:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#12;

  corral_source_split_589#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#12;

  corral_source_split_590#12:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#12;

  corral_source_split_591#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#12;

  corral_source_split_592#12:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#12;

  corral_source_split_593#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#12;

  corral_source_split_594#12:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#12;

  corral_source_split_595#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#12;

  corral_source_split_596#12:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#12;

  corral_source_split_597#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#12;

  corral_source_split_598#12:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#12;

  corral_source_split_599#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#12;

  corral_source_split_600#12:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#12;

  $bb59#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#12;

  corral_source_split_602#12:
    assume {:verifier.code 0} true;
    goto $bb60#12;

  $bb60#12:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#12;

  corral_source_split_604#12:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#12;

  corral_source_split_605#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#12, $bb62#12;

  $bb62#12:
    assume !($i164 == 1);
    goto corral_source_split_609#12;

  corral_source_split_609#12:
    assume {:verifier.code 0} true;
    goto $bb64#12;

  $bb64#12:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#12;

  corral_source_split_614#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#12;

  corral_source_split_615#12:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#12;

  corral_source_split_616#12:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#11;

  $bb25#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#11;

  corral_source_split_523#11:
    assume {:verifier.code 0} true;
    goto $bb26#11;

  $bb26#11:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#11;

  corral_source_split_525#11:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#11;

  corral_source_split_526#11:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#11;

  corral_source_split_527#11:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#11;

  corral_source_split_528#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#11, $bb28#12;

  $bb27#11:
    assume $i118 == 1;
    goto corral_source_split_530#11;

  corral_source_split_530#11:
    assume {:verifier.code 0} true;
    goto $bb29#11;

  $bb29#11:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#11;

  corral_source_split_534#11:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#11;

  corral_source_split_535#11:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#11;

  corral_source_split_536#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#11;

  corral_source_split_537#11:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#11;

  corral_source_split_538#11:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#11;

  corral_source_split_539#11:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#11;

  corral_source_split_540#11:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#11;

  $bb32#11:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#11;

  $bb34#11:
    assume {:verifier.code 0} true;
    goto $bb35#11;

  $bb35#11:
    assume {:verifier.code 0} true;
    goto $bb36#11;

  $bb36#11:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#11;

  corral_source_split_558#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#11;

  corral_source_split_559#11:
    assume {:verifier.code 0} true;
    goto $bb37#11;

  $bb37#11:
    assume {:verifier.code 0} true;
    goto $bb38#11;

  $bb38#11:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#11;

  corral_source_split_561#11:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#11;

  corral_source_split_562#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#11;

  corral_source_split_563#11:
    assume {:verifier.code 0} true;
    goto $bb39#11;

  $bb39#11:
    assume {:verifier.code 0} true;
    goto $bb41#11;

  $bb41#11:
    assume {:verifier.code 0} true;
    goto $bb43#11;

  $bb43#11:
    assume {:verifier.code 0} true;
    goto $bb44#11;

  $bb44#11:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#11;

  corral_source_split_565#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#11;

  corral_source_split_566#11:
    assume {:verifier.code 0} true;
    goto $bb45#11;

  $bb45#11:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#11;

  corral_source_split_568#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#11;

  corral_source_split_569#11:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#11;

  corral_source_split_570#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#11;

  corral_source_split_571#11:
    assume {:verifier.code 0} true;
    goto $bb47#11;

  $bb47#11:
    assume {:verifier.code 0} true;
    goto $bb48#11;

  $bb48#11:
    assume {:verifier.code 0} true;
    goto $bb49#11;

  $bb49#11:
    assume {:verifier.code 0} true;
    goto $bb50#11;

  $bb50#11:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#11;

  corral_source_split_573#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#11;

  corral_source_split_574#11:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#11;

  corral_source_split_575#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#11;

  corral_source_split_576#11:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#11;

  corral_source_split_577#11:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#11;

  corral_source_split_578#11:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#11;

  corral_source_split_579#11:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#11;

  corral_source_split_580#11:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#11;

  corral_source_split_581#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#11;

  corral_source_split_582#11:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#11;

  corral_source_split_583#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#11;

  corral_source_split_584#11:
    assume {:verifier.code 0} true;
    goto $bb51#11;

  $bb51#11:
    assume {:verifier.code 0} true;
    goto $bb52#11;

  $bb52#11:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#11;

  corral_source_split_586#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#11;

  corral_source_split_587#11:
    assume {:verifier.code 0} true;
    goto $bb53#11;

  $bb53#11:
    assume {:verifier.code 0} true;
    goto $bb55#11;

  $bb55#11:
    assume {:verifier.code 0} true;
    goto $bb57#11;

  $bb57#11:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#11;

  corral_source_split_589#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#11;

  corral_source_split_590#11:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#11;

  corral_source_split_591#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#11;

  corral_source_split_592#11:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#11;

  corral_source_split_593#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#11;

  corral_source_split_594#11:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#11;

  corral_source_split_595#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#11;

  corral_source_split_596#11:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#11;

  corral_source_split_597#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#11;

  corral_source_split_598#11:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#11;

  corral_source_split_599#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#11;

  corral_source_split_600#11:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#11;

  $bb61#12:
    assume $i164 == 1;
    goto corral_source_split_607#12;

  corral_source_split_607#12:
    assume {:verifier.code 0} true;
    goto $bb63#12;

  $bb63#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#12;

  corral_source_split_611#12:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#12;

  corral_source_split_612#12:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#12, $bb66#12;

  $bb65#12:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#12;

  $bb68#12:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#12;

  corral_source_split_625#12:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#12;

  corral_source_split_626#12:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#12;

  corral_source_split_627#12:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#12;

  corral_source_split_628#12:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#12;

  corral_source_split_629#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#12;

  corral_source_split_630#12:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#12;

  corral_source_split_631#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#12;

  corral_source_split_632#12:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#12;

  corral_source_split_633#12:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#12;

  corral_source_split_634#12:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#12;

  corral_source_split_635#12:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#12, $bb70#12;

  $bb69#12:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#12;

  $bb72#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#12;

  corral_source_split_644#12:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#12;

  corral_source_split_645#12:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#12;

  corral_source_split_646#12:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#12, $bb74#12;

  $bb73#12:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#12;

  $bb76#12:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#12;

  corral_source_split_657#12:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#12;

  corral_source_split_658#12:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#12;

  corral_source_split_659#12:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#12;

  corral_source_split_660#12:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#12;

  corral_source_split_661#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#12;

  corral_source_split_662#12:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#12;

  corral_source_split_663#12:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#12;

  corral_source_split_664#12:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#12;

  corral_source_split_665#12:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#12;

  corral_source_split_666#12:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#12;

  corral_source_split_667#12:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#12;

  corral_source_split_668#12:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#12;

  corral_source_split_669#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#12;

  corral_source_split_670#12:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#12;

  corral_source_split_671#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#12;

  corral_source_split_672#12:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#12;

  corral_source_split_673#12:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#12;

  corral_source_split_674#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#12;

  corral_source_split_675#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#12;

  corral_source_split_676#12:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#12;

  corral_source_split_677#12:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#12, $bb78#12;

  $bb77#12:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#12;

  $bb80#12:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#12;

  corral_source_split_695#12:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#12;

  corral_source_split_696#12:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#12;

  corral_source_split_697#12:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#12;

  corral_source_split_698#12:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#12;

  corral_source_split_699#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#12;

  corral_source_split_700#12:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#12;

  corral_source_split_701#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#12;

  corral_source_split_702#12:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#12;

  corral_source_split_703#12:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#12;

  corral_source_split_704#12:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#12;

  corral_source_split_705#12:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#12, $bb82#12;

  $bb81#12:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#12;

  $bb84#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#12;

  corral_source_split_714#12:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#12;

  corral_source_split_715#12:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#12;

  corral_source_split_716#12:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#12, $bb86#12;

  $bb85#12:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#12;

  $bb88#12:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#12;

  corral_source_split_727#12:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#12;

  corral_source_split_728#12:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#12;

  corral_source_split_729#12:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#12;

  corral_source_split_730#12:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#12;

  corral_source_split_731#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#12;

  corral_source_split_732#12:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#12;

  corral_source_split_733#12:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#12;

  corral_source_split_734#12:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#12;

  corral_source_split_735#12:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#12;

  corral_source_split_736#12:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#12;

  corral_source_split_737#12:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#12;

  corral_source_split_738#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#12;

  corral_source_split_739#12:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#12;

  corral_source_split_740#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#12;

  corral_source_split_741#12:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#12;

  corral_source_split_742#12:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#12;

  corral_source_split_743#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#12;

  corral_source_split_744#12:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#12;

  corral_source_split_745#12:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#11;

  $bb59#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#11;

  corral_source_split_602#11:
    assume {:verifier.code 0} true;
    goto $bb60#11;

  $bb60#11:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#11;

  corral_source_split_604#11:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#11;

  corral_source_split_605#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#11, $bb62#11;

  $bb62#11:
    assume !($i164 == 1);
    goto corral_source_split_609#11;

  corral_source_split_609#11:
    assume {:verifier.code 0} true;
    goto $bb64#11;

  $bb64#11:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#11;

  corral_source_split_614#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#11;

  corral_source_split_615#11:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#11;

  corral_source_split_616#11:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#10;

  $bb25#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#10;

  corral_source_split_523#10:
    assume {:verifier.code 0} true;
    goto $bb26#10;

  $bb26#10:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#10;

  corral_source_split_525#10:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#10;

  corral_source_split_526#10:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#10;

  corral_source_split_527#10:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#10;

  corral_source_split_528#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#10, $bb28#12;

  $bb27#10:
    assume $i118 == 1;
    goto corral_source_split_530#10;

  corral_source_split_530#10:
    assume {:verifier.code 0} true;
    goto $bb29#10;

  $bb29#10:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#10;

  corral_source_split_534#10:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#10;

  corral_source_split_535#10:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#10;

  corral_source_split_536#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#10;

  corral_source_split_537#10:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#10;

  corral_source_split_538#10:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#10;

  corral_source_split_539#10:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#10;

  corral_source_split_540#10:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#10;

  $bb32#10:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#10;

  $bb34#10:
    assume {:verifier.code 0} true;
    goto $bb35#10;

  $bb35#10:
    assume {:verifier.code 0} true;
    goto $bb36#10;

  $bb36#10:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#10;

  corral_source_split_558#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#10;

  corral_source_split_559#10:
    assume {:verifier.code 0} true;
    goto $bb37#10;

  $bb37#10:
    assume {:verifier.code 0} true;
    goto $bb38#10;

  $bb38#10:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#10;

  corral_source_split_561#10:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#10;

  corral_source_split_562#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#10;

  corral_source_split_563#10:
    assume {:verifier.code 0} true;
    goto $bb39#10;

  $bb39#10:
    assume {:verifier.code 0} true;
    goto $bb41#10;

  $bb41#10:
    assume {:verifier.code 0} true;
    goto $bb43#10;

  $bb43#10:
    assume {:verifier.code 0} true;
    goto $bb44#10;

  $bb44#10:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#10;

  corral_source_split_565#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#10;

  corral_source_split_566#10:
    assume {:verifier.code 0} true;
    goto $bb45#10;

  $bb45#10:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#10;

  corral_source_split_568#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#10;

  corral_source_split_569#10:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#10;

  corral_source_split_570#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#10;

  corral_source_split_571#10:
    assume {:verifier.code 0} true;
    goto $bb47#10;

  $bb47#10:
    assume {:verifier.code 0} true;
    goto $bb48#10;

  $bb48#10:
    assume {:verifier.code 0} true;
    goto $bb49#10;

  $bb49#10:
    assume {:verifier.code 0} true;
    goto $bb50#10;

  $bb50#10:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#10;

  corral_source_split_573#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#10;

  corral_source_split_574#10:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#10;

  corral_source_split_575#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#10;

  corral_source_split_576#10:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#10;

  corral_source_split_577#10:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#10;

  corral_source_split_578#10:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#10;

  corral_source_split_579#10:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#10;

  corral_source_split_580#10:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#10;

  corral_source_split_581#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#10;

  corral_source_split_582#10:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#10;

  corral_source_split_583#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#10;

  corral_source_split_584#10:
    assume {:verifier.code 0} true;
    goto $bb51#10;

  $bb51#10:
    assume {:verifier.code 0} true;
    goto $bb52#10;

  $bb52#10:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#10;

  corral_source_split_586#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#10;

  corral_source_split_587#10:
    assume {:verifier.code 0} true;
    goto $bb53#10;

  $bb53#10:
    assume {:verifier.code 0} true;
    goto $bb55#10;

  $bb55#10:
    assume {:verifier.code 0} true;
    goto $bb57#10;

  $bb57#10:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#10;

  corral_source_split_589#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#10;

  corral_source_split_590#10:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#10;

  corral_source_split_591#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#10;

  corral_source_split_592#10:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#10;

  corral_source_split_593#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#10;

  corral_source_split_594#10:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#10;

  corral_source_split_595#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#10;

  corral_source_split_596#10:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#10;

  corral_source_split_597#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#10;

  corral_source_split_598#10:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#10;

  corral_source_split_599#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#10;

  corral_source_split_600#10:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#10;

  $bb61#11:
    assume $i164 == 1;
    goto corral_source_split_607#11;

  corral_source_split_607#11:
    assume {:verifier.code 0} true;
    goto $bb63#11;

  $bb63#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#11;

  corral_source_split_611#11:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#11;

  corral_source_split_612#11:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#11, $bb66#12;

  $bb65#11:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#11;

  $bb68#11:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#11;

  corral_source_split_625#11:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#11;

  corral_source_split_626#11:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#11;

  corral_source_split_627#11:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#11;

  corral_source_split_628#11:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#11;

  corral_source_split_629#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#11;

  corral_source_split_630#11:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#11;

  corral_source_split_631#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#11;

  corral_source_split_632#11:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#11;

  corral_source_split_633#11:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#11;

  corral_source_split_634#11:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#11;

  corral_source_split_635#11:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#11, $bb70#12;

  $bb69#11:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#11;

  $bb72#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#11;

  corral_source_split_644#11:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#11;

  corral_source_split_645#11:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#11;

  corral_source_split_646#11:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#11, $bb74#12;

  $bb73#11:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#11;

  $bb76#11:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#11;

  corral_source_split_657#11:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#11;

  corral_source_split_658#11:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#11;

  corral_source_split_659#11:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#11;

  corral_source_split_660#11:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#11;

  corral_source_split_661#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#11;

  corral_source_split_662#11:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#11;

  corral_source_split_663#11:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#11;

  corral_source_split_664#11:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#11;

  corral_source_split_665#11:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#11;

  corral_source_split_666#11:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#11;

  corral_source_split_667#11:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#11;

  corral_source_split_668#11:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#11;

  corral_source_split_669#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#11;

  corral_source_split_670#11:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#11;

  corral_source_split_671#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#11;

  corral_source_split_672#11:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#11;

  corral_source_split_673#11:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#11;

  corral_source_split_674#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#11;

  corral_source_split_675#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#11;

  corral_source_split_676#11:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#11;

  corral_source_split_677#11:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#11, $bb78#12;

  $bb77#11:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#11;

  $bb80#11:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#11;

  corral_source_split_695#11:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#11;

  corral_source_split_696#11:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#11;

  corral_source_split_697#11:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#11;

  corral_source_split_698#11:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#11;

  corral_source_split_699#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#11;

  corral_source_split_700#11:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#11;

  corral_source_split_701#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#11;

  corral_source_split_702#11:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#11;

  corral_source_split_703#11:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#11;

  corral_source_split_704#11:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#11;

  corral_source_split_705#11:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#11, $bb82#12;

  $bb81#11:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#11;

  $bb84#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#11;

  corral_source_split_714#11:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#11;

  corral_source_split_715#11:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#11;

  corral_source_split_716#11:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#11, $bb86#12;

  $bb85#11:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#11;

  $bb88#11:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#11;

  corral_source_split_727#11:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#11;

  corral_source_split_728#11:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#11;

  corral_source_split_729#11:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#11;

  corral_source_split_730#11:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#11;

  corral_source_split_731#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#11;

  corral_source_split_732#11:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#11;

  corral_source_split_733#11:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#11;

  corral_source_split_734#11:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#11;

  corral_source_split_735#11:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#11;

  corral_source_split_736#11:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#11;

  corral_source_split_737#11:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#11;

  corral_source_split_738#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#11;

  corral_source_split_739#11:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#11;

  corral_source_split_740#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#11;

  corral_source_split_741#11:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#11;

  corral_source_split_742#11:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#11;

  corral_source_split_743#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#11;

  corral_source_split_744#11:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#11;

  corral_source_split_745#11:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#10;

  $bb59#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#10;

  corral_source_split_602#10:
    assume {:verifier.code 0} true;
    goto $bb60#10;

  $bb60#10:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#10;

  corral_source_split_604#10:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#10;

  corral_source_split_605#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#10, $bb62#10;

  $bb62#10:
    assume !($i164 == 1);
    goto corral_source_split_609#10;

  corral_source_split_609#10:
    assume {:verifier.code 0} true;
    goto $bb64#10;

  $bb64#10:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#10;

  corral_source_split_614#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#10;

  corral_source_split_615#10:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#10;

  corral_source_split_616#10:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#9;

  $bb25#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#9;

  corral_source_split_523#9:
    assume {:verifier.code 0} true;
    goto $bb26#9;

  $bb26#9:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#9;

  corral_source_split_525#9:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#9;

  corral_source_split_526#9:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#9;

  corral_source_split_527#9:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#9;

  corral_source_split_528#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#9, $bb28#12;

  $bb27#9:
    assume $i118 == 1;
    goto corral_source_split_530#9;

  corral_source_split_530#9:
    assume {:verifier.code 0} true;
    goto $bb29#9;

  $bb29#9:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#9;

  corral_source_split_534#9:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#9;

  corral_source_split_535#9:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#9;

  corral_source_split_536#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#9;

  corral_source_split_537#9:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#9;

  corral_source_split_538#9:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#9;

  corral_source_split_539#9:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#9;

  corral_source_split_540#9:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#9;

  $bb32#9:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#9;

  $bb34#9:
    assume {:verifier.code 0} true;
    goto $bb35#9;

  $bb35#9:
    assume {:verifier.code 0} true;
    goto $bb36#9;

  $bb36#9:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#9;

  corral_source_split_558#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#9;

  corral_source_split_559#9:
    assume {:verifier.code 0} true;
    goto $bb37#9;

  $bb37#9:
    assume {:verifier.code 0} true;
    goto $bb38#9;

  $bb38#9:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#9;

  corral_source_split_561#9:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#9;

  corral_source_split_562#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#9;

  corral_source_split_563#9:
    assume {:verifier.code 0} true;
    goto $bb39#9;

  $bb39#9:
    assume {:verifier.code 0} true;
    goto $bb41#9;

  $bb41#9:
    assume {:verifier.code 0} true;
    goto $bb43#9;

  $bb43#9:
    assume {:verifier.code 0} true;
    goto $bb44#9;

  $bb44#9:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#9;

  corral_source_split_565#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#9;

  corral_source_split_566#9:
    assume {:verifier.code 0} true;
    goto $bb45#9;

  $bb45#9:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#9;

  corral_source_split_568#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#9;

  corral_source_split_569#9:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#9;

  corral_source_split_570#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#9;

  corral_source_split_571#9:
    assume {:verifier.code 0} true;
    goto $bb47#9;

  $bb47#9:
    assume {:verifier.code 0} true;
    goto $bb48#9;

  $bb48#9:
    assume {:verifier.code 0} true;
    goto $bb49#9;

  $bb49#9:
    assume {:verifier.code 0} true;
    goto $bb50#9;

  $bb50#9:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#9;

  corral_source_split_573#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#9;

  corral_source_split_574#9:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#9;

  corral_source_split_575#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#9;

  corral_source_split_576#9:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#9;

  corral_source_split_577#9:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#9;

  corral_source_split_578#9:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#9;

  corral_source_split_579#9:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#9;

  corral_source_split_580#9:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#9;

  corral_source_split_581#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#9;

  corral_source_split_582#9:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#9;

  corral_source_split_583#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#9;

  corral_source_split_584#9:
    assume {:verifier.code 0} true;
    goto $bb51#9;

  $bb51#9:
    assume {:verifier.code 0} true;
    goto $bb52#9;

  $bb52#9:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#9;

  corral_source_split_586#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#9;

  corral_source_split_587#9:
    assume {:verifier.code 0} true;
    goto $bb53#9;

  $bb53#9:
    assume {:verifier.code 0} true;
    goto $bb55#9;

  $bb55#9:
    assume {:verifier.code 0} true;
    goto $bb57#9;

  $bb57#9:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#9;

  corral_source_split_589#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#9;

  corral_source_split_590#9:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#9;

  corral_source_split_591#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#9;

  corral_source_split_592#9:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#9;

  corral_source_split_593#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#9;

  corral_source_split_594#9:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#9;

  corral_source_split_595#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#9;

  corral_source_split_596#9:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#9;

  corral_source_split_597#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#9;

  corral_source_split_598#9:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#9;

  corral_source_split_599#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#9;

  corral_source_split_600#9:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#9;

  $bb61#10:
    assume $i164 == 1;
    goto corral_source_split_607#10;

  corral_source_split_607#10:
    assume {:verifier.code 0} true;
    goto $bb63#10;

  $bb63#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#10;

  corral_source_split_611#10:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#10;

  corral_source_split_612#10:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#10, $bb66#12;

  $bb65#10:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#10;

  $bb68#10:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#10;

  corral_source_split_625#10:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#10;

  corral_source_split_626#10:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#10;

  corral_source_split_627#10:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#10;

  corral_source_split_628#10:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#10;

  corral_source_split_629#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#10;

  corral_source_split_630#10:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#10;

  corral_source_split_631#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#10;

  corral_source_split_632#10:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#10;

  corral_source_split_633#10:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#10;

  corral_source_split_634#10:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#10;

  corral_source_split_635#10:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#10, $bb70#12;

  $bb69#10:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#10;

  $bb72#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#10;

  corral_source_split_644#10:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#10;

  corral_source_split_645#10:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#10;

  corral_source_split_646#10:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#10, $bb74#12;

  $bb73#10:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#10;

  $bb76#10:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#10;

  corral_source_split_657#10:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#10;

  corral_source_split_658#10:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#10;

  corral_source_split_659#10:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#10;

  corral_source_split_660#10:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#10;

  corral_source_split_661#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#10;

  corral_source_split_662#10:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#10;

  corral_source_split_663#10:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#10;

  corral_source_split_664#10:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#10;

  corral_source_split_665#10:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#10;

  corral_source_split_666#10:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#10;

  corral_source_split_667#10:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#10;

  corral_source_split_668#10:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#10;

  corral_source_split_669#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#10;

  corral_source_split_670#10:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#10;

  corral_source_split_671#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#10;

  corral_source_split_672#10:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#10;

  corral_source_split_673#10:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#10;

  corral_source_split_674#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#10;

  corral_source_split_675#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#10;

  corral_source_split_676#10:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#10;

  corral_source_split_677#10:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#10, $bb78#12;

  $bb77#10:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#10;

  $bb80#10:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#10;

  corral_source_split_695#10:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#10;

  corral_source_split_696#10:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#10;

  corral_source_split_697#10:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#10;

  corral_source_split_698#10:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#10;

  corral_source_split_699#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#10;

  corral_source_split_700#10:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#10;

  corral_source_split_701#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#10;

  corral_source_split_702#10:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#10;

  corral_source_split_703#10:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#10;

  corral_source_split_704#10:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#10;

  corral_source_split_705#10:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#10, $bb82#12;

  $bb81#10:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#10;

  $bb84#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#10;

  corral_source_split_714#10:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#10;

  corral_source_split_715#10:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#10;

  corral_source_split_716#10:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#10, $bb86#12;

  $bb85#10:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#10;

  $bb88#10:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#10;

  corral_source_split_727#10:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#10;

  corral_source_split_728#10:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#10;

  corral_source_split_729#10:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#10;

  corral_source_split_730#10:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#10;

  corral_source_split_731#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#10;

  corral_source_split_732#10:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#10;

  corral_source_split_733#10:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#10;

  corral_source_split_734#10:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#10;

  corral_source_split_735#10:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#10;

  corral_source_split_736#10:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#10;

  corral_source_split_737#10:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#10;

  corral_source_split_738#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#10;

  corral_source_split_739#10:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#10;

  corral_source_split_740#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#10;

  corral_source_split_741#10:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#10;

  corral_source_split_742#10:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#10;

  corral_source_split_743#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#10;

  corral_source_split_744#10:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#10;

  corral_source_split_745#10:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#9;

  $bb59#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#9;

  corral_source_split_602#9:
    assume {:verifier.code 0} true;
    goto $bb60#9;

  $bb60#9:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#9;

  corral_source_split_604#9:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#9;

  corral_source_split_605#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#9, $bb62#9;

  $bb62#9:
    assume !($i164 == 1);
    goto corral_source_split_609#9;

  corral_source_split_609#9:
    assume {:verifier.code 0} true;
    goto $bb64#9;

  $bb64#9:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#9;

  corral_source_split_614#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#9;

  corral_source_split_615#9:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#9;

  corral_source_split_616#9:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#8;

  $bb25#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#8;

  corral_source_split_523#8:
    assume {:verifier.code 0} true;
    goto $bb26#8;

  $bb26#8:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#8;

  corral_source_split_525#8:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#8;

  corral_source_split_526#8:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#8;

  corral_source_split_527#8:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#8;

  corral_source_split_528#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#8, $bb28#12;

  $bb27#8:
    assume $i118 == 1;
    goto corral_source_split_530#8;

  corral_source_split_530#8:
    assume {:verifier.code 0} true;
    goto $bb29#8;

  $bb29#8:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#8;

  corral_source_split_534#8:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#8;

  corral_source_split_535#8:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#8;

  corral_source_split_536#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#8;

  corral_source_split_537#8:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#8;

  corral_source_split_538#8:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#8;

  corral_source_split_539#8:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#8;

  corral_source_split_540#8:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#8;

  $bb32#8:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#8;

  $bb34#8:
    assume {:verifier.code 0} true;
    goto $bb35#8;

  $bb35#8:
    assume {:verifier.code 0} true;
    goto $bb36#8;

  $bb36#8:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#8;

  corral_source_split_558#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#8;

  corral_source_split_559#8:
    assume {:verifier.code 0} true;
    goto $bb37#8;

  $bb37#8:
    assume {:verifier.code 0} true;
    goto $bb38#8;

  $bb38#8:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#8;

  corral_source_split_561#8:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#8;

  corral_source_split_562#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#8;

  corral_source_split_563#8:
    assume {:verifier.code 0} true;
    goto $bb39#8;

  $bb39#8:
    assume {:verifier.code 0} true;
    goto $bb41#8;

  $bb41#8:
    assume {:verifier.code 0} true;
    goto $bb43#8;

  $bb43#8:
    assume {:verifier.code 0} true;
    goto $bb44#8;

  $bb44#8:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#8;

  corral_source_split_565#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#8;

  corral_source_split_566#8:
    assume {:verifier.code 0} true;
    goto $bb45#8;

  $bb45#8:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#8;

  corral_source_split_568#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#8;

  corral_source_split_569#8:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#8;

  corral_source_split_570#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#8;

  corral_source_split_571#8:
    assume {:verifier.code 0} true;
    goto $bb47#8;

  $bb47#8:
    assume {:verifier.code 0} true;
    goto $bb48#8;

  $bb48#8:
    assume {:verifier.code 0} true;
    goto $bb49#8;

  $bb49#8:
    assume {:verifier.code 0} true;
    goto $bb50#8;

  $bb50#8:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#8;

  corral_source_split_573#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#8;

  corral_source_split_574#8:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#8;

  corral_source_split_575#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#8;

  corral_source_split_576#8:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#8;

  corral_source_split_577#8:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#8;

  corral_source_split_578#8:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#8;

  corral_source_split_579#8:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#8;

  corral_source_split_580#8:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#8;

  corral_source_split_581#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#8;

  corral_source_split_582#8:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#8;

  corral_source_split_583#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#8;

  corral_source_split_584#8:
    assume {:verifier.code 0} true;
    goto $bb51#8;

  $bb51#8:
    assume {:verifier.code 0} true;
    goto $bb52#8;

  $bb52#8:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#8;

  corral_source_split_586#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#8;

  corral_source_split_587#8:
    assume {:verifier.code 0} true;
    goto $bb53#8;

  $bb53#8:
    assume {:verifier.code 0} true;
    goto $bb55#8;

  $bb55#8:
    assume {:verifier.code 0} true;
    goto $bb57#8;

  $bb57#8:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#8;

  corral_source_split_589#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#8;

  corral_source_split_590#8:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#8;

  corral_source_split_591#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#8;

  corral_source_split_592#8:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#8;

  corral_source_split_593#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#8;

  corral_source_split_594#8:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#8;

  corral_source_split_595#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#8;

  corral_source_split_596#8:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#8;

  corral_source_split_597#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#8;

  corral_source_split_598#8:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#8;

  corral_source_split_599#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#8;

  corral_source_split_600#8:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#8;

  $bb61#9:
    assume $i164 == 1;
    goto corral_source_split_607#9;

  corral_source_split_607#9:
    assume {:verifier.code 0} true;
    goto $bb63#9;

  $bb63#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#9;

  corral_source_split_611#9:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#9;

  corral_source_split_612#9:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#9, $bb66#12;

  $bb65#9:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#9;

  $bb68#9:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#9;

  corral_source_split_625#9:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#9;

  corral_source_split_626#9:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#9;

  corral_source_split_627#9:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#9;

  corral_source_split_628#9:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#9;

  corral_source_split_629#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#9;

  corral_source_split_630#9:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#9;

  corral_source_split_631#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#9;

  corral_source_split_632#9:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#9;

  corral_source_split_633#9:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#9;

  corral_source_split_634#9:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#9;

  corral_source_split_635#9:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#9, $bb70#12;

  $bb69#9:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#9;

  $bb72#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#9;

  corral_source_split_644#9:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#9;

  corral_source_split_645#9:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#9;

  corral_source_split_646#9:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#9, $bb74#12;

  $bb73#9:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#9;

  $bb76#9:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#9;

  corral_source_split_657#9:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#9;

  corral_source_split_658#9:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#9;

  corral_source_split_659#9:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#9;

  corral_source_split_660#9:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#9;

  corral_source_split_661#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#9;

  corral_source_split_662#9:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#9;

  corral_source_split_663#9:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#9;

  corral_source_split_664#9:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#9;

  corral_source_split_665#9:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#9;

  corral_source_split_666#9:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#9;

  corral_source_split_667#9:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#9;

  corral_source_split_668#9:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#9;

  corral_source_split_669#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#9;

  corral_source_split_670#9:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#9;

  corral_source_split_671#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#9;

  corral_source_split_672#9:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#9;

  corral_source_split_673#9:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#9;

  corral_source_split_674#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#9;

  corral_source_split_675#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#9;

  corral_source_split_676#9:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#9;

  corral_source_split_677#9:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#9, $bb78#12;

  $bb77#9:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#9;

  $bb80#9:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#9;

  corral_source_split_695#9:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#9;

  corral_source_split_696#9:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#9;

  corral_source_split_697#9:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#9;

  corral_source_split_698#9:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#9;

  corral_source_split_699#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#9;

  corral_source_split_700#9:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#9;

  corral_source_split_701#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#9;

  corral_source_split_702#9:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#9;

  corral_source_split_703#9:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#9;

  corral_source_split_704#9:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#9;

  corral_source_split_705#9:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#9, $bb82#12;

  $bb81#9:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#9;

  $bb84#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#9;

  corral_source_split_714#9:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#9;

  corral_source_split_715#9:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#9;

  corral_source_split_716#9:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#9, $bb86#12;

  $bb85#9:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#9;

  $bb88#9:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#9;

  corral_source_split_727#9:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#9;

  corral_source_split_728#9:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#9;

  corral_source_split_729#9:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#9;

  corral_source_split_730#9:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#9;

  corral_source_split_731#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#9;

  corral_source_split_732#9:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#9;

  corral_source_split_733#9:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#9;

  corral_source_split_734#9:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#9;

  corral_source_split_735#9:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#9;

  corral_source_split_736#9:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#9;

  corral_source_split_737#9:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#9;

  corral_source_split_738#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#9;

  corral_source_split_739#9:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#9;

  corral_source_split_740#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#9;

  corral_source_split_741#9:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#9;

  corral_source_split_742#9:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#9;

  corral_source_split_743#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#9;

  corral_source_split_744#9:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#9;

  corral_source_split_745#9:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#8;

  $bb59#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#8;

  corral_source_split_602#8:
    assume {:verifier.code 0} true;
    goto $bb60#8;

  $bb60#8:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#8;

  corral_source_split_604#8:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#8;

  corral_source_split_605#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#8, $bb62#8;

  $bb62#8:
    assume !($i164 == 1);
    goto corral_source_split_609#8;

  corral_source_split_609#8:
    assume {:verifier.code 0} true;
    goto $bb64#8;

  $bb64#8:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#8;

  corral_source_split_614#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#8;

  corral_source_split_615#8:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#8;

  corral_source_split_616#8:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#7;

  $bb25#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#7;

  corral_source_split_523#7:
    assume {:verifier.code 0} true;
    goto $bb26#7;

  $bb26#7:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#7;

  corral_source_split_525#7:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#7;

  corral_source_split_526#7:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#7;

  corral_source_split_527#7:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#7;

  corral_source_split_528#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#7, $bb28#12;

  $bb27#7:
    assume $i118 == 1;
    goto corral_source_split_530#7;

  corral_source_split_530#7:
    assume {:verifier.code 0} true;
    goto $bb29#7;

  $bb29#7:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#7;

  corral_source_split_534#7:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#7;

  corral_source_split_535#7:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#7;

  corral_source_split_536#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#7;

  corral_source_split_537#7:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#7;

  corral_source_split_538#7:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#7;

  corral_source_split_539#7:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#7;

  corral_source_split_540#7:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#7;

  $bb32#7:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#7;

  $bb34#7:
    assume {:verifier.code 0} true;
    goto $bb35#7;

  $bb35#7:
    assume {:verifier.code 0} true;
    goto $bb36#7;

  $bb36#7:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#7;

  corral_source_split_558#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#7;

  corral_source_split_559#7:
    assume {:verifier.code 0} true;
    goto $bb37#7;

  $bb37#7:
    assume {:verifier.code 0} true;
    goto $bb38#7;

  $bb38#7:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#7;

  corral_source_split_561#7:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#7;

  corral_source_split_562#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#7;

  corral_source_split_563#7:
    assume {:verifier.code 0} true;
    goto $bb39#7;

  $bb39#7:
    assume {:verifier.code 0} true;
    goto $bb41#7;

  $bb41#7:
    assume {:verifier.code 0} true;
    goto $bb43#7;

  $bb43#7:
    assume {:verifier.code 0} true;
    goto $bb44#7;

  $bb44#7:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#7;

  corral_source_split_565#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#7;

  corral_source_split_566#7:
    assume {:verifier.code 0} true;
    goto $bb45#7;

  $bb45#7:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#7;

  corral_source_split_568#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#7;

  corral_source_split_569#7:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#7;

  corral_source_split_570#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#7;

  corral_source_split_571#7:
    assume {:verifier.code 0} true;
    goto $bb47#7;

  $bb47#7:
    assume {:verifier.code 0} true;
    goto $bb48#7;

  $bb48#7:
    assume {:verifier.code 0} true;
    goto $bb49#7;

  $bb49#7:
    assume {:verifier.code 0} true;
    goto $bb50#7;

  $bb50#7:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#7;

  corral_source_split_573#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#7;

  corral_source_split_574#7:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#7;

  corral_source_split_575#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#7;

  corral_source_split_576#7:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#7;

  corral_source_split_577#7:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#7;

  corral_source_split_578#7:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#7;

  corral_source_split_579#7:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#7;

  corral_source_split_580#7:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#7;

  corral_source_split_581#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#7;

  corral_source_split_582#7:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#7;

  corral_source_split_583#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#7;

  corral_source_split_584#7:
    assume {:verifier.code 0} true;
    goto $bb51#7;

  $bb51#7:
    assume {:verifier.code 0} true;
    goto $bb52#7;

  $bb52#7:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#7;

  corral_source_split_586#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#7;

  corral_source_split_587#7:
    assume {:verifier.code 0} true;
    goto $bb53#7;

  $bb53#7:
    assume {:verifier.code 0} true;
    goto $bb55#7;

  $bb55#7:
    assume {:verifier.code 0} true;
    goto $bb57#7;

  $bb57#7:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#7;

  corral_source_split_589#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#7;

  corral_source_split_590#7:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#7;

  corral_source_split_591#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#7;

  corral_source_split_592#7:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#7;

  corral_source_split_593#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#7;

  corral_source_split_594#7:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#7;

  corral_source_split_595#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#7;

  corral_source_split_596#7:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#7;

  corral_source_split_597#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#7;

  corral_source_split_598#7:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#7;

  corral_source_split_599#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#7;

  corral_source_split_600#7:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#7;

  $bb61#8:
    assume $i164 == 1;
    goto corral_source_split_607#8;

  corral_source_split_607#8:
    assume {:verifier.code 0} true;
    goto $bb63#8;

  $bb63#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#8;

  corral_source_split_611#8:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#8;

  corral_source_split_612#8:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#8, $bb66#12;

  $bb65#8:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#8;

  $bb68#8:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#8;

  corral_source_split_625#8:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#8;

  corral_source_split_626#8:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#8;

  corral_source_split_627#8:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#8;

  corral_source_split_628#8:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#8;

  corral_source_split_629#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#8;

  corral_source_split_630#8:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#8;

  corral_source_split_631#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#8;

  corral_source_split_632#8:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#8;

  corral_source_split_633#8:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#8;

  corral_source_split_634#8:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#8;

  corral_source_split_635#8:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#8, $bb70#12;

  $bb69#8:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#8;

  $bb72#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#8;

  corral_source_split_644#8:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#8;

  corral_source_split_645#8:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#8;

  corral_source_split_646#8:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#8, $bb74#12;

  $bb73#8:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#8;

  $bb76#8:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#8;

  corral_source_split_657#8:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#8;

  corral_source_split_658#8:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#8;

  corral_source_split_659#8:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#8;

  corral_source_split_660#8:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#8;

  corral_source_split_661#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#8;

  corral_source_split_662#8:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#8;

  corral_source_split_663#8:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#8;

  corral_source_split_664#8:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#8;

  corral_source_split_665#8:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#8;

  corral_source_split_666#8:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#8;

  corral_source_split_667#8:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#8;

  corral_source_split_668#8:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#8;

  corral_source_split_669#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#8;

  corral_source_split_670#8:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#8;

  corral_source_split_671#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#8;

  corral_source_split_672#8:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#8;

  corral_source_split_673#8:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#8;

  corral_source_split_674#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#8;

  corral_source_split_675#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#8;

  corral_source_split_676#8:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#8;

  corral_source_split_677#8:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#8, $bb78#12;

  $bb77#8:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#8;

  $bb80#8:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#8;

  corral_source_split_695#8:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#8;

  corral_source_split_696#8:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#8;

  corral_source_split_697#8:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#8;

  corral_source_split_698#8:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#8;

  corral_source_split_699#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#8;

  corral_source_split_700#8:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#8;

  corral_source_split_701#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#8;

  corral_source_split_702#8:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#8;

  corral_source_split_703#8:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#8;

  corral_source_split_704#8:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#8;

  corral_source_split_705#8:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#8, $bb82#12;

  $bb81#8:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#8;

  $bb84#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#8;

  corral_source_split_714#8:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#8;

  corral_source_split_715#8:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#8;

  corral_source_split_716#8:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#8, $bb86#12;

  $bb85#8:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#8;

  $bb88#8:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#8;

  corral_source_split_727#8:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#8;

  corral_source_split_728#8:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#8;

  corral_source_split_729#8:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#8;

  corral_source_split_730#8:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#8;

  corral_source_split_731#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#8;

  corral_source_split_732#8:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#8;

  corral_source_split_733#8:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#8;

  corral_source_split_734#8:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#8;

  corral_source_split_735#8:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#8;

  corral_source_split_736#8:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#8;

  corral_source_split_737#8:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#8;

  corral_source_split_738#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#8;

  corral_source_split_739#8:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#8;

  corral_source_split_740#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#8;

  corral_source_split_741#8:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#8;

  corral_source_split_742#8:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#8;

  corral_source_split_743#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#8;

  corral_source_split_744#8:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#8;

  corral_source_split_745#8:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#7;

  $bb59#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#7;

  corral_source_split_602#7:
    assume {:verifier.code 0} true;
    goto $bb60#7;

  $bb60#7:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#7;

  corral_source_split_604#7:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#7;

  corral_source_split_605#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#7, $bb62#7;

  $bb62#7:
    assume !($i164 == 1);
    goto corral_source_split_609#7;

  corral_source_split_609#7:
    assume {:verifier.code 0} true;
    goto $bb64#7;

  $bb64#7:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#7;

  corral_source_split_614#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#7;

  corral_source_split_615#7:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#7;

  corral_source_split_616#7:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#6;

  $bb25#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#6;

  corral_source_split_523#6:
    assume {:verifier.code 0} true;
    goto $bb26#6;

  $bb26#6:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#6;

  corral_source_split_525#6:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#6;

  corral_source_split_526#6:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#6;

  corral_source_split_527#6:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#6;

  corral_source_split_528#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#6, $bb28#12;

  $bb27#6:
    assume $i118 == 1;
    goto corral_source_split_530#6;

  corral_source_split_530#6:
    assume {:verifier.code 0} true;
    goto $bb29#6;

  $bb29#6:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#6;

  corral_source_split_534#6:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#6;

  corral_source_split_535#6:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#6;

  corral_source_split_536#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#6;

  corral_source_split_537#6:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#6;

  corral_source_split_538#6:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#6;

  corral_source_split_539#6:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#6;

  corral_source_split_540#6:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#6;

  $bb32#6:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#6;

  $bb34#6:
    assume {:verifier.code 0} true;
    goto $bb35#6;

  $bb35#6:
    assume {:verifier.code 0} true;
    goto $bb36#6;

  $bb36#6:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#6;

  corral_source_split_558#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#6;

  corral_source_split_559#6:
    assume {:verifier.code 0} true;
    goto $bb37#6;

  $bb37#6:
    assume {:verifier.code 0} true;
    goto $bb38#6;

  $bb38#6:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#6;

  corral_source_split_561#6:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#6;

  corral_source_split_562#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#6;

  corral_source_split_563#6:
    assume {:verifier.code 0} true;
    goto $bb39#6;

  $bb39#6:
    assume {:verifier.code 0} true;
    goto $bb41#6;

  $bb41#6:
    assume {:verifier.code 0} true;
    goto $bb43#6;

  $bb43#6:
    assume {:verifier.code 0} true;
    goto $bb44#6;

  $bb44#6:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#6;

  corral_source_split_565#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#6;

  corral_source_split_566#6:
    assume {:verifier.code 0} true;
    goto $bb45#6;

  $bb45#6:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#6;

  corral_source_split_568#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#6;

  corral_source_split_569#6:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#6;

  corral_source_split_570#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#6;

  corral_source_split_571#6:
    assume {:verifier.code 0} true;
    goto $bb47#6;

  $bb47#6:
    assume {:verifier.code 0} true;
    goto $bb48#6;

  $bb48#6:
    assume {:verifier.code 0} true;
    goto $bb49#6;

  $bb49#6:
    assume {:verifier.code 0} true;
    goto $bb50#6;

  $bb50#6:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#6;

  corral_source_split_573#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#6;

  corral_source_split_574#6:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#6;

  corral_source_split_575#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#6;

  corral_source_split_576#6:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#6;

  corral_source_split_577#6:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#6;

  corral_source_split_578#6:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#6;

  corral_source_split_579#6:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#6;

  corral_source_split_580#6:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#6;

  corral_source_split_581#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#6;

  corral_source_split_582#6:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#6;

  corral_source_split_583#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#6;

  corral_source_split_584#6:
    assume {:verifier.code 0} true;
    goto $bb51#6;

  $bb51#6:
    assume {:verifier.code 0} true;
    goto $bb52#6;

  $bb52#6:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#6;

  corral_source_split_586#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#6;

  corral_source_split_587#6:
    assume {:verifier.code 0} true;
    goto $bb53#6;

  $bb53#6:
    assume {:verifier.code 0} true;
    goto $bb55#6;

  $bb55#6:
    assume {:verifier.code 0} true;
    goto $bb57#6;

  $bb57#6:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#6;

  corral_source_split_589#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#6;

  corral_source_split_590#6:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#6;

  corral_source_split_591#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#6;

  corral_source_split_592#6:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#6;

  corral_source_split_593#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#6;

  corral_source_split_594#6:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#6;

  corral_source_split_595#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#6;

  corral_source_split_596#6:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#6;

  corral_source_split_597#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#6;

  corral_source_split_598#6:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#6;

  corral_source_split_599#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#6;

  corral_source_split_600#6:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#6;

  $bb61#7:
    assume $i164 == 1;
    goto corral_source_split_607#7;

  corral_source_split_607#7:
    assume {:verifier.code 0} true;
    goto $bb63#7;

  $bb63#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#7;

  corral_source_split_611#7:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#7;

  corral_source_split_612#7:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#7, $bb66#12;

  $bb65#7:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#7;

  $bb68#7:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#7;

  corral_source_split_625#7:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#7;

  corral_source_split_626#7:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#7;

  corral_source_split_627#7:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#7;

  corral_source_split_628#7:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#7;

  corral_source_split_629#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#7;

  corral_source_split_630#7:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#7;

  corral_source_split_631#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#7;

  corral_source_split_632#7:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#7;

  corral_source_split_633#7:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#7;

  corral_source_split_634#7:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#7;

  corral_source_split_635#7:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#7, $bb70#12;

  $bb69#7:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#7;

  $bb72#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#7;

  corral_source_split_644#7:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#7;

  corral_source_split_645#7:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#7;

  corral_source_split_646#7:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#7, $bb74#12;

  $bb73#7:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#7;

  $bb76#7:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#7;

  corral_source_split_657#7:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#7;

  corral_source_split_658#7:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#7;

  corral_source_split_659#7:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#7;

  corral_source_split_660#7:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#7;

  corral_source_split_661#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#7;

  corral_source_split_662#7:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#7;

  corral_source_split_663#7:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#7;

  corral_source_split_664#7:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#7;

  corral_source_split_665#7:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#7;

  corral_source_split_666#7:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#7;

  corral_source_split_667#7:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#7;

  corral_source_split_668#7:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#7;

  corral_source_split_669#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#7;

  corral_source_split_670#7:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#7;

  corral_source_split_671#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#7;

  corral_source_split_672#7:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#7;

  corral_source_split_673#7:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#7;

  corral_source_split_674#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#7;

  corral_source_split_675#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#7;

  corral_source_split_676#7:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#7;

  corral_source_split_677#7:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#7, $bb78#12;

  $bb77#7:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#7;

  $bb80#7:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#7;

  corral_source_split_695#7:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#7;

  corral_source_split_696#7:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#7;

  corral_source_split_697#7:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#7;

  corral_source_split_698#7:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#7;

  corral_source_split_699#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#7;

  corral_source_split_700#7:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#7;

  corral_source_split_701#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#7;

  corral_source_split_702#7:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#7;

  corral_source_split_703#7:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#7;

  corral_source_split_704#7:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#7;

  corral_source_split_705#7:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#7, $bb82#12;

  $bb81#7:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#7;

  $bb84#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#7;

  corral_source_split_714#7:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#7;

  corral_source_split_715#7:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#7;

  corral_source_split_716#7:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#7, $bb86#12;

  $bb85#7:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#7;

  $bb88#7:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#7;

  corral_source_split_727#7:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#7;

  corral_source_split_728#7:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#7;

  corral_source_split_729#7:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#7;

  corral_source_split_730#7:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#7;

  corral_source_split_731#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#7;

  corral_source_split_732#7:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#7;

  corral_source_split_733#7:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#7;

  corral_source_split_734#7:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#7;

  corral_source_split_735#7:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#7;

  corral_source_split_736#7:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#7;

  corral_source_split_737#7:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#7;

  corral_source_split_738#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#7;

  corral_source_split_739#7:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#7;

  corral_source_split_740#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#7;

  corral_source_split_741#7:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#7;

  corral_source_split_742#7:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#7;

  corral_source_split_743#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#7;

  corral_source_split_744#7:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#7;

  corral_source_split_745#7:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#6;

  $bb59#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#6;

  corral_source_split_602#6:
    assume {:verifier.code 0} true;
    goto $bb60#6;

  $bb60#6:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#6;

  corral_source_split_604#6:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#6;

  corral_source_split_605#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#6, $bb62#6;

  $bb62#6:
    assume !($i164 == 1);
    goto corral_source_split_609#6;

  corral_source_split_609#6:
    assume {:verifier.code 0} true;
    goto $bb64#6;

  $bb64#6:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#6;

  corral_source_split_614#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#6;

  corral_source_split_615#6:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#6;

  corral_source_split_616#6:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#5;

  $bb25#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#5;

  corral_source_split_523#5:
    assume {:verifier.code 0} true;
    goto $bb26#5;

  $bb26#5:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#5;

  corral_source_split_525#5:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#5;

  corral_source_split_526#5:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#5;

  corral_source_split_527#5:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#5;

  corral_source_split_528#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#5, $bb28#12;

  $bb27#5:
    assume $i118 == 1;
    goto corral_source_split_530#5;

  corral_source_split_530#5:
    assume {:verifier.code 0} true;
    goto $bb29#5;

  $bb29#5:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#5;

  corral_source_split_534#5:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#5;

  corral_source_split_535#5:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#5;

  corral_source_split_536#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#5;

  corral_source_split_537#5:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#5;

  corral_source_split_538#5:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#5;

  corral_source_split_539#5:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#5;

  corral_source_split_540#5:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#5;

  $bb32#5:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#5;

  $bb34#5:
    assume {:verifier.code 0} true;
    goto $bb35#5;

  $bb35#5:
    assume {:verifier.code 0} true;
    goto $bb36#5;

  $bb36#5:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#5;

  corral_source_split_558#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#5;

  corral_source_split_559#5:
    assume {:verifier.code 0} true;
    goto $bb37#5;

  $bb37#5:
    assume {:verifier.code 0} true;
    goto $bb38#5;

  $bb38#5:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#5;

  corral_source_split_561#5:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#5;

  corral_source_split_562#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#5;

  corral_source_split_563#5:
    assume {:verifier.code 0} true;
    goto $bb39#5;

  $bb39#5:
    assume {:verifier.code 0} true;
    goto $bb41#5;

  $bb41#5:
    assume {:verifier.code 0} true;
    goto $bb43#5;

  $bb43#5:
    assume {:verifier.code 0} true;
    goto $bb44#5;

  $bb44#5:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#5;

  corral_source_split_565#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#5;

  corral_source_split_566#5:
    assume {:verifier.code 0} true;
    goto $bb45#5;

  $bb45#5:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#5;

  corral_source_split_568#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#5;

  corral_source_split_569#5:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#5;

  corral_source_split_570#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#5;

  corral_source_split_571#5:
    assume {:verifier.code 0} true;
    goto $bb47#5;

  $bb47#5:
    assume {:verifier.code 0} true;
    goto $bb48#5;

  $bb48#5:
    assume {:verifier.code 0} true;
    goto $bb49#5;

  $bb49#5:
    assume {:verifier.code 0} true;
    goto $bb50#5;

  $bb50#5:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#5;

  corral_source_split_573#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#5;

  corral_source_split_574#5:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#5;

  corral_source_split_575#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#5;

  corral_source_split_576#5:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#5;

  corral_source_split_577#5:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#5;

  corral_source_split_578#5:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#5;

  corral_source_split_579#5:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#5;

  corral_source_split_580#5:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#5;

  corral_source_split_581#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#5;

  corral_source_split_582#5:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#5;

  corral_source_split_583#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#5;

  corral_source_split_584#5:
    assume {:verifier.code 0} true;
    goto $bb51#5;

  $bb51#5:
    assume {:verifier.code 0} true;
    goto $bb52#5;

  $bb52#5:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#5;

  corral_source_split_586#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#5;

  corral_source_split_587#5:
    assume {:verifier.code 0} true;
    goto $bb53#5;

  $bb53#5:
    assume {:verifier.code 0} true;
    goto $bb55#5;

  $bb55#5:
    assume {:verifier.code 0} true;
    goto $bb57#5;

  $bb57#5:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#5;

  corral_source_split_589#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#5;

  corral_source_split_590#5:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#5;

  corral_source_split_591#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#5;

  corral_source_split_592#5:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#5;

  corral_source_split_593#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#5;

  corral_source_split_594#5:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#5;

  corral_source_split_595#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#5;

  corral_source_split_596#5:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#5;

  corral_source_split_597#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#5;

  corral_source_split_598#5:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#5;

  corral_source_split_599#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#5;

  corral_source_split_600#5:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#5;

  $bb61#6:
    assume $i164 == 1;
    goto corral_source_split_607#6;

  corral_source_split_607#6:
    assume {:verifier.code 0} true;
    goto $bb63#6;

  $bb63#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#6;

  corral_source_split_611#6:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#6;

  corral_source_split_612#6:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#6, $bb66#12;

  $bb65#6:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#6;

  $bb68#6:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#6;

  corral_source_split_625#6:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#6;

  corral_source_split_626#6:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#6;

  corral_source_split_627#6:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#6;

  corral_source_split_628#6:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#6;

  corral_source_split_629#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#6;

  corral_source_split_630#6:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#6;

  corral_source_split_631#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#6;

  corral_source_split_632#6:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#6;

  corral_source_split_633#6:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#6;

  corral_source_split_634#6:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#6;

  corral_source_split_635#6:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#6, $bb70#12;

  $bb69#6:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#6;

  $bb72#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#6;

  corral_source_split_644#6:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#6;

  corral_source_split_645#6:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#6;

  corral_source_split_646#6:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#6, $bb74#12;

  $bb73#6:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#6;

  $bb76#6:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#6;

  corral_source_split_657#6:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#6;

  corral_source_split_658#6:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#6;

  corral_source_split_659#6:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#6;

  corral_source_split_660#6:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#6;

  corral_source_split_661#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#6;

  corral_source_split_662#6:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#6;

  corral_source_split_663#6:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#6;

  corral_source_split_664#6:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#6;

  corral_source_split_665#6:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#6;

  corral_source_split_666#6:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#6;

  corral_source_split_667#6:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#6;

  corral_source_split_668#6:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#6;

  corral_source_split_669#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#6;

  corral_source_split_670#6:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#6;

  corral_source_split_671#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#6;

  corral_source_split_672#6:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#6;

  corral_source_split_673#6:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#6;

  corral_source_split_674#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#6;

  corral_source_split_675#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#6;

  corral_source_split_676#6:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#6;

  corral_source_split_677#6:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#6, $bb78#12;

  $bb77#6:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#6;

  $bb80#6:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#6;

  corral_source_split_695#6:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#6;

  corral_source_split_696#6:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#6;

  corral_source_split_697#6:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#6;

  corral_source_split_698#6:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#6;

  corral_source_split_699#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#6;

  corral_source_split_700#6:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#6;

  corral_source_split_701#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#6;

  corral_source_split_702#6:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#6;

  corral_source_split_703#6:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#6;

  corral_source_split_704#6:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#6;

  corral_source_split_705#6:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#6, $bb82#12;

  $bb81#6:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#6;

  $bb84#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#6;

  corral_source_split_714#6:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#6;

  corral_source_split_715#6:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#6;

  corral_source_split_716#6:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#6, $bb86#12;

  $bb85#6:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#6;

  $bb88#6:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#6;

  corral_source_split_727#6:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#6;

  corral_source_split_728#6:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#6;

  corral_source_split_729#6:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#6;

  corral_source_split_730#6:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#6;

  corral_source_split_731#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#6;

  corral_source_split_732#6:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#6;

  corral_source_split_733#6:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#6;

  corral_source_split_734#6:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#6;

  corral_source_split_735#6:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#6;

  corral_source_split_736#6:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#6;

  corral_source_split_737#6:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#6;

  corral_source_split_738#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#6;

  corral_source_split_739#6:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#6;

  corral_source_split_740#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#6;

  corral_source_split_741#6:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#6;

  corral_source_split_742#6:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#6;

  corral_source_split_743#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#6;

  corral_source_split_744#6:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#6;

  corral_source_split_745#6:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#5;

  $bb59#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#5;

  corral_source_split_602#5:
    assume {:verifier.code 0} true;
    goto $bb60#5;

  $bb60#5:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#5;

  corral_source_split_604#5:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#5;

  corral_source_split_605#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#5, $bb62#5;

  $bb62#5:
    assume !($i164 == 1);
    goto corral_source_split_609#5;

  corral_source_split_609#5:
    assume {:verifier.code 0} true;
    goto $bb64#5;

  $bb64#5:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#5;

  corral_source_split_614#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#5;

  corral_source_split_615#5:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#5;

  corral_source_split_616#5:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#4;

  $bb25#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#4;

  corral_source_split_523#4:
    assume {:verifier.code 0} true;
    goto $bb26#4;

  $bb26#4:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#4;

  corral_source_split_525#4:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#4;

  corral_source_split_526#4:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#4;

  corral_source_split_527#4:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#4;

  corral_source_split_528#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#4, $bb28#12;

  $bb27#4:
    assume $i118 == 1;
    goto corral_source_split_530#4;

  corral_source_split_530#4:
    assume {:verifier.code 0} true;
    goto $bb29#4;

  $bb29#4:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#4;

  corral_source_split_534#4:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#4;

  corral_source_split_535#4:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#4;

  corral_source_split_536#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#4;

  corral_source_split_537#4:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#4;

  corral_source_split_538#4:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#4;

  corral_source_split_539#4:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#4;

  corral_source_split_540#4:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#4;

  $bb32#4:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#4;

  $bb34#4:
    assume {:verifier.code 0} true;
    goto $bb35#4;

  $bb35#4:
    assume {:verifier.code 0} true;
    goto $bb36#4;

  $bb36#4:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#4;

  corral_source_split_558#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#4;

  corral_source_split_559#4:
    assume {:verifier.code 0} true;
    goto $bb37#4;

  $bb37#4:
    assume {:verifier.code 0} true;
    goto $bb38#4;

  $bb38#4:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#4;

  corral_source_split_561#4:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#4;

  corral_source_split_562#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#4;

  corral_source_split_563#4:
    assume {:verifier.code 0} true;
    goto $bb39#4;

  $bb39#4:
    assume {:verifier.code 0} true;
    goto $bb41#4;

  $bb41#4:
    assume {:verifier.code 0} true;
    goto $bb43#4;

  $bb43#4:
    assume {:verifier.code 0} true;
    goto $bb44#4;

  $bb44#4:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#4;

  corral_source_split_565#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#4;

  corral_source_split_566#4:
    assume {:verifier.code 0} true;
    goto $bb45#4;

  $bb45#4:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#4;

  corral_source_split_568#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#4;

  corral_source_split_569#4:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#4;

  corral_source_split_570#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#4;

  corral_source_split_571#4:
    assume {:verifier.code 0} true;
    goto $bb47#4;

  $bb47#4:
    assume {:verifier.code 0} true;
    goto $bb48#4;

  $bb48#4:
    assume {:verifier.code 0} true;
    goto $bb49#4;

  $bb49#4:
    assume {:verifier.code 0} true;
    goto $bb50#4;

  $bb50#4:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#4;

  corral_source_split_573#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#4;

  corral_source_split_574#4:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#4;

  corral_source_split_575#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#4;

  corral_source_split_576#4:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#4;

  corral_source_split_577#4:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#4;

  corral_source_split_578#4:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#4;

  corral_source_split_579#4:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#4;

  corral_source_split_580#4:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#4;

  corral_source_split_581#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#4;

  corral_source_split_582#4:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#4;

  corral_source_split_583#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#4;

  corral_source_split_584#4:
    assume {:verifier.code 0} true;
    goto $bb51#4;

  $bb51#4:
    assume {:verifier.code 0} true;
    goto $bb52#4;

  $bb52#4:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#4;

  corral_source_split_586#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#4;

  corral_source_split_587#4:
    assume {:verifier.code 0} true;
    goto $bb53#4;

  $bb53#4:
    assume {:verifier.code 0} true;
    goto $bb55#4;

  $bb55#4:
    assume {:verifier.code 0} true;
    goto $bb57#4;

  $bb57#4:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#4;

  corral_source_split_589#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#4;

  corral_source_split_590#4:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#4;

  corral_source_split_591#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#4;

  corral_source_split_592#4:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#4;

  corral_source_split_593#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#4;

  corral_source_split_594#4:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#4;

  corral_source_split_595#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#4;

  corral_source_split_596#4:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#4;

  corral_source_split_597#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#4;

  corral_source_split_598#4:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#4;

  corral_source_split_599#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#4;

  corral_source_split_600#4:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#4;

  $bb61#5:
    assume $i164 == 1;
    goto corral_source_split_607#5;

  corral_source_split_607#5:
    assume {:verifier.code 0} true;
    goto $bb63#5;

  $bb63#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#5;

  corral_source_split_611#5:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#5;

  corral_source_split_612#5:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#5, $bb66#12;

  $bb65#5:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#5;

  $bb68#5:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#5;

  corral_source_split_625#5:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#5;

  corral_source_split_626#5:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#5;

  corral_source_split_627#5:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#5;

  corral_source_split_628#5:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#5;

  corral_source_split_629#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#5;

  corral_source_split_630#5:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#5;

  corral_source_split_631#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#5;

  corral_source_split_632#5:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#5;

  corral_source_split_633#5:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#5;

  corral_source_split_634#5:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#5;

  corral_source_split_635#5:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#5, $bb70#12;

  $bb69#5:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#5;

  $bb72#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#5;

  corral_source_split_644#5:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#5;

  corral_source_split_645#5:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#5;

  corral_source_split_646#5:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#5, $bb74#12;

  $bb73#5:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#5;

  $bb76#5:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#5;

  corral_source_split_657#5:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#5;

  corral_source_split_658#5:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#5;

  corral_source_split_659#5:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#5;

  corral_source_split_660#5:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#5;

  corral_source_split_661#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#5;

  corral_source_split_662#5:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#5;

  corral_source_split_663#5:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#5;

  corral_source_split_664#5:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#5;

  corral_source_split_665#5:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#5;

  corral_source_split_666#5:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#5;

  corral_source_split_667#5:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#5;

  corral_source_split_668#5:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#5;

  corral_source_split_669#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#5;

  corral_source_split_670#5:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#5;

  corral_source_split_671#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#5;

  corral_source_split_672#5:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#5;

  corral_source_split_673#5:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#5;

  corral_source_split_674#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#5;

  corral_source_split_675#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#5;

  corral_source_split_676#5:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#5;

  corral_source_split_677#5:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#5, $bb78#12;

  $bb77#5:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#5;

  $bb80#5:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#5;

  corral_source_split_695#5:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#5;

  corral_source_split_696#5:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#5;

  corral_source_split_697#5:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#5;

  corral_source_split_698#5:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#5;

  corral_source_split_699#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#5;

  corral_source_split_700#5:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#5;

  corral_source_split_701#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#5;

  corral_source_split_702#5:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#5;

  corral_source_split_703#5:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#5;

  corral_source_split_704#5:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#5;

  corral_source_split_705#5:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#5, $bb82#12;

  $bb81#5:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#5;

  $bb84#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#5;

  corral_source_split_714#5:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#5;

  corral_source_split_715#5:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#5;

  corral_source_split_716#5:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#5, $bb86#12;

  $bb85#5:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#5;

  $bb88#5:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#5;

  corral_source_split_727#5:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#5;

  corral_source_split_728#5:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#5;

  corral_source_split_729#5:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#5;

  corral_source_split_730#5:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#5;

  corral_source_split_731#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#5;

  corral_source_split_732#5:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#5;

  corral_source_split_733#5:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#5;

  corral_source_split_734#5:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#5;

  corral_source_split_735#5:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#5;

  corral_source_split_736#5:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#5;

  corral_source_split_737#5:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#5;

  corral_source_split_738#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#5;

  corral_source_split_739#5:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#5;

  corral_source_split_740#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#5;

  corral_source_split_741#5:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#5;

  corral_source_split_742#5:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#5;

  corral_source_split_743#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#5;

  corral_source_split_744#5:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#5;

  corral_source_split_745#5:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#4;

  $bb59#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#4;

  corral_source_split_602#4:
    assume {:verifier.code 0} true;
    goto $bb60#4;

  $bb60#4:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#4;

  corral_source_split_604#4:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#4;

  corral_source_split_605#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#4, $bb62#4;

  $bb62#4:
    assume !($i164 == 1);
    goto corral_source_split_609#4;

  corral_source_split_609#4:
    assume {:verifier.code 0} true;
    goto $bb64#4;

  $bb64#4:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#4;

  corral_source_split_614#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#4;

  corral_source_split_615#4:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#4;

  corral_source_split_616#4:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#3;

  $bb25#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#3;

  corral_source_split_523#3:
    assume {:verifier.code 0} true;
    goto $bb26#3;

  $bb26#3:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#3;

  corral_source_split_525#3:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#3;

  corral_source_split_526#3:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#3;

  corral_source_split_527#3:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#3;

  corral_source_split_528#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#3, $bb28#12;

  $bb27#3:
    assume $i118 == 1;
    goto corral_source_split_530#3;

  corral_source_split_530#3:
    assume {:verifier.code 0} true;
    goto $bb29#3;

  $bb29#3:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#3;

  corral_source_split_534#3:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#3;

  corral_source_split_535#3:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#3;

  corral_source_split_536#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#3;

  corral_source_split_537#3:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#3;

  corral_source_split_538#3:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#3;

  corral_source_split_539#3:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#3;

  corral_source_split_540#3:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#3;

  $bb32#3:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#3;

  $bb34#3:
    assume {:verifier.code 0} true;
    goto $bb35#3;

  $bb35#3:
    assume {:verifier.code 0} true;
    goto $bb36#3;

  $bb36#3:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#3;

  corral_source_split_558#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#3;

  corral_source_split_559#3:
    assume {:verifier.code 0} true;
    goto $bb37#3;

  $bb37#3:
    assume {:verifier.code 0} true;
    goto $bb38#3;

  $bb38#3:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#3;

  corral_source_split_561#3:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#3;

  corral_source_split_562#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#3;

  corral_source_split_563#3:
    assume {:verifier.code 0} true;
    goto $bb39#3;

  $bb39#3:
    assume {:verifier.code 0} true;
    goto $bb41#3;

  $bb41#3:
    assume {:verifier.code 0} true;
    goto $bb43#3;

  $bb43#3:
    assume {:verifier.code 0} true;
    goto $bb44#3;

  $bb44#3:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#3;

  corral_source_split_565#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#3;

  corral_source_split_566#3:
    assume {:verifier.code 0} true;
    goto $bb45#3;

  $bb45#3:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#3;

  corral_source_split_568#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#3;

  corral_source_split_569#3:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#3;

  corral_source_split_570#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#3;

  corral_source_split_571#3:
    assume {:verifier.code 0} true;
    goto $bb47#3;

  $bb47#3:
    assume {:verifier.code 0} true;
    goto $bb48#3;

  $bb48#3:
    assume {:verifier.code 0} true;
    goto $bb49#3;

  $bb49#3:
    assume {:verifier.code 0} true;
    goto $bb50#3;

  $bb50#3:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#3;

  corral_source_split_573#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#3;

  corral_source_split_574#3:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#3;

  corral_source_split_575#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#3;

  corral_source_split_576#3:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#3;

  corral_source_split_577#3:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#3;

  corral_source_split_578#3:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#3;

  corral_source_split_579#3:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#3;

  corral_source_split_580#3:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#3;

  corral_source_split_581#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#3;

  corral_source_split_582#3:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#3;

  corral_source_split_583#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#3;

  corral_source_split_584#3:
    assume {:verifier.code 0} true;
    goto $bb51#3;

  $bb51#3:
    assume {:verifier.code 0} true;
    goto $bb52#3;

  $bb52#3:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#3;

  corral_source_split_586#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#3;

  corral_source_split_587#3:
    assume {:verifier.code 0} true;
    goto $bb53#3;

  $bb53#3:
    assume {:verifier.code 0} true;
    goto $bb55#3;

  $bb55#3:
    assume {:verifier.code 0} true;
    goto $bb57#3;

  $bb57#3:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#3;

  corral_source_split_589#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#3;

  corral_source_split_590#3:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#3;

  corral_source_split_591#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#3;

  corral_source_split_592#3:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#3;

  corral_source_split_593#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#3;

  corral_source_split_594#3:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#3;

  corral_source_split_595#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#3;

  corral_source_split_596#3:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#3;

  corral_source_split_597#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#3;

  corral_source_split_598#3:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#3;

  corral_source_split_599#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#3;

  corral_source_split_600#3:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#3;

  $bb61#4:
    assume $i164 == 1;
    goto corral_source_split_607#4;

  corral_source_split_607#4:
    assume {:verifier.code 0} true;
    goto $bb63#4;

  $bb63#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#4;

  corral_source_split_611#4:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#4;

  corral_source_split_612#4:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#4, $bb66#12;

  $bb65#4:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#4;

  $bb68#4:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#4;

  corral_source_split_625#4:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#4;

  corral_source_split_626#4:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#4;

  corral_source_split_627#4:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#4;

  corral_source_split_628#4:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#4;

  corral_source_split_629#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#4;

  corral_source_split_630#4:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#4;

  corral_source_split_631#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#4;

  corral_source_split_632#4:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#4;

  corral_source_split_633#4:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#4;

  corral_source_split_634#4:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#4;

  corral_source_split_635#4:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#4, $bb70#12;

  $bb69#4:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#4;

  $bb72#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#4;

  corral_source_split_644#4:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#4;

  corral_source_split_645#4:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#4;

  corral_source_split_646#4:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#4, $bb74#12;

  $bb73#4:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#4;

  $bb76#4:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#4;

  corral_source_split_657#4:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#4;

  corral_source_split_658#4:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#4;

  corral_source_split_659#4:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#4;

  corral_source_split_660#4:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#4;

  corral_source_split_661#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#4;

  corral_source_split_662#4:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#4;

  corral_source_split_663#4:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#4;

  corral_source_split_664#4:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#4;

  corral_source_split_665#4:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#4;

  corral_source_split_666#4:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#4;

  corral_source_split_667#4:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#4;

  corral_source_split_668#4:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#4;

  corral_source_split_669#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#4;

  corral_source_split_670#4:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#4;

  corral_source_split_671#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#4;

  corral_source_split_672#4:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#4;

  corral_source_split_673#4:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#4;

  corral_source_split_674#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#4;

  corral_source_split_675#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#4;

  corral_source_split_676#4:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#4;

  corral_source_split_677#4:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#4, $bb78#12;

  $bb77#4:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#4;

  $bb80#4:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#4;

  corral_source_split_695#4:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#4;

  corral_source_split_696#4:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#4;

  corral_source_split_697#4:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#4;

  corral_source_split_698#4:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#4;

  corral_source_split_699#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#4;

  corral_source_split_700#4:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#4;

  corral_source_split_701#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#4;

  corral_source_split_702#4:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#4;

  corral_source_split_703#4:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#4;

  corral_source_split_704#4:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#4;

  corral_source_split_705#4:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#4, $bb82#12;

  $bb81#4:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#4;

  $bb84#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#4;

  corral_source_split_714#4:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#4;

  corral_source_split_715#4:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#4;

  corral_source_split_716#4:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#4, $bb86#12;

  $bb85#4:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#4;

  $bb88#4:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#4;

  corral_source_split_727#4:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#4;

  corral_source_split_728#4:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#4;

  corral_source_split_729#4:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#4;

  corral_source_split_730#4:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#4;

  corral_source_split_731#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#4;

  corral_source_split_732#4:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#4;

  corral_source_split_733#4:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#4;

  corral_source_split_734#4:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#4;

  corral_source_split_735#4:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#4;

  corral_source_split_736#4:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#4;

  corral_source_split_737#4:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#4;

  corral_source_split_738#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#4;

  corral_source_split_739#4:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#4;

  corral_source_split_740#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#4;

  corral_source_split_741#4:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#4;

  corral_source_split_742#4:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#4;

  corral_source_split_743#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#4;

  corral_source_split_744#4:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#4;

  corral_source_split_745#4:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#3;

  $bb59#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#3;

  corral_source_split_602#3:
    assume {:verifier.code 0} true;
    goto $bb60#3;

  $bb60#3:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#3;

  corral_source_split_604#3:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#3;

  corral_source_split_605#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#3, $bb62#3;

  $bb62#3:
    assume !($i164 == 1);
    goto corral_source_split_609#3;

  corral_source_split_609#3:
    assume {:verifier.code 0} true;
    goto $bb64#3;

  $bb64#3:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#3;

  corral_source_split_614#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#3;

  corral_source_split_615#3:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#3;

  corral_source_split_616#3:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#2;

  $bb25#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#2;

  corral_source_split_523#2:
    assume {:verifier.code 0} true;
    goto $bb26#2;

  $bb26#2:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#2;

  corral_source_split_525#2:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#2;

  corral_source_split_526#2:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#2;

  corral_source_split_527#2:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#2;

  corral_source_split_528#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#2, $bb28#12;

  $bb27#2:
    assume $i118 == 1;
    goto corral_source_split_530#2;

  corral_source_split_530#2:
    assume {:verifier.code 0} true;
    goto $bb29#2;

  $bb29#2:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#2;

  corral_source_split_534#2:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#2;

  corral_source_split_535#2:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#2;

  corral_source_split_536#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#2;

  corral_source_split_537#2:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#2;

  corral_source_split_538#2:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#2;

  corral_source_split_539#2:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#2;

  corral_source_split_540#2:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#2;

  $bb32#2:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#2;

  $bb34#2:
    assume {:verifier.code 0} true;
    goto $bb35#2;

  $bb35#2:
    assume {:verifier.code 0} true;
    goto $bb36#2;

  $bb36#2:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#2;

  corral_source_split_558#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#2;

  corral_source_split_559#2:
    assume {:verifier.code 0} true;
    goto $bb37#2;

  $bb37#2:
    assume {:verifier.code 0} true;
    goto $bb38#2;

  $bb38#2:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#2;

  corral_source_split_561#2:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#2;

  corral_source_split_562#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#2;

  corral_source_split_563#2:
    assume {:verifier.code 0} true;
    goto $bb39#2;

  $bb39#2:
    assume {:verifier.code 0} true;
    goto $bb41#2;

  $bb41#2:
    assume {:verifier.code 0} true;
    goto $bb43#2;

  $bb43#2:
    assume {:verifier.code 0} true;
    goto $bb44#2;

  $bb44#2:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#2;

  corral_source_split_565#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#2;

  corral_source_split_566#2:
    assume {:verifier.code 0} true;
    goto $bb45#2;

  $bb45#2:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#2;

  corral_source_split_568#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#2;

  corral_source_split_569#2:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#2;

  corral_source_split_570#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#2;

  corral_source_split_571#2:
    assume {:verifier.code 0} true;
    goto $bb47#2;

  $bb47#2:
    assume {:verifier.code 0} true;
    goto $bb48#2;

  $bb48#2:
    assume {:verifier.code 0} true;
    goto $bb49#2;

  $bb49#2:
    assume {:verifier.code 0} true;
    goto $bb50#2;

  $bb50#2:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#2;

  corral_source_split_573#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#2;

  corral_source_split_574#2:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#2;

  corral_source_split_575#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#2;

  corral_source_split_576#2:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#2;

  corral_source_split_577#2:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#2;

  corral_source_split_578#2:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#2;

  corral_source_split_579#2:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#2;

  corral_source_split_580#2:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#2;

  corral_source_split_581#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#2;

  corral_source_split_582#2:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#2;

  corral_source_split_583#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#2;

  corral_source_split_584#2:
    assume {:verifier.code 0} true;
    goto $bb51#2;

  $bb51#2:
    assume {:verifier.code 0} true;
    goto $bb52#2;

  $bb52#2:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#2;

  corral_source_split_586#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#2;

  corral_source_split_587#2:
    assume {:verifier.code 0} true;
    goto $bb53#2;

  $bb53#2:
    assume {:verifier.code 0} true;
    goto $bb55#2;

  $bb55#2:
    assume {:verifier.code 0} true;
    goto $bb57#2;

  $bb57#2:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#2;

  corral_source_split_589#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#2;

  corral_source_split_590#2:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#2;

  corral_source_split_591#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#2;

  corral_source_split_592#2:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#2;

  corral_source_split_593#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#2;

  corral_source_split_594#2:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#2;

  corral_source_split_595#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#2;

  corral_source_split_596#2:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#2;

  corral_source_split_597#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#2;

  corral_source_split_598#2:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#2;

  corral_source_split_599#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#2;

  corral_source_split_600#2:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#2;

  $bb61#3:
    assume $i164 == 1;
    goto corral_source_split_607#3;

  corral_source_split_607#3:
    assume {:verifier.code 0} true;
    goto $bb63#3;

  $bb63#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#3;

  corral_source_split_611#3:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#3;

  corral_source_split_612#3:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#3, $bb66#12;

  $bb65#3:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#3;

  $bb68#3:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#3;

  corral_source_split_625#3:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#3;

  corral_source_split_626#3:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#3;

  corral_source_split_627#3:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#3;

  corral_source_split_628#3:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#3;

  corral_source_split_629#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#3;

  corral_source_split_630#3:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#3;

  corral_source_split_631#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#3;

  corral_source_split_632#3:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#3;

  corral_source_split_633#3:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#3;

  corral_source_split_634#3:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#3;

  corral_source_split_635#3:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#3, $bb70#12;

  $bb69#3:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#3;

  $bb72#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#3;

  corral_source_split_644#3:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#3;

  corral_source_split_645#3:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#3;

  corral_source_split_646#3:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#3, $bb74#12;

  $bb73#3:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#3;

  $bb76#3:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#3;

  corral_source_split_657#3:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#3;

  corral_source_split_658#3:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#3;

  corral_source_split_659#3:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#3;

  corral_source_split_660#3:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#3;

  corral_source_split_661#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#3;

  corral_source_split_662#3:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#3;

  corral_source_split_663#3:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#3;

  corral_source_split_664#3:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#3;

  corral_source_split_665#3:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#3;

  corral_source_split_666#3:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#3;

  corral_source_split_667#3:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#3;

  corral_source_split_668#3:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#3;

  corral_source_split_669#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#3;

  corral_source_split_670#3:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#3;

  corral_source_split_671#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#3;

  corral_source_split_672#3:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#3;

  corral_source_split_673#3:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#3;

  corral_source_split_674#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#3;

  corral_source_split_675#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#3;

  corral_source_split_676#3:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#3;

  corral_source_split_677#3:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#3, $bb78#12;

  $bb77#3:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#3;

  $bb80#3:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#3;

  corral_source_split_695#3:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#3;

  corral_source_split_696#3:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#3;

  corral_source_split_697#3:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#3;

  corral_source_split_698#3:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#3;

  corral_source_split_699#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#3;

  corral_source_split_700#3:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#3;

  corral_source_split_701#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#3;

  corral_source_split_702#3:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#3;

  corral_source_split_703#3:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#3;

  corral_source_split_704#3:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#3;

  corral_source_split_705#3:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#3, $bb82#12;

  $bb81#3:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#3;

  $bb84#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#3;

  corral_source_split_714#3:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#3;

  corral_source_split_715#3:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#3;

  corral_source_split_716#3:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#3, $bb86#12;

  $bb85#3:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#3;

  $bb88#3:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#3;

  corral_source_split_727#3:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#3;

  corral_source_split_728#3:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#3;

  corral_source_split_729#3:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#3;

  corral_source_split_730#3:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#3;

  corral_source_split_731#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#3;

  corral_source_split_732#3:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#3;

  corral_source_split_733#3:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#3;

  corral_source_split_734#3:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#3;

  corral_source_split_735#3:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#3;

  corral_source_split_736#3:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#3;

  corral_source_split_737#3:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#3;

  corral_source_split_738#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#3;

  corral_source_split_739#3:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#3;

  corral_source_split_740#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#3;

  corral_source_split_741#3:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#3;

  corral_source_split_742#3:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#3;

  corral_source_split_743#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#3;

  corral_source_split_744#3:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#3;

  corral_source_split_745#3:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#2;

  $bb59#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#2;

  corral_source_split_602#2:
    assume {:verifier.code 0} true;
    goto $bb60#2;

  $bb60#2:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#2;

  corral_source_split_604#2:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#2;

  corral_source_split_605#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#2, $bb62#2;

  $bb62#2:
    assume !($i164 == 1);
    goto corral_source_split_609#2;

  corral_source_split_609#2:
    assume {:verifier.code 0} true;
    goto $bb64#2;

  $bb64#2:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#2;

  corral_source_split_614#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#2;

  corral_source_split_615#2:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#2;

  corral_source_split_616#2:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#1;

  $bb25#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_523#1;

  corral_source_split_523#1:
    assume {:verifier.code 0} true;
    goto $bb26#1;

  $bb26#1:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_525#1;

  corral_source_split_525#1:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_526#1;

  corral_source_split_526#1:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_527#1;

  corral_source_split_527#1:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, $i117);
    goto corral_source_split_528#1;

  corral_source_split_528#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb27#1, $bb28#12;

  $bb28#12:
    assume !($i118 == 1);
    goto corral_source_split_532#12;

  corral_source_split_532#12:
    assume {:verifier.code 0} true;
    goto $bb30#12;

  $bb30#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p291 := __kmalloc(328, 208);
    goto corral_source_split_542#12;

  corral_source_split_542#12:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_543#12;

  corral_source_split_543#12:
    assume {:verifier.code 0} true;
    $i293 := $p2i.ref.i64($p292);
    goto corral_source_split_544#12;

  corral_source_split_544#12:
    assume {:verifier.code 0} true;
    $i294 := $eq.i64($i293, 0);
    goto corral_source_split_545#12;

  corral_source_split_545#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb91#12, $bb92#12;

  $bb92#12:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb94#12;

  $bb94#12:
    assume {:verifier.code 0} true;
    goto $bb95#12;

  $bb95#12:
    assume {:verifier.code 0} true;
    goto $bb96#12;

  $bb96#12:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p292, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_762#12;

  corral_source_split_762#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} __mutex_init($p303, .str.59, __key___10);
    goto corral_source_split_763#12;

  corral_source_split_763#12:
    assume {:verifier.code 0} true;
    goto $bb97#12;

  $bb97#12:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p292, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_765#12;

  corral_source_split_765#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p304, 0);
    goto corral_source_split_766#12;

  corral_source_split_766#12:
    assume {:verifier.code 0} true;
    goto $bb99#12;

  $bb99#12:
    assume {:verifier.code 0} true;
    goto $bb100#12;

  $bb100#12:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p292, $mul.ref(0, 328)), $mul.ref(176, 1));
    goto corral_source_split_768#12;

  corral_source_split_768#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} __init_waitqueue_head($p305, __key___11);
    goto corral_source_split_769#12;

  corral_source_split_769#12:
    assume {:verifier.code 0} true;
    goto $bb101#12;

  $bb101#12:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p292);
    goto corral_source_split_771#12;

  corral_source_split_771#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} usb_set_serial_port_data($p5, $p306);
    goto corral_source_split_772#12;

  corral_source_split_772#12:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_773#12;

  corral_source_split_773#12:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_774#12;

  corral_source_split_774#12:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p308, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_775#12;

  corral_source_split_775#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p309, command_port_write_callback);
    goto corral_source_split_776#12;

  corral_source_split_776#12:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_777#12;

  corral_source_split_777#12:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_778#12;

  corral_source_split_778#12:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p311, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_779#12;

  corral_source_split_779#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p312, command_port_read_callback);
    goto corral_source_split_780#12;

  corral_source_split_780#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} kfree($p17);
    goto corral_source_split_781#12;

  corral_source_split_781#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} kfree($p13);
    goto corral_source_split_782#12;

  corral_source_split_782#12:
    assume {:verifier.code 0} true;
    $i313 := 0;
    goto $bb103#12;

  $bb91#12:
    assume $i294 == 1;
    goto corral_source_split_747#12;

  corral_source_split_747#12:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_748#12;

  corral_source_split_748#12:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_749#12;

  corral_source_split_749#12:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p296, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_750#12;

  corral_source_split_750#12:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_751#12;

  corral_source_split_751#12:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_752#12;

  corral_source_split_752#12:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p299, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_753#12;

  corral_source_split_753#12:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_754#12;

  corral_source_split_754#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_43 := dev_err.ref.ref.ref($p297, .str.52, $p301);
    goto corral_source_split_755#12;

  corral_source_split_755#12:
    assume {:verifier.code 0} true;
    goto $bb93#12;

  $bb93#12:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_757#12;

  corral_source_split_757#12:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_758#12;

  corral_source_split_758#12:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_759#12;

  corral_source_split_759#12:
    assume {:verifier.code 0} true;
    $i341 := $sub.i32($i340, 1);
    call {:si_unique_call 197} {:cexpr "i"} boogie_si_record_i32($i341);
    goto corral_source_split_760#12;

  corral_source_split_760#12:
    assume {:verifier.code 0} true;
    $i342 := $i341;
    goto $bb104#12;

  $bb27#1:
    assume $i118 == 1;
    goto corral_source_split_530#1;

  corral_source_split_530#1:
    assume {:verifier.code 0} true;
    goto $bb29#1;

  $bb29#1:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i114);
    goto corral_source_split_534#1;

  corral_source_split_534#1:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i119, 8));
    goto corral_source_split_535#1;

  corral_source_split_535#1:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_536#1;

  corral_source_split_536#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p123 := __kmalloc(416, 208);
    goto corral_source_split_537#1;

  corral_source_split_537#1:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_538#1;

  corral_source_split_538#1:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_539#1;

  corral_source_split_539#1:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_540#1;

  corral_source_split_540#1:
    assume {:verifier.code 0} true;
    $i127, $p128 := $i114, $p122;
    assume {:branchcond $i126} true;
    goto $bb31#12, $bb32#1;

  $bb32#1:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb34#1;

  $bb34#1:
    assume {:verifier.code 0} true;
    goto $bb35#1;

  $bb35#1:
    assume {:verifier.code 0} true;
    goto $bb36#1;

  $bb36#1:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_558#1;

  corral_source_split_558#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_36 := spinlock_check($p136);
    goto corral_source_split_559#1;

  corral_source_split_559#1:
    assume {:verifier.code 0} true;
    goto $bb37#1;

  $bb37#1:
    assume {:verifier.code 0} true;
    goto $bb38#1;

  $bb38#1:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_561#1;

  corral_source_split_561#1:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_562#1;

  corral_source_split_562#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __raw_spin_lock_init($p140, .str.53, __key___7);
    goto corral_source_split_563#1;

  corral_source_split_563#1:
    assume {:verifier.code 0} true;
    goto $bb39#1;

  $bb39#1:
    assume {:verifier.code 0} true;
    goto $bb41#1;

  $bb41#1:
    assume {:verifier.code 0} true;
    goto $bb43#1;

  $bb43#1:
    assume {:verifier.code 0} true;
    goto $bb44#1;

  $bb44#1:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_565#1;

  corral_source_split_565#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __mutex_init($p141, .str.54, __key___8);
    goto corral_source_split_566#1;

  corral_source_split_566#1:
    assume {:verifier.code 0} true;
    goto $bb45#1;

  $bb45#1:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_568#1;

  corral_source_split_568#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_569#1;

  corral_source_split_569#1:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_570#1;

  corral_source_split_570#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_571#1;

  corral_source_split_571#1:
    assume {:verifier.code 0} true;
    goto $bb47#1;

  $bb47#1:
    assume {:verifier.code 0} true;
    goto $bb48#1;

  $bb48#1:
    assume {:verifier.code 0} true;
    goto $bb49#1;

  $bb49#1:
    assume {:verifier.code 0} true;
    goto $bb50#1;

  $bb50#1:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_573#1;

  corral_source_split_573#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __init_work($p144, 0);
    goto corral_source_split_574#1;

  corral_source_split_574#1:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575#1;

  corral_source_split_575#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, 2097664);
    goto corral_source_split_576#1;

  corral_source_split_576#1:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_577#1;

  corral_source_split_577#1:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_578#1;

  corral_source_split_578#1:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_579#1;

  corral_source_split_579#1:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p148, $p149, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_580#1;

  corral_source_split_580#1:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_581#1;

  corral_source_split_581#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} lockdep_init_map($p151, .str.55, __key___9, 0);
    goto corral_source_split_582#1;

  corral_source_split_582#1:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_583#1;

  corral_source_split_583#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} INIT_LIST_HEAD($p153);
    goto corral_source_split_584#1;

  corral_source_split_584#1:
    assume {:verifier.code 0} true;
    goto $bb51#1;

  $bb51#1:
    assume {:verifier.code 0} true;
    goto $bb52#1;

  $bb52#1:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_586#1;

  corral_source_split_586#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, rx_data_softint);
    goto corral_source_split_587#1;

  corral_source_split_587#1:
    assume {:verifier.code 0} true;
    goto $bb53#1;

  $bb53#1:
    assume {:verifier.code 0} true;
    goto $bb55#1;

  $bb55#1:
    assume {:verifier.code 0} true;
    goto $bb57#1;

  $bb57#1:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_589#1;

  corral_source_split_589#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $p122);
    goto corral_source_split_590#1;

  corral_source_split_590#1:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_591#1;

  corral_source_split_591#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} INIT_LIST_HEAD($p157);
    goto corral_source_split_592#1;

  corral_source_split_592#1:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_593#1;

  corral_source_split_593#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} INIT_LIST_HEAD($p158);
    goto corral_source_split_594#1;

  corral_source_split_594#1:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_595#1;

  corral_source_split_595#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p159);
    goto corral_source_split_596#1;

  corral_source_split_596#1:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_597#1;

  corral_source_split_597#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} INIT_LIST_HEAD($p160);
    goto corral_source_split_598#1;

  corral_source_split_598#1:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_599#1;

  corral_source_split_599#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} INIT_LIST_HEAD($p161);
    goto corral_source_split_600#1;

  corral_source_split_600#1:
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb59#1;

  $bb61#2:
    assume $i164 == 1;
    goto corral_source_split_607#2;

  corral_source_split_607#2:
    assume {:verifier.code 0} true;
    goto $bb63#2;

  $bb63#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#2;

  corral_source_split_611#2:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#2;

  corral_source_split_612#2:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#2, $bb66#12;

  $bb65#2:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#2;

  $bb68#2:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#2;

  corral_source_split_625#2:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#2;

  corral_source_split_626#2:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#2;

  corral_source_split_627#2:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#2;

  corral_source_split_628#2:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#2;

  corral_source_split_629#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#2;

  corral_source_split_630#2:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#2;

  corral_source_split_631#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#2;

  corral_source_split_632#2:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#2;

  corral_source_split_633#2:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#2;

  corral_source_split_634#2:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#2;

  corral_source_split_635#2:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#2, $bb70#12;

  $bb69#2:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#2;

  $bb72#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#2;

  corral_source_split_644#2:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#2;

  corral_source_split_645#2:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#2;

  corral_source_split_646#2:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#2, $bb74#12;

  $bb73#2:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#2;

  $bb76#2:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#2;

  corral_source_split_657#2:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#2;

  corral_source_split_658#2:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#2;

  corral_source_split_659#2:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#2;

  corral_source_split_660#2:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#2;

  corral_source_split_661#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#2;

  corral_source_split_662#2:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#2;

  corral_source_split_663#2:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#2;

  corral_source_split_664#2:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#2;

  corral_source_split_665#2:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#2;

  corral_source_split_666#2:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#2;

  corral_source_split_667#2:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#2;

  corral_source_split_668#2:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#2;

  corral_source_split_669#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#2;

  corral_source_split_670#2:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#2;

  corral_source_split_671#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#2;

  corral_source_split_672#2:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#2;

  corral_source_split_673#2:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#2;

  corral_source_split_674#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#2;

  corral_source_split_675#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#2;

  corral_source_split_676#2:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#2;

  corral_source_split_677#2:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#2, $bb78#12;

  $bb77#2:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#2;

  $bb80#2:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#2;

  corral_source_split_695#2:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#2;

  corral_source_split_696#2:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#2;

  corral_source_split_697#2:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#2;

  corral_source_split_698#2:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#2;

  corral_source_split_699#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#2;

  corral_source_split_700#2:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#2;

  corral_source_split_701#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#2;

  corral_source_split_702#2:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#2;

  corral_source_split_703#2:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#2;

  corral_source_split_704#2:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#2;

  corral_source_split_705#2:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#2, $bb82#12;

  $bb81#2:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#2;

  $bb84#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#2;

  corral_source_split_714#2:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#2;

  corral_source_split_715#2:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#2;

  corral_source_split_716#2:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#2, $bb86#12;

  $bb85#2:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#2;

  $bb88#2:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#2;

  corral_source_split_727#2:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#2;

  corral_source_split_728#2:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#2;

  corral_source_split_729#2:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#2;

  corral_source_split_730#2:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#2;

  corral_source_split_731#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#2;

  corral_source_split_732#2:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#2;

  corral_source_split_733#2:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#2;

  corral_source_split_734#2:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#2;

  corral_source_split_735#2:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#2;

  corral_source_split_736#2:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#2;

  corral_source_split_737#2:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#2;

  corral_source_split_738#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#2;

  corral_source_split_739#2:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#2;

  corral_source_split_740#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#2;

  corral_source_split_741#2:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#2;

  corral_source_split_742#2:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#2;

  corral_source_split_743#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#2;

  corral_source_split_744#2:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#2;

  corral_source_split_745#2:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#1;

  $bb59#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_602#1;

  corral_source_split_602#1:
    assume {:verifier.code 0} true;
    goto $bb60#1;

  $bb60#1:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_604#1;

  corral_source_split_604#1:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i162, $i163);
    goto corral_source_split_605#1;

  corral_source_split_605#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb61#1, $bb62#1;

  $bb62#1:
    assume !($i164 == 1);
    goto corral_source_split_609#1;

  corral_source_split_609#1:
    assume {:verifier.code 0} true;
    goto $bb64#1;

  $bb64#1:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p124);
    goto corral_source_split_614#1;

  corral_source_split_614#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} usb_set_serial_port_data($p122, $p289);
    goto corral_source_split_615#1;

  corral_source_split_615#1:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i114, 1);
    call {:si_unique_call 163} {:cexpr "i"} boogie_si_record_i32($i290);
    goto corral_source_split_616#1;

  corral_source_split_616#1:
    assume {:verifier.code 0} true;
    $i114 := $i290;
    goto $bb25#0;

  $bb25#0:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb61#1:
    assume $i164 == 1;
    goto corral_source_split_607#1;

  corral_source_split_607#1:
    assume {:verifier.code 0} true;
    goto $bb63#1;

  $bb63#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p165 := usb_alloc_urb(0, 208);
    goto corral_source_split_611#1;

  corral_source_split_611#1:
    assume {:verifier.code 0} true;
    $i166 := $ne.ref($p165, $0.ref);
    goto corral_source_split_612#1;

  corral_source_split_612#1:
    assume {:verifier.code 0} true;
    $i167, $p168, $p169, $i170 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i166} true;
    goto $bb65#1, $bb66#12;

  $bb66#12:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_618#12;

  corral_source_split_618#12:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p168, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_619#12;

  corral_source_split_619#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_37 := dev_err.ref.ref($p171, .str.56);
    goto corral_source_split_620#12;

  corral_source_split_620#12:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p169, $i167, $i170;
    goto $bb67#12;

  $bb65#1:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto $bb68#1;

  $bb68#1:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_625#1;

  corral_source_split_625#1:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_626#1;

  corral_source_split_626#1:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_627#1;

  corral_source_split_627#1:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 166} {:cexpr "buf_size"} boogie_si_record_i32($i179);
    goto corral_source_split_628#1;

  corral_source_split_628#1:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    call {:si_unique_call 167} {:cexpr "size"} boogie_si_record_i64($i180);
    goto corral_source_split_629#1;

  corral_source_split_629#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p181 := __kmalloc($i180, 208);
    goto corral_source_split_630#1;

  corral_source_split_630#1:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_631#1;

  corral_source_split_631#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p182, $p181);
    goto corral_source_split_632#1;

  corral_source_split_632#1:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_633#1;

  corral_source_split_633#1:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_634#1;

  corral_source_split_634#1:
    assume {:verifier.code 0} true;
    $i185 := $ne.ref($p184, $0.ref);
    goto corral_source_split_635#1;

  corral_source_split_635#1:
    assume {:verifier.code 0} true;
    $i186, $p187, $p188, $i189, $p190 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i185} true;
    goto $bb69#1, $bb70#12;

  $bb70#12:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_637#12;

  corral_source_split_637#12:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p187, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_638#12;

  corral_source_split_638#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_38 := dev_err.ref.ref($p191, .str.57);
    goto corral_source_split_639#12;

  corral_source_split_639#12:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p188, $i186, $i189, $p190;
    goto $bb71#12;

  $bb69#1:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb72#1;

  $bb72#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p197 := __kmalloc(24, 208);
    goto corral_source_split_644#1;

  corral_source_split_644#1:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_645#1;

  corral_source_split_645#1:
    assume {:verifier.code 0} true;
    $i199 := $ne.ref($p198, $0.ref);
    goto corral_source_split_646#1;

  corral_source_split_646#1:
    assume {:verifier.code 0} true;
    $i200, $p201, $p202, $i203, $p204 := $i114, $p122, $p123, $i162, $p165;
    assume {:branchcond $i199} true;
    goto $bb73#1, $bb74#12;

  $bb74#12:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_648#12;

  corral_source_split_648#12:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p201, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_649#12;

  corral_source_split_649#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_39 := dev_err.ref.ref($p205, .str.58);
    goto corral_source_split_650#12;

  corral_source_split_650#12:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p202, $i200, $i203, $p204;
    goto $bb75#12;

  $bb73#1:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    goto $bb76#1;

  $bb76#1:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_657#1;

  corral_source_split_657#1:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_658#1;

  corral_source_split_658#1:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(904, 1));
    goto corral_source_split_659#1;

  corral_source_split_659#1:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_660#1;

  corral_source_split_660#1:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_661#1;

  corral_source_split_661#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i216 := __create_pipe($p212, $i215);
    call {:si_unique_call 175} {:cexpr "tmp___14"} boogie_si_record_i32($i216);
    goto corral_source_split_662#1;

  corral_source_split_662#1:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_663#1;

  corral_source_split_663#1:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_664#1;

  corral_source_split_664#1:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($sub.i32(0, 1073741824), $i216);
    goto corral_source_split_665#1;

  corral_source_split_665#1:
    assume {:verifier.code 0} true;
    $i220 := $or.i32($i219, 128);
    goto corral_source_split_666#1;

  corral_source_split_666#1:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p165, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_667#1;

  corral_source_split_667#1:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_668#1;

  corral_source_split_668#1:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p122);
    goto corral_source_split_669#1;

  corral_source_split_669#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_fill_bulk_urb($p165, $p218, $i220, $p222, $i179, whiteheat_read_callback, $p223);
    goto corral_source_split_670#1;

  corral_source_split_670#1:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_671#1;

  corral_source_split_671#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p165);
    goto corral_source_split_672#1;

  corral_source_split_672#1:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_673#1;

  corral_source_split_673#1:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_674#1;

  corral_source_split_674#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} list_add($p225, $p226);
    goto corral_source_split_675#1;

  corral_source_split_675#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p227 := usb_alloc_urb(0, 208);
    goto corral_source_split_676#1;

  corral_source_split_676#1:
    assume {:verifier.code 0} true;
    $i228 := $ne.ref($p227, $0.ref);
    goto corral_source_split_677#1;

  corral_source_split_677#1:
    assume {:verifier.code 0} true;
    $i229, $p230, $p231, $i232 := $i114, $p122, $p123, $i162;
    assume {:branchcond $i228} true;
    goto $bb77#1, $bb78#12;

  $bb78#12:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_679#12;

  corral_source_split_679#12:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p230, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_680#12;

  corral_source_split_680#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_40 := dev_err.ref.ref($p233, .str.56);
    goto corral_source_split_681#12;

  corral_source_split_681#12:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p231, $i229, $i232;
    goto $bb79#12;

  $bb77#1:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto $bb80#1;

  $bb80#1:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_695#1;

  corral_source_split_695#1:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_696#1;

  corral_source_split_696#1:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_697#1;

  corral_source_split_697#1:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    call {:si_unique_call 183} {:cexpr "buf_size"} boogie_si_record_i32($i241);
    goto corral_source_split_698#1;

  corral_source_split_698#1:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i64($i242);
    goto corral_source_split_699#1;

  corral_source_split_699#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p243 := __kmalloc($i242, 208);
    goto corral_source_split_700#1;

  corral_source_split_700#1:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_701#1;

  corral_source_split_701#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p244, $p243);
    goto corral_source_split_702#1;

  corral_source_split_702#1:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_703#1;

  corral_source_split_703#1:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_704#1;

  corral_source_split_704#1:
    assume {:verifier.code 0} true;
    $i247 := $ne.ref($p246, $0.ref);
    goto corral_source_split_705#1;

  corral_source_split_705#1:
    assume {:verifier.code 0} true;
    $i248, $p249, $p250, $i251, $p252 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i247} true;
    goto $bb81#1, $bb82#12;

  $bb82#12:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_707#12;

  corral_source_split_707#12:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p249, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_708#12;

  corral_source_split_708#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_41 := dev_err.ref.ref($p253, .str.57);
    goto corral_source_split_709#12;

  corral_source_split_709#12:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p250, $i248, $i251, $p252;
    goto $bb83#12;

  $bb81#1:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    goto $bb84#1;

  $bb84#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p259 := __kmalloc(24, 208);
    goto corral_source_split_714#1;

  corral_source_split_714#1:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_715#1;

  corral_source_split_715#1:
    assume {:verifier.code 0} true;
    $i261 := $ne.ref($p260, $0.ref);
    goto corral_source_split_716#1;

  corral_source_split_716#1:
    assume {:verifier.code 0} true;
    $i262, $p263, $p264, $i265, $p266 := $i114, $p122, $p123, $i162, $p227;
    assume {:branchcond $i261} true;
    goto $bb85#1, $bb86#12;

  $bb86#12:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_718#12;

  corral_source_split_718#12:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p263, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_719#12;

  corral_source_split_719#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_42 := dev_err.ref.ref($p267, .str.58);
    goto corral_source_split_720#12;

  corral_source_split_720#12:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p264, $i262, $i265, $p266;
    goto $bb87#12;

  $bb85#1:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    goto $bb88#1;

  $bb88#1:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_727#1;

  corral_source_split_727#1:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_728#1;

  corral_source_split_728#1:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p122, $mul.ref(0, 2328)), $mul.ref(1008, 1));
    goto corral_source_split_729#1;

  corral_source_split_729#1:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_730#1;

  corral_source_split_730#1:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_731#1;

  corral_source_split_731#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i278 := __create_pipe($p274, $i277);
    call {:si_unique_call 192} {:cexpr "tmp___16"} boogie_si_record_i32($i278);
    goto corral_source_split_732#1;

  corral_source_split_732#1:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_733#1;

  corral_source_split_733#1:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_734#1;

  corral_source_split_734#1:
    assume {:verifier.code 0} true;
    $i281 := $or.i32($sub.i32(0, 1073741824), $i278);
    goto corral_source_split_735#1;

  corral_source_split_735#1:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_736#1;

  corral_source_split_736#1:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_737#1;

  corral_source_split_737#1:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p122);
    goto corral_source_split_738#1;

  corral_source_split_738#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_fill_bulk_urb($p227, $p280, $i281, $p283, $i241, whiteheat_write_callback, $p284);
    goto corral_source_split_739#1;

  corral_source_split_739#1:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_740#1;

  corral_source_split_740#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p227);
    goto corral_source_split_741#1;

  corral_source_split_741#1:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p260, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_742#1;

  corral_source_split_742#1:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p124, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_743#1;

  corral_source_split_743#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} list_add($p286, $p287);
    goto corral_source_split_744#1;

  corral_source_split_744#1:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i162, 1);
    call {:si_unique_call 195} {:cexpr "j"} boogie_si_record_i32($i288);
    goto corral_source_split_745#1;

  corral_source_split_745#1:
    assume {:verifier.code 0} true;
    $i162 := $i288;
    goto $bb59#0;

  $bb59#0:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb31#12:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_547#12;

  corral_source_split_547#12:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_548#12;

  corral_source_split_548#12:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_549#12;

  corral_source_split_549#12:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_550#12;

  corral_source_split_550#12:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_551#12;

  corral_source_split_551#12:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_552#12;

  corral_source_split_552#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} vslice_dummy_var_35 := dev_err.ref.ref.ref($p129, .str.52, $p133);
    goto corral_source_split_553#12;

  corral_source_split_553#12:
    assume {:verifier.code 0} true;
    $i135 := $i127;
    goto $bb33#12;

  $bb33#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#12;

  corral_source_split_555#12:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#12;

  corral_source_split_556#12:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#12;

  $bb104#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#12;

  corral_source_split_786#12:
    assume {:verifier.code 0} true;
    goto $bb105#12;

  $bb105#12:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#12;

  corral_source_split_788#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#12, $bb107#12;

  $bb106#12:
    assume $i343 == 1;
    goto corral_source_split_790#12;

  corral_source_split_790#12:
    assume {:verifier.code 0} true;
    goto $bb108#12;

  $bb108#12:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#12;

  corral_source_split_794#12:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#12;

  corral_source_split_795#12:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#12;

  corral_source_split_796#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#12;

  corral_source_split_797#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#12;

  corral_source_split_798#12:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#12;

  corral_source_split_799#12:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#12;

  corral_source_split_800#12:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#12;

  $bb110#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#12;

  corral_source_split_804#12:
    assume {:verifier.code 0} true;
    goto $bb111#12;

  $bb111#12:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#12;

  corral_source_split_806#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#12, $bb113#12;

  $bb113#12:
    assume !($i355 == 1);
    goto corral_source_split_810#12;

  corral_source_split_810#12:
    assume {:verifier.code 0} true;
    goto $bb115#12;

  $bb115#12:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#12;

  corral_source_split_823#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#12;

  corral_source_split_824#12:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#11;

  $bb33#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#11;

  corral_source_split_555#11:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#11;

  corral_source_split_556#11:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#11;

  $bb104#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#11;

  corral_source_split_786#11:
    assume {:verifier.code 0} true;
    goto $bb105#11;

  $bb105#11:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#11;

  corral_source_split_788#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#11, $bb107#12;

  $bb106#11:
    assume $i343 == 1;
    goto corral_source_split_790#11;

  corral_source_split_790#11:
    assume {:verifier.code 0} true;
    goto $bb108#11;

  $bb108#11:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#11;

  corral_source_split_794#11:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#11;

  corral_source_split_795#11:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#11;

  corral_source_split_796#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#11;

  corral_source_split_797#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#11;

  corral_source_split_798#11:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#11;

  corral_source_split_799#11:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#11;

  corral_source_split_800#11:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#11;

  $bb112#12:
    assume $i355 == 1;
    goto corral_source_split_808#12;

  corral_source_split_808#12:
    assume {:verifier.code 0} true;
    goto $bb114#12;

  $bb114#12:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#12;

  corral_source_split_812#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#12;

  corral_source_split_813#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#12;

  corral_source_split_814#12:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#12;

  corral_source_split_815#12:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#12;

  corral_source_split_816#12:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#12;

  corral_source_split_817#12:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#12;

  corral_source_split_818#12:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#12;

  corral_source_split_819#12:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#12;

  corral_source_split_820#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#12;

  corral_source_split_821#12:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#12;

  $bb87#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#12;

  corral_source_split_722#12:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#12;

  corral_source_split_723#12:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#12;

  corral_source_split_724#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#12;

  corral_source_split_725#12:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#12;

  $bb83#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#12;

  corral_source_split_711#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#12;

  SeqInstr_5#12:
    assume assertsPassed;
    goto SeqInstr_6#12;

  SeqInstr_6#12:
    goto corral_source_split_712#12;

  corral_source_split_712#12:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#12;

  $bb79#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#12;

  corral_source_split_683#12:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#12;

  corral_source_split_684#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#12;

  corral_source_split_685#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#12;

  corral_source_split_686#12:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#12;

  corral_source_split_687#12:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#12;

  corral_source_split_688#12:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#12;

  corral_source_split_689#12:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#12;

  corral_source_split_690#12:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#12;

  corral_source_split_691#12:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#12;

  corral_source_split_692#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#12;

  corral_source_split_693#12:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#12;

  $bb75#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#12;

  corral_source_split_652#12:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#12;

  corral_source_split_653#12:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#12;

  corral_source_split_654#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#12;

  corral_source_split_655#12:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#12;

  $bb71#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#12;

  corral_source_split_641#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#12;

  SeqInstr_2#12:
    assume assertsPassed;
    goto SeqInstr_3#12;

  SeqInstr_3#12:
    goto corral_source_split_642#12;

  corral_source_split_642#12:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#12;

  $bb67#12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#12;

  corral_source_split_622#12:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#12;

  corral_source_split_623#12:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#11;

  $bb110#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#11;

  corral_source_split_804#11:
    assume {:verifier.code 0} true;
    goto $bb111#11;

  $bb111#11:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#11;

  corral_source_split_806#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#11, $bb113#11;

  $bb113#11:
    assume !($i355 == 1);
    goto corral_source_split_810#11;

  corral_source_split_810#11:
    assume {:verifier.code 0} true;
    goto $bb115#11;

  $bb115#11:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#11;

  corral_source_split_823#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#11;

  corral_source_split_824#11:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#10;

  $bb33#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#10;

  corral_source_split_555#10:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#10;

  corral_source_split_556#10:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#10;

  $bb104#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#10;

  corral_source_split_786#10:
    assume {:verifier.code 0} true;
    goto $bb105#10;

  $bb105#10:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#10;

  corral_source_split_788#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#10, $bb107#12;

  $bb106#10:
    assume $i343 == 1;
    goto corral_source_split_790#10;

  corral_source_split_790#10:
    assume {:verifier.code 0} true;
    goto $bb108#10;

  $bb108#10:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#10;

  corral_source_split_794#10:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#10;

  corral_source_split_795#10:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#10;

  corral_source_split_796#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#10;

  corral_source_split_797#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#10;

  corral_source_split_798#10:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#10;

  corral_source_split_799#10:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#10;

  corral_source_split_800#10:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#10;

  $bb112#11:
    assume $i355 == 1;
    goto corral_source_split_808#11;

  corral_source_split_808#11:
    assume {:verifier.code 0} true;
    goto $bb114#11;

  $bb114#11:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#11;

  corral_source_split_812#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#11;

  corral_source_split_813#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#11;

  corral_source_split_814#11:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#11;

  corral_source_split_815#11:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#11;

  corral_source_split_816#11:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#11;

  corral_source_split_817#11:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#11;

  corral_source_split_818#11:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#11;

  corral_source_split_819#11:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#11;

  corral_source_split_820#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#11;

  corral_source_split_821#11:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#11;

  $bb87#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#11;

  corral_source_split_722#11:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#11;

  corral_source_split_723#11:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#11;

  corral_source_split_724#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#11;

  corral_source_split_725#11:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#11;

  $bb83#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#11;

  corral_source_split_711#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#11;

  SeqInstr_5#11:
    assume assertsPassed;
    goto SeqInstr_6#11;

  SeqInstr_6#11:
    goto corral_source_split_712#11;

  corral_source_split_712#11:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#11;

  $bb79#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#11;

  corral_source_split_683#11:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#11;

  corral_source_split_684#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#11;

  corral_source_split_685#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#11;

  corral_source_split_686#11:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#11;

  corral_source_split_687#11:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#11;

  corral_source_split_688#11:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#11;

  corral_source_split_689#11:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#11;

  corral_source_split_690#11:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#11;

  corral_source_split_691#11:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#11;

  corral_source_split_692#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#11;

  corral_source_split_693#11:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#11;

  $bb75#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#11;

  corral_source_split_652#11:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#11;

  corral_source_split_653#11:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#11;

  corral_source_split_654#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#11;

  corral_source_split_655#11:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#11;

  $bb71#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#11;

  corral_source_split_641#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#11;

  SeqInstr_2#11:
    assume assertsPassed;
    goto SeqInstr_3#11;

  SeqInstr_3#11:
    goto corral_source_split_642#11;

  corral_source_split_642#11:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#11;

  $bb67#11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#11;

  corral_source_split_622#11:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#11;

  corral_source_split_623#11:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#10;

  $bb110#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#10;

  corral_source_split_804#10:
    assume {:verifier.code 0} true;
    goto $bb111#10;

  $bb111#10:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#10;

  corral_source_split_806#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#10, $bb113#10;

  $bb113#10:
    assume !($i355 == 1);
    goto corral_source_split_810#10;

  corral_source_split_810#10:
    assume {:verifier.code 0} true;
    goto $bb115#10;

  $bb115#10:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#10;

  corral_source_split_823#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#10;

  corral_source_split_824#10:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#9;

  $bb33#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#9;

  corral_source_split_555#9:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#9;

  corral_source_split_556#9:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#9;

  $bb104#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#9;

  corral_source_split_786#9:
    assume {:verifier.code 0} true;
    goto $bb105#9;

  $bb105#9:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#9;

  corral_source_split_788#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#9, $bb107#12;

  $bb106#9:
    assume $i343 == 1;
    goto corral_source_split_790#9;

  corral_source_split_790#9:
    assume {:verifier.code 0} true;
    goto $bb108#9;

  $bb108#9:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#9;

  corral_source_split_794#9:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#9;

  corral_source_split_795#9:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#9;

  corral_source_split_796#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#9;

  corral_source_split_797#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#9;

  corral_source_split_798#9:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#9;

  corral_source_split_799#9:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#9;

  corral_source_split_800#9:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#9;

  $bb112#10:
    assume $i355 == 1;
    goto corral_source_split_808#10;

  corral_source_split_808#10:
    assume {:verifier.code 0} true;
    goto $bb114#10;

  $bb114#10:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#10;

  corral_source_split_812#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#10;

  corral_source_split_813#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#10;

  corral_source_split_814#10:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#10;

  corral_source_split_815#10:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#10;

  corral_source_split_816#10:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#10;

  corral_source_split_817#10:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#10;

  corral_source_split_818#10:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#10;

  corral_source_split_819#10:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#10;

  corral_source_split_820#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#10;

  corral_source_split_821#10:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#10;

  $bb87#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#10;

  corral_source_split_722#10:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#10;

  corral_source_split_723#10:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#10;

  corral_source_split_724#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#10;

  corral_source_split_725#10:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#10;

  $bb83#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#10;

  corral_source_split_711#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#10;

  SeqInstr_5#10:
    assume assertsPassed;
    goto SeqInstr_6#10;

  SeqInstr_6#10:
    goto corral_source_split_712#10;

  corral_source_split_712#10:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#10;

  $bb79#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#10;

  corral_source_split_683#10:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#10;

  corral_source_split_684#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#10;

  corral_source_split_685#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#10;

  corral_source_split_686#10:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#10;

  corral_source_split_687#10:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#10;

  corral_source_split_688#10:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#10;

  corral_source_split_689#10:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#10;

  corral_source_split_690#10:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#10;

  corral_source_split_691#10:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#10;

  corral_source_split_692#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#10;

  corral_source_split_693#10:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#10;

  $bb75#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#10;

  corral_source_split_652#10:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#10;

  corral_source_split_653#10:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#10;

  corral_source_split_654#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#10;

  corral_source_split_655#10:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#10;

  $bb71#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#10;

  corral_source_split_641#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#10;

  SeqInstr_2#10:
    assume assertsPassed;
    goto SeqInstr_3#10;

  SeqInstr_3#10:
    goto corral_source_split_642#10;

  corral_source_split_642#10:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#10;

  $bb67#10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#10;

  corral_source_split_622#10:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#10;

  corral_source_split_623#10:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#9;

  $bb110#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#9;

  corral_source_split_804#9:
    assume {:verifier.code 0} true;
    goto $bb111#9;

  $bb111#9:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#9;

  corral_source_split_806#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#9, $bb113#9;

  $bb113#9:
    assume !($i355 == 1);
    goto corral_source_split_810#9;

  corral_source_split_810#9:
    assume {:verifier.code 0} true;
    goto $bb115#9;

  $bb115#9:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#9;

  corral_source_split_823#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#9;

  corral_source_split_824#9:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#8;

  $bb33#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#8;

  corral_source_split_555#8:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#8;

  corral_source_split_556#8:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#8;

  $bb104#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#8;

  corral_source_split_786#8:
    assume {:verifier.code 0} true;
    goto $bb105#8;

  $bb105#8:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#8;

  corral_source_split_788#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#8, $bb107#12;

  $bb106#8:
    assume $i343 == 1;
    goto corral_source_split_790#8;

  corral_source_split_790#8:
    assume {:verifier.code 0} true;
    goto $bb108#8;

  $bb108#8:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#8;

  corral_source_split_794#8:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#8;

  corral_source_split_795#8:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#8;

  corral_source_split_796#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#8;

  corral_source_split_797#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#8;

  corral_source_split_798#8:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#8;

  corral_source_split_799#8:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#8;

  corral_source_split_800#8:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#8;

  $bb112#9:
    assume $i355 == 1;
    goto corral_source_split_808#9;

  corral_source_split_808#9:
    assume {:verifier.code 0} true;
    goto $bb114#9;

  $bb114#9:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#9;

  corral_source_split_812#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#9;

  corral_source_split_813#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#9;

  corral_source_split_814#9:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#9;

  corral_source_split_815#9:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#9;

  corral_source_split_816#9:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#9;

  corral_source_split_817#9:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#9;

  corral_source_split_818#9:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#9;

  corral_source_split_819#9:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#9;

  corral_source_split_820#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#9;

  corral_source_split_821#9:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#9;

  $bb87#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#9;

  corral_source_split_722#9:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#9;

  corral_source_split_723#9:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#9;

  corral_source_split_724#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#9;

  corral_source_split_725#9:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#9;

  $bb83#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#9;

  corral_source_split_711#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#9;

  SeqInstr_5#9:
    assume assertsPassed;
    goto SeqInstr_6#9;

  SeqInstr_6#9:
    goto corral_source_split_712#9;

  corral_source_split_712#9:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#9;

  $bb79#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#9;

  corral_source_split_683#9:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#9;

  corral_source_split_684#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#9;

  corral_source_split_685#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#9;

  corral_source_split_686#9:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#9;

  corral_source_split_687#9:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#9;

  corral_source_split_688#9:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#9;

  corral_source_split_689#9:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#9;

  corral_source_split_690#9:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#9;

  corral_source_split_691#9:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#9;

  corral_source_split_692#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#9;

  corral_source_split_693#9:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#9;

  $bb75#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#9;

  corral_source_split_652#9:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#9;

  corral_source_split_653#9:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#9;

  corral_source_split_654#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#9;

  corral_source_split_655#9:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#9;

  $bb71#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#9;

  corral_source_split_641#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#9;

  SeqInstr_2#9:
    assume assertsPassed;
    goto SeqInstr_3#9;

  SeqInstr_3#9:
    goto corral_source_split_642#9;

  corral_source_split_642#9:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#9;

  $bb67#9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#9;

  corral_source_split_622#9:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#9;

  corral_source_split_623#9:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#8;

  $bb110#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#8;

  corral_source_split_804#8:
    assume {:verifier.code 0} true;
    goto $bb111#8;

  $bb111#8:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#8;

  corral_source_split_806#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#8, $bb113#8;

  $bb113#8:
    assume !($i355 == 1);
    goto corral_source_split_810#8;

  corral_source_split_810#8:
    assume {:verifier.code 0} true;
    goto $bb115#8;

  $bb115#8:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#8;

  corral_source_split_823#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#8;

  corral_source_split_824#8:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#7;

  $bb33#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#7;

  corral_source_split_555#7:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#7;

  corral_source_split_556#7:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#7;

  $bb104#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#7;

  corral_source_split_786#7:
    assume {:verifier.code 0} true;
    goto $bb105#7;

  $bb105#7:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#7;

  corral_source_split_788#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#7, $bb107#12;

  $bb106#7:
    assume $i343 == 1;
    goto corral_source_split_790#7;

  corral_source_split_790#7:
    assume {:verifier.code 0} true;
    goto $bb108#7;

  $bb108#7:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#7;

  corral_source_split_794#7:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#7;

  corral_source_split_795#7:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#7;

  corral_source_split_796#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#7;

  corral_source_split_797#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#7;

  corral_source_split_798#7:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#7;

  corral_source_split_799#7:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#7;

  corral_source_split_800#7:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#7;

  $bb112#8:
    assume $i355 == 1;
    goto corral_source_split_808#8;

  corral_source_split_808#8:
    assume {:verifier.code 0} true;
    goto $bb114#8;

  $bb114#8:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#8;

  corral_source_split_812#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#8;

  corral_source_split_813#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#8;

  corral_source_split_814#8:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#8;

  corral_source_split_815#8:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#8;

  corral_source_split_816#8:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#8;

  corral_source_split_817#8:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#8;

  corral_source_split_818#8:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#8;

  corral_source_split_819#8:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#8;

  corral_source_split_820#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#8;

  corral_source_split_821#8:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#8;

  $bb87#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#8;

  corral_source_split_722#8:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#8;

  corral_source_split_723#8:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#8;

  corral_source_split_724#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#8;

  corral_source_split_725#8:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#8;

  $bb83#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#8;

  corral_source_split_711#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#8;

  SeqInstr_5#8:
    assume assertsPassed;
    goto SeqInstr_6#8;

  SeqInstr_6#8:
    goto corral_source_split_712#8;

  corral_source_split_712#8:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#8;

  $bb79#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#8;

  corral_source_split_683#8:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#8;

  corral_source_split_684#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#8;

  corral_source_split_685#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#8;

  corral_source_split_686#8:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#8;

  corral_source_split_687#8:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#8;

  corral_source_split_688#8:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#8;

  corral_source_split_689#8:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#8;

  corral_source_split_690#8:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#8;

  corral_source_split_691#8:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#8;

  corral_source_split_692#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#8;

  corral_source_split_693#8:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#8;

  $bb75#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#8;

  corral_source_split_652#8:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#8;

  corral_source_split_653#8:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#8;

  corral_source_split_654#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#8;

  corral_source_split_655#8:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#8;

  $bb71#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#8;

  corral_source_split_641#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#8;

  SeqInstr_2#8:
    assume assertsPassed;
    goto SeqInstr_3#8;

  SeqInstr_3#8:
    goto corral_source_split_642#8;

  corral_source_split_642#8:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#8;

  $bb67#8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#8;

  corral_source_split_622#8:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#8;

  corral_source_split_623#8:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#7;

  $bb110#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#7;

  corral_source_split_804#7:
    assume {:verifier.code 0} true;
    goto $bb111#7;

  $bb111#7:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#7;

  corral_source_split_806#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#7, $bb113#7;

  $bb113#7:
    assume !($i355 == 1);
    goto corral_source_split_810#7;

  corral_source_split_810#7:
    assume {:verifier.code 0} true;
    goto $bb115#7;

  $bb115#7:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#7;

  corral_source_split_823#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#7;

  corral_source_split_824#7:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#6;

  $bb33#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#6;

  corral_source_split_555#6:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#6;

  corral_source_split_556#6:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#6;

  $bb104#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#6;

  corral_source_split_786#6:
    assume {:verifier.code 0} true;
    goto $bb105#6;

  $bb105#6:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#6;

  corral_source_split_788#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#6, $bb107#12;

  $bb106#6:
    assume $i343 == 1;
    goto corral_source_split_790#6;

  corral_source_split_790#6:
    assume {:verifier.code 0} true;
    goto $bb108#6;

  $bb108#6:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#6;

  corral_source_split_794#6:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#6;

  corral_source_split_795#6:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#6;

  corral_source_split_796#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#6;

  corral_source_split_797#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#6;

  corral_source_split_798#6:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#6;

  corral_source_split_799#6:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#6;

  corral_source_split_800#6:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#6;

  $bb112#7:
    assume $i355 == 1;
    goto corral_source_split_808#7;

  corral_source_split_808#7:
    assume {:verifier.code 0} true;
    goto $bb114#7;

  $bb114#7:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#7;

  corral_source_split_812#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#7;

  corral_source_split_813#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#7;

  corral_source_split_814#7:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#7;

  corral_source_split_815#7:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#7;

  corral_source_split_816#7:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#7;

  corral_source_split_817#7:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#7;

  corral_source_split_818#7:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#7;

  corral_source_split_819#7:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#7;

  corral_source_split_820#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#7;

  corral_source_split_821#7:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#7;

  $bb87#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#7;

  corral_source_split_722#7:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#7;

  corral_source_split_723#7:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#7;

  corral_source_split_724#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#7;

  corral_source_split_725#7:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#7;

  $bb83#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#7;

  corral_source_split_711#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#7;

  SeqInstr_5#7:
    assume assertsPassed;
    goto SeqInstr_6#7;

  SeqInstr_6#7:
    goto corral_source_split_712#7;

  corral_source_split_712#7:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#7;

  $bb79#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#7;

  corral_source_split_683#7:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#7;

  corral_source_split_684#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#7;

  corral_source_split_685#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#7;

  corral_source_split_686#7:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#7;

  corral_source_split_687#7:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#7;

  corral_source_split_688#7:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#7;

  corral_source_split_689#7:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#7;

  corral_source_split_690#7:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#7;

  corral_source_split_691#7:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#7;

  corral_source_split_692#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#7;

  corral_source_split_693#7:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#7;

  $bb75#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#7;

  corral_source_split_652#7:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#7;

  corral_source_split_653#7:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#7;

  corral_source_split_654#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#7;

  corral_source_split_655#7:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#7;

  $bb71#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#7;

  corral_source_split_641#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#7;

  SeqInstr_2#7:
    assume assertsPassed;
    goto SeqInstr_3#7;

  SeqInstr_3#7:
    goto corral_source_split_642#7;

  corral_source_split_642#7:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#7;

  $bb67#7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#7;

  corral_source_split_622#7:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#7;

  corral_source_split_623#7:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#6;

  $bb110#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#6;

  corral_source_split_804#6:
    assume {:verifier.code 0} true;
    goto $bb111#6;

  $bb111#6:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#6;

  corral_source_split_806#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#6, $bb113#6;

  $bb113#6:
    assume !($i355 == 1);
    goto corral_source_split_810#6;

  corral_source_split_810#6:
    assume {:verifier.code 0} true;
    goto $bb115#6;

  $bb115#6:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#6;

  corral_source_split_823#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#6;

  corral_source_split_824#6:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#5;

  $bb33#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#5;

  corral_source_split_555#5:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#5;

  corral_source_split_556#5:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#5;

  $bb104#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#5;

  corral_source_split_786#5:
    assume {:verifier.code 0} true;
    goto $bb105#5;

  $bb105#5:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#5;

  corral_source_split_788#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#5, $bb107#12;

  $bb106#5:
    assume $i343 == 1;
    goto corral_source_split_790#5;

  corral_source_split_790#5:
    assume {:verifier.code 0} true;
    goto $bb108#5;

  $bb108#5:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#5;

  corral_source_split_794#5:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#5;

  corral_source_split_795#5:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#5;

  corral_source_split_796#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#5;

  corral_source_split_797#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#5;

  corral_source_split_798#5:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#5;

  corral_source_split_799#5:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#5;

  corral_source_split_800#5:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#5;

  $bb112#6:
    assume $i355 == 1;
    goto corral_source_split_808#6;

  corral_source_split_808#6:
    assume {:verifier.code 0} true;
    goto $bb114#6;

  $bb114#6:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#6;

  corral_source_split_812#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#6;

  corral_source_split_813#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#6;

  corral_source_split_814#6:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#6;

  corral_source_split_815#6:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#6;

  corral_source_split_816#6:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#6;

  corral_source_split_817#6:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#6;

  corral_source_split_818#6:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#6;

  corral_source_split_819#6:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#6;

  corral_source_split_820#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#6;

  corral_source_split_821#6:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#6;

  $bb87#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#6;

  corral_source_split_722#6:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#6;

  corral_source_split_723#6:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#6;

  corral_source_split_724#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#6;

  corral_source_split_725#6:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#6;

  $bb83#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#6;

  corral_source_split_711#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#6;

  SeqInstr_5#6:
    assume assertsPassed;
    goto SeqInstr_6#6;

  SeqInstr_6#6:
    goto corral_source_split_712#6;

  corral_source_split_712#6:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#6;

  $bb79#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#6;

  corral_source_split_683#6:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#6;

  corral_source_split_684#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#6;

  corral_source_split_685#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#6;

  corral_source_split_686#6:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#6;

  corral_source_split_687#6:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#6;

  corral_source_split_688#6:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#6;

  corral_source_split_689#6:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#6;

  corral_source_split_690#6:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#6;

  corral_source_split_691#6:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#6;

  corral_source_split_692#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#6;

  corral_source_split_693#6:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#6;

  $bb75#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#6;

  corral_source_split_652#6:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#6;

  corral_source_split_653#6:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#6;

  corral_source_split_654#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#6;

  corral_source_split_655#6:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#6;

  $bb71#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#6;

  corral_source_split_641#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#6;

  SeqInstr_2#6:
    assume assertsPassed;
    goto SeqInstr_3#6;

  SeqInstr_3#6:
    goto corral_source_split_642#6;

  corral_source_split_642#6:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#6;

  $bb67#6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#6;

  corral_source_split_622#6:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#6;

  corral_source_split_623#6:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#5;

  $bb110#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#5;

  corral_source_split_804#5:
    assume {:verifier.code 0} true;
    goto $bb111#5;

  $bb111#5:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#5;

  corral_source_split_806#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#5, $bb113#5;

  $bb113#5:
    assume !($i355 == 1);
    goto corral_source_split_810#5;

  corral_source_split_810#5:
    assume {:verifier.code 0} true;
    goto $bb115#5;

  $bb115#5:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#5;

  corral_source_split_823#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#5;

  corral_source_split_824#5:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#4;

  $bb33#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#4;

  corral_source_split_555#4:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#4;

  corral_source_split_556#4:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#4;

  $bb104#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#4;

  corral_source_split_786#4:
    assume {:verifier.code 0} true;
    goto $bb105#4;

  $bb105#4:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#4;

  corral_source_split_788#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#4, $bb107#12;

  $bb106#4:
    assume $i343 == 1;
    goto corral_source_split_790#4;

  corral_source_split_790#4:
    assume {:verifier.code 0} true;
    goto $bb108#4;

  $bb108#4:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#4;

  corral_source_split_794#4:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#4;

  corral_source_split_795#4:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#4;

  corral_source_split_796#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#4;

  corral_source_split_797#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#4;

  corral_source_split_798#4:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#4;

  corral_source_split_799#4:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#4;

  corral_source_split_800#4:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#4;

  $bb112#5:
    assume $i355 == 1;
    goto corral_source_split_808#5;

  corral_source_split_808#5:
    assume {:verifier.code 0} true;
    goto $bb114#5;

  $bb114#5:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#5;

  corral_source_split_812#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#5;

  corral_source_split_813#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#5;

  corral_source_split_814#5:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#5;

  corral_source_split_815#5:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#5;

  corral_source_split_816#5:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#5;

  corral_source_split_817#5:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#5;

  corral_source_split_818#5:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#5;

  corral_source_split_819#5:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#5;

  corral_source_split_820#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#5;

  corral_source_split_821#5:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#5;

  $bb87#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#5;

  corral_source_split_722#5:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#5;

  corral_source_split_723#5:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#5;

  corral_source_split_724#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#5;

  corral_source_split_725#5:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#5;

  $bb83#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#5;

  corral_source_split_711#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#5;

  SeqInstr_5#5:
    assume assertsPassed;
    goto SeqInstr_6#5;

  SeqInstr_6#5:
    goto corral_source_split_712#5;

  corral_source_split_712#5:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#5;

  $bb79#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#5;

  corral_source_split_683#5:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#5;

  corral_source_split_684#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#5;

  corral_source_split_685#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#5;

  corral_source_split_686#5:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#5;

  corral_source_split_687#5:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#5;

  corral_source_split_688#5:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#5;

  corral_source_split_689#5:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#5;

  corral_source_split_690#5:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#5;

  corral_source_split_691#5:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#5;

  corral_source_split_692#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#5;

  corral_source_split_693#5:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#5;

  $bb75#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#5;

  corral_source_split_652#5:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#5;

  corral_source_split_653#5:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#5;

  corral_source_split_654#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#5;

  corral_source_split_655#5:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#5;

  $bb71#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#5;

  corral_source_split_641#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#5;

  SeqInstr_2#5:
    assume assertsPassed;
    goto SeqInstr_3#5;

  SeqInstr_3#5:
    goto corral_source_split_642#5;

  corral_source_split_642#5:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#5;

  $bb67#5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#5;

  corral_source_split_622#5:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#5;

  corral_source_split_623#5:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#4;

  $bb110#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#4;

  corral_source_split_804#4:
    assume {:verifier.code 0} true;
    goto $bb111#4;

  $bb111#4:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#4;

  corral_source_split_806#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#4, $bb113#4;

  $bb113#4:
    assume !($i355 == 1);
    goto corral_source_split_810#4;

  corral_source_split_810#4:
    assume {:verifier.code 0} true;
    goto $bb115#4;

  $bb115#4:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#4;

  corral_source_split_823#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#4;

  corral_source_split_824#4:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#3;

  $bb33#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#3;

  corral_source_split_555#3:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#3;

  corral_source_split_556#3:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#3;

  $bb104#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#3;

  corral_source_split_786#3:
    assume {:verifier.code 0} true;
    goto $bb105#3;

  $bb105#3:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#3;

  corral_source_split_788#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#3, $bb107#12;

  $bb106#3:
    assume $i343 == 1;
    goto corral_source_split_790#3;

  corral_source_split_790#3:
    assume {:verifier.code 0} true;
    goto $bb108#3;

  $bb108#3:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#3;

  corral_source_split_794#3:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#3;

  corral_source_split_795#3:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#3;

  corral_source_split_796#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#3;

  corral_source_split_797#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#3;

  corral_source_split_798#3:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#3;

  corral_source_split_799#3:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#3;

  corral_source_split_800#3:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#3;

  $bb112#4:
    assume $i355 == 1;
    goto corral_source_split_808#4;

  corral_source_split_808#4:
    assume {:verifier.code 0} true;
    goto $bb114#4;

  $bb114#4:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#4;

  corral_source_split_812#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#4;

  corral_source_split_813#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#4;

  corral_source_split_814#4:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#4;

  corral_source_split_815#4:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#4;

  corral_source_split_816#4:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#4;

  corral_source_split_817#4:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#4;

  corral_source_split_818#4:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#4;

  corral_source_split_819#4:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#4;

  corral_source_split_820#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#4;

  corral_source_split_821#4:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#4;

  $bb87#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#4;

  corral_source_split_722#4:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#4;

  corral_source_split_723#4:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#4;

  corral_source_split_724#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#4;

  corral_source_split_725#4:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#4;

  $bb83#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#4;

  corral_source_split_711#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#4;

  SeqInstr_5#4:
    assume assertsPassed;
    goto SeqInstr_6#4;

  SeqInstr_6#4:
    goto corral_source_split_712#4;

  corral_source_split_712#4:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#4;

  $bb79#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#4;

  corral_source_split_683#4:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#4;

  corral_source_split_684#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#4;

  corral_source_split_685#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#4;

  corral_source_split_686#4:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#4;

  corral_source_split_687#4:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#4;

  corral_source_split_688#4:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#4;

  corral_source_split_689#4:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#4;

  corral_source_split_690#4:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#4;

  corral_source_split_691#4:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#4;

  corral_source_split_692#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#4;

  corral_source_split_693#4:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#4;

  $bb75#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#4;

  corral_source_split_652#4:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#4;

  corral_source_split_653#4:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#4;

  corral_source_split_654#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#4;

  corral_source_split_655#4:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#4;

  $bb71#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#4;

  corral_source_split_641#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#4;

  SeqInstr_2#4:
    assume assertsPassed;
    goto SeqInstr_3#4;

  SeqInstr_3#4:
    goto corral_source_split_642#4;

  corral_source_split_642#4:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#4;

  $bb67#4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#4;

  corral_source_split_622#4:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#4;

  corral_source_split_623#4:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#3;

  $bb110#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#3;

  corral_source_split_804#3:
    assume {:verifier.code 0} true;
    goto $bb111#3;

  $bb111#3:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#3;

  corral_source_split_806#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#3, $bb113#3;

  $bb113#3:
    assume !($i355 == 1);
    goto corral_source_split_810#3;

  corral_source_split_810#3:
    assume {:verifier.code 0} true;
    goto $bb115#3;

  $bb115#3:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#3;

  corral_source_split_823#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#3;

  corral_source_split_824#3:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#2;

  $bb33#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#2;

  corral_source_split_555#2:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#2;

  corral_source_split_556#2:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#2;

  $bb104#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#2;

  corral_source_split_786#2:
    assume {:verifier.code 0} true;
    goto $bb105#2;

  $bb105#2:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#2;

  corral_source_split_788#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#2, $bb107#12;

  $bb106#2:
    assume $i343 == 1;
    goto corral_source_split_790#2;

  corral_source_split_790#2:
    assume {:verifier.code 0} true;
    goto $bb108#2;

  $bb108#2:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#2;

  corral_source_split_794#2:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#2;

  corral_source_split_795#2:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#2;

  corral_source_split_796#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#2;

  corral_source_split_797#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#2;

  corral_source_split_798#2:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#2;

  corral_source_split_799#2:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#2;

  corral_source_split_800#2:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#2;

  $bb112#3:
    assume $i355 == 1;
    goto corral_source_split_808#3;

  corral_source_split_808#3:
    assume {:verifier.code 0} true;
    goto $bb114#3;

  $bb114#3:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#3;

  corral_source_split_812#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#3;

  corral_source_split_813#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#3;

  corral_source_split_814#3:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#3;

  corral_source_split_815#3:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#3;

  corral_source_split_816#3:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#3;

  corral_source_split_817#3:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#3;

  corral_source_split_818#3:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#3;

  corral_source_split_819#3:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#3;

  corral_source_split_820#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#3;

  corral_source_split_821#3:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#3;

  $bb87#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#3;

  corral_source_split_722#3:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#3;

  corral_source_split_723#3:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#3;

  corral_source_split_724#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#3;

  corral_source_split_725#3:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#3;

  $bb83#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#3;

  corral_source_split_711#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#3;

  SeqInstr_5#3:
    assume assertsPassed;
    goto SeqInstr_6#3;

  SeqInstr_6#3:
    goto corral_source_split_712#3;

  corral_source_split_712#3:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#3;

  $bb79#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#3;

  corral_source_split_683#3:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#3;

  corral_source_split_684#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#3;

  corral_source_split_685#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#3;

  corral_source_split_686#3:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#3;

  corral_source_split_687#3:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#3;

  corral_source_split_688#3:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#3;

  corral_source_split_689#3:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#3;

  corral_source_split_690#3:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#3;

  corral_source_split_691#3:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#3;

  corral_source_split_692#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#3;

  corral_source_split_693#3:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#3;

  $bb75#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#3;

  corral_source_split_652#3:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#3;

  corral_source_split_653#3:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#3;

  corral_source_split_654#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#3;

  corral_source_split_655#3:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#3;

  $bb71#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#3;

  corral_source_split_641#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#3;

  SeqInstr_2#3:
    assume assertsPassed;
    goto SeqInstr_3#3;

  SeqInstr_3#3:
    goto corral_source_split_642#3;

  corral_source_split_642#3:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#3;

  $bb67#3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#3;

  corral_source_split_622#3:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#3;

  corral_source_split_623#3:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#2;

  $bb110#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#2;

  corral_source_split_804#2:
    assume {:verifier.code 0} true;
    goto $bb111#2;

  $bb111#2:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#2;

  corral_source_split_806#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#2, $bb113#2;

  $bb113#2:
    assume !($i355 == 1);
    goto corral_source_split_810#2;

  corral_source_split_810#2:
    assume {:verifier.code 0} true;
    goto $bb115#2;

  $bb115#2:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#2;

  corral_source_split_823#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#2;

  corral_source_split_824#2:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#1;

  $bb33#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_555#1;

  corral_source_split_555#1:
    assume {:verifier.code 0} true;
    $i378 := $sub.i32($i135, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i378);
    goto corral_source_split_556#1;

  corral_source_split_556#1:
    assume {:verifier.code 0} true;
    $i342 := $i378;
    goto $bb104#1;

  $bb104#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_786#1;

  corral_source_split_786#1:
    assume {:verifier.code 0} true;
    goto $bb105#1;

  $bb105#1:
    assume {:verifier.code 0} true;
    $i343 := $sge.i32($i342, 0);
    goto corral_source_split_788#1;

  corral_source_split_788#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb106#1, $bb107#12;

  $bb107#12:
    assume !($i343 == 1);
    goto corral_source_split_792#12;

  corral_source_split_792#12:
    assume {:verifier.code 0} true;
    goto $bb109#12;

  $bb109#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} kfree($p17);
    goto corral_source_split_802#12;

  corral_source_split_802#12:
    assume {:verifier.code 0} true;
    goto $bb7#12;

  $bb7#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} kfree($p13);
    goto corral_source_split_381#12;

  corral_source_split_381#12:
    assume {:verifier.code 0} true;
    goto $bb3#12;

  $bb3#12:
    assume {:verifier.code 0} true;
    $i313 := $sub.i32(0, 12);
    goto $bb103#12;

  $bb106#1:
    assume $i343 == 1;
    goto corral_source_split_790#1;

  corral_source_split_790#1:
    assume {:verifier.code 0} true;
    goto $bb108#1;

  $bb108#1:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i342);
    goto corral_source_split_794#1;

  corral_source_split_794#1:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i344, 8));
    goto corral_source_split_795#1;

  corral_source_split_795#1:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_796#1;

  corral_source_split_796#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p348 := usb_get_serial_port_data($p347);
    goto corral_source_split_797#1;

  corral_source_split_797#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_798#1;

  corral_source_split_798#1:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, urb_pool_size);
    goto corral_source_split_799#1;

  corral_source_split_799#1:
    assume {:verifier.code 0} true;
    $i351 := $sub.i32($i350, 1);
    call {:si_unique_call 204} {:cexpr "j"} boogie_si_record_i32($i351);
    goto corral_source_split_800#1;

  corral_source_split_800#1:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p348, $i342, $i351;
    goto $bb110#1;

  $bb112#2:
    assume $i355 == 1;
    goto corral_source_split_808#2;

  corral_source_split_808#2:
    assume {:verifier.code 0} true;
    goto $bb114#2;

  $bb114#2:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#2;

  corral_source_split_812#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#2;

  corral_source_split_813#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#2;

  corral_source_split_814#2:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#2;

  corral_source_split_815#2:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#2;

  corral_source_split_816#2:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#2;

  corral_source_split_817#2:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#2;

  corral_source_split_818#2:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#2;

  corral_source_split_819#2:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#2;

  corral_source_split_820#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#2;

  corral_source_split_821#2:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#2;

  $bb87#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#2;

  corral_source_split_722#2:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#2;

  corral_source_split_723#2:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#2;

  corral_source_split_724#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#2;

  corral_source_split_725#2:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#2;

  $bb83#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#2;

  corral_source_split_711#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#2;

  SeqInstr_5#2:
    assume assertsPassed;
    goto SeqInstr_6#2;

  SeqInstr_6#2:
    goto corral_source_split_712#2;

  corral_source_split_712#2:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#2;

  $bb79#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#2;

  corral_source_split_683#2:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#2;

  corral_source_split_684#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#2;

  corral_source_split_685#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#2;

  corral_source_split_686#2:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#2;

  corral_source_split_687#2:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#2;

  corral_source_split_688#2:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#2;

  corral_source_split_689#2:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#2;

  corral_source_split_690#2:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#2;

  corral_source_split_691#2:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#2;

  corral_source_split_692#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#2;

  corral_source_split_693#2:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#2;

  $bb75#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#2;

  corral_source_split_652#2:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#2;

  corral_source_split_653#2:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#2;

  corral_source_split_654#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#2;

  corral_source_split_655#2:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#2;

  $bb71#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#2;

  corral_source_split_641#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#2;

  SeqInstr_2#2:
    assume assertsPassed;
    goto SeqInstr_3#2;

  SeqInstr_3#2:
    goto corral_source_split_642#2;

  corral_source_split_642#2:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#2;

  $bb67#2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#2;

  corral_source_split_622#2:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#2;

  corral_source_split_623#2:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#1;

  $bb110#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804#1;

  corral_source_split_804#1:
    assume {:verifier.code 0} true;
    goto $bb111#1;

  $bb111#1:
    assume {:verifier.code 0} true;
    $i355 := $sge.i32($i354, 0);
    goto corral_source_split_806#1;

  corral_source_split_806#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb112#1, $bb113#1;

  $bb113#1:
    assume !($i355 == 1);
    goto corral_source_split_810#1;

  corral_source_split_810#1:
    assume {:verifier.code 0} true;
    goto $bb115#1;

  $bb115#1:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p352);
    goto corral_source_split_823#1;

  corral_source_split_823#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p377);
    goto corral_source_split_824#1;

  corral_source_split_824#1:
    assume {:verifier.code 0} true;
    $i135 := $i353;
    goto $bb33#0;

  $bb33#0:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb112#1:
    assume $i355 == 1;
    goto corral_source_split_808#1;

  corral_source_split_808#1:
    assume {:verifier.code 0} true;
    goto $bb114#1;

  $bb114#1:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p352, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_812#1;

  corral_source_split_812#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p357 := list_first($p356);
    goto corral_source_split_813#1;

  corral_source_split_813#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_del($p357);
    goto corral_source_split_814#1;

  corral_source_split_814#1:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_815#1;

  corral_source_split_815#1:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(0, 1));
    goto corral_source_split_816#1;

  corral_source_split_816#1:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p359);
    goto corral_source_split_817#1;

  corral_source_split_817#1:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_818#1;

  corral_source_split_818#1:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_819#1;

  corral_source_split_819#1:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p360);
    goto corral_source_split_820#1;

  corral_source_split_820#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} kfree($p363);
    goto corral_source_split_821#1;

  corral_source_split_821#1:
    assume {:verifier.code 0} true;
    $p269, $i270, $i271, $p272 := $p352, $i353, $i354, $p362;
    goto $bb87#1;

  $bb87#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_722#1;

  corral_source_split_722#1:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p272, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_723#1;

  corral_source_split_723#1:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_724#1;

  corral_source_split_724#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p365);
    goto corral_source_split_725#1;

  corral_source_split_725#1:
    assume {:verifier.code 0} true;
    $p255, $i256, $i257, $p258 := $p269, $i270, $i271, $p272;
    goto $bb83#1;

  $bb83#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711#1;

  corral_source_split_711#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p258);
    goto SeqInstr_4#12, SeqInstr_5#1;

  SeqInstr_5#1:
    assume assertsPassed;
    goto SeqInstr_6#1;

  SeqInstr_6#1:
    goto corral_source_split_712#1;

  corral_source_split_712#1:
    assume {:verifier.code 0} true;
    $p235, $i236, $i237 := $p255, $i256, $i257;
    goto $bb79#1;

  $bb79#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_683#1;

  corral_source_split_683#1:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p235, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_684#1;

  corral_source_split_684#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p367 := list_first($p366);
    goto corral_source_split_685#1;

  corral_source_split_685#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} list_del($p367);
    goto corral_source_split_686#1;

  corral_source_split_686#1:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_687#1;

  corral_source_split_687#1:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(0, 1));
    goto corral_source_split_688#1;

  corral_source_split_688#1:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_689#1;

  corral_source_split_689#1:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_690#1;

  corral_source_split_690#1:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_691#1;

  corral_source_split_691#1:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p370);
    goto corral_source_split_692#1;

  corral_source_split_692#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} kfree($p373);
    goto corral_source_split_693#1;

  corral_source_split_693#1:
    assume {:verifier.code 0} true;
    $p207, $i208, $i209, $p210 := $p235, $i236, $i237, $p372;
    goto $bb75#1;

  $bb75#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652#1;

  corral_source_split_652#1:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p210, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_653#1;

  corral_source_split_653#1:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_654#1;

  corral_source_split_654#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} kfree($p375);
    goto corral_source_split_655#1;

  corral_source_split_655#1:
    assume {:verifier.code 0} true;
    $p193, $i194, $i195, $p196 := $p207, $i208, $i209, $p210;
    goto $bb71#1;

  $bb71#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_641#1;

  corral_source_split_641#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} usb_free_urb($p196);
    goto SeqInstr_1#12, SeqInstr_2#1;

  SeqInstr_2#1:
    assume assertsPassed;
    goto SeqInstr_3#1;

  SeqInstr_3#1:
    goto corral_source_split_642#1;

  corral_source_split_642#1:
    assume {:verifier.code 0} true;
    $p173, $i174, $i175 := $p193, $i194, $i195;
    goto $bb67#1;

  $bb67#1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_622#1;

  corral_source_split_622#1:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i175, 1);
    call {:si_unique_call 165} {:cexpr "j"} boogie_si_record_i32($i376);
    goto corral_source_split_623#1;

  corral_source_split_623#1:
    assume {:verifier.code 0} true;
    $p352, $i353, $i354 := $p173, $i174, $i376;
    goto $bb110#0;

  $bb110#0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_1#12:
    assume !assertsPassed;
    return;

  SeqInstr_4#12:
    assume !assertsPassed;
    return;

  $bb20#12:
    assume $i86 == 1;
    goto corral_source_split_493#12;

  corral_source_split_493#12:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_494#12;

  corral_source_split_494#12:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_495#12;

  corral_source_split_495#12:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_496#12;

  corral_source_split_496#12:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_497#12;

  corral_source_split_497#12:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_498#12;

  corral_source_split_498#12:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_499#12;

  corral_source_split_499#12:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_500#12;

  corral_source_split_500#12:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p17, $mul.ref(0, 1));
    goto corral_source_split_501#12;

  corral_source_split_501#12:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_502#12;

  corral_source_split_502#12:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_503#12;

  corral_source_split_503#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_33 := dev_err.ref.ref.ref.i32($p89, .str.49, $p93, $i96);
    goto corral_source_split_504#12;

  corral_source_split_504#12:
    assume {:verifier.code 0} true;
    goto $bb11#12;

  $bb18#12:
    assume $i70 == 1;
    goto corral_source_split_473#12;

  corral_source_split_473#12:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_474#12;

  corral_source_split_474#12:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_475#12;

  corral_source_split_475#12:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_476#12;

  corral_source_split_476#12:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_477#12;

  corral_source_split_477#12:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_478#12;

  corral_source_split_478#12:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_479#12;

  corral_source_split_479#12:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_480#12;

  corral_source_split_480#12:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.6, $p1);
    goto corral_source_split_481#12;

  corral_source_split_481#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_32 := dev_err.ref.ref.ref.i32($p73, .str.48, $p77, $i78);
    goto corral_source_split_482#12;

  corral_source_split_482#12:
    assume {:verifier.code 0} true;
    goto $bb11#12;

  $bb16#12:
    assume $i59 == 1;
    goto corral_source_split_458#12;

  corral_source_split_458#12:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_459#12;

  corral_source_split_459#12:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_460#12;

  corral_source_split_460#12:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_461#12;

  corral_source_split_461#12:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_462#12;

  corral_source_split_462#12:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_463#12;

  corral_source_split_463#12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_464#12;

  corral_source_split_464#12:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_465#12;

  corral_source_split_465#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_31 := dev_err.ref.ref.ref.i32($p62, .str.47, $p66, $i58);
    goto corral_source_split_466#12;

  corral_source_split_466#12:
    assume {:verifier.code 0} true;
    goto $bb11#12;

  $bb12#12:
    assume $i35 == 1;
    goto corral_source_split_431#12;

  corral_source_split_431#12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_432#12;

  corral_source_split_432#12:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_433#12;

  corral_source_split_433#12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_434#12;

  corral_source_split_434#12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_435#12;

  corral_source_split_435#12:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_436#12;

  corral_source_split_436#12:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_437#12;

  corral_source_split_437#12:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_438#12;

  corral_source_split_438#12:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p1);
    goto corral_source_split_439#12;

  corral_source_split_439#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_29 := dev_err.ref.ref.ref.i32($p38, .str.46, $p42, $i43);
    goto corral_source_split_440#12;

  corral_source_split_440#12:
    assume {:verifier.code 0} true;
    goto $bb11#12;

  $bb9#12:
    assume $i25 == 1;
    goto corral_source_split_391#12;

  corral_source_split_391#12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_392#12;

  corral_source_split_392#12:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_393#12;

  corral_source_split_393#12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_394#12;

  corral_source_split_394#12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_395#12;

  corral_source_split_395#12:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_396#12;

  corral_source_split_396#12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_397#12;

  corral_source_split_397#12:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_398#12;

  corral_source_split_398#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_25 := dev_err.ref.ref.ref.i32($p28, .str.45, $p32, $i24);
    goto corral_source_split_399#12;

  corral_source_split_399#12:
    assume {:verifier.code 0} true;
    goto $bb11#12;

  $bb11#12:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_405#12;

  corral_source_split_405#12:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_406#12;

  corral_source_split_406#12:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p315, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_407#12;

  corral_source_split_407#12:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_408#12;

  corral_source_split_408#12:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_409#12;

  corral_source_split_409#12:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p318, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_410#12;

  corral_source_split_410#12:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_411#12;

  corral_source_split_411#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_26 := dev_err.ref.ref.ref($p316, .str.60, $p320);
    goto corral_source_split_412#12;

  corral_source_split_412#12:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_413#12;

  corral_source_split_413#12:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_414#12;

  corral_source_split_414#12:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_415#12;

  corral_source_split_415#12:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_416#12;

  corral_source_split_416#12:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_417#12;

  corral_source_split_417#12:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p326, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_418#12;

  corral_source_split_418#12:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_419#12;

  corral_source_split_419#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_27 := dev_err.ref.ref.ref($p324, .str.61, $p328);
    goto corral_source_split_420#12;

  corral_source_split_420#12:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_421#12;

  corral_source_split_421#12:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_422#12;

  corral_source_split_422#12:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p331, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_423#12;

  corral_source_split_423#12:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(8, 1));
    goto corral_source_split_424#12;

  corral_source_split_424#12:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.0, $p333);
    goto corral_source_split_425#12;

  corral_source_split_425#12:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p334, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_426#12;

  corral_source_split_426#12:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.0, $p335);
    goto corral_source_split_427#12;

  corral_source_split_427#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_28 := dev_err.ref.ref.ref($p332, .str.62, $p336);
    goto corral_source_split_428#12;

  corral_source_split_428#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} kfree($p17);
    goto corral_source_split_429#12;

  corral_source_split_429#12:
    assume {:verifier.code 0} true;
    $i313 := $sub.i32(0, 19);
    goto $bb103#12;

  $bb103#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_784#12;

  corral_source_split_784#12:
    assume {:verifier.code 0} true;
    $r := $i313;
    return;
}



const whiteheat_release: ref;

axiom whiteheat_release == $sub.ref(0, 155443);

procedure whiteheat_release($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation whiteheat_release($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, debug);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p7 := usb_get_serial_port_data($p6);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} kfree($p7);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(26, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    call $i9, $i10, $i11, $i12, $i13, $p15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $i62 := whiteheat_release_loop_$bb8($p0, $p8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $i62);
    goto $bb8_last;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p8);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, $i11);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i9);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref($i13, 8));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p17 := usb_get_serial_port_data($p16);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 416)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p21, $p23;
    goto $bb14;

  $bb14:
    call $p24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $p39 := whiteheat_release_loop_$bb14($p18, $p24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $p39);
    goto $bb14_last;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p24);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i26, $i28);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 416)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p42, $p44;
    goto $bb21;

  $bb21:
    call $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60 := whiteheat_release_loop_$bb21($p18, $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60);
    goto $bb21_last;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p45);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p18, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i47, $i49);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p18);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} kfree($p61);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i9, 1);
    call {:si_unique_call 223} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i9 := $i62;
    goto corral_source_split_919_dummy;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} list_del($p45);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p45);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p53);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} kfree($p56);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} kfree($p58);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} usb_free_urb($p55);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p46, $p60;
    goto corral_source_split_915_dummy;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} list_del($p24);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p24);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p32);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} kfree($p35);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} kfree($p37);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} usb_free_urb($p34);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p25, $p39;
    goto corral_source_split_884_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_44 := printk.ref.ref.ref(.str.9, .str.10, .str.77);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_915_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_884_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_919_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;
}



const whiteheat_open: ref;

axiom whiteheat_open == $sub.ref(0, 156475);

procedure whiteheat_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $i12: i32;
  var $i53: i32;
  var $i54: i1;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, debug);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i10 := start_command_port($p9);
    call {:si_unique_call 226} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $ne.ref($p0, $0.ref);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i18 := firm_open($p1);
    call {:si_unique_call 228} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i22 := firm_purge($p1, 3);
    call {:si_unique_call 231} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i27 := $ne.ref($p0, $0.ref);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_47 := usb_clear_halt($p31, $i35);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_48 := usb_clear_halt($p40, $i44);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i46 := start_port_read($p1);
    call {:si_unique_call 238} {:cexpr "retval"} boogie_si_record_i32($i46);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, debug);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_51 := printk.ref.ref.ref.i32(.str.23, .str.10, .str.21, $i12);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_49 := dev_err.ref.ref.ref.i32($p48, .str.22, .str.21, $i46);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_50 := firm_close($p1);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} stop_command_port($p52);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb10;

  $bb21:
    assume $i27 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} firm_setup_port($p0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_46 := firm_close($p1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} stop_command_port($p26);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i12 := $i22;
    goto $bb10;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} stop_command_port($p21);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb10;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(580, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 17));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 16);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i17);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb10;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_45 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.21, $i6);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_close: ref;

axiom whiteheat_close == $sub.ref(0, 157507);

procedure whiteheat_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, debug);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_53 := firm_report_tx_done($p0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_54 := firm_close($p0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} mutex_lock_nested($p11, 0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} spin_lock_irq($p12);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p15, $p17;
    goto $bb8;

  $bb8:
    call $p18, $p19, $i20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33 := whiteheat_close_loop_$bb8($p2, $p18, $p19, $i20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33);
    goto $bb8_last;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p36, $p38;
    goto $bb15;

  $bb15:
    call $p39, $p40, $i41, $p42, $i43, $i44, $p45, $p46, $p47 := whiteheat_close_loop_$bb15($p2, $p39, $p40, $i41, $p42, $i43, $i44, $p45, $p46, $p47);
    goto $bb15_last;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p39);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i41, $i43);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p53, $p54 := $p50, $p52;
    goto $bb22;

  $bb22:
    call $p53, $p54, $i55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68 := whiteheat_close_loop_$bb22($p2, $p53, $p54, $i55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68);
    goto $bb22_last;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p53);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i55, $i57);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} spin_unlock_irq($p69);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(248, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} mutex_unlock($p70);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} stop_command_port($p72);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p53);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} list_del($p53);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} spin_unlock_irq($p64);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} usb_kill_urb($p63);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} spin_lock_irq($p65);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} list_add($p53, $p66);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p53, $p54 := $p54, $p68;
    goto corral_source_split_1109_dummy;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} list_move($p39, $p45);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p40, $p47;
    goto corral_source_split_1077_dummy;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p18);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(0, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} list_del($p18);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} spin_unlock_irq($p29);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} usb_kill_urb($p28);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} spin_lock_irq($p30);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} list_add($p18, $p31);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p19, $p33;
    goto corral_source_split_1056_dummy;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_52 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.44, $i7);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1109_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1077_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;

  corral_source_split_1056_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;
}



const whiteheat_write: ref;

axiom whiteheat_write == $sub.ref(0, 158539);

procedure whiteheat_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation whiteheat_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i23: i32;
  var $i18: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "whiteheat_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p6 := usb_get_serial_port_data($p1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, debug);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i3, 0;
    goto $bb19;

  $bb19:
    call $i19, $i20, $i21, $i22, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $i63, $i75, $i76, $p77, $p78, $i79, $p80, $p81, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := whiteheat_write_loop_$bb19($p1, $p2, $p5, $p7, $i19, $i20, $i21, $i22, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p62, $i63, $i75, $i76, $p77, $p78, $i79, $p80, $p81, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb19_last;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i19, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p25 := spinlock_check($p24);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i26 := _raw_spin_lock_irqsave($p25);
    call {:si_unique_call 269} {:cexpr "flags"} boogie_si_record_i64($i26);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i28 := list_empty($p27);
    call {:si_unique_call 271} {:cexpr "tmp___10"} boogie_si_record_i32($i28);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i20, $i26;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p34 := list_first($p33);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} list_del($p34);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} spin_unlock_irqrestore($p35, $i26);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i19, $i42);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i19;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    call {:si_unique_call 277} {:cexpr "__len"} boogie_si_record_i64($i47);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i20);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p2, $mul.ref($i50, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 278} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p49, $p51, $i47, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, debug);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} usb_serial_debug_data($i52, $p53, .str.78, $i46, $p55);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p40, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p57);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p40, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i46);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i60 := usb_submit_urb($p40, 32);
    call {:si_unique_call 281} {:cexpr "result"} boogie_si_record_i32($i60);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p62, $i63 := $p34, $i60;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i61 == 1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i20, $i46);
    call {:si_unique_call 283} {:cexpr "sent"} boogie_si_record_i32($i75);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i19, $i46);
    call {:si_unique_call 284} {:cexpr "count"} boogie_si_record_i32($i76);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p78 := spinlock_check($p77);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i79 := _raw_spin_lock_irqsave($p78);
    call {:si_unique_call 292} {:cexpr "flags"} boogie_si_record_i64($i79);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} list_add($p34, $p80);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore($p81, $i79);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i76, $i75;
    goto $bb57_dummy;

  $bb39:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_57 := dev_err.ref.ref.ref.i32($p64, .str.80, .str.78, $i63);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p67 := spinlock_check($p66);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i68 := _raw_spin_lock_irqsave($p67);
    call {:si_unique_call 287} {:cexpr "flags"} boogie_si_record_i64($i68);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p69, $i70 := $p62, $i63;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p71, $i72 := $p69, $i70;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} list_add($p71, $p73);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} spin_unlock_irqrestore($p74, $i68);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i23 := $i72;
    goto $bb24;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 276} {:cexpr "bytes"} boogie_si_record_i32($i45);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb38;

  $bb33:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} spin_unlock_irqrestore($p32, $i31);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb24;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, debug);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb17;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_56 := printk.ref.ref.ref(.str.79, .str.10, .str.78);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_55 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.78, $i12);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb57_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;
}



const whiteheat_write_room: ref;

axiom whiteheat_write_room == $sub.ref(0, 159571);

procedure whiteheat_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation whiteheat_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i25: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, debug);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p13 := spinlock_check($p12);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 299} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p17, 0;
    goto $bb16;

  $bb16:
    call $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i26, $p27, $p28 := whiteheat_write_room_loop_$bb16($p5, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i26, $p27, $p28);
    goto $bb16_last;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i24 := $i19;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} spin_unlock_irqrestore($p29, $i14);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i25, $i31);
    call {:si_unique_call 302} {:cexpr "room"} boogie_si_record_i32($i32);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, debug);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_59 := printk.ref.ref.ref.i32(.str.82, .str.10, .str.81, $i32);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i19, 1);
    call {:si_unique_call 300} {:cexpr "room"} boogie_si_record_i32($i26);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p28, $i26;
    goto corral_source_split_1271_dummy;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_58 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.81, $i10);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1271_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;
}



const whiteheat_ioctl: ref;

axiom whiteheat_ioctl == $sub.ref(0, 160603);

procedure whiteheat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation whiteheat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 305} {:cexpr "whiteheat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 306} {:cexpr "whiteheat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, debug);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 21534);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 515);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.7;
    call {:si_unique_call 308} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p15, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_7;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, 11);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p22, $i21);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, $i25);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p27, 192);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p30, $i29);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p31, 0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, 460800);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p33, 7500);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p34, 7500);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} might_fault();
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i36 := _copy_to_user($p7, $p35, 72);
    call {:si_unique_call 311} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 312} {:cexpr "tmp"} boogie_si_record_i32($i37);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 14);
    goto $bb17;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_60 := printk.ref.ref.ref.i32.i32(.str.83, .str.10, .str.84, $i12, $i1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_set_termios: ref;

axiom whiteheat_set_termios == $sub.ref(0, 161635);

procedure whiteheat_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_set_termios($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} firm_setup_port($p0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    return;
}



const whiteheat_break_ctl: ref;

axiom whiteheat_break_ctl == $sub.ref(0, 162667);

procedure whiteheat_break_ctl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_break_ctl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} {:cexpr "whiteheat_break_ctl:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_61 := firm_set_break($p4, $i5);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    return;
}



const whiteheat_chars_in_buffer: ref;

axiom whiteheat_chars_in_buffer == $sub.ref(0, 163699);

procedure whiteheat_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation whiteheat_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i25: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, debug);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p13 := spinlock_check($p12);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 320} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p17, 0;
    goto $bb16;

  $bb16:
    call $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p34, $p35 := whiteheat_chars_in_buffer_loop_$bb16($p5, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p34, $p35);
    goto $bb16_last;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i24 := $i19;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} spin_unlock_irqrestore($p36, $i14);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, debug);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40 := $i25;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_63 := printk.ref.ref.ref.i32(.str.82, .str.10, .str.87, $i25);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p18);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i19, $i32);
    call {:si_unique_call 321} {:cexpr "chars"} boogie_si_record_i32($i33);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p35, $i33;
    goto corral_source_split_1404_dummy;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_62 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.87, $i10);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1404_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;
}



const whiteheat_throttle: ref;

axiom whiteheat_throttle == $sub.ref(0, 164731);

procedure whiteheat_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation whiteheat_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, debug);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_lock_irq($p12);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} spin_unlock_irq($p19);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_64 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.88, $i10);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_unthrottle: ref;

axiom whiteheat_unthrottle == $sub.ref(0, 165763);

procedure whiteheat_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation whiteheat_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, debug);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_lock_irq($p12);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    call {:si_unique_call 331} {:cexpr "actually_throttled"} boogie_si_record_i32($i16);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $sub.i32(0, 4));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} spin_unlock_irq($p23);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i16, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} rx_data_softint($p25);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_65 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.89, $i10);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_tiocmget: ref;

axiom whiteheat_tiocmget == $sub.ref(0, 166795);

procedure whiteheat_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, debug);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_67 := firm_get_dtr_rts($p3);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 2);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i19, 4);
    call {:si_unique_call 338} {:cexpr "modem_signals"} boogie_si_record_i32($i25);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i18 := $or.i32(0, 2);
    call {:si_unique_call 337} {:cexpr "modem_signals"} boogie_si_record_i32($i18);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_66 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.85, $i10);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_tiocmset: ref;

axiom whiteheat_tiocmset == $sub.ref(0, 167827);

procedure whiteheat_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation whiteheat_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "whiteheat_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 340} {:cexpr "whiteheat_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, debug);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i1, 4);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i1, 2);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i2, 4);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i2, 2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_69 := firm_set_dtr($p5, $i50);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_70 := firm_set_rts($p5, $i56);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $sub.i32(0, 2));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 3));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 1);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_68 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.86, $i12);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_read_callback: ref;

axiom whiteheat_read_callback == $sub.ref(0, 168859);

procedure whiteheat_read_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation whiteheat_read_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p6 := usb_get_serial_port_data($p3);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 346} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, debug);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} spin_lock($p16);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p18 := urb_to_wrap($p0, $p17);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i19 := $ne.ref($p18, $0.ref);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} spin_unlock($p20);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_72 := dev_err.ref.ref.ref($p21, .str.91, .str.90);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} list_del($p23);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} spin_unlock($p24);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i9, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, debug);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} usb_serial_debug_data($i33, $p34, .str.90, $i36, $p5);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} spin_lock($p37);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} list_add_tail($p38, $p39);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} spin_unlock($p52);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_74 := schedule_work($p53);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb22:
    assume $i44 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 2);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} spin_unlock($p51);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, debug);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} spin_lock($p29);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} list_add($p30, $p31);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} spin_unlock($p32);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_73 := printk.ref.ref.ref.i32(.str.92, .str.10, .str.90, $i9);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_71 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.90, $i14);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const whiteheat_write_callback: ref;

axiom whiteheat_write_callback == $sub.ref(0, 169891);

procedure whiteheat_write_callback($p0: ref);
  free requires assertsPassed;



implementation whiteheat_write_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 365} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, debug);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} spin_lock($p14);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p16 := urb_to_wrap($p0, $p15);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i17 := $ne.ref($p16, $0.ref);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} spin_unlock($p18);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_76 := dev_err.ref.ref.ref($p19, .str.91, .str.93);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} list_move($p21, $p22);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} spin_unlock($p23);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i7, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} usb_serial_port_softint($p3);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, debug);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_77 := printk.ref.ref.ref.i32(.str.94, .str.10, .str.93, $i7);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_75 := printk.ref.ref.ref.i32(.str.20, .str.10, .str.93, $i12);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_get_serial_port_data: ref;

axiom usb_get_serial_port_data == $sub.ref(0, 170923);

procedure usb_get_serial_port_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_port_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 171955);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} _raw_spin_lock($p2);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    return;
}



const urb_to_wrap: ref;

axiom urb_to_wrap == $sub.ref(0, 172987);

procedure urb_to_wrap($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation urb_to_wrap($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p4 := $p3;
    goto $bb1;

  $bb1:
    call $p4, $i5, $i6, $i7, $p8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p16, $p18, $p19 := urb_to_wrap_loop_$bb1($p0, $p1, $p4, $i5, $i6, $i7, $p8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p16, $p18, $p19);
    goto $bb1_last;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i5, $i6);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(0, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p16 := $p4;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p4 := $p19;
    goto corral_source_split_1768_dummy;

  $bb7:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb9;

  corral_source_split_1768_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 174019);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} _raw_spin_unlock($p2);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    return;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 175051);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __list_del_entry($p0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} list_add($p0, $p1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_port_softint: ref;

axiom usb_serial_port_softint == $sub.ref(0, 176083);

procedure usb_serial_port_softint($p0: ref);
  free requires assertsPassed;



implementation usb_serial_port_softint($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 177115);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 178147);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __list_add($p0, $p1, $p3);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 179179);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 180211);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 181243);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 182275);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb6;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 183307);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 184339);

procedure usb_serial_debug_data($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation usb_serial_debug_data($i0: i32, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i14: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "usb_serial_debug_data:arg:debug"} boogie_si_record_i32($i0);
    call {:si_unique_call 382} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i3);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i0, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_78 := dev_printk.ref.ref.ref.ref.i32(.str.73, $p1, .str.74, $p2, $i3);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    call $i7, $i8, $i9, $p10, $i11, $i12, $i14, vslice_dummy_var_79 := usb_serial_debug_data_loop_$bb3($i3, $p4, $i7, $i8, $i9, $p10, $i11, $i12, $i14, vslice_dummy_var_79);
    goto $bb3_last;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, $i3);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_80 := printk.ref(.str.76);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p4, $mul.ref($i9, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_79 := printk.ref.i32(.str.75, $i12);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i7, 1);
    call {:si_unique_call 385} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto corral_source_split_1831_dummy;

  corral_source_split_1831_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 185371);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __list_add($p0, $p3, $p1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 186403);

procedure schedule_work($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 388} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 187435);

procedure dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const firm_set_dtr: ref;

axiom firm_set_dtr == $sub.ref(0, 188467);

procedure firm_set_dtr($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_set_dtr($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 393} {:cexpr "firm_set_dtr:arg:onoff"} boogie_si_record_i8($i1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i17 := firm_send_command($p0, 5, $p16, 2);
    call {:si_unique_call 395} {:cexpr "tmp___7"} boogie_si_record_i32($i17);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const firm_set_rts: ref;

axiom firm_set_rts == $sub.ref(0, 189499);

procedure firm_set_rts($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_set_rts($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 397} {:cexpr "firm_set_rts:arg:onoff"} boogie_si_record_i8($i1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i17 := firm_send_command($p0, 4, $p16, 2);
    call {:si_unique_call 399} {:cexpr "tmp___7"} boogie_si_record_i32($i17);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const firm_send_command: ref;

axiom firm_send_command == $sub.ref(0, 190531);

procedure firm_send_command($p0: ref, $i1: i8, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_send_command($p0: ref, $i1: i8, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i1;
  var $i64: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i65: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i1;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $i44: i32;
  var $p107: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 401} {:cexpr "firm_send_command:arg:command"} boogie_si_record_i8($i1);
    call {:si_unique_call 402} {:cexpr "firm_send_command:arg:datasize"} boogie_si_record_i8($i3);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, debug);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p14 := usb_get_serial_port_data($p13);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} mutex_lock_nested($p16, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i3);
    call {:si_unique_call 406} {:cexpr "__len"} boogie_si_record_i64($i23);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p21, $mul.ref(1, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 407} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p24, $p2, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i3);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i26);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p33);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p13, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i39 := usb_submit_urb($p38, 16);
    call {:si_unique_call 409} {:cexpr "retval"} boogie_si_record_i32($i39);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i47 := $ne.i8($i46, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call {:si_unique_call 412} $p48 := devirtbounce.1(0, current_task);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p49, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p51, $p48);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p52, autoremove_wake_function);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p55, $p53);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p58, $p56);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i59 := 500;
    goto $bb23;

  $bb23:
    call $i59, $p60, $p61, $i62, $i63, $i64, $i66, $i67, $i68 := firm_send_command_loop_$bb23($p4, $p15, $i59, $p60, $p61, $i62, $i63, $i64, $i66, $i67, $i68);
    goto $bb23_last;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(176, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} prepare_to_wait($p60, $p4, 2);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i63 := $ne.i8($i62, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i64 := $i59;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i66 := schedule_timeout($i59);
    call {:si_unique_call 416} {:cexpr "__ret___0"} boogie_si_record_i64($i66);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i65 := $i68;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(176, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} finish_wait($p69, $p4);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i70 := $i65;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    call {:si_unique_call 417} {:cexpr "t"} boogie_si_record_i32($i71);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i72 == 1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p13, $mul.ref(0, 2328)), $mul.ref(928, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} usb_kill_urb($p74);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 17);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 16);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} mutex_unlock($p107);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb59:
    assume $i92 == 1;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, debug);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i1);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 10);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i97 == 1);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb71, $bb72;

  $bb72:
    assume !(0 == 1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb71:
    assume 0 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p98 := usb_get_serial_port_data($p0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i100 := $uge.i64(1, 64);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i100 == 1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p99, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 424} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p104, $p106, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i100 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p99, $mul.ref(0, 416)), $mul.ref(73, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 423} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p101, $p103, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb68:
    assume $i97 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb63:
    assume $i94 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_85 := printk.ref.ref.ref(.str.30, .str.10, .str.26);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb49:
    assume $i85 == 1;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, debug);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 5);
    goto $bb17;

  $bb53:
    assume $i87 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_84 := printk.ref.ref.ref(.str.29, .str.10, .str.26);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb39:
    assume $i78 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, debug);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 110);
    goto $bb17;

  $bb43:
    assume $i80 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_83 := printk.ref.ref.ref(.str.28, .str.10, .str.26);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb36:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i59 := $i66;
    goto $bb31_dummy;

  $bb25:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb27;

  $bb19:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i70 := 500;
    goto $bb35;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, debug);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb17;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_82 := printk.ref.ref.ref(.str.27, .str.10, .str.26);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_81 := printk.ref.ref.ref.i32(.str.25, .str.10, .str.26, $i7);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb31_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 191563);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 192595);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 193627);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 426} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 194659);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 195691);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 196723);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 431} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 432} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 197755);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 198787);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 199819);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    return;
}



const firm_get_dtr_rts: ref;

axiom firm_get_dtr_rts == $sub.ref(0, 200851);

procedure firm_get_dtr_rts($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_get_dtr_rts($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i4, $i9);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i15 := firm_send_command($p0, 10, $p14, 1);
    call {:si_unique_call 435} {:cexpr "tmp___7"} boogie_si_record_i32($i15);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 201883);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} _raw_spin_lock_irq($p2);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 202915);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    return;
}



const rx_data_softint: ref;

axiom rx_data_softint == $sub.ref(0, 203947);

procedure rx_data_softint($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_data_softint($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i66: i64;
  var $p71: ref;
  var $p72: ref;
  var $i32: i64;
  var $i33: i32;
  var $p73: ref;
  var $i74: i1;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.i64(0, $zext.i32.i64($p2i.ref.i32($add.ref($add.ref($0.ref, $mul.ref(0, 416)), $mul.ref(128, 1))))), 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(8, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p7 := tty_port_tty_get($p6);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p9 := spinlock_check($p8);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 441} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i22, $p23, $p24, $i25 := $i10, $p19, $p21, 0;
    goto $bb13;

  $bb13:
    call $i22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p62, $p63, $i64, $p65, $p67, $p68, $i69, $p70, $i66, $p71, $p72, vslice_dummy_var_86 := rx_data_softint_loop_$bb13($p3, $p5, $p7, $i22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p62, $p63, $i64, $p65, $p67, $p68, $i69, $p70, $i66, $p71, $p72, vslice_dummy_var_86);
    goto $bb13_last;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p23);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i26, $i28);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i22, $i25;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i30, $i31;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} spin_unlock_irqrestore($p73, $i32);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i33, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} tty_kref_put($p7);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i74 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} tty_flip_buffer_push($p7);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} list_del($p23);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_irqrestore($p34, $i22);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p23);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i40 := $ne.ref($p7, $0.ref);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i25;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p56);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i58 := usb_submit_urb($p39, 32);
    call {:si_unique_call 451} {:cexpr "result"} boogie_si_record_i32($i58);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p68 := spinlock_check($p67);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i69 := _raw_spin_lock_irqsave($p68);
    call {:si_unique_call 459} {:cexpr "flags"} boogie_si_record_i64($i69);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} list_add($p23, $p70);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i22, $p23, $p24, $i25 := $i66, $p24, $p72, $i52;
    goto corral_source_split_2193_dummy;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_86 := dev_err.ref.ref.ref.i32($p60, .str.63, .str.64, $i58);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p63 := spinlock_check($p62);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i64 := _raw_spin_lock_irqsave($p63);
    call {:si_unique_call 455} {:cexpr "flags"} boogie_si_record_i64($i64);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} list_add($p23, $p65);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb35;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i25;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb24;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i49 := tty_insert_flip_string($p7, $p45, $i48);
    call {:si_unique_call 448} {:cexpr "tmp___10"} boogie_si_record_i32($i49);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i25, $i49);
    call {:si_unique_call 449} {:cexpr "sent"} boogie_si_record_i32($i50);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb23;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} spin_unlock_irqrestore($p16, $i10);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2193_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 204979);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p1 := external_alloc();
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 206011);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 207043);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 464} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 208075);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 209107);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 210139);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 211171);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 212203);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 470} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 471} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 213235);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 214267);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 215299);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    return;
}



const firm_set_break: ref;

axiom firm_set_break == $sub.ref(0, 216331);

procedure firm_set_break($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_set_break($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 476} {:cexpr "firm_set_break:arg:onoff"} boogie_si_record_i8($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i17 := firm_send_command($p0, 6, $p16, 2);
    call {:si_unique_call 478} {:cexpr "tmp___7"} boogie_si_record_i32($i17);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const firm_setup_port: ref;

axiom firm_setup_port == $sub.ref(0, 217363);

procedure firm_setup_port($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_setup_port($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i8;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $i115: i8;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i126: i32;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $p133: ref;
  var $i134: i32;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p1 := $alloc($mul.ref(13, $zext.i32.i64(1)));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(1064, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(456, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 480} {:cexpr "cflag"} boogie_si_record_i32($i8);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i8, 48);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i8, 48);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 16);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i8, 48);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 32);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 8);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, debug);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i8, 256);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i32 == 1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 110);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, debug);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i8, 64);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(6, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, debug);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i8, $sub.i32(0, 2147483648));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i61 == 1);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, debug);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(456, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 4096);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i96 == 1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(8, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 110);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, debug);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(456, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p106, $mul.ref(0, 44)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(10, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i109);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2568)), $mul.ref(456, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 44)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(9, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, $i115);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, debug);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i126 := tty_get_baud_rate($p0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i126);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, debug);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} tty_encode_baud_rate($p0, $i134, $i136);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(12, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_94 := firm_send_command($p4, 3, $p138, 13);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    return;

  $bb96:
    assume $i129 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_93 := printk.ref.ref.ref.i32(.str.43, .str.10, .str.32, $i131);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb89:
    assume $i118 == 1;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(10, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(9, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_92 := printk.ref.ref.ref.i32.i32(.str.42, .str.10, .str.32, $i121, $i124);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb82:
    assume $i100 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(8, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_91 := printk.ref.ref.ref.i32(.str.41, .str.10, .str.32, $i103);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb77:
    assume $i96 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(8, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 98);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb60:
    assume $i65 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 2);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $p71 := .str.36;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 16);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $p77 := .str.36;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 128);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $p83 := .str.36;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 8);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $p89 := .str.36;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_90 := printk.ref.ref.ref.ref.ref.ref.ref(.str.40, .str.10, .str.32, $p89, $p83, $p77, $p71);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i88 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p89 := .str.39;
    goto $bb73;

  $bb68:
    assume $i82 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p83 := .str.38;
    goto $bb70;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p77 := .str.37;
    goto $bb67;

  $bb62:
    assume $i70 == 1;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p71 := .str.35;
    goto $bb64;

  $bb55:
    assume $i61 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $sub.i8(0, 120));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb50:
    assume $i55 == 1;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(6, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_89 := printk.ref.ref.ref.i32(.str.34, .str.10, .str.32, $i58);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(6, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume $i45 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_88 := printk.ref.ref.ref.i32(.str.33, .str.10, .str.32, $i48);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb26:
    assume $i32 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i8, 1073741824);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i34 == 1);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i8, 512);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i40 == 1);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 101);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i40 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 111);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i8, 512);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i36 == 1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 48);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 49);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb21:
    assume $i26 == 1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_87 := printk.ref.ref.ref.i32(.str.31, .str.10, .str.32, $i29);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 7);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 6);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 5);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 218395);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 492} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_encode_baud_rate: ref;

axiom tty_encode_baud_rate == $sub.ref(0, 219427);

procedure tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} {:cexpr "tty_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 494} {:cexpr "tty_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 220459);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 221491);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 222523);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 495} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 496} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 497} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 223555);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_first: ref;

axiom list_first == $sub.ref(0, 224587);

procedure list_first($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation list_first($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const firm_report_tx_done: ref;

axiom firm_report_tx_done == $sub.ref(0, 225619);

procedure firm_report_tx_done($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_report_tx_done($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i4, $i9);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i15 := firm_send_command($p0, 12, $p14, 1);
    call {:si_unique_call 500} {:cexpr "tmp___7"} boogie_si_record_i32($i15);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const firm_close: ref;

axiom firm_close == $sub.ref(0, 226651);

procedure firm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i4, $i9);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i15 := firm_send_command($p0, 2, $p14, 1);
    call {:si_unique_call 503} {:cexpr "tmp___7"} boogie_si_record_i32($i15);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const stop_command_port: ref;

axiom stop_command_port == $sub.ref(0, 227683);

procedure stop_command_port($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation stop_command_port($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} mutex_lock_nested($p6, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i15 := $ne.i8($i14, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} usb_kill_urb($p17);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} mutex_unlock($p18);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const start_command_port: ref;

axiom start_command_port == $sub.ref(0, 228715);

procedure start_command_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation start_command_port($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i30: i32;
  var $p38: ref;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} mutex_lock_nested($p6, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i9 := $ne.i8($i8, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_95 := usb_clear_halt($p11, $i15);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p18);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2328)), $mul.ref(896, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i24 := usb_submit_urb($p23, 208);
    call {:si_unique_call 512} {:cexpr "retval"} boogie_si_record_i32($i24);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(168, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mutex_unlock($p38);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1928)), $mul.ref(136, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_96 := dev_err.ref.ref.ref.i32($p28, .str.22, .str.24, $i24);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i30 := $i24;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb7;
}



const firm_open: ref;

axiom firm_open == $sub.ref(0, 229747);

procedure firm_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i4, $i9);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i15 := firm_send_command($p0, 1, $p14, 1);
    call {:si_unique_call 517} {:cexpr "tmp___7"} boogie_si_record_i32($i15);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const firm_purge: ref;

axiom firm_purge == $sub.ref(0, 230779);

procedure firm_purge($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation firm_purge($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 519} {:cexpr "firm_purge:arg:rxtx"} boogie_si_record_i8($i1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(816, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 280)), $mul.ref(25, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i17 := firm_send_command($p0, 9, $p16, 2);
    call {:si_unique_call 521} {:cexpr "tmp___7"} boogie_si_record_i32($i17);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 231811);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 522} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const start_port_read: ref;

axiom start_port_read == $sub.ref(0, 232843);

procedure start_port_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation start_port_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i59: i32;
  var $i60: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i21: i32;
  var $i22: i64;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p4 := spinlock_check($p3);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 528} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i11, $i12, $p13, $p14 := 0, $i5, $p8, $p10;
    goto $bb9;

  $bb9:
    call $i11, $i12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $i37, $p73, $p74, $i75, $p76, $p77, $p78 := start_port_read_loop_$bb9($p0, $p2, $i11, $i12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $i37, $p73, $p74, $i75, $p76, $p77, $p78);
    goto $bb9_last;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p13);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i11, $i12;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i19, $i20;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} spin_unlock_irqrestore($p79, $i22);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} list_del($p13);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p13);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} spin_unlock_irqrestore($p33, $i12);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i34 := usb_submit_urb($p27, 208);
    call {:si_unique_call 532} {:cexpr "retval"} boogie_si_record_i32($i34);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p13, $i34;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p74 := spinlock_check($p73);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i75 := _raw_spin_lock_irqsave($p74);
    call {:si_unique_call 547} {:cexpr "flags"} boogie_si_record_i64($i75);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} list_add($p13, $p76);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i11, $i12, $p13, $p14 := $i34, $i75, $p14, $p78;
    goto corral_source_split_2768_dummy;

  $bb15:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p39 := spinlock_check($p38);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i40 := _raw_spin_lock_irqsave($p39);
    call {:si_unique_call 536} {:cexpr "flags"} boogie_si_record_i64($i40);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p41, $i42 := $p36, $i37;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p41, $i42;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} list_add($p43, $p45);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i51, $p52, $p53 := $i40, $p48, $p50;
    goto $bb25;

  $bb25:
    call $i51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $i69, $p70, $p71, $p72 := start_port_read_loop_$bb25($p2, $i51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $i69, $p70, $p71, $p72);
    goto $bb25_last;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p52);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i54, $i56);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i58 := $i51;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i44, $i58;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i59, $i60;
    goto $bb14;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p52);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} list_del($p52);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} spin_unlock_irqrestore($p66, $i51);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} usb_kill_urb($p65);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p68 := spinlock_check($p67);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i69 := _raw_spin_lock_irqsave($p68);
    call {:si_unique_call 543} {:cexpr "flags"} boogie_si_record_i64($i69);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} list_add($p52, $p70);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i51, $p52, $p53 := $i69, $p53, $p72;
    goto corral_source_split_2759_dummy;

  corral_source_split_2759_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2768_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 233875);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} free_($p0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 234907);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation usb_free_urb($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ldv_assume_stop();
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p0, $0.ref);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i4 := $M.14;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 1);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} ldv_blast_assert();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.14 := $i7;
    call {:si_unique_call 552} {:cexpr "ldv_urb_state"} boogie_si_record_i32($i7);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_assume_stop: ref;

axiom ldv_assume_stop == $sub.ref(0, 235939);

procedure ldv_assume_stop();
  free requires assertsPassed;



implementation ldv_assume_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_assume_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_blast_assert: ref;

axiom ldv_blast_assert == $sub.ref(0, 236971);

procedure ldv_blast_assert();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_blast_assert()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 553} __VERIFIER_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 238003);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 554} $free($p0);
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 239035);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1928)), $mul.ref(0, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 240067);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} {:cexpr "__kmalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 557} {:cexpr "__kmalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p2 := external_alloc();
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 241099);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 560} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 561} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 242131);

procedure _dev_info.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 243163);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 244195);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 245227);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 246259);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 247291);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 248323);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.14, $M.0;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "usb_alloc_urb:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 569} {:cexpr "usb_alloc_urb:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p2 := ldv_undefined_pointer();
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i5 := $M.14;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $M.14 := $i6;
    call {:si_unique_call 571} {:cexpr "ldv_urb_state"} boogie_si_record_i32($i6);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p4 := $p2;
    goto $bb5;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 249355);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 573} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_port_data: ref;

axiom usb_set_serial_port_data == $sub.ref(0, 250387);

procedure usb_set_serial_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_97 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 251419);

procedure __init_waitqueue_head($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    return;
}



const command_port_write_callback: ref;

axiom command_port_write_callback == $sub.ref(0, 252451);

procedure command_port_write_callback($p0: ref);



const command_port_read_callback: ref;

axiom command_port_read_callback == $sub.ref(0, 253483);

procedure command_port_read_callback($p0: ref);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 254515);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 255547);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i5 := device_private_init($p0);
    call {:si_unique_call 576} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(8, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const ldv_undefined_pointer: ref;

axiom ldv_undefined_pointer == $sub.ref(0, 256579);

procedure ldv_undefined_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undefined_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p0 := external_alloc();
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_serial_probe: ref;

axiom usb_serial_probe == $sub.ref(0, 257611);

procedure usb_serial_probe($p0: ref, $p1: ref) returns ($r: i32);



const usb_serial_disconnect: ref;

axiom usb_serial_disconnect == $sub.ref(0, 258643);

procedure usb_serial_disconnect($p0: ref);



const whiteheat_init: ref;

axiom whiteheat_init == $sub.ref(0, 259675);

procedure whiteheat_init() returns ($r: i32);
  free requires assertsPassed;



implementation whiteheat_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i5: i32;
  var $i2: i32;
  var $i9: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i0 := usb_serial_register(whiteheat_fake_device);
    call {:si_unique_call 579} {:cexpr "retval"} boogie_si_record_i32($i0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i3 := usb_serial_register(whiteheat_device);
    call {:si_unique_call 581} {:cexpr "retval"} boogie_si_record_i32($i3);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i6 := usb_register(whiteheat_driver);
    call {:si_unique_call 584} {:cexpr "retval"} boogie_si_record_i32($i6);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_98 := printk.ref(.str);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} usb_serial_deregister(whiteheat_device);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} usb_serial_deregister(whiteheat_fake_device);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i9 := $i2;
    goto $bb13;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const usb_serial_register: ref;

axiom usb_serial_register == $sub.ref(0, 260707);

procedure usb_serial_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 587} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 588} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register: ref;

axiom usb_register == $sub.ref(0, 261739);

procedure usb_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i1 := usb_register_driver($p0, __this_module, .str.6);
    call {:si_unique_call 590} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_serial_deregister: ref;

axiom usb_serial_deregister == $sub.ref(0, 262771);

procedure usb_serial_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 263803);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const whiteheat_exit: ref;

axiom whiteheat_exit == $sub.ref(0, 264835);

procedure whiteheat_exit();
  free requires assertsPassed;



implementation whiteheat_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} usb_deregister(whiteheat_driver);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} usb_serial_deregister(whiteheat_fake_device);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} usb_serial_deregister(whiteheat_device);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 265867);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 266899);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.1, $M.16, $M.17, $M.14, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.3, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i33: i32;
  var $i34: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    call {:si_unique_call 596} $initialize();
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ldv_initialize();
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i0 := whiteheat_init();
    call {:si_unique_call 601} {:cexpr "tmp___7"} boogie_si_record_i32($i0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb5;

  $bb5:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i33, $i34, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106 := main_loop_$bb5($i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i33, $i34, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106);
    goto $bb5_last;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 603} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 605} {:cexpr "tmp___9"} boogie_si_record_i32($i4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 608} {:cexpr "tmp___8"} boogie_si_record_i32($i8);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i10 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 2);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 3);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i12 == 1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 4);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i13 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 5);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i14 == 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 6);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i15 == 1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, 7);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i16 == 1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i8, 8);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i17 == 1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i8, 9);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i18 == 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i8, 10);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i19 == 1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i8, 11);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i20 == 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i8, 12);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i21 == 1);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i8, 13);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i22 == 1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i8, 14);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i23 == 1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i8, 15);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i24 == 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i8, 16);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i25 == 1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i8, 17);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i26 == 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i33, $i34;
    goto $bb118_dummy;

  $bb68:
    assume $i26 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} whiteheat_write_callback($u5);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb65:
    assume $i25 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} whiteheat_read_callback($u5);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb62:
    assume $i24 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} whiteheat_unthrottle($u8);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb59:
    assume $i23 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} whiteheat_throttle($u8);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb56:
    assume $i22 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_106 := whiteheat_chars_in_buffer($u8);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb53:
    assume $i21 == 1;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_105 := whiteheat_tiocmset($u8, $u2, $u2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb50:
    assume $i20 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_104 := whiteheat_tiocmget($u8);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb47:
    assume $i19 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} whiteheat_break_ctl($u8, $u2);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb44:
    assume $i18 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} whiteheat_set_termios($u8, $u9, $u11);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb41:
    assume $i17 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_103 := whiteheat_ioctl($u8, $u2, $u3);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb38:
    assume $i16 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_102 := whiteheat_write_room($u8);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb35:
    assume $i15 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_101 := whiteheat_write($u8, $u9, $u10, $u2);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb32:
    assume $i14 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_100 := whiteheat_attach($u6);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i13 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i3, 2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i3;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i50;
    goto $bb82;

  $bb92:
    assume $i46 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i47 := whiteheat_attach($u6);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 634} {:cexpr "attach_status"} boogie_si_record_i32($i47);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, $sub.i32(0, 19));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb99;

  $bb94:
    assume $i48 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i47, $sub.i32(0, 12));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb96;

  $bb97:
    assume $i49 == 1;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} whiteheat_release($u6);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i12 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i3, 1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i3;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i45;
    goto $bb82;

  $bb89:
    assume $i43 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} whiteheat_close($u9);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i3, 1);
    call {:si_unique_call 632} {:cexpr "ldv_s_whiteheat_device_usb_serial_driver"} boogie_si_record_i32($i44);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb91;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i3;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i42;
    goto $bb82;

  $bb83:
    assume $i36 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i37 := whiteheat_open($u8, $u9);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.17 := $i37;
    call {:si_unique_call 628} {:cexpr "res_whiteheat_open_4"} boogie_si_record_i32($i37);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i38 := $M.17;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} ldv_check_return_value($i38);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i39 := $M.17;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i3, 1);
    call {:si_unique_call 630} {:cexpr "ldv_s_whiteheat_device_usb_serial_driver"} boogie_si_record_i32($i41);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb88;

  $bb85:
    assume $i40 == 1;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} whiteheat_exit();
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_check_final_state();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i10 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_99 := whiteheat_firmware_attach($u6);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i2, $i3;
    goto $bb82;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i2, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i2;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, $i3;
    goto $bb82;

  $bb75:
    assume $i27 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i28 := whiteheat_firmware_download($u6, $u7);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.16 := $i28;
    call {:si_unique_call 624} {:cexpr "res_whiteheat_firmware_download_0"} boogie_si_record_i32($i28);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i29 := $M.16;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} ldv_check_return_value($i29);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i30 := $M.16;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb81;

  $bb77:
    assume $i31 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb118_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 267931);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 268963);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 269995);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} ldv_blast_assert();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.18;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv_blast_assert();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 271027);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 1} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 272059);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 273091);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 274123);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 275155);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 276187);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 277219);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 278251);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 279283);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 280315);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 281347);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 282379);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 283411);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 284443);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 640} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 641} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 642} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} __VERIFIER_assume($i4);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 285475);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 286507);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 287539);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 288571);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 644} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 645} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 646} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 649} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 651} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 652} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} __VERIFIER_assume($i7);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 654} __VERIFIER_assume($i11);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 289603);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 290635);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 656} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 657} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 658} __VERIFIER_assume($i4);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 291667);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 292699);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 293731);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 294763);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 295795);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 659} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 660} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 661} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 663} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 664} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 665} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 666} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 667} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} __VERIFIER_assume($i7);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} __VERIFIER_assume($i11);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 296827);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 297859);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 298891);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 299923);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 300955);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 301987);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 303019);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 304051);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 305083);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 670} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 671} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 672} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 306115);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 674} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 675} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 307147);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 308179);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 309211);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 678} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 310243);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 311275);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 312307);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 313339);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.14, $M.18, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.17, $M.16, $M.3;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 679} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 680} {:cexpr "ldv_urb_state"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 681} {:cexpr "ldv_coherent_state"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, llvm.used, __mod_author1555);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(1, 8)), __mod_description1556);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(2, 8)), __mod_license1557);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(3, 8)), __mod_firmware1559);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(4, 8)), __mod_firmware1560);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(5, 8)), __param_urb_pool_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(6, 8)), __mod_urb_pool_sizetype1562);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(7, 8)), __mod_urb_pool_size1563);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(8, 8)), __param_debug);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(9, 8)), __mod_debugtype1565);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 88)), $mul.ref(10, 8)), __mod_debug1566);
    $M.0 := $store.i8($M.0, __mod_author1555, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(6, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(7, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(12, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(17, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(18, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(26, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(27, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(30, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(31, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(36, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(37, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(38, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(39, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(40, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(41, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(42, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(43, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(44, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(45, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(46, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(47, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(48, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(49, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(50, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(51, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(52, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(53, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(54, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(55, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(56, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(57, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(58, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(59, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(60, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(61, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(62, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(63, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(64, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(65, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(66, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(67, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(68, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(69, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(70, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(71, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(72, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(73, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(74, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(75, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(76, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(77, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(78, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(79, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(80, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(81, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(82, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(83, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(84, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(85, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1555, $mul.ref(0, 87)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_description1556, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(11, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(12, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(13, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(14, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(16, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(23, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(26, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(28, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(29, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(33, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(34, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(35, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(36, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(37, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(38, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(40, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(41, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(42, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(43, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1556, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_license1557, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(7, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(8, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1557, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_firmware1559, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(18, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(20, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1559, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_firmware1560, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(25, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(26, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(27, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_firmware1560, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.ref($M.0, __param_urb_pool_size, __param_str_urb_pool_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__param_urb_pool_size, $mul.ref(0, 32)), $mul.ref(8, 1)), param_ops_int);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_urb_pool_size, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_urb_pool_size, $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(__param_urb_pool_size, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), urb_pool_size);
    $M.0 := $store.i8($M.0, __mod_urb_pool_sizetype1562, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(20, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(22, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_sizetype1562, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_urb_pool_size1563, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(4, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(16, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(18, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(19, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(27, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(30, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(31, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(37, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(38, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(41, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(42, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(43, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(44, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(45, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(46, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(47, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(48, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(49, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(50, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(51, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(52, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(53, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_urb_pool_size1563, $mul.ref(0, 55)), $mul.ref(54, 1)), 0);
    $M.0 := $store.ref($M.0, __param_debug, __param_str_debug);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__param_debug, $mul.ref(0, 32)), $mul.ref(8, 1)), param_ops_bool);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_debug, $mul.ref(0, 32)), $mul.ref(16, 1)), 420);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_debug, $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(__param_debug, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), debug);
    $M.0 := $store.i8($M.0, __mod_debugtype1565, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(14, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debugtype1565, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_debug1566, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(4, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(10, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(11, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_debug1566, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, __param_str_debug, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_debug, $mul.ref(0, 6)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_debug, $mul.ref(0, 6)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_debug, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_debug, $mul.ref(0, 6)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_debug, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i32($M.0, debug, 0);
    call {:si_unique_call 682} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, __param_str_urb_pool_size, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(11, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_urb_pool_size, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i32($M.0, urb_pool_size, 8);
    call {:si_unique_call 683} {:cexpr "urb_pool_size"} boogie_si_record_i32(8);
    $M.19 := $store.i8($M.19, __key___11, 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i8($M.19, $add.ref($add.ref($add.ref($add.ref(__key___11, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, __key___10, 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___10, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, __key___9, 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref($add.ref(__key___9, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, __key___8, 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.20 := $store.i8($M.20, $add.ref($add.ref($add.ref($add.ref(__key___8, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, __key___7, 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref($add.ref($add.ref(__key___7, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, whiteheat_driver, .str.6);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(8, 1)), usb_serial_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(16, 1)), usb_serial_disconnect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(72, 1)), id_table_combined);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(whiteheat_driver, $mul.ref(0, 296)), $mul.ref(288, 1)), 1);
    $M.0 := $store.i16($M.0, id_table_std, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(2, 1)), 1808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(4, 1)), $sub.i16(0, 32767));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table_std, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.23 := $store.ref($M.23, whiteheat_device, .str.5);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(8, 1)), id_table_std);
    $M.23 := $store.i8($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(16, 1)), 4);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.6);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.23 := $store.i8($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(152, 1)), whiteheat_driver);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.23 := $store.i64($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.i64($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(248, 1)), 0);
    $M.23 := $store.i64($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(256, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(264, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(272, 1)), whiteheat_attach);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(280, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(288, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(296, 1)), whiteheat_release);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(304, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(312, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(320, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(328, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(336, 1)), whiteheat_open);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(344, 1)), whiteheat_close);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(352, 1)), whiteheat_write);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(360, 1)), whiteheat_write_room);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(368, 1)), whiteheat_ioctl);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(376, 1)), whiteheat_set_termios);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(384, 1)), whiteheat_break_ctl);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(392, 1)), whiteheat_chars_in_buffer);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(400, 1)), whiteheat_throttle);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(408, 1)), whiteheat_unthrottle);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(416, 1)), whiteheat_tiocmget);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(424, 1)), whiteheat_tiocmset);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(432, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(440, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(448, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(456, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(464, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(472, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(480, 1)), whiteheat_read_callback);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(488, 1)), whiteheat_write_callback);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(496, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_device, $mul.ref(0, 512)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.i16($M.0, id_table_prerenumeration, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(2, 1)), 1808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table_prerenumeration, $mul.ref(0, 24)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.23 := $store.ref($M.23, whiteheat_fake_device, .str.2);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(8, 1)), id_table_prerenumeration);
    $M.23 := $store.i8($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(16, 1)), 1);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.3);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.23 := $store.i8($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(152, 1)), whiteheat_driver);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.23 := $store.i64($M.23, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref($add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(160, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.23 := $store.i64($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(248, 1)), 0);
    $M.23 := $store.i64($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(256, 1)), 0);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(264, 1)), whiteheat_firmware_download);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(272, 1)), whiteheat_firmware_attach);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(280, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(288, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(296, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(304, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(312, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(320, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(328, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(336, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(344, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(352, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(360, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(368, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(376, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(384, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(392, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(400, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(408, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(416, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(424, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(432, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(440, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(448, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(456, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(464, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(472, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(480, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(488, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(496, 1)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(whiteheat_fake_device, $mul.ref(0, 512)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.i16($M.0, id_table_combined, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(2, 1)), 1808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(4, 1)), $sub.i16(0, 32767));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(2, 1)), 1808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.17 := 0;
    call {:si_unique_call 684} {:cexpr "res_whiteheat_open_4"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 685} {:cexpr "res_whiteheat_firmware_download_0"} boogie_si_record_i32(0);
    $M.3 := $store.i8($M.3, .str.10, 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(1, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(2, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(4, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(6, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(7, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(8, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(9, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(11, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(12, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(13, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(14, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(15, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(16, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(17, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(18, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(19, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(20, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(21, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(22, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(23, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(24, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(25, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(26, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(27, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(28, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(29, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(30, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(31, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(32, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(33, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(34, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(35, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(36, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(37, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(38, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(39, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(40, 1)), 88);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(41, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(42, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(43, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(44, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(45, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(46, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(47, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(48, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(49, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(50, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(51, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(52, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(53, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(54, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(55, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(56, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(57, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(58, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(59, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(60, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(61, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(62, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(63, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(64, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(65, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(66, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(67, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(68, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(69, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(70, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(71, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(72, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(73, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(74, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(75, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(76, 1)), 88);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(77, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(78, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(79, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(80, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(81, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(82, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(83, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(84, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(85, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(86, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(87, 1)), 120);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(88, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(89, 1)), 51);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(90, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(91, 1)), 48);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(92, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(93, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(94, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(95, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(96, 1)), 88);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(97, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(98, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(99, 1)), 54);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(100, 1)), 56);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(101, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(102, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(103, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(104, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(105, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(106, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(107, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(108, 1)), 120);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(109, 1)), 45);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(110, 1)), 51);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(111, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(112, 1)), 48);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(113, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(114, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(115, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(116, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(117, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(118, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(119, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(120, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(121, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(122, 1)), 103);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(123, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(124, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(125, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(126, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(127, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(128, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(129, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(130, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(131, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(132, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(133, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(134, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(135, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(136, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(137, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(138, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(139, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(140, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(141, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(142, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(143, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(144, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(145, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(146, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(147, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(148, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(149, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(150, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(151, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(152, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(153, 1)), 54);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(154, 1)), 56);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(155, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(156, 1)), 49);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(157, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(158, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(159, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(160, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(161, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(162, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(163, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(164, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(165, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(166, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(167, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(168, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(169, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(170, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(171, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(172, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(173, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(174, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(175, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(176, 1)), 47);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(177, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(178, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(179, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(180, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(181, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(182, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(183, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(184, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(185, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(186, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(187, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(188, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(189, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(190, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(191, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(192, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(193, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(194, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(195, 1)), 46);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(196, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.10, $mul.ref(0, 198)), $mul.ref(197, 1)), 0);
    $M.3 := $store.i8($M.3, .str.11, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(10, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(11, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(12, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(13, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(14, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(16, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(17, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(19, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(20, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(21, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(22, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(25, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(26, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.11, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.3 := $store.i8($M.3, .str.93, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(10, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(11, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.93, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.3 := $store.i8($M.3, .str.90, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(15, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(16, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(17, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(18, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(19, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(22, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.3 := $store.i8($M.3, .str.86, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(11, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(15, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.86, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.26, 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(2, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(3, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(7, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(8, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(11, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(12, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.3 := $store.i8($M.3, .str.85, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(11, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(14, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(15, 1)), 103);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.85, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.89, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(11, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(13, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(18, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.89, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.3 := $store.i8($M.3, .str.88, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(11, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(12, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.87, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(11, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(13, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(14, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(19, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(20, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(21, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(22, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.87, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.3 := $store.i8($M.3, .str.32, 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(3, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(5, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(11, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.32, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.35, 68);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(1, 1)), 84);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.3 := $store.i8($M.3, .str.36, 0);
    $M.3 := $store.i8($M.3, .str.37, 68);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(1, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.3 := $store.i8($M.3, .str.38, 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(1, 1)), 84);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(2, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.3 := $store.i8($M.3, .str.39, 67);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(1, 1)), 84);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(2, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.3 := $store.i8($M.3, .str.84, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(11, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(12, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(14, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.84, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.81, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(10, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(16, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(19, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.81, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.3 := $store.i8($M.3, .str.78, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(10, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.78, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.44, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.44, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.21, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(11, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(13, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.3 := $store.i8($M.3, .str.77, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(5, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(15, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.77, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.3 := $store.i8($M.3, .str.67, 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(2, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(3, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(4, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(5, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(6, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(7, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(8, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(9, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(10, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(11, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(16, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(18, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(19, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(20, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(21, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(22, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.3 := $store.i8($M.3, .str.65, 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(1, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(3, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(4, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(5, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(6, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(7, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(8, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(9, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(11, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(12, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(13, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(14, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(15, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(17, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(20, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(22, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(23, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    call {:si_unique_call 686} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 314371);

procedure devirtbounce(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 315403);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u2: i32;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.14, $M.18, $M.0, $M.19, $M.20, $M.21, $M.22, $M.23, $M.17, $M.16, $M.3, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 687} __SMACK_static_init();
    call {:si_unique_call 688} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.7, $M.1, $M.16, $M.17, $M.14, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.3, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation whiteheat_firmware_download_loop_$bb45(in_$p0: ref, in_$p109: ref, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i16, in_$i117: i16, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$p141: ref) returns (out_$p109: ref, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i16, out_$i117: i16, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$p141: ref)
{

  entry:
    out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$p141 := in_$p109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$p141;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p109 := out_$p141;
    goto corral_source_split_217_dummy;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(out_$p109, $mul.ref(1, 6));
    goto corral_source_split_217;

  $bb55:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p126, out_$i127 := out_$p109, out_$i124;
    assume true;
    goto $bb55;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i124, 0);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i124 := ezusb_writememory(in_$p0, out_$i120, out_$p122, out_$i123, $sub.i8(0, 96));
    call {:si_unique_call 58} {:cexpr "response"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i117);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref($add.ref(out_$p109, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} out_$i120 := __fswab32(out_$i119);
    call {:si_unique_call 56} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.3, out_$p118);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p109, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$i117 := __fswab16(out_$i116);
    call {:si_unique_call 54} {:cexpr "tmp___18"} boogie_si_record_i16(out_$i117);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.3, out_$p115);
    goto corral_source_split_193;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p109, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_192;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i114 == 1;
    goto corral_source_split_186;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i114 := $ult.i32(out_$i113, 6976);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_$i113 := __fswab32(out_$i112);
    call {:si_unique_call 50} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.3, out_$p111);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p109, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_179;

  $bb47:
    assume out_$i110 == 1;
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.ref(out_$p109, $0.ref);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_217_dummy:
    call {:si_unique_call 1} out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$p141 := whiteheat_firmware_download_loop_$bb45(in_$p0, out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$p141);
    return;

  exit:
    return;
}



procedure whiteheat_firmware_download_loop_$bb45(in_$p0: ref, in_$p109: ref, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i16, in_$i117: i16, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$p141: ref) returns (out_$p109: ref, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i16, out_$i117: i16, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$p141: ref);



implementation whiteheat_firmware_download_loop_$bb35(in_$p0: ref, in_$p75: ref, in_$i76: i1, in_$p77: ref, in_$i78: i16, in_$i79: i16, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$p103: ref) returns (out_$p75: ref, out_$i76: i1, out_$p77: ref, out_$i78: i16, out_$i79: i16, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$p103: ref)
{

  entry:
    out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p103 := in_$p75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$p103;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p103;
    goto corral_source_split_172_dummy;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(out_$p75, $mul.ref(1, 6));
    goto corral_source_split_172;

  $bb42:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p88, out_$i89 := out_$p75, out_$i86;
    assume true;
    goto $bb42;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 0);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$i86 := ezusb_writememory(in_$p0, out_$i82, out_$p84, out_$i85, $sub.i8(0, 93));
    call {:si_unique_call 41} {:cexpr "response"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i32(out_$i79);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i82 := __fswab32(out_$i81);
    call {:si_unique_call 39} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.3, out_$p80);
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p75, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} out_$i79 := __fswab16(out_$i78);
    call {:si_unique_call 37} {:cexpr "tmp___14"} boogie_si_record_i16(out_$i79);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i16($M.3, out_$p77);
    goto corral_source_split_142;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p75, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_141;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i76 == 1;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.ref(out_$p75, $0.ref);
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_172_dummy:
    call {:si_unique_call 1} out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p103 := whiteheat_firmware_download_loop_$bb35(in_$p0, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p103);
    return;

  exit:
    return;
}



procedure whiteheat_firmware_download_loop_$bb35(in_$p0: ref, in_$p75: ref, in_$i76: i1, in_$p77: ref, in_$i78: i16, in_$i79: i16, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$p103: ref) returns (out_$p75: ref, out_$i76: i1, out_$p77: ref, out_$i78: i16, out_$i79: i16, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$p103: ref);



implementation whiteheat_firmware_download_loop_$bb25(in_$p65: ref, in_$i66: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p67: ref, in_$p74: ref) returns (out_$p65: ref, out_$i66: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p67: ref, out_$p74: ref)
{

  entry:
    out_$p65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p67, out_$p74 := in_$p65, in_$i66, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p67, in_$p74;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p65 := out_$p74;
    goto corral_source_split_131_dummy;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} out_$p74 := ihex_next_binrec(out_$p65);
    goto corral_source_split_131;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i71 == 1;
    goto corral_source_split_125;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p72 := out_$p65;
    assume true;
    goto $bb29;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i70, 6976);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} out_$i70 := __fswab32(out_$i69);
    call {:si_unique_call 34} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.3, out_$p68);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_118;

  $bb27:
    assume out_$i66 == 1;
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p65;
    assume true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.ref(out_$p65, $0.ref);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_131_dummy:
    call {:si_unique_call 1} out_$p65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p67, out_$p74 := whiteheat_firmware_download_loop_$bb25(out_$p65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p67, out_$p74);
    return;

  exit:
    return;
}



procedure whiteheat_firmware_download_loop_$bb25(in_$p65: ref, in_$i66: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p67: ref, in_$p74: ref) returns (out_$p65: ref, out_$i66: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p67: ref, out_$p74: ref);



implementation whiteheat_firmware_download_loop_$bb15(in_$p0: ref, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$i34: i16, in_$i35: i16, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$p59: ref) returns (out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$i34: i16, out_$i35: i16, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$p59: ref)
{

  entry:
    out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p59 := in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$p59;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p59;
    goto corral_source_split_111_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} out_$p59 := ihex_next_binrec(out_$p31);
    goto corral_source_split_111;

  $bb22:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$p44, out_$i45 := out_$p31, out_$i42;
    assume true;
    goto $bb22;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, 0);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$i42 := ezusb_writememory(in_$p0, out_$i38, out_$p40, out_$i41, $sub.i8(0, 96));
    call {:si_unique_call 24} {:cexpr "response"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i35);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_$i38 := __fswab32(out_$i37);
    call {:si_unique_call 22} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.3, out_$p36);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p31, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} out_$i35 := __fswab16(out_$i34);
    call {:si_unique_call 20} {:cexpr "tmp___9"} boogie_si_record_i16(out_$i35);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.3, out_$p33);
    goto corral_source_split_81;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_80;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i32 == 1;
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.ref(out_$p31, $0.ref);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_111_dummy:
    call {:si_unique_call 1} out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p59 := whiteheat_firmware_download_loop_$bb15(in_$p0, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$p59);
    return;

  exit:
    return;
}



procedure whiteheat_firmware_download_loop_$bb15(in_$p0: ref, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$i34: i16, in_$i35: i16, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$p59: ref) returns (out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$i34: i16, out_$i35: i16, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$p59: ref);



implementation ihex_validate_fw_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$i3: i64, in_$i4: i64, in_$i5: i1, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i16, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i16, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64) returns (out_$i1: i64, out_$p2: ref, out_$i3: i64, out_$i4: i64, out_$i5: i1, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i16, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i16, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64)
{

  entry:
    out_$i1, out_$p2, out_$i3, out_$i4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24 := in_$i1, in_$p2, in_$i3, in_$i4, in_$i5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i1 := out_$i24;
    goto corral_source_split_353_dummy;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i1, out_$i23);
    call {:si_unique_call 117} {:cexpr "ofs"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i64(out_$i22, 1152921504606846972);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 3);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(6, out_$i20);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i18);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} out_$i18 := __fswab16(out_$i17);
    call {:si_unique_call 116} {:cexpr "tmp___8"} boogie_si_record_i16(out_$i18);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.3, out_$p16);
    goto corral_source_split_346;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p9, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_345;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i14 == 1;
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(out_$i12);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} out_$i12 := __fswab16(out_$i11);
    call {:si_unique_call 114} {:cexpr "tmp___7"} boogie_si_record_i16(out_$i12);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.3, out_$p10);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref(out_$i1, 1));
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.2, out_$p6);
    goto corral_source_split_332;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_331;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i5 == 1;
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i5 := $ule.i64(out_$i1, out_$i4);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i4 := $sub.i64(out_$i3, 6);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i3 := $load.i64($M.5, out_$p2);
    goto corral_source_split_323;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_353_dummy:
    call {:si_unique_call 1} out_$i1, out_$p2, out_$i3, out_$i4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24 := ihex_validate_fw_loop_$bb1(in_$p0, out_$i1, out_$p2, out_$i3, out_$i4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure ihex_validate_fw_loop_$bb1(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$i3: i64, in_$i4: i64, in_$i5: i1, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i16, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i16, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64) returns (out_$i1: i64, out_$p2: ref, out_$i3: i64, out_$i4: i64, out_$i5: i1, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i16, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i16, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64);



implementation whiteheat_release_loop_$bb21(in_$p18: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60 := in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p46, out_$p60;
    goto corral_source_split_915_dummy;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_914;

  SeqInstr_12:
    goto corral_source_split_913;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} usb_free_urb(out_$p55);
    goto SeqInstr_11;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} kfree(out_$p58);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} kfree(out_$p56);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_903;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} list_del(out_$p45);
    goto corral_source_split_902;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i50 == 1;
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i47, out_$i49);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p18, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_894;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_915_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60 := whiteheat_release_loop_$bb21(in_$p18, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60);
    return;

  exit:
    return;
}



procedure whiteheat_release_loop_$bb21(in_$p18: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref);
  modifies $M.14, assertsPassed;



implementation whiteheat_release_loop_$bb14(in_$p18: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39 := in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p24, out_$p25 := out_$p25, out_$p39;
    goto corral_source_split_884_dummy;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_883;

  SeqInstr_9:
    goto corral_source_split_882;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} usb_free_urb(out_$p34);
    goto SeqInstr_8;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} kfree(out_$p37);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p34, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} kfree(out_$p35);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_872;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} list_del(out_$p24);
    goto corral_source_split_871;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i26, out_$i28);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p18, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_863;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_884_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39 := whiteheat_release_loop_$bb14(in_$p18, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39);
    return;

  exit:
    return;
}



procedure whiteheat_release_loop_$bb14(in_$p18: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref);
  modifies $M.14, assertsPassed;



implementation whiteheat_release_loop_$bb8(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32) returns (out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i62;
    goto corral_source_split_919_dummy;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i9, 1);
    call {:si_unique_call 223} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} kfree(out_$p61);
    goto corral_source_split_918;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_917;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume !(out_$i50 == 1);
    goto corral_source_split_900;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i47, out_$i49);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p18, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_894;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60 := whiteheat_release_loop_$bb21(out_$p18, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p42, out_$p44;
    goto $bb21;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p46, out_$p60;
    assume false;
    return;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_914;

  SeqInstr_12:
    goto corral_source_split_913;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} usb_free_urb(out_$p55);
    goto SeqInstr_11;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} kfree(out_$p58);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} kfree(out_$p56);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_903;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} list_del(out_$p45);
    goto corral_source_split_902;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i50 == 1;
    goto corral_source_split_898;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_887;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 416)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i29 == 1);
    goto corral_source_split_869;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i26, out_$i28);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_863;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39 := whiteheat_release_loop_$bb14(out_$p18, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p24, out_$p25 := out_$p21, out_$p23;
    goto $bb14;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p24, out_$p25 := out_$p25, out_$p39;
    assume false;
    return;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_883;

  SeqInstr_9:
    goto corral_source_split_882;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} usb_free_urb(out_$p34);
    goto SeqInstr_8;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} kfree(out_$p37);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p34, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} kfree(out_$p35);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_872;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} list_del(out_$p24);
    goto corral_source_split_871;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_867;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 416)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$p17 := usb_get_serial_port_data(out_$p16);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 280)), $mul.ref(32, 1)), $mul.ref(out_$i13, 8));
    goto corral_source_split_851;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i9);
    goto corral_source_split_850;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i12 == 1;
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i9, out_$i11);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_843;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.0, in_$p8);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_919_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62 := whiteheat_release_loop_$bb8(in_$p0, in_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62);
    return;

  exit:
    return;
}



procedure whiteheat_release_loop_$bb8(in_$p0: ref, in_$p8: ref, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32) returns (out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32);
  modifies $M.14, assertsPassed;



implementation whiteheat_close_loop_$bb22(in_$p2: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref) returns (out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref)
{

  entry:
    out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68 := in_$p53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$p53, out_$p54 := out_$p54, out_$p68;
    goto corral_source_split_1109_dummy;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} list_add(out_$p53, out_$p66);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} spin_lock_irq(out_$p65);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} usb_kill_urb(out_$p63);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} spin_unlock_irq(out_$p64);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} list_del(out_$p53);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref(0, 1));
    goto corral_source_split_1096;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_1095;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i58 == 1;
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i55, out_$i57);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1087;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1109_dummy:
    call {:si_unique_call 1} out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68 := whiteheat_close_loop_$bb22(in_$p2, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68);
    return;

  exit:
    return;
}



procedure whiteheat_close_loop_$bb22(in_$p2: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref) returns (out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref);



implementation whiteheat_close_loop_$bb15(in_$p2: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47 := in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p40, out_$p47;
    goto corral_source_split_1077_dummy;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} list_move(out_$p39, out_$p45);
    goto corral_source_split_1075;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_1074;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i44 == 1;
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i41, out_$i43);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_1066;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1077_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47 := whiteheat_close_loop_$bb15(in_$p2, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47);
    return;

  exit:
    return;
}



procedure whiteheat_close_loop_$bb15(in_$p2: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref);



implementation whiteheat_close_loop_$bb8(in_$p2: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33 := in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p19, out_$p33;
    goto corral_source_split_1056_dummy;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} list_add(out_$p18, out_$p31);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} spin_lock_irq(out_$p30);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} usb_kill_urb(out_$p28);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} spin_unlock_irq(out_$p29);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} list_del(out_$p18);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref(0, 1));
    goto corral_source_split_1043;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_1042;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i20, out_$i22);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_1034;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1056_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33 := whiteheat_close_loop_$bb8(in_$p2, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33);
    return;

  exit:
    return;
}



procedure whiteheat_close_loop_$bb8(in_$p2: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref);



implementation whiteheat_write_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p7: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$p81: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$p81: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$i19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$p80, in_$p81, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i76, out_$i75;
    goto $bb57_dummy;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore(out_$p81, out_$i79);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} list_add(out_$p34, out_$p80);
    goto corral_source_split_1232;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1231;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_$i79 := _raw_spin_lock_irqsave(out_$p78);
    call {:si_unique_call 292} {:cexpr "flags"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_$p78 := spinlock_check(out_$p77);
    goto corral_source_split_1228;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i19, out_$i46);
    call {:si_unique_call 284} {:cexpr "count"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i20, out_$i46);
    call {:si_unique_call 283} {:cexpr "sent"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1212;

  $bb40:
    assume !(out_$i61 == 1);
    goto corral_source_split_1211;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$p62, out_$i63 := out_$p34, out_$i60;
    assume true;
    goto $bb40;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} out_$i60 := usb_submit_urb(out_$p40, 32);
    call {:si_unique_call 281} {:cexpr "result"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, out_$i46);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p40, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p58, out_$p57);
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p40, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p5, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} usb_serial_debug_data(out_$i52, out_$p53, .str.78, out_$i46, out_$p55);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, debug);
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 278} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p49, out_$p51, out_$i47, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(in_$p2, $mul.ref(out_$i50, 1));
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    call {:si_unique_call 277} {:cexpr "__len"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_1187;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  $bb37:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i19;
    goto $bb38;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i45;
    goto $bb38;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    call {:si_unique_call 276} {:cexpr "bytes"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1184;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1183;

  $bb36:
    assume out_$i43 == 1;
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i19, out_$i42);
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2328)), $mul.ref(920, 1));
    goto corral_source_split_1178;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1176;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} spin_unlock_irqrestore(out_$p35, out_$i26);
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} list_del(out_$p34);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} out_$p34 := list_first(out_$p33);
    goto corral_source_split_1169;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1168;

  $bb34:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i20, out_$i26;
    assume true;
    goto $bb34;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} out_$i28 := list_empty(out_$p27);
    call {:si_unique_call 271} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1161;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1160;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i26 := _raw_spin_lock_irqsave(out_$p25);
    call {:si_unique_call 269} {:cexpr "flags"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_$p25 := spinlock_check(out_$p24);
    goto corral_source_split_1157;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i21 == 1;
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := whiteheat_write_loop_$bb19(in_$p1, in_$p2, in_$p5, in_$p7, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure whiteheat_write_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p7: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$p81: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$p81: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.0;



implementation whiteheat_write_room_loop_$bb16(in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28 := in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i26, in_$p27, in_$p28;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p18, out_$i19 := out_$p28, out_$i26;
    goto corral_source_split_1271_dummy;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1270;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i19, 1);
    call {:si_unique_call 300} {:cexpr "room"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1269;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i23 == 1;
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i19;
    assume true;
    goto $bb18;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i20, out_$i22);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p5, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1261;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1271_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28 := whiteheat_write_room_loop_$bb16(in_$p5, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28);
    return;

  exit:
    return;
}



procedure whiteheat_write_room_loop_$bb16(in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref);



implementation whiteheat_chars_in_buffer_loop_$bb16(in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$p35: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$p35: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35 := in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p18, out_$i19 := out_$p35, out_$i33;
    goto corral_source_split_1404_dummy;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i19, out_$i32);
    call {:si_unique_call 321} {:cexpr "chars"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 192)), $mul.ref(132, 1));
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p26, $mul.ref(0, 1));
    goto corral_source_split_1396;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_1395;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i23 == 1;
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i19;
    assume true;
    goto $bb18;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i20, out_$i22);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p5, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_1387;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1404_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35 := whiteheat_chars_in_buffer_loop_$bb16(in_$p5, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35);
    return;

  exit:
    return;
}



procedure whiteheat_chars_in_buffer_loop_$bb16(in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$p35: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$p35: ref);



implementation urb_to_wrap_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i64, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p18: ref, in_$p19: ref) returns (out_$p4: ref, out_$i5: i64, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19 := in_$p4, in_$i5, in_$i6, in_$i7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p18, in_$p19;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p4 := out_$p19;
    goto corral_source_split_1768_dummy;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1768;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1767;

  $bb8:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p4;
    assume true;
    goto $bb8;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i13, out_$i14);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p8, $mul.ref(0, 1));
    goto corral_source_split_1755;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_1754;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i5, out_$i6);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1747;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $p2i.ref.i64(out_$p4);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_1768_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19 := urb_to_wrap_loop_$bb1(in_$p0, in_$p1, out_$p4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure urb_to_wrap_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i64, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p18: ref, in_$p19: ref) returns (out_$p4: ref, out_$i5: i64, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p18: ref, out_$p19: ref);



implementation usb_serial_debug_data_loop_$bb3(in_$i3: i32, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i14: i32, in_vslice_dummy_var_79: i32) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i14: i32, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i14, out_vslice_dummy_var_79 := in_$i7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i14, in_vslice_dummy_var_79;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i14;
    goto corral_source_split_1831_dummy;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i7, 1);
    call {:si_unique_call 385} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_vslice_dummy_var_79 := printk.ref.i32(.str.75, out_$i12);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(in_$p4, $mul.ref(out_$i9, 1));
    goto corral_source_split_1827;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1826;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i8 == 1;
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, in_$i3);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_1831_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i14, out_vslice_dummy_var_79 := usb_serial_debug_data_loop_$bb3(in_$i3, in_$p4, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i14, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure usb_serial_debug_data_loop_$bb3(in_$i3: i32, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i14: i32, in_vslice_dummy_var_79: i32) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i14: i32, out_vslice_dummy_var_79: i32);



implementation firm_send_command_loop_$bb23(in_$p4: ref, in_$p15: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i1, in_$i64: i64, in_$i66: i64, in_$i67: i1, in_$i68: i64) returns (out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i1, out_$i64: i64, out_$i66: i64, out_$i67: i1, out_$i68: i64)
{

  entry:
    out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68 := in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i67, in_$i68;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i66;
    goto $bb31_dummy;

  $bb29:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i66;
    assume true;
    goto $bb29;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_1979;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} out_$i66 := schedule_timeout(out_$i59);
    call {:si_unique_call 416} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_1978;

  $bb26:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i59;
    assume true;
    goto $bb26;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i8(out_$i62, 0);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p15, $mul.ref(0, 328)), $mul.ref(169, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} prepare_to_wait(out_$p60, in_$p4, 2);
    goto corral_source_split_1967;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p15, $mul.ref(0, 328)), $mul.ref(176, 1));
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68 := firm_send_command_loop_$bb23(in_$p4, in_$p15, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68);
    return;

  exit:
    return;
}



procedure firm_send_command_loop_$bb23(in_$p4: ref, in_$p15: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i1, in_$i64: i64, in_$i66: i64, in_$i67: i1, in_$i68: i64) returns (out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i1, out_$i64: i64, out_$i66: i64, out_$i67: i1, out_$i68: i64);



implementation rx_data_softint_loop_$bb13(in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i66: i64, in_$p71: ref, in_$p72: ref, in_vslice_dummy_var_86: i32) returns (out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i66: i64, out_$p71: ref, out_$p72: ref, out_vslice_dummy_var_86: i32)
{

  entry:
    out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$i66, out_$p71, out_$p72, out_vslice_dummy_var_86 := in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p62, in_$p63, in_$i64, in_$p65, in_$p67, in_$p68, in_$i69, in_$p70, in_$i66, in_$p71, in_$p72, in_vslice_dummy_var_86;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$i22, out_$p23, out_$p24, out_$i25 := out_$i66, out_$p24, out_$p72, out_$i52;
    goto corral_source_split_2193_dummy;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2192;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2191;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i69;
    goto $bb35;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i64;
    goto $bb35;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} list_add(out_$p23, out_$p65);
    goto corral_source_split_2189;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2188;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} out_$i64 := _raw_spin_lock_irqsave(out_$p63);
    call {:si_unique_call 455} {:cexpr "flags"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} out_$p63 := spinlock_check(out_$p62);
    goto corral_source_split_2185;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2184;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_vslice_dummy_var_86 := dev_err.ref.ref.ref.i32(out_$p60, .str.63, .str.64, out_$i58);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2328)), $mul.ref(1208, 1));
    goto corral_source_split_2181;

  $bb25:
    assume out_$i59 == 1;
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$i58 := usb_submit_urb(out_$p39, 32);
    call {:si_unique_call 451} {:cexpr "result"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p57, out_$p56);
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  $bb20:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i25;
    goto $bb24;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i51;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  $bb22:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i25;
    goto $bb23;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb23;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i25, out_$i49);
    call {:si_unique_call 449} {:cexpr "sent"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_$i49 := tty_insert_flip_string(in_$p7, out_$p45, out_$i48);
    call {:si_unique_call 448} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i32.i64(out_$i47);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2160;

  $bb21:
    assume out_$i43 == 1;
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2155;

  $bb19:
    assume out_$i40 == 1;
    goto corral_source_split_2154;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.ref(in_$p7, $0.ref);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref(0, 1));
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_irqrestore(out_$p34, out_$i22);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} list_del(out_$p23);
    goto corral_source_split_2139;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i22, out_$i25;
    assume true;
    goto $bb15;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i26, out_$i28);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(112, 1));
    goto corral_source_split_2131;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} list_add(out_$p23, out_$p70);
    goto corral_source_split_2200;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2199;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} out_$i69 := _raw_spin_lock_irqsave(out_$p68);
    call {:si_unique_call 459} {:cexpr "flags"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$p68 := spinlock_check(out_$p67);
    goto corral_source_split_2196;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2193_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$i66, out_$p71, out_$p72, out_vslice_dummy_var_86 := rx_data_softint_loop_$bb13(in_$p3, in_$p5, in_$p7, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$p68, out_$i69, out_$p70, out_$i66, out_$p71, out_$p72, out_vslice_dummy_var_86);
    return;

  exit:
    return;
}



procedure rx_data_softint_loop_$bb13(in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i66: i64, in_$p71: ref, in_$p72: ref, in_vslice_dummy_var_86: i32) returns (out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i66: i64, out_$p71: ref, out_$p72: ref, out_vslice_dummy_var_86: i32);
  modifies $M.0;



implementation start_port_read_loop_$bb25(in_$p2: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref) returns (out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref)
{

  entry:
    out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72 := in_$i51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$p70, in_$p71, in_$p72;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i51, out_$p52, out_$p53 := out_$i69, out_$p53, out_$p72;
    goto corral_source_split_2759_dummy;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} list_add(out_$p52, out_$p70);
    goto corral_source_split_2757;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2756;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$i69 := _raw_spin_lock_irqsave(out_$p68);
    call {:si_unique_call 543} {:cexpr "flags"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} out_$p68 := spinlock_check(out_$p67);
    goto corral_source_split_2753;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2752;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} usb_kill_urb(out_$p65);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} spin_unlock_irqrestore(out_$p66, out_$i51);
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} list_del(out_$p52);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p63, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref(0, 1));
    goto corral_source_split_2741;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_2740;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i57 == 1;
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i51;
    assume true;
    goto $bb27;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i54, out_$i56);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2732;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2759_dummy:
    call {:si_unique_call 1} out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72 := start_port_read_loop_$bb25(in_$p2, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72);
    return;

  exit:
    return;
}



procedure start_port_read_loop_$bb25(in_$p2: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref) returns (out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref);



implementation start_port_read_loop_$bb9(in_$p0: ref, in_$p2: ref, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref) returns (out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref)
{

  entry:
    out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78 := in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$p73, in_$p74, in_$i75, in_$p76, in_$p77, in_$p78;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i11, out_$i12, out_$p13, out_$p14 := out_$i34, out_$i75, out_$p14, out_$p78;
    goto corral_source_split_2768_dummy;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} list_add(out_$p13, out_$p76);
    goto corral_source_split_2766;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(96, 1));
    goto corral_source_split_2765;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} out_$i75 := _raw_spin_lock_irqsave(out_$p74);
    call {:si_unique_call 547} {:cexpr "flags"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} out_$p74 := spinlock_check(out_$p73);
    goto corral_source_split_2762;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2761;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb16:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p36, out_$i37 := out_$p13, out_$i34;
    assume true;
    goto $bb16;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out_$i34 := usb_submit_urb(out_$p27, 208);
    call {:si_unique_call 532} {:cexpr "retval"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} spin_unlock_irqrestore(out_$p33, out_$i12);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, out_$p31);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p27, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2328)), $mul.ref(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_2693;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} list_del(out_$p13);
    goto corral_source_split_2692;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i18 == 1;
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i11, out_$i12;
    assume true;
    goto $bb11;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i15, out_$i17);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2684;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2768_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78 := start_port_read_loop_$bb9(in_$p0, in_$p2, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78);
    return;

  exit:
    return;
}



procedure start_port_read_loop_$bb9(in_$p0: ref, in_$p2: ref, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref) returns (out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref);
  modifies $M.0;



implementation ldv_assume_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_assume_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_assume_stop_loop_$bb1();



implementation main_loop_$bb5(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i33: i32, in_$i34: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32) returns (out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i33: i32, out_$i34: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i33, out_$i34, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i33, in_$i34, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i33, out_$i34;
    goto $bb118_dummy;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i50;
    goto $bb82;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i45;
    goto $bb82;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i42;
    goto $bb82;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i2, out_$i3;
    goto $bb82;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i32, out_$i3;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  $bb76:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i2;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i32 := 0;
    goto $bb81;

  $bb78:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i30 := $M.16;
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} ldv_check_return_value(out_$i29);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$i29 := $M.16;
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.16 := out_$i28;
    call {:si_unique_call 624} {:cexpr "res_whiteheat_firmware_download_0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} out_$i28 := whiteheat_firmware_download($u6, $u7);
    goto corral_source_split_3094;

  $bb75:
    assume out_$i27 == 1;
    goto corral_source_split_3093;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i2, 0);
    goto corral_source_split_2973;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i9 == 1;
    goto corral_source_split_2968;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_2957;

  $bb9:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 608} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2956;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_2949;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 603} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 605} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i7 == 1);
    goto corral_source_split_2966;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i3, 0);
    goto corral_source_split_2960;

  $bb10:
    assume out_$i6 == 1;
    goto corral_source_split_2959;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 0);
    goto corral_source_split_2954;

  $bb8:
    assume !(out_$i5 == 1);
    goto corral_source_split_2953;

  $bb11:
    assume !(out_$i6 == 1);
    goto corral_source_split_2962;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_vslice_dummy_var_99 := whiteheat_firmware_attach($u6);
    goto corral_source_split_2980;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i10 == 1;
    goto corral_source_split_2975;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 1);
    goto corral_source_split_2971;

  $bb18:
    assume !(out_$i9 == 1);
    goto corral_source_split_2970;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  $bb84:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := out_$i3;
    goto $bb88;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i41;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i3, 1);
    call {:si_unique_call 630} {:cexpr "ldv_s_whiteheat_device_usb_serial_driver"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3117;

  $bb86:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i39 := $M.17;
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} ldv_check_return_value(out_$i38);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i38 := $M.17;
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.17 := out_$i37;
    call {:si_unique_call 628} {:cexpr "res_whiteheat_open_4"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} out_$i37 := whiteheat_open($u8, $u9);
    goto corral_source_split_3108;

  $bb83:
    assume out_$i36 == 1;
    goto corral_source_split_3107;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i3, 0);
    goto corral_source_split_2987;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i11 == 1;
    goto corral_source_split_2982;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i8, 2);
    goto corral_source_split_2978;

  $bb21:
    assume !(out_$i10 == 1);
    goto corral_source_split_2977;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  $bb90:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i3;
    goto $bb91;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i44;
    goto $bb91;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i3, 1);
    call {:si_unique_call 632} {:cexpr "ldv_s_whiteheat_device_usb_serial_driver"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} whiteheat_close($u9);
    goto corral_source_split_3122;

  $bb89:
    assume out_$i43 == 1;
    goto corral_source_split_3121;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i3, 1);
    goto corral_source_split_2994;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i12 == 1;
    goto corral_source_split_2989;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i8, 3);
    goto corral_source_split_2985;

  $bb24:
    assume !(out_$i11 == 1);
    goto corral_source_split_2984;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_3137;

  $bb93:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i3;
    goto $bb99;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i50 := 0;
    goto $bb99;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb96;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb96;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_30:
    goto corral_source_split_3135;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} whiteheat_release($u6);
    goto SeqInstr_29;

  $bb97:
    assume out_$i49 == 1;
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i47, $sub.i32(0, 12));
    goto corral_source_split_3132;

  $bb94:
    assume out_$i48 == 1;
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, $sub.i32(0, 19));
    goto corral_source_split_3129;

  SeqInstr_27:
    call {:si_unique_call 634} {:cexpr "attach_status"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3128;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_$i47 := whiteheat_attach($u6);
    goto SeqInstr_26;

  $bb92:
    assume out_$i46 == 1;
    goto corral_source_split_3127;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i3, 2);
    goto corral_source_split_3001;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i13 == 1;
    goto corral_source_split_2996;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i8, 4);
    goto corral_source_split_2992;

  $bb27:
    assume !(out_$i12 == 1);
    goto corral_source_split_2991;

  SeqInstr_24:
    goto corral_source_split_3008;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_vslice_dummy_var_100 := whiteheat_attach($u6);
    goto SeqInstr_23;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i14 == 1;
    goto corral_source_split_3003;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i8, 5);
    goto corral_source_split_2999;

  $bb30:
    assume !(out_$i13 == 1);
    goto corral_source_split_2998;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} out_vslice_dummy_var_101 := whiteheat_write($u8, $u9, $u10, $u2);
    goto corral_source_split_3015;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i15 == 1;
    goto corral_source_split_3010;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i8, 6);
    goto corral_source_split_3006;

  $bb33:
    assume !(out_$i14 == 1);
    goto corral_source_split_3005;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} out_vslice_dummy_var_102 := whiteheat_write_room($u8);
    goto corral_source_split_3022;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i16 == 1;
    goto corral_source_split_3017;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i8, 7);
    goto corral_source_split_3013;

  $bb36:
    assume !(out_$i15 == 1);
    goto corral_source_split_3012;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} out_vslice_dummy_var_103 := whiteheat_ioctl($u8, $u2, $u3);
    goto corral_source_split_3029;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i17 == 1;
    goto corral_source_split_3024;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i8, 8);
    goto corral_source_split_3020;

  $bb39:
    assume !(out_$i16 == 1);
    goto corral_source_split_3019;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} whiteheat_set_termios($u8, $u9, $u11);
    goto corral_source_split_3036;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i18 == 1;
    goto corral_source_split_3031;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i8, 9);
    goto corral_source_split_3027;

  $bb42:
    assume !(out_$i17 == 1);
    goto corral_source_split_3026;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} whiteheat_break_ctl($u8, $u2);
    goto corral_source_split_3043;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i19 == 1;
    goto corral_source_split_3038;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i8, 10);
    goto corral_source_split_3034;

  $bb45:
    assume !(out_$i18 == 1);
    goto corral_source_split_3033;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} out_vslice_dummy_var_104 := whiteheat_tiocmget($u8);
    goto corral_source_split_3050;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i20 == 1;
    goto corral_source_split_3045;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i8, 11);
    goto corral_source_split_3041;

  $bb48:
    assume !(out_$i19 == 1);
    goto corral_source_split_3040;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_vslice_dummy_var_105 := whiteheat_tiocmset($u8, $u2, $u2);
    goto corral_source_split_3057;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i21 == 1;
    goto corral_source_split_3052;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i8, 12);
    goto corral_source_split_3048;

  $bb51:
    assume !(out_$i20 == 1);
    goto corral_source_split_3047;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_vslice_dummy_var_106 := whiteheat_chars_in_buffer($u8);
    goto corral_source_split_3064;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i22 == 1;
    goto corral_source_split_3059;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i8, 13);
    goto corral_source_split_3055;

  $bb54:
    assume !(out_$i21 == 1);
    goto corral_source_split_3054;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} whiteheat_throttle($u8);
    goto corral_source_split_3071;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i23 == 1;
    goto corral_source_split_3066;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i8, 14);
    goto corral_source_split_3062;

  $bb57:
    assume !(out_$i22 == 1);
    goto corral_source_split_3061;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} whiteheat_unthrottle($u8);
    goto corral_source_split_3078;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume out_$i24 == 1;
    goto corral_source_split_3073;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i8, 15);
    goto corral_source_split_3069;

  $bb60:
    assume !(out_$i23 == 1);
    goto corral_source_split_3068;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} whiteheat_read_callback($u5);
    goto corral_source_split_3085;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i25 == 1;
    goto corral_source_split_3080;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i8, 16);
    goto corral_source_split_3076;

  $bb63:
    assume !(out_$i24 == 1);
    goto corral_source_split_3075;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} whiteheat_write_callback($u5);
    goto corral_source_split_3091;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i26 == 1;
    goto corral_source_split_3087;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i8, 17);
    goto corral_source_split_3083;

  $bb66:
    assume !(out_$i25 == 1);
    goto corral_source_split_3082;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume !(out_$i26 == 1);
    goto corral_source_split_3089;

  $bb118_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i33, out_$i34, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106 := main_loop_$bb5(out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i33, out_$i34, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i33: i32, in_$i34: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32) returns (out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i33: i32, out_$i34: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32);
  modifies $M.16, $M.1, $CurrAddr, $M.17, $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, assertsPassed, $M.7;


