var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.14: [ref]i64;

var $M.15: [ref]i64;

var $M.16: [ref]i64;

var $M.17: [ref]i64;

var $M.18: i32;

var $M.19: [ref]i64;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: i32;

var $M.23: [ref]i64;

var $M.24: [ref]ref;

var $M.25: [ref]i32;

var $M.26: [ref]i32;

var $M.27: [ref]i32;

var $M.28: [ref]i32;

var $M.29: ref;

var $M.30: [ref]i64;

var $M.31: [ref]i64;

var $M.32: [ref]i64;

var $M.33: [ref]i64;

var $M.34: ref;

var $M.35: i32;

var $M.36: i32;

var $M.37: [ref]i32;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: ref;

var $M.61: ref;

var $M.62: i32;

var $M.63: [ref]i8;

var $M.65: [ref]i32;

var $M.66: [ref]i32;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]i32;

var $M.71: [ref]i32;

var $M.72: [ref]i32;

var $M.73: [ref]i32;

var $M.128: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 531093);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const comedi_default_buf_size_kb: ref;

axiom comedi_default_buf_size_kb == $sub.ref(0, 2056);

const comedi_default_buf_maxsize_kb: ref;

axiom comedi_default_buf_maxsize_kb == $sub.ref(0, 3084);

const comedi_vm_ops_group0: ref;

axiom comedi_vm_ops_group0 == $sub.ref(0, 4116);

const comedi_fops_group1: ref;

axiom comedi_fops_group1 == $sub.ref(0, 5148);

const comedi_fops_group2: ref;

axiom comedi_fops_group2 == $sub.ref(0, 6180);

const dev_attr_max_write_buffer_kb_group0: ref;

axiom dev_attr_max_write_buffer_kb_group0 == $sub.ref(0, 7212);

const dev_attr_max_write_buffer_kb_group1: ref;

axiom dev_attr_max_write_buffer_kb_group1 == $sub.ref(0, 8244);

const dev_attr_max_read_buffer_kb_group0: ref;

axiom dev_attr_max_read_buffer_kb_group0 == $sub.ref(0, 9276);

const dev_attr_max_read_buffer_kb_group1: ref;

axiom dev_attr_max_read_buffer_kb_group1 == $sub.ref(0, 10308);

const dev_attr_write_buffer_kb_group0: ref;

axiom dev_attr_write_buffer_kb_group0 == $sub.ref(0, 11340);

const dev_attr_write_buffer_kb_group1: ref;

axiom dev_attr_write_buffer_kb_group1 == $sub.ref(0, 12372);

const dev_attr_read_buffer_kb_group0: ref;

axiom dev_attr_read_buffer_kb_group0 == $sub.ref(0, 13404);

const dev_attr_read_buffer_kb_group1: ref;

axiom dev_attr_read_buffer_kb_group1 == $sub.ref(0, 14436);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 15464);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 16492);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 17520);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 18548);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 19576);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 20604);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 21632);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 22660);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 23688);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 24716);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 25744);

const range_bipolar10: ref;

axiom range_bipolar10 == $sub.ref(0, 26784);

const range_bipolar5: ref;

axiom range_bipolar5 == $sub.ref(0, 27824);

const range_bipolar2_5: ref;

axiom range_bipolar2_5 == $sub.ref(0, 28864);

const range_unipolar10: ref;

axiom range_unipolar10 == $sub.ref(0, 29904);

const range_unipolar5: ref;

axiom range_unipolar5 == $sub.ref(0, 30944);

const range_unipolar2_5: ref;

axiom range_unipolar2_5 == $sub.ref(0, 31984);

const range_0_20mA: ref;

axiom range_0_20mA == $sub.ref(0, 33024);

const range_4_20mA: ref;

axiom range_4_20mA == $sub.ref(0, 34064);

const range_0_32mA: ref;

axiom range_0_32mA == $sub.ref(0, 35104);

const range_unknown: ref;

axiom range_unknown == $sub.ref(0, 36144);

const comedi_debug: ref;

axiom comedi_debug == $sub.ref(0, 37172);

const comedi_drivers_list_lock: ref;

axiom comedi_drivers_list_lock == $sub.ref(0, 38364);

const {:count 35} .str.12: ref;

axiom .str.12 == $sub.ref(0, 39423);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 40472);

const comedi_drivers: ref;

axiom comedi_drivers == $sub.ref(0, 41504);

const comedi_proc_fops_group1: ref;

axiom comedi_proc_fops_group1 == $sub.ref(0, 42536);

const comedi_proc_fops_group2: ref;

axiom comedi_proc_fops_group2 == $sub.ref(0, 43568);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 44596);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 45624);

const comedi_proc_fops: ref;

axiom comedi_proc_fops == $sub.ref(0, 46864);

const dev_attr_write_buffer_kb: ref;

axiom dev_attr_write_buffer_kb == $sub.ref(0, 47936);

const dev_attr_max_write_buffer_kb: ref;

axiom dev_attr_max_write_buffer_kb == $sub.ref(0, 49008);

const dev_attr_read_buffer_kb: ref;

axiom dev_attr_read_buffer_kb == $sub.ref(0, 50080);

const dev_attr_max_read_buffer_kb: ref;

axiom dev_attr_max_read_buffer_kb == $sub.ref(0, 51152);

const {:count 5} comedi_dev_attrs: ref;

axiom comedi_dev_attrs == $sub.ref(0, 52216);

const comedi_dev_group: ref;

axiom comedi_dev_group == $sub.ref(0, 53272);

const {:count 2} comedi_dev_groups: ref;

axiom comedi_dev_groups == $sub.ref(0, 54312);

const comedi_fops: ref;

axiom comedi_fops == $sub.ref(0, 55552);

const comedi_cdev: ref;

axiom comedi_cdev == $sub.ref(0, 56912);

const comedi_vm_ops: ref;

axiom comedi_vm_ops == $sub.ref(0, 58008);

const comedi_subdevice_minor_table_lock: ref;

axiom comedi_subdevice_minor_table_lock == $sub.ref(0, 59200);

const comedi_board_minor_table_lock: ref;

axiom comedi_board_minor_table_lock == $sub.ref(0, 60392);

const comedi_class: ref;

axiom comedi_class == $sub.ref(0, 61424);

const {:count 208} comedi_subdevice_minor_table: ref;

axiom comedi_subdevice_minor_table == $sub.ref(0, 64112);

const {:count 48} comedi_board_minor_table: ref;

axiom comedi_board_minor_table == $sub.ref(0, 65520);

const comedi_num_legacy_minors: ref;

axiom comedi_num_legacy_minors == $sub.ref(0, 66548);

const {:count 40} .str.24: ref;

axiom .str.24 == $sub.ref(0, 67612);

const {:count 30} .str.25: ref;

axiom .str.25 == $sub.ref(0, 68666);

const {:count 44} .str.26: ref;

axiom .str.26 == $sub.ref(0, 69734);

const {:count 34} .str.27: ref;

axiom .str.27 == $sub.ref(0, 70792);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 250} .str.5: ref;

axiom .str.5 == $sub.ref(0, 72066);

const {:count 51} .str.35: ref;

axiom .str.35 == $sub.ref(0, 73141);

const {:count 7} .str.6: ref;

axiom .str.6 == $sub.ref(0, 74172);

const {:count 12} .str.38: ref;

axiom .str.38 == $sub.ref(0, 75208);

const {:count 30} .str.39: ref;

axiom .str.39 == $sub.ref(0, 76262);

const {:count 27} .str.40: ref;

axiom .str.40 == $sub.ref(0, 77313);

const {:count 44} .str.41: ref;

axiom .str.41 == $sub.ref(0, 78381);

const {:count 12} .str.42: ref;

axiom .str.42 == $sub.ref(0, 79417);

const {:count 42} .str.34: ref;

axiom .str.34 == $sub.ref(0, 80483);

const {:count 42} .str.43: ref;

axiom .str.43 == $sub.ref(0, 81549);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 82595);

const {:count 47} .str.45: ref;

axiom .str.45 == $sub.ref(0, 83666);

const {:count 11} .str.72: ref;

axiom .str.72 == $sub.ref(0, 84701);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 85758);

const {:count 18} .str.74: ref;

axiom .str.74 == $sub.ref(0, 86800);

const {:count 20} .str.75: ref;

axiom .str.75 == $sub.ref(0, 87844);

const {:count 22} .str.76: ref;

axiom .str.76 == $sub.ref(0, 88890);

const {:count 35} .str.77: ref;

axiom .str.77 == $sub.ref(0, 89949);

const {:count 23} .str.78: ref;

axiom .str.78 == $sub.ref(0, 90996);

const {:count 22} .str.79: ref;

axiom .str.79 == $sub.ref(0, 92042);

const {:count 27} .str.80: ref;

axiom .str.80 == $sub.ref(0, 93093);

const {:count 72} .str.81: ref;

axiom .str.81 == $sub.ref(0, 94189);

const {:count 35} .str.82: ref;

axiom .str.82 == $sub.ref(0, 95248);

const {:count 25} .str.83: ref;

axiom .str.83 == $sub.ref(0, 96297);

const {:count 36} .str.84: ref;

axiom .str.84 == $sub.ref(0, 97357);

const {:count 49} .str.10: ref;

axiom .str.10 == $sub.ref(0, 98430);

const {:count 27} .str.11: ref;

axiom .str.11 == $sub.ref(0, 99481);

const {:count 13} .str.94: ref;

axiom .str.94 == $sub.ref(0, 100518);

const {:count 244} .str.8: ref;

axiom .str.8 == $sub.ref(0, 101786);

const {:count 43} .str.95: ref;

axiom .str.95 == $sub.ref(0, 102853);

const {:count 118} .str.92: ref;

axiom .str.92 == $sub.ref(0, 103995);

const {:count 27} .str.93: ref;

axiom .str.93 == $sub.ref(0, 105046);

const {:count 18} .str.67: ref;

axiom .str.67 == $sub.ref(0, 106088);

const {:count 24} .str.68: ref;

axiom .str.68 == $sub.ref(0, 107136);

const {:count 31} .str.69: ref;

axiom .str.69 == $sub.ref(0, 108191);

const {:count 37} .str.70: ref;

axiom .str.70 == $sub.ref(0, 109252);

const {:count 29} .str.71: ref;

axiom .str.71 == $sub.ref(0, 110305);

const {:count 17} .str.65: ref;

axiom .str.65 == $sub.ref(0, 111346);

const {:count 25} .str.51: ref;

axiom .str.51 == $sub.ref(0, 112395);

const {:count 30} .str.52: ref;

axiom .str.52 == $sub.ref(0, 113449);

const {:count 32} .str.53: ref;

axiom .str.53 == $sub.ref(0, 114505);

const {:count 48} .str.54: ref;

axiom .str.54 == $sub.ref(0, 115577);

const {:count 44} .str.66: ref;

axiom .str.66 == $sub.ref(0, 116645);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 117696);

const {:count 32} .str.60: ref;

axiom .str.60 == $sub.ref(0, 118752);

const {:count 22} .str.61: ref;

axiom .str.61 == $sub.ref(0, 119798);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 120835);

const {:count 26} .str.55: ref;

axiom .str.55 == $sub.ref(0, 121885);

const {:count 24} .str.56: ref;

axiom .str.56 == $sub.ref(0, 122933);

const {:count 44} .str.57: ref;

axiom .str.57 == $sub.ref(0, 124001);

const {:count 44} .str.58: ref;

axiom .str.58 == $sub.ref(0, 125069);

const {:count 26} .str.62: ref;

axiom .str.62 == $sub.ref(0, 126119);

const {:count 27} .str.63: ref;

axiom .str.63 == $sub.ref(0, 127170);

const {:count 23} .str.64: ref;

axiom .str.64 == $sub.ref(0, 128217);

const {:count 17} .str.49: ref;

axiom .str.49 == $sub.ref(0, 129258);

const {:count 50} .str.48: ref;

axiom .str.48 == $sub.ref(0, 130332);

const {:count 19} .str.7: ref;

axiom .str.7 == $sub.ref(0, 131375);

const {:count 47} .str.9: ref;

axiom .str.9 == $sub.ref(0, 132446);

const {:count 19} .str.47: ref;

axiom .str.47 == $sub.ref(0, 133489);

const {:count 20} .str.28: ref;

axiom .str.28 == $sub.ref(0, 134533);

const {:count 49} .str.29: ref;

axiom .str.29 == $sub.ref(0, 135606);

const {:count 52} .str.30: ref;

axiom .str.30 == $sub.ref(0, 136682);

const {:count 53} .str.31: ref;

axiom .str.31 == $sub.ref(0, 137759);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 119} .str.102: ref;

axiom .str.102 == $sub.ref(0, 138902);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 116} .str.103: ref;

axiom .str.103 == $sub.ref(0, 140042);

const {:count 41} .str.46: ref;

axiom .str.46 == $sub.ref(0, 141107);

const {:count 57} .str.17: ref;

axiom .str.17 == $sub.ref(0, 142188);

const {:count 61} .str.98: ref;

axiom .str.98 == $sub.ref(0, 143273);

const {:count 52} .str.99: ref;

axiom .str.99 == $sub.ref(0, 144349);

const {:count 18} .str.100: ref;

axiom .str.100 == $sub.ref(0, 145391);

const {:count 26} .str.101: ref;

axiom .str.101 == $sub.ref(0, 146441);

const {:count 63} .str.3: ref;

axiom .str.3 == $sub.ref(0, 147528);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 148568);

const {:count 47} .str.96: ref;

axiom .str.96 == $sub.ref(0, 149639);

const {:count 6} .str.97: ref;

axiom .str.97 == $sub.ref(0, 150669);

const {:count 12} .str.37: ref;

axiom .str.37 == $sub.ref(0, 151705);

const {:count 13} .str.33: ref;

axiom .str.33 == $sub.ref(0, 152742);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 12} .str.36: ref;

axiom .str.36 == $sub.ref(0, 153778);

const {:count 19} .str.88: ref;

axiom .str.88 == $sub.ref(0, 154821);

const {:count 4} .str.32: ref;

axiom .str.32 == $sub.ref(0, 155849);

const {:count 15} .str.89: ref;

axiom .str.89 == $sub.ref(0, 156888);

const {:count 20} .str.90: ref;

axiom .str.90 == $sub.ref(0, 157932);

const {:count 16} .str.91: ref;

axiom .str.91 == $sub.ref(0, 158972);

const {:count 41} .str.104: ref;

axiom .str.104 == $sub.ref(0, 160037);

const {:count 65} .str.105: ref;

axiom .str.105 == $sub.ref(0, 161126);

const {:count 22} .str.106: ref;

axiom .str.106 == $sub.ref(0, 162172);

const {:count 12} .str.107: ref;

axiom .str.107 == $sub.ref(0, 163208);

const {:count 5} .str.108: ref;

axiom .str.108 == $sub.ref(0, 164237);

const {:count 5} .str.109: ref;

axiom .str.109 == $sub.ref(0, 165266);

const .str: ref;

axiom .str == $sub.ref(0, 166298);

const {:count 66} .str.1: ref;

axiom .str.1 == $sub.ref(0, 167388);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 168421);

const {:count 25} .str.22: ref;

axiom .str.22 == $sub.ref(0, 169470);

const {:count 12} .str.23: ref;

axiom .str.23 == $sub.ref(0, 170506);

const {:count 49} .str.85: ref;

axiom .str.85 == $sub.ref(0, 171579);

const {:count 112} .str.86: ref;

axiom .str.86 == $sub.ref(0, 172715);

const {:count 33} .str.87: ref;

axiom .str.87 == $sub.ref(0, 173772);

const {:count 24} .str.14: ref;

axiom .str.14 == $sub.ref(0, 174820);

const {:count 42} .str.15: ref;

axiom .str.15 == $sub.ref(0, 175886);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 34} .str.16: ref;

axiom .str.16 == $sub.ref(0, 176944);

const {:count 59} .str.18: ref;

axiom .str.18 == $sub.ref(0, 178027);

const {:count 56} .str.19: ref;

axiom .str.19 == $sub.ref(0, 179107);

const {:count 52} .str.20: ref;

axiom .str.20 == $sub.ref(0, 180183);

const {:count 41} .str.21: ref;

axiom .str.21 == $sub.ref(0, 181248);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 182280);

const {:count 3} .str.1.234: ref;

axiom .str.1.234 == $sub.ref(0, 183307);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 184345);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 185373);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 186405);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 187437);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 188469);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 189501);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const comedi_vm_open: ref;

axiom comedi_vm_open == $sub.ref(0, 190533);

procedure comedi_vm_open($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_vm_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} mutex_lock_nested($p8, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} mutex_unlock($p13);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    return;
}



const comedi_vm_close: ref;

axiom comedi_vm_close == $sub.ref(0, 191565);

procedure comedi_vm_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_vm_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} mutex_lock_nested($p8, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} mutex_unlock($p13);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 192597);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 193629);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 194661);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 15} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 16} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 1} true;
    call {:si_unique_call 17} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 18} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_read: ref;

axiom comedi_read == $sub.ref(0, 195693);

procedure comedi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation comedi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i91: i1;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i1;
  var $i98: i8;
  var $i99: i1;
  var $i100: i32;
  var $p101: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $i90: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i134: i32;
  var $i135: i1;
  var $i102: i32;
  var $i103: i32;
  var $i136: i1;
  var $i137: i8;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $p150: ref;
  var $i151: i1;
  var $i152: i32;
  var $i153: i64;
  var $i22: i64;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 23} {:cexpr "comedi_read:arg:nbytes"} boogie_si_record_i64($i2);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p8 := get_current();
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, $p8);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, default_wake_function);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, $0.ref);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, $0.ref);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p17 := file_inode($p0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i18 := iminor($p17);
    call {:si_unique_call 27} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p19 := comedi_dev_from_minor($i18);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i26 := $M.7;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, .str.6);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p29, .str.36);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p30, .str.5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p31, .str.34);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.12, $p33);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 2178);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p33, $i36);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p37, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.13, $p38);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 30} {:cexpr "tmp___3"} boogie_si_record_i64($i42);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_14 := __dynamic_pr_debug.ref.ref.i32($p5, .str.34, $i45);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p47 := comedi_read_subdevice($p19, $i18);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i59 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i2, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i63, $i65);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} add_wait_queue($p67, $p4);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i2, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, 0;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i136 := comedi_is_subdevice_idle($p47);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i8($i136);
    call {:si_unique_call 48} {:cexpr "tmp___14"} boogie_si_record_i8($i137);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i8.i1($i137);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p7, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p146 := get_current();
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.15, $p7);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p146, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 63} $i149 := devirtbounce(0, $p148, $i147, $p148);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p7, $i149);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} remove_wait_queue($p150, $p4);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i102, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i151 == 1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i152 := $i103;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i152);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i22 := $i153;
    goto $bb3;

  $bb81:
    assume $i151 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i152 := $i102;
    goto $bb83;

  $bb74:
    assume $i138 == 1;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} mutex_lock_nested($p139, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i141, $i143);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} mutex_unlock($p145);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i144 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} do_become_nonbusy($p19, $p47);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call $p69, $i70, $p71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i91, $i92, $i93, $i94, $i95, $p104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i90, $i135 := comedi_read_loop_$bb32($p0, $i2, $p6, $p47, $p55, $i68, $p69, $i70, $p71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $i91, $i92, $i93, $i94, $i95, $p104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i90, $i135);
    goto $bb32_last;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i135 == 1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb71:
    assume $i135 == 1;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p6, 1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p69 := get_current();
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.14, $p6);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 35} $i72 := devirtbounce(0, $p71, $i70, $p71);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p6, $i72);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i2);
    call {:si_unique_call 36} {:cexpr "n"} boogie_si_record_i32($i73);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i74 := comedi_buf_read_n_available($p55);
    call {:si_unique_call 38} {:cexpr "tmp___8"} boogie_si_record_i32($i74);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, $i74);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i32($i77, $i79);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i74;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, $i73);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i73;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i90 := $i88;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i124);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p122, $mul.ref($i125, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i127 := copy_to_user($p1, $p126, $i90);
    call {:si_unique_call 54} {:cexpr "m"} boogie_si_record_i32($i127);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i130, $i131 := $i90, 0;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_15 := comedi_buf_read_alloc($p55, $i130);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_16 := comedi_buf_read_free($p55, $i130);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i134 := $add.i32(0, $i130);
    call {:si_unique_call 58} {:cexpr "count"} boogie_si_record_i32($i134);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i102, $i103 := $i134, $i131;
    goto $bb51;

  $bb68:
    assume $i128 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i90, $i127);
    call {:si_unique_call 55} {:cexpr "n"} boogie_si_record_i32($i129);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i130, $i131 := $i129, $sub.i32(0, 14);
    goto $bb70;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i91 := comedi_is_subdevice_running($p47);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i8($i91);
    call {:si_unique_call 41} {:cexpr "tmp___10"} boogie_si_record_i8($i92);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 2048);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} schedule();
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p108 := get_current();
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i109 := signal_pending($p108);
    call {:si_unique_call 52} {:cexpr "tmp___13"} boogie_si_record_i32($i109);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i117, $i119);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i68 == 1);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb65_dummy;

  $bb62:
    assume $i120 == 1;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, $sub.i32(0, 13);
    goto $bb51;

  $bb59:
    assume $i114 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, 0;
    goto $bb51;

  $bb56:
    assume $i110 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, $sub.i32(0, 512);
    goto $bb51;

  $bb53:
    assume $i107 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, $sub.i32(0, 11);
    goto $bb51;

  $bb46:
    assume $i95 == 1;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} mutex_lock_nested($p96, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} do_become_nonbusy($p19, $p47);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i97 := comedi_is_subdevice_in_error($p47);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i8($i97);
    call {:si_unique_call 45} {:cexpr "tmp___9"} boogie_si_record_i8($i98);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} mutex_unlock($p101);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i102, $i103 := 0, $i100;
    goto $bb51;

  $bb48:
    assume $i99 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 32);
    goto $bb50;

  $bb43:
    assume $i93 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb45;

  $bb38:
    assume $i87 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i88 := $i86;
    goto $bb40;

  $bb35:
    assume $i80 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i82, $i84);
    call {:si_unique_call 39} {:cexpr "m"} boogie_si_record_i32($i85);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb37;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 13);
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 5);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb15;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb3;

  $bb65_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32(0, 0);
    goto corral_source_split_157;
}



const comedi_write: ref;

axiom comedi_write == $sub.ref(0, 196725);

procedure comedi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.16, $M.17, $M.0, $CurrAddr;



implementation comedi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $i111: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i143: i32;
  var $i144: i1;
  var $i86: i32;
  var $i87: i32;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $i150: i1;
  var $i151: i32;
  var $i152: i64;
  var $i22: i64;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 69} {:cexpr "comedi_write:arg:nbytes"} boogie_si_record_i64($i2);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p8 := get_current();
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, $p8);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, default_wake_function);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, $0.ref);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, $0.ref);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p17 := file_inode($p0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i18 := iminor($p17);
    call {:si_unique_call 73} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p19 := comedi_dev_from_minor($i18);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i26 := $M.7;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, .str.6);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p29, .str.33);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p30, .str.5);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p31, .str.34);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.12, $p33);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 2082);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p33, $i36);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p37, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.13, $p38);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 76} {:cexpr "tmp___3"} boogie_si_record_i64($i42);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_17 := __dynamic_pr_debug.ref.ref.i32($p5, .str.34, $i45);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p47 := comedi_write_subdevice($p19, $i18);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i59 == 1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i2, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i63, $i65);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} add_wait_queue($p67, $p4);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i2, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p7, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p145 := get_current();
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.17, $p7);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p145, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 90} $i148 := devirtbounce(0, $p147, $i146, $p147);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p7, $i148);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} remove_wait_queue($p149, $p4);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i86, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i150 == 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i151 := $i87;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i22 := $i152;
    goto $bb3;

  $bb81:
    assume $i150 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i151 := $i86;
    goto $bb83;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $p97, $i98, $i99, $i100, $p101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $i125, $p126, $i127, $i128, $i111, $i144, vslice_dummy_var_18 := comedi_write_loop_$bb32($p0, $i2, $p6, $p47, $p55, $i68, $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $p97, $i98, $i99, $i100, $p101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $i125, $p126, $i127, $i128, $i111, $i144, vslice_dummy_var_18);
    goto $bb32_last;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i144 == 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb77:
    assume $i144 == 1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p6, 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p69 := get_current();
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.16, $p6);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 81} $i72 := devirtbounce(0, $p71, $i70, $p71);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p6, $i72);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i73 := comedi_is_subdevice_running($p47);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 83} {:cexpr "tmp___9"} boogie_si_record_i8($i74);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i2);
    call {:si_unique_call 91} {:cexpr "n"} boogie_si_record_i32($i88);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i88);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i94 := $ugt.i32($i91, $i93);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i88;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vslice_dummy_var_18 := comedi_buf_write_alloc($p55, $i102);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i104 := comedi_buf_write_n_allocated($p55);
    call {:si_unique_call 95} {:cexpr "tmp___12"} boogie_si_record_i32($i104);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i100, $i104);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i107 := $i100;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, $i88);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i88;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i111 := $i109;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p130, $mul.ref($i133, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i111);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i136 := copy_from_user($p134, $p1, $i135);
    call {:si_unique_call 103} {:cexpr "tmp___15"} boogie_si_record_i64($i136);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i64.i32($i136);
    call {:si_unique_call 104} {:cexpr "m"} boogie_si_record_i32($i137);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i140, $i141 := $i111, 0;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_19 := comedi_buf_write_free($p55, $i140);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i143 := $add.i32(0, $i140);
    call {:si_unique_call 107} {:cexpr "count"} boogie_si_record_i32($i143);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i86, $i87 := $i143, $i141;
    goto $bb46;

  $bb74:
    assume $i138 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i111, $i137);
    call {:si_unique_call 105} {:cexpr "n"} boogie_si_record_i32($i139);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i139, $sub.i32(0, 14);
    goto $bb76;

  $bb57:
    assume $i110 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 2048);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} schedule();
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p116 := get_current();
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i117 := signal_pending($p116);
    call {:si_unique_call 101} {:cexpr "tmp___14"} boogie_si_record_i32($i117);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i125, $i127);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i68 == 1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb71_dummy;

  $bb68:
    assume $i128 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, $sub.i32(0, 13);
    goto $bb46;

  $bb65:
    assume $i122 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, 0;
    goto $bb46;

  $bb62:
    assume $i118 == 1;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, $sub.i32(0, 512);
    goto $bb46;

  $bb59:
    assume $i115 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, $sub.i32(0, 11);
    goto $bb46;

  $bb54:
    assume $i108 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i109 := $i107;
    goto $bb56;

  $bb51:
    assume $i105 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i106 := comedi_buf_write_n_allocated($p55);
    call {:si_unique_call 97} {:cexpr "tmp___11"} boogie_si_record_i32($i106);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i107 := $i106;
    goto $bb53;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p55, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i96, $i98);
    call {:si_unique_call 92} {:cexpr "m"} boogie_si_record_i32($i99);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb50;

  $bb38:
    assume $i77 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32(0, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i86, $i87 := 0, $i85;
    goto $bb46;

  $bb40:
    assume $i78 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} mutex_lock_nested($p79, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i80 := comedi_is_subdevice_in_error($p47);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i80);
    call {:si_unique_call 86} {:cexpr "tmp___8"} boogie_si_record_i8($i81);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} do_become_nonbusy($p19, $p47);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p19, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} mutex_unlock($p84);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    goto $bb45;

  $bb42:
    assume $i82 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32(0, 32);
    goto $bb44;

  $bb35:
    assume $i75 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb37;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 13);
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 5);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb15;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb3;

  $bb71_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32(0, 0);
    goto corral_source_split_398;
}



const comedi_poll: ref;

axiom comedi_poll == $sub.ref(0, 197757);

procedure comedi_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.0;



implementation comedi_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i57: i32;
  var $i50: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i91: i32;
  var $i93: i1;
  var $i94: i8;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i99: i32;
  var $i92: i32;
  var $i106: i32;
  var $i34: i32;
  var $p107: ref;
  var $i8: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p3 := file_inode($p0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i4 := iminor($p3);
    call {:si_unique_call 112} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p5 := comedi_dev_from_minor($i4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} mutex_lock_nested($p9, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} mutex_unlock($p107);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i8 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p15, .str.6);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p16, .str.37);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p17, .str.5);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p18, .str.34);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.12, $p20);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 2040);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p20, $i23);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p24, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.13, $p25);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 116} {:cexpr "tmp___2"} boogie_si_record_i64($i29);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_20 := __dynamic_pr_debug.ref.ref.i32($p2, .str.34, $i32);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p35 := comedi_read_subdevice($p5, $i4);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p65 := comedi_write_subdevice($p5, $i4);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i106 := $i64;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i34 := $i106;
    goto $bb13;

  $bb33:
    assume $i67 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb35;

  $bb36:
    assume $i71 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i76 := bytes_per_sample($p75);
    call {:si_unique_call 130} {:cexpr "tmp___6"} boogie_si_record_i32($i76);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} poll_wait($p0, $p79, $p1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_21 := comedi_buf_write_alloc($p81, $i85);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i90 == 1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i93 := comedi_is_subdevice_running($p65);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i8($i93);
    call {:si_unique_call 135} {:cexpr "tmp___7"} boogie_si_record_i8($i94);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i97 == 1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p65, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i102 := comedi_buf_write_n_allocated($p101);
    call {:si_unique_call 138} {:cexpr "tmp___9"} boogie_si_record_i32($i102);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i103 := $uge.i32($i102, $i76);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i64;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i99 := $i105;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i92 := $i99;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i106 := $i92;
    goto $bb50;

  $bb47:
    assume $i103 == 1;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i64, 260);
    call {:si_unique_call 139} {:cexpr "mask"} boogie_si_record_i32($i104);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb49;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i64, 260);
    call {:si_unique_call 136} {:cexpr "mask"} boogie_si_record_i32($i98);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb46;

  $bb41:
    assume $i95 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb43;

  $bb38:
    assume $i90 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i64, 260);
    call {:si_unique_call 133} {:cexpr "mask"} boogie_si_record_i32($i91);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb40;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb17;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} poll_wait($p0, $p44, $p1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p35, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i51 := comedi_is_subdevice_running($p35);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    call {:si_unique_call 123} {:cexpr "tmp___3"} boogie_si_record_i8($i52);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p35, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i60 := comedi_buf_read_n_available($p59);
    call {:si_unique_call 126} {:cexpr "tmp___5"} boogie_si_record_i32($i60);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i57 := $i63;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50 := $i57;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i64 := $i50;
    goto $bb32;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i62 := $or.i32(0, 65);
    call {:si_unique_call 127} {:cexpr "mask"} boogie_si_record_i32($i62);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb31;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i56 := $or.i32(0, 65);
    call {:si_unique_call 124} {:cexpr "mask"} boogie_si_record_i32($i56);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb28;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb25;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i49 := $or.i32(0, 65);
    call {:si_unique_call 121} {:cexpr "mask"} boogie_si_record_i32($i49);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb22;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const comedi_unlocked_ioctl: ref;

axiom comedi_unlocked_ioctl == $sub.ref(0, 198789);

procedure comedi_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.23, $M.21, $M.32, assertsPassed, $M.33;



implementation comedi_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i77: i32;
  var $i13: i32;
  var $p114: ref;
  var $i115: i64;
  var $i9: i64;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 141} {:cexpr "comedi_unlocked_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 142} {:cexpr "comedi_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p4 := file_inode($p0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i5 := iminor($p4);
    call {:si_unique_call 145} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} mutex_lock_nested($p10, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 1083466752);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i30 := $M.7;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} mutex_unlock($p114);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i13);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i9 := $i115;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p32, .str.6);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p33, .str.44);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p34, .str.5);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p35, .str.45);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.12, $p37);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 1850);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p37, $i40);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p41, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.13, $p42);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 156} {:cexpr "tmp___3"} boogie_si_record_i64($i46);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i47 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_22 := __dynamic_pr_debug.ref.ref.i32($p3, .str.45, $i49);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i1, $sub.i32(0, 2142215158));
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i1, 25605);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32(0, 25);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i13 := $i77;
    goto $bb9;

  $bb42:
    assume $i55 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i64.i32($i2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i113 := do_poll_ioctl($p6, $i111, $p112);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 159} {:cexpr "rc"} boogie_si_record_i32($i113);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i77 := $i113;
    goto $bb83;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb44;

  $bb45:
    assume $i56 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i2);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i98 := do_cancel_ioctl($p6, $i96, $p97);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 161} {:cexpr "rc"} boogie_si_record_i32($i98);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i77 := $i98;
    goto $bb83;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 25606);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i57 == 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i64.i32($i2);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i95 := do_unlock_ioctl($p6, $i93, $p94);
    call {:si_unique_call 165} {:cexpr "rc"} boogie_si_record_i32($i95);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i77 := $i95;
    goto $bb83;

  $bb47:
    assume $i57 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i2);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i92 := do_lock_ioctl($p6, $i90, $p91);
    call {:si_unique_call 163} {:cexpr "rc"} boogie_si_record_i32($i92);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i77 := $i92;
    goto $bb83;

  $bb36:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb44;

  $bb53:
    assume $i60 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i2);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i89 := do_bufinfo_ioctl($p6, $p87, $p88);
    call {:si_unique_call 167} {:cexpr "rc"} boogie_si_record_i32($i89);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i77 := $i89;
    goto $bb83;

  $bb51:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb44;

  $bb55:
    assume $i61 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i2);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i79 := do_devinfo_ioctl($p6, $p78, $p0);
    call {:si_unique_call 169} {:cexpr "rc"} boogie_si_record_i32($i79);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i77 := $i79;
    goto $bb83;

  $bb49:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i1, $sub.i32(0, 2142215158));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb44;

  $bb57:
    assume $i62 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i2);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i104 := do_cmdtest_ioctl($p6, $p102, $p103);
    call {:si_unique_call 171} {:cexpr "rc"} boogie_si_record_i32($i104);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i77 := $i104;
    goto $bb83;

  $bb34:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, $sub.i32(0, 2144836596));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i1, $sub.i32(0, 2142215159));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i65 == 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i2);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i101 := do_cmd_ioctl($p6, $p99, $p100);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 173} {:cexpr "rc"} boogie_si_record_i32($i101);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i77 := $i101;
    goto $bb83;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb44;

  $bb65:
    assume $i66 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i2);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i82 := do_subdinfo_ioctl($p6, $p80, $p81);
    call {:si_unique_call 175} {:cexpr "rc"} boogie_si_record_i32($i82);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i77 := $i82;
    goto $bb83;

  $bb61:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i1, $sub.i32(0, 2144312317));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i1, $sub.i32(0, 2144312317));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb44;

  $bb69:
    assume $i68 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i84 := do_chaninfo_ioctl($p6, $p83);
    call {:si_unique_call 177} {:cexpr "rc"} boogie_si_record_i32($i84);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i77 := $i84;
    goto $bb83;

  $bb67:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i1, $sub.i32(0, 2144836596));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb44;

  $bb71:
    assume $i69 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i2);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i110 := do_insn_ioctl($p6, $p108, $p109);
    call {:si_unique_call 179} {:cexpr "rc"} boogie_si_record_i32($i110);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i77 := $i110;
    goto $bb83;

  $bb59:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i1, $sub.i32(0, 2146409461));
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb44;

  $bb77:
    assume $i72 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i76 := do_bufconfig_ioctl($p6, $p75);
    call {:si_unique_call 181} {:cexpr "rc"} boogie_si_record_i32($i76);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb83;

  $bb75:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i1, $sub.i32(0, 2146409461));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb44;

  $bb79:
    assume $i73 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i2);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i107 := do_insnlist_ioctl($p6, $p105, $p106);
    call {:si_unique_call 183} {:cexpr "rc"} boogie_si_record_i32($i107);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i77 := $i107;
    goto $bb83;

  $bb73:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i1, $sub.i32(0, 2146409464));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb44;

  $bb81:
    assume $i74 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i2);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i86 := do_rangeinfo_ioctl($p6, $p85);
    call {:si_unique_call 185} {:cexpr "rc"} boogie_si_record_i32($i86);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i77 := $i86;
    goto $bb83;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i5, 47);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i2);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i15 := do_devconfig_ioctl($p6, $p14);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 150} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb9;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i2, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i20 := $M.18;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i19, $i20);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb15;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i22 := comedi_clear_board_dev($p6);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 152} {:cexpr "tmp___2"} boogie_si_record_i8($i23);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} mutex_unlock($p25);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} comedi_free_board_dev($p6);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i15);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i9 := $i26;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 25);
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const comedi_compat_ioctl: ref;

axiom comedi_compat_ioctl == $sub.ref(0, 199821);

procedure comedi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.27, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.23, $M.21, $M.32, assertsPassed, $M.33;



implementation comedi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "comedi_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 187} {:cexpr "comedi_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i3 := raw_ioctl($p0, $i1, $i2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const comedi_mmap: ref;

axiom comedi_mmap == $sub.ref(0, 200853);

procedure comedi_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $CurrAddr;



implementation comedi_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p44: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i1;
  var $i83: i64;
  var $i84: i1;
  var $i85: i64;
  var $i86: i32;
  var $i87: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i32;
  var $i107: i1;
  var $i108: i64;
  var $i109: i32;
  var $i110: i1;
  var $i88: i32;
  var $i89: i64;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i38: i32;
  var $p118: ref;
  var $i12: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p5 := file_inode($p0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i6 := iminor($p5);
    call {:si_unique_call 195} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p7 := comedi_dev_from_minor($i6);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    call {:si_unique_call 197} {:cexpr "start"} boogie_si_record_i64($i9);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} mutex_lock_nested($p13, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i17 := $M.7;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 19);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} mutex_unlock($p118);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i12 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p19, .str.6);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p20, .str.42);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p21, .str.5);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p22, .str.34);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.12, $p24);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1967);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p24, $i27);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p28, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.13, $p29);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 200} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_23 := __dynamic_pr_debug.ref.ref.i32($p2, .str.34, $i36);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 2);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p45 := comedi_read_subdevice($p7, $i6);
    assume {:verifier.code 0} true;
    $p44 := $p45;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p44);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64($i75, $i77);
    call {:si_unique_call 208} {:cexpr "size"} boogie_si_record_i64($i78);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i82 := $ult.i64($i81, $i78);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i78, 4095);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i64($i78, 12);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    call {:si_unique_call 209} {:cexpr "n_pages"} boogie_si_record_i32($i86);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32(0, $i86);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, comedi_vm_ops);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, $p49);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb39:
    assume $i87 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i88, $i89 := 0, $i9;
    goto $bb42;

  $bb42:
    call $p90, $p91, $i92, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $i88, $i89 := comedi_mmap_loop_$bb42($p1, $p4, $p49, $i86, $p90, $p91, $i92, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $i88, $i89);
    goto $bb42_last;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i88);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p94, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p91, $mul.ref($i92, 16)), $mul.ref(0, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i98 := __phys_addr($i97);
    call {:si_unique_call 211} {:cexpr "tmp___4"} boogie_si_record_i64($i98);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i99 := $lshr.i64($i98, 12);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i99, 64));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 24189255811072);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i103 := $sdiv.i64($i102, 64);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.19, $p104);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i106 := remap_pfn_range($p1, $i89, $i103, 4096, $i105);
    call {:si_unique_call 213} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i89, 4096);
    call {:si_unique_call 214} {:cexpr "start"} boogie_si_record_i64($i108);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i88, 1);
    call {:si_unique_call 215} {:cexpr "i"} boogie_si_record_i32($i109);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, $i86);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i110 == 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb47:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i88, $i89 := $i109, $i108;
    goto $bb47_dummy;

  $bb44:
    assume $i107 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 11);
    goto $bb13;

  $bb36:
    assume $i84 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 14);
    goto $bb13;

  $bb33:
    assume $i82 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 14);
    goto $bb13;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i55 := $M.7;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb13;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p57, .str.6);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p58, .str.42);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p59, .str.5);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p60, .str.43);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.12, $p62);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 1988);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p62, $i65);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p66, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.13, $p67);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 206} {:cexpr "tmp___3"} boogie_si_record_i64($i71);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i72 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_24 := __dynamic_pr_debug.ref.ref($p3, .str.43);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb13;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb13;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p43 := comedi_write_subdevice($p7, $i6);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p44 := $p43;
    goto $bb17;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;

  $bb47_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_998;
}



const comedi_open: ref;

axiom comedi_open == $sub.ref(0, 201885);

procedure comedi_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.22, $CurrAddr, assertsPassed;



implementation comedi_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i1;
  var $i72: i1;
  var $i73: i8;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i1;
  var $i105: i8;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i28: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i5 := iminor($p0);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} mutex_lock_nested($p29, 0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i33 := capable(12);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 228} {:cexpr "tmp___3"} boogie_si_record_i8($i34);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i61 := capable(12);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i61);
    call {:si_unique_call 234} {:cexpr "tmp___5"} boogie_si_record_i8($i62);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(65, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(65, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i72 := capable(12);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i8($i72);
    call {:si_unique_call 236} {:cexpr "tmp___7"} boogie_si_record_i8($i73);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} ldv___module_get_4(__this_module);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} mutex_unlock($p133);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb60:
    assume $i112 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb62;

  $bb63:
    assume $i115 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb62;

  $bb65:
    assume $i119 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    call {:si_unique_call 245} $i122 := devirtbounce.1($p121, $p6);
    call {:si_unique_call 246} {:cexpr "tmp___11"} boogie_si_record_i32($i122);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i123 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} ldv_module_put_7($p127);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_module_put_8(__this_module);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} mutex_unlock($p128);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i28 := $i122;
    goto $bb9;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i99 == 1;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i104 := ldv_try_module_get_5($p103);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i8($i104);
    call {:si_unique_call 242} {:cexpr "tmp___9"} boogie_si_record_i8($i105);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i8.i1($i105);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i108 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} ldv_module_put_6(__this_module);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} mutex_unlock($p109);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 38);
    goto $bb9;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i107 := 0;
    goto $bb55;

  $bb41:
    assume $i76 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i77 := $M.7;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} mutex_unlock($p96);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb9;

  $bb43:
    assume $i78 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p79, .str.6);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p80, .str.38);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p81, .str.5);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p82, .str.41);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.12, $p84);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 2309);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p84, $i87);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p88, 0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.13, $p89);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 238} {:cexpr "tmp___6"} boogie_si_record_i64($i93);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i94 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_27 := __dynamic_pr_debug.ref.ref($p4, .str.41);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume $i74 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb40;

  $bb36:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb30:
    assume $i63 == 1;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(65, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb32;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(65, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i41 := $M.7;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} mutex_unlock($p60);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb9;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p43, .str.6);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p44, .str.38);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p45, .str.5);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p46, .str.40);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.12, $p48);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 2291);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p48, $i51);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p52, 0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.13, $p53);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 230} {:cexpr "tmp___2"} boogie_si_record_i64($i57);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i58 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_26 := __dynamic_pr_debug.ref.ref($p3, .str.40);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb17;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i9 := $M.7;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb9;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p11, .str.6);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p12, .str.38);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p13, .str.5);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p14, .str.39);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.12, $p16);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 2270);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p16, $i19);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p20, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.13, $p21);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 223} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_25 := __dynamic_pr_debug.ref.ref($p2, .str.39);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const comedi_close: ref;

axiom comedi_close == $sub.ref(0, 202917);

procedure comedi_close($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation comedi_close($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i15: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i6: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i2 := iminor($p0);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p3 := comedi_dev_from_minor($i2);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} mutex_lock_nested($p7, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} ldv_module_put_9(__this_module);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} mutex_unlock($p60);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} ldv_module_put_10($p55);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb24;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb24;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    call {:si_unique_call 257} devirtbounce.2($p48, $p3);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb10:
    call $p16, $p17, $i18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i15, vslice_dummy_var_28 := comedi_close_loop_$bb10($p1, $p3, $p12, $p16, $p17, $i18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i15, vslice_dummy_var_28);
    goto $bb10_last;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 312));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 312)), $mul.ref(56, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i22, $i24);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref($i18, 312)), $mul.ref(48, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i15, 1);
    call {:si_unique_call 256} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p12);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i34);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i34;
    goto $bb18_dummy;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p17, $mul.ref($i18, 312)), $mul.ref(48, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_28 := do_cancel($p3, $p19);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;
}



const comedi_fasync: ref;

axiom comedi_fasync == $sub.ref(0, 203949);

procedure comedi_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "comedi_fasync:arg:fd"} boogie_si_record_i32($i0);
    call {:si_unique_call 262} {:cexpr "comedi_fasync:arg:on"} boogie_si_record_i32($i2);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p3 := file_inode($p1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i4 := iminor($p3);
    call {:si_unique_call 265} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p5 := comedi_dev_from_minor($i4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 392)), $mul.ref(368, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i10 := fasync_helper($i0, $p1, $i2, $p9);
    call {:si_unique_call 268} {:cexpr "tmp___2"} boogie_si_record_i32($i10);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 204981);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(32, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 206013);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(76, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_dev_from_minor: ref;

axiom comedi_dev_from_minor == $sub.ref(0, 207045);

procedure comedi_dev_from_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_from_minor($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p4: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "comedi_dev_from_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 47);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p4 := comedi_dev_from_subdevice_minor($i0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := comedi_dev_from_board_minor($i0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p3 := $p2;
    goto $bb3;
}



const fasync_helper: ref;

axiom fasync_helper == $sub.ref(0, 208077);

procedure fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 272} {:cexpr "fasync_helper:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 273} {:cexpr "fasync_helper:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 274} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 275} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_dev_from_board_minor: ref;

axiom comedi_dev_from_board_minor == $sub.ref(0, 209109);

procedure comedi_dev_from_board_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_from_board_minor($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "comedi_dev_from_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 47);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i6, 8));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.20, $p7);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 279} devirtbounce.3(0, .str.5, 214, 12);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_dev_from_board_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const comedi_dev_from_subdevice_minor: ref;

axiom comedi_dev_from_subdevice_minor == $sub.ref(0, 210141);

procedure comedi_dev_from_subdevice_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_from_subdevice_minor($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "comedi_dev_from_subdevice_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p1 := comedi_subdevice_from_minor($i0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const comedi_subdevice_from_minor: ref;

axiom comedi_subdevice_from_minor == $sub.ref(0, 211173);

procedure comedi_subdevice_from_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_subdevice_from_minor($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "comedi_subdevice_from_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i1 := $sub.i32($i0, 48);
    call {:si_unique_call 285} {:cexpr "i"} boogie_si_record_i32($i1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 207);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i7, 8));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.21, $p8);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 288} devirtbounce.3(0, .str.5, 203, 12);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_subdevice_from_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 212205);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 292} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const do_cancel: ref;

axiom do_cancel == $sub.ref(0, 213237);

procedure do_cancel($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation do_cancel($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i2 := comedi_is_subdevice_running($p1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} do_become_nonbusy($p0, $p1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(264, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(264, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 295} $i11 := devirtbounce.4($p10, $p0, $p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 296} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_module_put_9: ref;

axiom ldv_module_put_9 == $sub.ref(0, 214269);

procedure ldv_module_put_9($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ldv_module_put($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_module_put_10: ref;

axiom ldv_module_put_10 == $sub.ref(0, 215301);

procedure ldv_module_put_10($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} ldv_module_put($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 216333);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $M.22;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.22 := $i5;
    call {:si_unique_call 301} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i5);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 217365);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} __VERIFIER_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const comedi_is_subdevice_running: ref;

axiom comedi_is_subdevice_running == $sub.ref(0, 218397);

procedure comedi_is_subdevice_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_subdevice_running($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i1 := comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 134217728);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const do_become_nonbusy: ref;

axiom do_become_nonbusy == $sub.ref(0, 219429);

procedure do_become_nonbusy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_become_nonbusy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} comedi_set_subdevice_runflags($p1, 134217728, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_29 := dev_err.ref.ref($p14, .str.35);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} comedi_buf_reset($p3);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} kfree($p10);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_set_subdevice_runflags: ref;

axiom comedi_set_subdevice_runflags == $sub.ref(0, 220461);

procedure comedi_set_subdevice_runflags($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_set_subdevice_runflags($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "comedi_set_subdevice_runflags:arg:mask"} boogie_si_record_i32($i1);
    call {:si_unique_call 310} {:cexpr "comedi_set_subdevice_runflags:arg:bits"} boogie_si_record_i32($i2);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p4 := spinlock_check($p3);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 313} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i8 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, $i8);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, $i1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i12, $i13);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} spin_unlock_irqrestore($p16, $i5);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    return;
}



const comedi_buf_reset: ref;

axiom comedi_buf_reset == $sub.ref(0, 221493);

procedure comedi_buf_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(48, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(68, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(88, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 222525);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} free_($p0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 223557);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 316} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 224589);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 318} $free($p0);
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 225621);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 226653);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 227685);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 228717);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    return;
}



const comedi_get_subdevice_runflags: ref;

axiom comedi_get_subdevice_runflags == $sub.ref(0, 229749);

procedure comedi_get_subdevice_runflags($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_get_subdevice_runflags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := spinlock_check($p1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 326} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 327} {:cexpr "runflags"} boogie_si_record_i32($i5);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} spin_unlock_irqrestore($p6, $i3);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 230781);

procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 231813);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 338} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 339} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv___module_get_4: ref;

axiom ldv___module_get_4 == $sub.ref(0, 232845);

procedure ldv___module_get_4($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv___module_get_4($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} ldv_module_get($p0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get_5: ref;

axiom ldv_try_module_get_5 == $sub.ref(0, 233877);

procedure ldv_try_module_get_5($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_try_module_get_5($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 234909);

procedure ldv_module_put_6($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} ldv_module_put($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_module_put_7: ref;

axiom ldv_module_put_7 == $sub.ref(0, 235941);

procedure ldv_module_put_7($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} ldv_module_put($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_module_put_8: ref;

axiom ldv_module_put_8 == $sub.ref(0, 236973);

procedure ldv_module_put_8($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_module_put($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 238005);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i2 := ldv_undef_int();
    call {:si_unique_call 347} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i4 := $M.22;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.22 := $i5;
    call {:si_unique_call 348} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i5);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 239037);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 351} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 240069);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_module_get($p0: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.22 := $i3;
    call {:si_unique_call 352} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i3);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_write_subdevice: ref;

axiom comedi_write_subdevice == $sub.ref(0, 241101);

procedure comedi_write_subdevice($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_write_subdevice($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "comedi_write_subdevice:arg:minor"} boogie_si_record_i32($i1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 47);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p3 := comedi_subdevice_from_minor($i1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16384);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const comedi_read_subdevice: ref;

axiom comedi_read_subdevice == $sub.ref(0, 242133);

procedure comedi_read_subdevice($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_read_subdevice($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "comedi_read_subdevice:arg:minor"} boogie_si_record_i32($i1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 47);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p3 := comedi_subdevice_from_minor($i1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32768);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 243165);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 244197);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p6, $i4);
    call {:si_unique_call 361} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 362} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 363} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const raw_ioctl: ref;

axiom raw_ioctl == $sub.ref(0, 245229);

procedure raw_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.27, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.23, $M.21, $M.32, assertsPassed, $M.33;



implementation raw_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i32: i32;

  $bb0:
    call {:si_unique_call 366} {:cexpr "raw_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 367} {:cexpr "raw_ioctl:arg:arg"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 25606);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 1083466752);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1083466752);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 515);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i2);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p29 := compat_ptr($i28);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    call {:si_unique_call 371} {:cexpr "arg"} boogie_si_record_i64($i30);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i31 := translated_ioctl($p0, $i1, $i30);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 373} {:cexpr "rc"} boogie_si_record_i32($i31);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb60;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i33 := translated_ioctl($p0, $i1, $i2);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 369} {:cexpr "rc"} boogie_si_record_i32($i33);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb60;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 25605);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i12 == 1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb27;

  $bb22:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb32;

  $bb29:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb35;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, $sub.i32(0, 2145360884));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, $sub.i32(0, 2143263735));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, $sub.i32(0, 2143263734));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, $sub.i32(0, 2143263734));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb43:
    assume $i20 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i37 := compat_cmdtest($p0, $i2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 377} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb60;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i19 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i36 := compat_cmd($p0, $i2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 375} {:cexpr "rc"} boogie_si_record_i32($i36);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb60;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb48;

  $bb45:
    assume $i21 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i39 := compat_insn($p0, $i2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 379} {:cexpr "rc"} boogie_si_record_i32($i39);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i32 := $i39;
    goto $bb60;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, $sub.i32(0, 2146933749));
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, $sub.i32(0, 2145360893));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, $sub.i32(0, 2145360893));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb54:
    assume $i25 == 1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i34 := compat_chaninfo($p0, $i2);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 381} {:cexpr "rc"} boogie_si_record_i32($i34);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb60;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, $sub.i32(0, 2146933749));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb56:
    assume $i26 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i38 := compat_insnlist($p0, $i2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 383} {:cexpr "rc"} boogie_si_record_i32($i38);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i32 := $i38;
    goto $bb60;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, $sub.i32(0, 2146933752));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb58:
    assume $i27 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i35 := compat_rangeinfo($p0, $i2);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 385} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i32 := $i35;
    goto $bb60;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 246261);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const translated_ioctl: ref;

axiom translated_ioctl == $sub.ref(0, 247293);

procedure translated_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.28, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation translated_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "translated_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 388} {:cexpr "translated_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(40, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(40, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.24, $p10);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 25);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(40, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(64, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.24, $p16);
    call {:si_unique_call 389} $i18 := devirtbounce.5($p17, $p0, $i1, $i2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 25);
    goto $bb3;
}



const compat_chaninfo: ref;

axiom compat_chaninfo == $sub.ref(0, 248325);

procedure compat_chaninfo($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.0, $M.20, $M.22, $M.19, $M.26, $M.23, $M.28, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_chaninfo($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i64;
  var $i95: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 392} {:cexpr "compat_chaninfo:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p4 := compat_ptr($i3);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p6 := compat_alloc_user_space(48);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p8 := current_thread_info();
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    call {:si_unique_call 396} $p12 := devirtbounce.6(0, $p5, 32, $i11);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i13 := $extractvalue($p12, 0);
    call {:si_unique_call 397} {:cexpr "flag"} boogie_si_record_i64($i13);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i17 := ldv__builtin_expect($i16, 1);
    call {:si_unique_call 399} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p20 := current_thread_info();
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    call {:si_unique_call 401} $p24 := devirtbounce.7(0, $p7, 48, $i23);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i25 := $extractvalue($p24, 0);
    call {:si_unique_call 402} {:cexpr "flag___0"} boogie_si_record_i64($i25);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 404} {:cexpr "tmp___4"} boogie_si_record_i64($i29);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    call {:si_unique_call 405} $p33 := devirtbounce.8(0, $p32, $sub.i32(0, 14), 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i34 := $extractvalue($p33, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i35 := $extractvalue($p33, 1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p37, $i36);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i34, 0);
    call {:si_unique_call 406} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.25, $p39);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    call {:si_unique_call 407} $i43 := devirtbounce.9(0, $i40, $p42, $sub.i32(0, 14), 0);
    call {:si_unique_call 408} {:cexpr "__pu_err"} boogie_si_record_i32($i43);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, $i38);
    call {:si_unique_call 409} {:cexpr "err"} boogie_si_record_i32($i44);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    call {:si_unique_call 410} $p47 := devirtbounce.8(0, $p46, $sub.i32(0, 14), 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i48 := $extractvalue($p47, 0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i49 := $extractvalue($p47, 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p51, $i50);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i48, $i44);
    call {:si_unique_call 411} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.25, $p53);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p55 := compat_ptr($i54);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    call {:si_unique_call 413} $i59 := devirtbounce.10(0, $p56, $p58, $sub.i32(0, 14), 0);
    call {:si_unique_call 414} {:cexpr "__pu_err___0"} boogie_si_record_i32($i59);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, $i52);
    call {:si_unique_call 415} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    call {:si_unique_call 416} $p63 := devirtbounce.8(0, $p62, $sub.i32(0, 14), 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i64 := $extractvalue($p63, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i65 := $extractvalue($p63, 1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p67, $i66);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i64, $i60);
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.25, $p69);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p71 := compat_ptr($i70);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    call {:si_unique_call 419} $i75 := devirtbounce.10(0, $p72, $p74, $sub.i32(0, 14), 0);
    call {:si_unique_call 420} {:cexpr "__pu_err___1"} boogie_si_record_i32($i75);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, $i68);
    call {:si_unique_call 421} {:cexpr "err"} boogie_si_record_i32($i76);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    call {:si_unique_call 422} $p79 := devirtbounce.8(0, $p78, $sub.i32(0, 14), 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i80 := $extractvalue($p79, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i81 := $extractvalue($p79, 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p2);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p83, $i82);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i80, $i76);
    call {:si_unique_call 423} {:cexpr "err"} boogie_si_record_i32($i84);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.25, $p85);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p87 := compat_ptr($i86);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    call {:si_unique_call 425} $i91 := devirtbounce.10(0, $p88, $p90, $sub.i32(0, 14), 0);
    call {:si_unique_call 426} {:cexpr "__pu_err___2"} boogie_si_record_i32($i91);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i91, $i84);
    call {:si_unique_call 427} {:cexpr "err"} boogie_si_record_i32($i92);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p7);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i95 := translated_ioctl($p0, $sub.i32(0, 2144312317), $i94);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 429} {:cexpr "tmp___21"} boogie_si_record_i32($i95);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i19 := $i95;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i93 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;
}



const compat_rangeinfo: ref;

axiom compat_rangeinfo == $sub.ref(0, 249357);

procedure compat_rangeinfo($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.0, $M.20, $M.22, $M.19, $M.25, $M.23, $M.28, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_rangeinfo($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i64;
  var $i62: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 431} {:cexpr "compat_rangeinfo:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p4 := compat_ptr($i3);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p6 := compat_alloc_user_space(16);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p8 := current_thread_info();
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    call {:si_unique_call 435} $p12 := devirtbounce.11(0, $p5, 8, $i11);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i13 := $extractvalue($p12, 0);
    call {:si_unique_call 436} {:cexpr "flag"} boogie_si_record_i64($i13);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i17 := ldv__builtin_expect($i16, 1);
    call {:si_unique_call 438} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p20 := current_thread_info();
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    call {:si_unique_call 440} $p24 := devirtbounce.12(0, $p7, 16, $i23);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i25 := $extractvalue($p24, 0);
    call {:si_unique_call 441} {:cexpr "flag___0"} boogie_si_record_i64($i25);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 443} {:cexpr "tmp___4"} boogie_si_record_i64($i29);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    call {:si_unique_call 444} $p33 := devirtbounce.8(0, $p32, $sub.i32(0, 14), 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i34 := $extractvalue($p33, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i35 := $extractvalue($p33, 1);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p37, $i36);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i34, 0);
    call {:si_unique_call 445} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.26, $p39);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    call {:si_unique_call 446} $i43 := devirtbounce.9(0, $i40, $p42, $sub.i32(0, 14), 0);
    call {:si_unique_call 447} {:cexpr "__pu_err"} boogie_si_record_i32($i43);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, $i38);
    call {:si_unique_call 448} {:cexpr "err"} boogie_si_record_i32($i44);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    call {:si_unique_call 449} $p47 := devirtbounce.8(0, $p46, $sub.i32(0, 14), 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i48 := $extractvalue($p47, 0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i49 := $extractvalue($p47, 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p51, $i50);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i48, $i44);
    call {:si_unique_call 450} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.26, $p53);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p55 := compat_ptr($i54);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    call {:si_unique_call 452} $i58 := devirtbounce.13(0, $p55, $p57, $sub.i32(0, 14), 0);
    call {:si_unique_call 453} {:cexpr "__pu_err___0"} boogie_si_record_i32($i58);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $i52);
    call {:si_unique_call 454} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p7);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i62 := translated_ioctl($p0, $sub.i32(0, 2146409464), $i61);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 456} {:cexpr "tmp___11"} boogie_si_record_i32($i62);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i19 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb3;
}



const compat_cmd: ref;

axiom compat_cmd == $sub.ref(0, 250389);

procedure compat_cmd($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_cmd($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "compat_cmd:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p3 := compat_ptr($i2);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p5 := compat_alloc_user_space(80);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i7 := get_compat_cmd($p6, $p4);
    call {:si_unique_call 461} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i11 := translated_ioctl($p0, $sub.i32(0, 2142215159), $i10);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 463} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_cmdtest: ref;

axiom compat_cmdtest == $sub.ref(0, 251421);

procedure compat_cmdtest($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_cmdtest($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "compat_cmdtest:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p3 := compat_ptr($i2);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p5 := compat_alloc_user_space(80);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i7 := get_compat_cmd($p6, $p4);
    call {:si_unique_call 468} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i11 := translated_ioctl($p0, $sub.i32(0, 2142215158), $i10);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 470} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i13 := put_compat_cmd($p4, $p6);
    call {:si_unique_call 472} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_insnlist: ref;

axiom compat_insnlist == $sub.ref(0, 252453);

procedure compat_insnlist($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.28, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_insnlist($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i65: i32;
  var $p77: ref;
  var $i78: i64;
  var $i79: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "compat_insnlist:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p3 := compat_ptr($i2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p5 := current_thread_info();
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    call {:si_unique_call 476} $p9 := devirtbounce.11(0, $p4, 8, $i8);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i10 := $extractvalue($p9, 0);
    call {:si_unique_call 477} {:cexpr "flag"} boogie_si_record_i64($i10);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i14 := ldv__builtin_expect($i13, 1);
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    call {:si_unique_call 480} $p19 := devirtbounce.8(0, $p18, $sub.i32(0, 14), 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i20 := $extractvalue($p19, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i21 := $extractvalue($p19, 1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    call {:si_unique_call 481} {:cexpr "n_insns"} boogie_si_record_i32($i22);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, 0);
    call {:si_unique_call 482} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    call {:si_unique_call 483} $p26 := devirtbounce.8(0, $p25, $sub.i32(0, 14), 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i27 := $extractvalue($p26, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i28 := $extractvalue($p26, 1);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    call {:si_unique_call 484} {:cexpr "uptr"} boogie_si_record_i32($i29);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $i23);
    call {:si_unique_call 485} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p31 := compat_ptr($i29);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i30, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i22);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i35 := $mul.i64($i34, 40);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 16);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p37 := compat_alloc_user_space($i36);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p39 := current_thread_info();
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    call {:si_unique_call 489} $p44 := devirtbounce.14(0, $p40, 16, $i43);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i45 := $extractvalue($p44, 0);
    call {:si_unique_call 490} {:cexpr "flag___0"} boogie_si_record_i64($i45);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i49 := ldv__builtin_expect($i48, 1);
    call {:si_unique_call 492} {:cexpr "tmp___7"} boogie_si_record_i64($i49);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    call {:si_unique_call 493} $i54 := devirtbounce.9(0, $i22, $p53, $sub.i32(0, 14), 0);
    call {:si_unique_call 494} {:cexpr "__pu_err"} boogie_si_record_i32($i54);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, $i30);
    call {:si_unique_call 495} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    call {:si_unique_call 496} $i61 := devirtbounce.15(0, $p57, $p60, $sub.i32(0, 14), 0);
    call {:si_unique_call 497} {:cexpr "__pu_err___0"} boogie_si_record_i32($i61);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i55);
    call {:si_unique_call 498} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32(0, $i22);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i79 := translated_ioctl($p0, $sub.i32(0, 2146409461), $i78);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 503} {:cexpr "tmp___8"} boogie_si_record_i32($i79);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i16 := $i79;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb21;

  $bb21:
    call $p66, $p67, $i68, $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i65 := compat_insnlist_loop_$bb21($i22, $p32, $p38, $p66, $p67, $i68, $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i65);
    goto $bb21_last;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i65);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 40));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i65);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p32, $mul.ref($i70, 32));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i72 := get_compat_insn($p69, $p71);
    call {:si_unique_call 500} {:cexpr "rc"} boogie_si_record_i32($i72);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i74 := $i72;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i65, 1);
    call {:si_unique_call 501} {:cexpr "n"} boogie_si_record_i32($i75);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i76 := $ult.i32($i75, $i22);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i75;
    goto $bb26_dummy;

  $bb23:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i16 := $i74;
    goto $bb3;

  $bb15:
    assume $i63 == 1;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb3;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb3;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;
}



const compat_insn: ref;

axiom compat_insn == $sub.ref(0, 253485);

procedure compat_insn($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.28, $M.21, $M.32, assertsPassed, $M.33;



implementation compat_insn($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} {:cexpr "compat_insn:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p3 := compat_ptr($i2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p5 := compat_alloc_user_space(40);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i7 := get_compat_insn($p6, $p4);
    call {:si_unique_call 508} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i11 := translated_ioctl($p0, $sub.i32(0, 2144836596), $i10);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 510} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_alloc_user_space: ref;

axiom compat_alloc_user_space == $sub.ref(0, 254517);

procedure compat_alloc_user_space($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation compat_alloc_user_space($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} {:cexpr "compat_alloc_user_space:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p1 := external_alloc();
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const get_compat_insn: ref;

axiom get_compat_insn == $sub.ref(0, 255549);

procedure get_compat_insn($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $CurrAddr;



implementation get_compat_insn($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p3 := current_thread_info();
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 515} $p7 := devirtbounce.16(0, $p1, 32, $i6);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i8 := $extractvalue($p7, 0);
    call {:si_unique_call 516} {:cexpr "flag"} boogie_si_record_i64($i8);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 518} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p15 := current_thread_info();
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    call {:si_unique_call 520} $p19 := devirtbounce.17(0, $p0, 40, $i18);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i20 := $extractvalue($p19, 0);
    call {:si_unique_call 521} {:cexpr "flag___0"} boogie_si_record_i64($i20);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i24 := ldv__builtin_expect($i23, 1);
    call {:si_unique_call 523} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    call {:si_unique_call 524} $p28 := devirtbounce.8(0, $p27, $sub.i32(0, 14), 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i29 := $extractvalue($p28, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i30 := $extractvalue($p28, 1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p32, $i31);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i29, 0);
    call {:si_unique_call 525} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.27, $p34);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    call {:si_unique_call 526} $i38 := devirtbounce.9(0, $i35, $p37, $sub.i32(0, 14), 0);
    call {:si_unique_call 527} {:cexpr "__pu_err"} boogie_si_record_i32($i38);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i33);
    call {:si_unique_call 528} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    call {:si_unique_call 529} $p42 := devirtbounce.8(0, $p41, $sub.i32(0, 14), 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i43 := $extractvalue($p42, 0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i44 := $extractvalue($p42, 1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p46, $i45);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i43, $i39);
    call {:si_unique_call 530} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.27, $p48);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    call {:si_unique_call 531} $i52 := devirtbounce.9(0, $i49, $p51, $sub.i32(0, 14), 0);
    call {:si_unique_call 532} {:cexpr "__pu_err___0"} boogie_si_record_i32($i52);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, $i47);
    call {:si_unique_call 533} {:cexpr "err"} boogie_si_record_i32($i53);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    call {:si_unique_call 534} $p56 := devirtbounce.8(0, $p55, $sub.i32(0, 14), 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i57 := $extractvalue($p56, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i58 := $extractvalue($p56, 1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p60, $i59);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i57, $i53);
    call {:si_unique_call 535} {:cexpr "err"} boogie_si_record_i32($i61);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.27, $p62);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p64 := compat_ptr($i63);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    call {:si_unique_call 537} $i68 := devirtbounce.10(0, $p65, $p67, $sub.i32(0, 14), 0);
    call {:si_unique_call 538} {:cexpr "__pu_err___1"} boogie_si_record_i32($i68);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, $i61);
    call {:si_unique_call 539} {:cexpr "err"} boogie_si_record_i32($i69);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    call {:si_unique_call 540} $p72 := devirtbounce.8(0, $p71, $sub.i32(0, 14), 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i73 := $extractvalue($p72, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i74 := $extractvalue($p72, 1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p76, $i75);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i73, $i69);
    call {:si_unique_call 541} {:cexpr "err"} boogie_si_record_i32($i77);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.27, $p78);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    call {:si_unique_call 542} $i82 := devirtbounce.9(0, $i79, $p81, $sub.i32(0, 14), 0);
    call {:si_unique_call 543} {:cexpr "__pu_err___2"} boogie_si_record_i32($i82);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, $i77);
    call {:si_unique_call 544} {:cexpr "err"} boogie_si_record_i32($i83);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    call {:si_unique_call 545} $p86 := devirtbounce.8(0, $p85, $sub.i32(0, 14), 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i87 := $extractvalue($p86, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i88 := $extractvalue($p86, 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i88);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p90, $i89);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i87, $i83);
    call {:si_unique_call 546} {:cexpr "err"} boogie_si_record_i32($i91);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p2);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.27, $p92);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    call {:si_unique_call 547} $i96 := devirtbounce.9(0, $i93, $p95, $sub.i32(0, 14), 0);
    call {:si_unique_call 548} {:cexpr "__pu_err___3"} boogie_si_record_i32($i96);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, $i91);
    call {:si_unique_call 549} {:cexpr "err"} boogie_si_record_i32($i97);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i99 := (if $i98 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i14 := $i99;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 256581);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i0 := devirtbounce.18(0, kernel_stack);
    call {:si_unique_call 551} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 257613);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 552} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 553} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const get_compat_cmd: ref;

axiom get_compat_cmd == $sub.ref(0, 258645);

procedure get_compat_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation get_compat_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i64;
  var $i171: i32;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $i185: i32;
  var $p186: ref;
  var $i187: i32;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i64;
  var $i199: i32;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i64;
  var $i215: i32;
  var $p216: ref;
  var $i217: i32;
  var $p218: ref;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i64;
  var $i229: i32;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i64;
  var $i245: i32;
  var $p246: ref;
  var $i247: i32;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p3 := current_thread_info();
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 556} $p7 := devirtbounce.19(0, $p1, 64, $i6);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i8 := $extractvalue($p7, 0);
    call {:si_unique_call 557} {:cexpr "flag"} boogie_si_record_i64($i8);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p15 := current_thread_info();
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    call {:si_unique_call 561} $p19 := devirtbounce.20(0, $p0, 80, $i18);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i20 := $extractvalue($p19, 0);
    call {:si_unique_call 562} {:cexpr "flag___0"} boogie_si_record_i64($i20);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i24 := ldv__builtin_expect($i23, 1);
    call {:si_unique_call 564} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    call {:si_unique_call 565} $p28 := devirtbounce.8(0, $p27, $sub.i32(0, 14), 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i29 := $extractvalue($p28, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i30 := $extractvalue($p28, 1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p32, $i31);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i29, 0);
    call {:si_unique_call 566} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.28, $p34);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    call {:si_unique_call 567} $i38 := devirtbounce.9(0, $i35, $p37, $sub.i32(0, 14), 0);
    call {:si_unique_call 568} {:cexpr "__pu_err"} boogie_si_record_i32($i38);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i33);
    call {:si_unique_call 569} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    call {:si_unique_call 570} $p42 := devirtbounce.8(0, $p41, $sub.i32(0, 14), 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i43 := $extractvalue($p42, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i44 := $extractvalue($p42, 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p46, $i45);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i43, $i39);
    call {:si_unique_call 571} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.28, $p48);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    call {:si_unique_call 572} $i52 := devirtbounce.9(0, $i49, $p51, $sub.i32(0, 14), 0);
    call {:si_unique_call 573} {:cexpr "__pu_err___0"} boogie_si_record_i32($i52);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, $i47);
    call {:si_unique_call 574} {:cexpr "err"} boogie_si_record_i32($i53);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    call {:si_unique_call 575} $p56 := devirtbounce.8(0, $p55, $sub.i32(0, 14), 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i57 := $extractvalue($p56, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i58 := $extractvalue($p56, 1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p60, $i59);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i57, $i53);
    call {:si_unique_call 576} {:cexpr "err"} boogie_si_record_i32($i61);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.28, $p62);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    call {:si_unique_call 577} $i66 := devirtbounce.9(0, $i63, $p65, $sub.i32(0, 14), 0);
    call {:si_unique_call 578} {:cexpr "__pu_err___1"} boogie_si_record_i32($i66);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, $i61);
    call {:si_unique_call 579} {:cexpr "err"} boogie_si_record_i32($i67);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    call {:si_unique_call 580} $p70 := devirtbounce.8(0, $p69, $sub.i32(0, 14), 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i71 := $extractvalue($p70, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i72 := $extractvalue($p70, 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p2);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p74, $i73);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i71, $i67);
    call {:si_unique_call 581} {:cexpr "err"} boogie_si_record_i32($i75);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.28, $p76);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    call {:si_unique_call 582} $i80 := devirtbounce.9(0, $i77, $p79, $sub.i32(0, 14), 0);
    call {:si_unique_call 583} {:cexpr "__pu_err___2"} boogie_si_record_i32($i80);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, $i75);
    call {:si_unique_call 584} {:cexpr "err"} boogie_si_record_i32($i81);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    call {:si_unique_call 585} $p84 := devirtbounce.8(0, $p83, $sub.i32(0, 14), 0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i85 := $extractvalue($p84, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i86 := $extractvalue($p84, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p88, $i87);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i85, $i81);
    call {:si_unique_call 586} {:cexpr "err"} boogie_si_record_i32($i89);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.28, $p90);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    call {:si_unique_call 587} $i94 := devirtbounce.9(0, $i91, $p93, $sub.i32(0, 14), 0);
    call {:si_unique_call 588} {:cexpr "__pu_err___3"} boogie_si_record_i32($i94);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, $i89);
    call {:si_unique_call 589} {:cexpr "err"} boogie_si_record_i32($i95);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    call {:si_unique_call 590} $p98 := devirtbounce.8(0, $p97, $sub.i32(0, 14), 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i99 := $extractvalue($p98, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i100 := $extractvalue($p98, 1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i64.i32($i100);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p102, $i101);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i99, $i95);
    call {:si_unique_call 591} {:cexpr "err"} boogie_si_record_i32($i103);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.28, $p104);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    call {:si_unique_call 592} $i108 := devirtbounce.9(0, $i105, $p107, $sub.i32(0, 14), 0);
    call {:si_unique_call 593} {:cexpr "__pu_err___4"} boogie_si_record_i32($i108);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, $i103);
    call {:si_unique_call 594} {:cexpr "err"} boogie_si_record_i32($i109);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    call {:si_unique_call 595} $p112 := devirtbounce.8(0, $p111, $sub.i32(0, 14), 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i113 := $extractvalue($p112, 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i114 := $extractvalue($p112, 1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p2);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p116, $i115);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i113, $i109);
    call {:si_unique_call 596} {:cexpr "err"} boogie_si_record_i32($i117);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.28, $p118);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    call {:si_unique_call 597} $i122 := devirtbounce.9(0, $i119, $p121, $sub.i32(0, 14), 0);
    call {:si_unique_call 598} {:cexpr "__pu_err___5"} boogie_si_record_i32($i122);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i122, $i117);
    call {:si_unique_call 599} {:cexpr "err"} boogie_si_record_i32($i123);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    call {:si_unique_call 600} $p126 := devirtbounce.8(0, $p125, $sub.i32(0, 14), 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i127 := $extractvalue($p126, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i128 := $extractvalue($p126, 1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i128);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p130, $i129);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i127, $i123);
    call {:si_unique_call 601} {:cexpr "err"} boogie_si_record_i32($i131);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.28, $p132);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    call {:si_unique_call 602} $i136 := devirtbounce.9(0, $i133, $p135, $sub.i32(0, 14), 0);
    call {:si_unique_call 603} {:cexpr "__pu_err___6"} boogie_si_record_i32($i136);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i137 := $or.i32($i136, $i131);
    call {:si_unique_call 604} {:cexpr "err"} boogie_si_record_i32($i137);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    call {:si_unique_call 605} $p140 := devirtbounce.8(0, $p139, $sub.i32(0, 14), 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i141 := $extractvalue($p140, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i142 := $extractvalue($p140, 1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i64.i32($i142);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p144, $i143);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i141, $i137);
    call {:si_unique_call 606} {:cexpr "err"} boogie_si_record_i32($i145);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p2);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.28, $p146);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    call {:si_unique_call 607} $i150 := devirtbounce.9(0, $i147, $p149, $sub.i32(0, 14), 0);
    call {:si_unique_call 608} {:cexpr "__pu_err___7"} boogie_si_record_i32($i150);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i150, $i145);
    call {:si_unique_call 609} {:cexpr "err"} boogie_si_record_i32($i151);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    call {:si_unique_call 610} $p154 := devirtbounce.8(0, $p153, $sub.i32(0, 14), 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i155 := $extractvalue($p154, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i156 := $extractvalue($p154, 1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i64.i32($i156);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p2);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p158, $i157);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i155, $i151);
    call {:si_unique_call 611} {:cexpr "err"} boogie_si_record_i32($i159);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p2);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.28, $p160);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    call {:si_unique_call 612} $i164 := devirtbounce.9(0, $i161, $p163, $sub.i32(0, 14), 0);
    call {:si_unique_call 613} {:cexpr "__pu_err___8"} boogie_si_record_i32($i164);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i164, $i159);
    call {:si_unique_call 614} {:cexpr "err"} boogie_si_record_i32($i165);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    call {:si_unique_call 615} $p168 := devirtbounce.8(0, $p167, $sub.i32(0, 14), 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i169 := $extractvalue($p168, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i170 := $extractvalue($p168, 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i64.i32($i170);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p172, $i171);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i169, $i165);
    call {:si_unique_call 616} {:cexpr "err"} boogie_si_record_i32($i173);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p2);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.28, $p174);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    call {:si_unique_call 617} $i178 := devirtbounce.9(0, $i175, $p177, $sub.i32(0, 14), 0);
    call {:si_unique_call 618} {:cexpr "__pu_err___9"} boogie_si_record_i32($i178);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i179 := $or.i32($i178, $i173);
    call {:si_unique_call 619} {:cexpr "err"} boogie_si_record_i32($i179);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    call {:si_unique_call 620} $p182 := devirtbounce.8(0, $p181, $sub.i32(0, 14), 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i183 := $extractvalue($p182, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i184 := $extractvalue($p182, 1);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i64.i32($i184);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p2);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p186, $i185);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i183, $i179);
    call {:si_unique_call 621} {:cexpr "err"} boogie_si_record_i32($i187);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p2);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.28, $p188);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    call {:si_unique_call 622} $i192 := devirtbounce.9(0, $i189, $p191, $sub.i32(0, 14), 0);
    call {:si_unique_call 623} {:cexpr "__pu_err___10"} boogie_si_record_i32($i192);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i193 := $or.i32($i192, $i187);
    call {:si_unique_call 624} {:cexpr "err"} boogie_si_record_i32($i193);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    call {:si_unique_call 625} $p196 := devirtbounce.8(0, $p195, $sub.i32(0, 14), 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i197 := $extractvalue($p196, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i198 := $extractvalue($p196, 1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i64.i32($i198);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p2);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p200, $i199);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i201 := $or.i32($i197, $i193);
    call {:si_unique_call 626} {:cexpr "err"} boogie_si_record_i32($i201);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p2);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.28, $p202);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p204 := compat_ptr($i203);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    call {:si_unique_call 628} $i208 := devirtbounce.10(0, $p205, $p207, $sub.i32(0, 14), 0);
    call {:si_unique_call 629} {:cexpr "__pu_err___11"} boogie_si_record_i32($i208);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i209 := $or.i32($i208, $i201);
    call {:si_unique_call 630} {:cexpr "err"} boogie_si_record_i32($i209);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    call {:si_unique_call 631} $p212 := devirtbounce.8(0, $p211, $sub.i32(0, 14), 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i213 := $extractvalue($p212, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i214 := $extractvalue($p212, 1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i64.i32($i214);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p216, $i215);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i217 := $or.i32($i213, $i209);
    call {:si_unique_call 632} {:cexpr "err"} boogie_si_record_i32($i217);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p2);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.28, $p218);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    call {:si_unique_call 633} $i222 := devirtbounce.9(0, $i219, $p221, $sub.i32(0, 14), 0);
    call {:si_unique_call 634} {:cexpr "__pu_err___12"} boogie_si_record_i32($i222);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i223 := $or.i32($i222, $i217);
    call {:si_unique_call 635} {:cexpr "err"} boogie_si_record_i32($i223);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    call {:si_unique_call 636} $p226 := devirtbounce.8(0, $p225, $sub.i32(0, 14), 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i227 := $extractvalue($p226, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i228 := $extractvalue($p226, 1);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i64.i32($i228);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p2);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p230, $i229);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i231 := $or.i32($i227, $i223);
    call {:si_unique_call 637} {:cexpr "err"} boogie_si_record_i32($i231);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p2);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.28, $p232);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p234 := compat_ptr($i233);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    call {:si_unique_call 639} $i238 := devirtbounce.21(0, $p235, $p237, $sub.i32(0, 14), 0);
    call {:si_unique_call 640} {:cexpr "__pu_err___13"} boogie_si_record_i32($i238);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i239 := $or.i32($i238, $i231);
    call {:si_unique_call 641} {:cexpr "err"} boogie_si_record_i32($i239);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p240);
    call {:si_unique_call 642} $p242 := devirtbounce.8(0, $p241, $sub.i32(0, 14), 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i243 := $extractvalue($p242, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i244 := $extractvalue($p242, 1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i64.i32($i244);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p246, $i245);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i247 := $or.i32($i243, $i239);
    call {:si_unique_call 643} {:cexpr "err"} boogie_si_record_i32($i247);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p2);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.28, $p248);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    call {:si_unique_call 644} $i252 := devirtbounce.9(0, $i249, $p251, $sub.i32(0, 14), 0);
    call {:si_unique_call 645} {:cexpr "__pu_err___14"} boogie_si_record_i32($i252);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i253 := $or.i32($i252, $i247);
    call {:si_unique_call 646} {:cexpr "err"} boogie_si_record_i32($i253);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i255 := (if $i254 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i14 := $i255;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;
}



const put_compat_cmd: ref;

axiom put_compat_cmd == $sub.ref(0, 259677);

procedure put_compat_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation put_compat_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i64;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i64;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i64;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p2 := current_thread_info();
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 648} $p6 := devirtbounce.20(0, $p1, 80, $i5);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i7 := $extractvalue($p6, 0);
    call {:si_unique_call 649} {:cexpr "flag"} boogie_si_record_i64($i7);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p14 := current_thread_info();
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    call {:si_unique_call 653} $p18 := devirtbounce.19(0, $p0, 64, $i17);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i19 := $extractvalue($p18, 0);
    call {:si_unique_call 654} {:cexpr "flag___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i23 := ldv__builtin_expect($i22, 1);
    call {:si_unique_call 656} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    call {:si_unique_call 657} $p27 := devirtbounce.8(0, $p26, $sub.i32(0, 14), 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i28 := $extractvalue($p27, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i29 := $extractvalue($p27, 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    call {:si_unique_call 658} {:cexpr "temp"} boogie_si_record_i32($i30);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i28, 0);
    call {:si_unique_call 659} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    call {:si_unique_call 660} $i34 := devirtbounce.9(0, $i30, $p33, $sub.i32(0, 14), 0);
    call {:si_unique_call 661} {:cexpr "__pu_err"} boogie_si_record_i32($i34);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i31);
    call {:si_unique_call 662} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    call {:si_unique_call 663} $p38 := devirtbounce.8(0, $p37, $sub.i32(0, 14), 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i39 := $extractvalue($p38, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i40 := $extractvalue($p38, 1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i40);
    call {:si_unique_call 664} {:cexpr "temp"} boogie_si_record_i32($i41);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i39, $i35);
    call {:si_unique_call 665} {:cexpr "err"} boogie_si_record_i32($i42);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    call {:si_unique_call 666} $i45 := devirtbounce.9(0, $i41, $p44, $sub.i32(0, 14), 0);
    call {:si_unique_call 667} {:cexpr "__pu_err___0"} boogie_si_record_i32($i45);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $i42);
    call {:si_unique_call 668} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    call {:si_unique_call 669} $p49 := devirtbounce.8(0, $p48, $sub.i32(0, 14), 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i50 := $extractvalue($p49, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i51 := $extractvalue($p49, 1);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    call {:si_unique_call 670} {:cexpr "temp"} boogie_si_record_i32($i52);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i50, $i46);
    call {:si_unique_call 671} {:cexpr "err"} boogie_si_record_i32($i53);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    call {:si_unique_call 672} $i56 := devirtbounce.9(0, $i52, $p55, $sub.i32(0, 14), 0);
    call {:si_unique_call 673} {:cexpr "__pu_err___1"} boogie_si_record_i32($i56);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, $i53);
    call {:si_unique_call 674} {:cexpr "err"} boogie_si_record_i32($i57);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    call {:si_unique_call 675} $p60 := devirtbounce.8(0, $p59, $sub.i32(0, 14), 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i61 := $extractvalue($p60, 0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i62 := $extractvalue($p60, 1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    call {:si_unique_call 676} {:cexpr "temp"} boogie_si_record_i32($i63);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i61, $i57);
    call {:si_unique_call 677} {:cexpr "err"} boogie_si_record_i32($i64);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    call {:si_unique_call 678} $i67 := devirtbounce.9(0, $i63, $p66, $sub.i32(0, 14), 0);
    call {:si_unique_call 679} {:cexpr "__pu_err___2"} boogie_si_record_i32($i67);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, $i64);
    call {:si_unique_call 680} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    call {:si_unique_call 681} $p71 := devirtbounce.8(0, $p70, $sub.i32(0, 14), 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i72 := $extractvalue($p71, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i73 := $extractvalue($p71, 1);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i73);
    call {:si_unique_call 682} {:cexpr "temp"} boogie_si_record_i32($i74);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i72, $i68);
    call {:si_unique_call 683} {:cexpr "err"} boogie_si_record_i32($i75);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    call {:si_unique_call 684} $i78 := devirtbounce.9(0, $i74, $p77, $sub.i32(0, 14), 0);
    call {:si_unique_call 685} {:cexpr "__pu_err___3"} boogie_si_record_i32($i78);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, $i75);
    call {:si_unique_call 686} {:cexpr "err"} boogie_si_record_i32($i79);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    call {:si_unique_call 687} $p82 := devirtbounce.8(0, $p81, $sub.i32(0, 14), 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i83 := $extractvalue($p82, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i84 := $extractvalue($p82, 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 688} {:cexpr "temp"} boogie_si_record_i32($i85);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i83, $i79);
    call {:si_unique_call 689} {:cexpr "err"} boogie_si_record_i32($i86);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    call {:si_unique_call 690} $i89 := devirtbounce.9(0, $i85, $p88, $sub.i32(0, 14), 0);
    call {:si_unique_call 691} {:cexpr "__pu_err___4"} boogie_si_record_i32($i89);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, $i86);
    call {:si_unique_call 692} {:cexpr "err"} boogie_si_record_i32($i90);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    call {:si_unique_call 693} $p93 := devirtbounce.8(0, $p92, $sub.i32(0, 14), 0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i94 := $extractvalue($p93, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i95 := $extractvalue($p93, 1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i95);
    call {:si_unique_call 694} {:cexpr "temp"} boogie_si_record_i32($i96);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i94, $i90);
    call {:si_unique_call 695} {:cexpr "err"} boogie_si_record_i32($i97);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    call {:si_unique_call 696} $i100 := devirtbounce.9(0, $i96, $p99, $sub.i32(0, 14), 0);
    call {:si_unique_call 697} {:cexpr "__pu_err___5"} boogie_si_record_i32($i100);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, $i97);
    call {:si_unique_call 698} {:cexpr "err"} boogie_si_record_i32($i101);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    call {:si_unique_call 699} $p104 := devirtbounce.8(0, $p103, $sub.i32(0, 14), 0);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i105 := $extractvalue($p104, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i106 := $extractvalue($p104, 1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i106);
    call {:si_unique_call 700} {:cexpr "temp"} boogie_si_record_i32($i107);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i105, $i101);
    call {:si_unique_call 701} {:cexpr "err"} boogie_si_record_i32($i108);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    call {:si_unique_call 702} $i111 := devirtbounce.9(0, $i107, $p110, $sub.i32(0, 14), 0);
    call {:si_unique_call 703} {:cexpr "__pu_err___6"} boogie_si_record_i32($i111);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, $i108);
    call {:si_unique_call 704} {:cexpr "err"} boogie_si_record_i32($i112);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    call {:si_unique_call 705} $p115 := devirtbounce.8(0, $p114, $sub.i32(0, 14), 0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i116 := $extractvalue($p115, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i117 := $extractvalue($p115, 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i117);
    call {:si_unique_call 706} {:cexpr "temp"} boogie_si_record_i32($i118);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i116, $i112);
    call {:si_unique_call 707} {:cexpr "err"} boogie_si_record_i32($i119);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    call {:si_unique_call 708} $i122 := devirtbounce.9(0, $i118, $p121, $sub.i32(0, 14), 0);
    call {:si_unique_call 709} {:cexpr "__pu_err___7"} boogie_si_record_i32($i122);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i122, $i119);
    call {:si_unique_call 710} {:cexpr "err"} boogie_si_record_i32($i123);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    call {:si_unique_call 711} $p126 := devirtbounce.8(0, $p125, $sub.i32(0, 14), 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i127 := $extractvalue($p126, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i128 := $extractvalue($p126, 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i128);
    call {:si_unique_call 712} {:cexpr "temp"} boogie_si_record_i32($i129);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i127, $i123);
    call {:si_unique_call 713} {:cexpr "err"} boogie_si_record_i32($i130);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    call {:si_unique_call 714} $i133 := devirtbounce.9(0, $i129, $p132, $sub.i32(0, 14), 0);
    call {:si_unique_call 715} {:cexpr "__pu_err___8"} boogie_si_record_i32($i133);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, $i130);
    call {:si_unique_call 716} {:cexpr "err"} boogie_si_record_i32($i134);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    call {:si_unique_call 717} $p137 := devirtbounce.8(0, $p136, $sub.i32(0, 14), 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i138 := $extractvalue($p137, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i139 := $extractvalue($p137, 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i32($i139);
    call {:si_unique_call 718} {:cexpr "temp"} boogie_si_record_i32($i140);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i138, $i134);
    call {:si_unique_call 719} {:cexpr "err"} boogie_si_record_i32($i141);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    call {:si_unique_call 720} $i144 := devirtbounce.9(0, $i140, $p143, $sub.i32(0, 14), 0);
    call {:si_unique_call 721} {:cexpr "__pu_err___9"} boogie_si_record_i32($i144);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i144, $i141);
    call {:si_unique_call 722} {:cexpr "err"} boogie_si_record_i32($i145);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    call {:si_unique_call 723} $p148 := devirtbounce.8(0, $p147, $sub.i32(0, 14), 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i149 := $extractvalue($p148, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i150 := $extractvalue($p148, 1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i64.i32($i150);
    call {:si_unique_call 724} {:cexpr "temp"} boogie_si_record_i32($i151);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i149, $i145);
    call {:si_unique_call 725} {:cexpr "err"} boogie_si_record_i32($i152);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    call {:si_unique_call 726} $i155 := devirtbounce.9(0, $i151, $p154, $sub.i32(0, 14), 0);
    call {:si_unique_call 727} {:cexpr "__pu_err___10"} boogie_si_record_i32($i155);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i156 := $or.i32($i155, $i152);
    call {:si_unique_call 728} {:cexpr "err"} boogie_si_record_i32($i156);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    call {:si_unique_call 729} $p159 := devirtbounce.8(0, $p158, $sub.i32(0, 14), 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i160 := $extractvalue($p159, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i161 := $extractvalue($p159, 1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i64.i32($i161);
    call {:si_unique_call 730} {:cexpr "temp"} boogie_si_record_i32($i162);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i160, $i156);
    call {:si_unique_call 731} {:cexpr "err"} boogie_si_record_i32($i163);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    call {:si_unique_call 732} $i166 := devirtbounce.9(0, $i162, $p165, $sub.i32(0, 14), 0);
    call {:si_unique_call 733} {:cexpr "__pu_err___11"} boogie_si_record_i32($i166);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, $i163);
    call {:si_unique_call 734} {:cexpr "err"} boogie_si_record_i32($i167);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    call {:si_unique_call 735} $p170 := devirtbounce.8(0, $p169, $sub.i32(0, 14), 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i171 := $extractvalue($p170, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i172 := $extractvalue($p170, 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i64.i32($i172);
    call {:si_unique_call 736} {:cexpr "temp"} boogie_si_record_i32($i173);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i171, $i167);
    call {:si_unique_call 737} {:cexpr "err"} boogie_si_record_i32($i174);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    call {:si_unique_call 738} $i177 := devirtbounce.9(0, $i173, $p176, $sub.i32(0, 14), 0);
    call {:si_unique_call 739} {:cexpr "__pu_err___12"} boogie_si_record_i32($i177);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i177, $i174);
    call {:si_unique_call 740} {:cexpr "err"} boogie_si_record_i32($i178);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i180 := (if $i179 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i13 := $i180;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb3;
}



const do_devconfig_ioctl: ref;

axiom do_devconfig_ioctl == $sub.ref(0, 260709);

procedure do_devconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.21, $M.32, assertsPassed, $M.23, $M.33;



implementation do_devconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i8: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p2 := $alloc($mul.ref(148, $zext.i32.i64(1)));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i3 := capable(21);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i22 := copy_from_user($p20, $p21, 148);
    call {:si_unique_call 749} {:cexpr "tmp___2"} boogie_si_record_i64($i22);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(19, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(20, 1)), $mul.ref(31, 4));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i35 := $M.18;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i36 := $sge.i32($i34, $i35);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i37 := comedi_device_attach($p0, $p2);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 752} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i8 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb6;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_30 := dev_warn.ref.ref($p31, .str.46);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb6;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i11 := is_device_busy($p0);
    call {:si_unique_call 745} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} comedi_device_detach($p0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_module_put_3($p19);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const comedi_clear_board_dev: ref;

axiom comedi_clear_board_dev == $sub.ref(0, 261741);

procedure comedi_clear_board_dev($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20;



implementation comedi_clear_board_dev($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 753} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i3, 8));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.20, $p4);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i9, 8));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p10, $0.ref);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;
}



const comedi_free_board_dev: ref;

axiom comedi_free_board_dev == $sub.ref(0, 262773);

procedure comedi_free_board_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_free_board_dev($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} comedi_device_cleanup($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} kfree($p11);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p7 := $M.29;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 102760448);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} device_destroy($p7, $i10);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const do_bufconfig_ioctl: ref;

axiom do_bufconfig_ioctl == $sub.ref(0, 263805);

procedure do_bufconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.32, $M.33;



implementation do_bufconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i8: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i6 := copy_from_user($p4, $p5, 32);
    call {:si_unique_call 762} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i13 := $uge.i32($i10, $i12);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 312));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i18, 312)), $mul.ref(40, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p21, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p21, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i71 := copy_to_user($p69, $p70, 32);
    call {:si_unique_call 767} {:cexpr "tmp___3"} boogie_si_record_i32($i71);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb33:
    assume $i72 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i61 := resize_async_buffer($p0, $p19, $p21, $i60);
    call {:si_unique_call 771} {:cexpr "retval"} boogie_si_record_i32($i61);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i8 := $i61;
    goto $bb3;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i48 := capable(21);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 769} {:cexpr "tmp___1"} boogie_si_record_i8($i49);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p21, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb22;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i24 := $M.7;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p26, .str.6);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, .str.47);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p28, .str.5);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, .str.48);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.12, $p31);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 730);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p31, $i34);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p35, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.13, $p36);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_31 := __dynamic_pr_debug.ref.ref($p3, .str.48);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const do_devinfo_ioctl: ref;

axiom do_devinfo_ioctl == $sub.ref(0, 264837);

procedure do_devinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation do_devinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_32: i64;
  var vslice_dummy_var_33: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(176, $zext.i32.i64(1)));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p4 := file_inode($p2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i5 := iminor($p4);
    call {:si_unique_call 775} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 776} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p6, 0, 176, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1868);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_32 := strlcpy($p12, $p16, 20);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_33 := strlcpy($p19, $p21, 20);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p23 := comedi_read_subdevice($p0, $i5);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p30 := comedi_write_subdevice($p0, $i5);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(52, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i39 := copy_to_user($p37, $p38, 176);
    call {:si_unique_call 782} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 14);
    goto $bb9;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(52, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const do_subdinfo_ioctl: ref;

axiom do_subdinfo_ioctl == $sub.ref(0, 265869);

procedure do_subdinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation do_subdinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i14: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i149: i1;
  var $i150: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p6 := kcalloc($i5, 72, 208);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p7);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i143);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i64.i32($i144);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i146 := $mul.i32($i145, 72);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i147 := copy_to_user($p140, $p141, $i146);
    call {:si_unique_call 788} {:cexpr "ret"} boogie_si_record_i32($i147);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p7);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} kfree($p148);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i147, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i150 := (if $i149 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i10 := $i150;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $p18, $i19, $p21, $i22, $p23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $p58, $p59, $p60, $i61, $i62, $p63, $i64, $i65, $p66, $p67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $p103, $p104, $p105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $p121, $i122, $i123, $p124, $i125, $i126, $p127, $p128, $p129, $i130, $i131, $p132, $p133, $p134, $i135, $p136, $i137, $i138, $i139, $i14 := do_subdinfo_ioctl_loop_$bb8($p0, $p2, $p7, $p11, $p15, $p16, $i17, $p18, $i19, $p21, $i22, $p23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $p58, $p59, $p60, $i61, $i62, $p63, $i64, $i65, $p66, $p67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $i88, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $p103, $p104, $p105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $p120, $p121, $i122, $i123, $p124, $i125, $i126, $p127, $p128, $p129, $i130, $i131, $p132, $p133, $p134, $i135, $p136, $i137, $i138, $i139, $i14);
    goto $bb8_last;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 312));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i14);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(12, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(16, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(4, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(20, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i30 := comedi_is_subdevice_running($p18);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 785} {:cexpr "tmp___1"} boogie_si_record_i8($i31);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(12, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 5);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(24, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(148, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(20, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(184, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(160, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(24, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(56, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(56, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i69, $i70);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(48, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(48, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p2);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i86, $i87);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(148, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(168, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(192, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(240, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(224, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, $p2i.ref.i64(insn_inval));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i131 == 1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, 2);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(176, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i14, 1);
    call {:si_unique_call 786} {:cexpr "i"} boogie_si_record_i32($i137);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p11);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i139 := $sgt.i32($i138, $i137);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i139 == 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb46:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i137;
    goto $bb46_dummy;

  $bb43:
    assume $i131 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i123 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i125, 4096);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i126);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i115 == 1;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, 64);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i107 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i109, 32);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i95 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(152, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb30;

  $bb31:
    assume $i99 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i101, 16);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i88 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 8);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 4);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i71 == 1;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 2);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i14, 24);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref($i17, 312)), $mul.ref(184, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i48, $i52);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 134217728);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb46_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;
}



const do_chaninfo_ioctl: ref;

axiom do_chaninfo_ioctl == $sub.ref(0, 266901);

procedure do_chaninfo_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation do_chaninfo_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i75: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i5 := copy_from_user($p3, $p4, 48);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i12 := $uge.i32($i9, $i11);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb29:
    assume $i67 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(192, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(16, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i73, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb34:
    assume $i74 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb37;

  $bb37:
    call $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $i92, $p93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i75 := do_chaninfo_ioctl_loop_$bb37($p0, $p2, $p14, $i17, $p72, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $p86, $i87, $p88, $p89, $p90, $i91, $i92, $p93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i75);
    goto $bb37_last;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i78 := $shl.i32($i77, 28);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 24);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i78, $i81);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i75, 16);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i82, $i83);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(192, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i75);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p86, $mul.ref($i87, 8));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i84, $i91);
    call {:si_unique_call 797} {:cexpr "x"} boogie_si_record_i32($i92);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} might_fault();
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i75);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p94, $mul.ref($i95, 4));
    call {:si_unique_call 799} $i97 := devirtbounce.22(0, $i92, $p96);
    call {:si_unique_call 800} {:cexpr "__ret_pu"} boogie_si_record_i32($i97);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i75, 1);
    call {:si_unique_call 801} {:cexpr "i"} boogie_si_record_i32($i99);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p72);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i101 := $sgt.i32($i100, $i99);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i101 == 1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb43:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i75 := $i99;
    goto $bb43_dummy;

  $bb40:
    assume $i98 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(168, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(168, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(16, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i60, 4);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i62 := copy_to_user($p53, $p56, $i61);
    call {:si_unique_call 796} {:cexpr "tmp___1"} boogie_si_record_i32($i62);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(148, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(152, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(152, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref($i17, 312)), $mul.ref(16, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i39, 4);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i41 := copy_to_user($p32, $p35, $i40);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;
}



const do_rangeinfo_ioctl: ref;

axiom do_rangeinfo_ioctl == $sub.ref(0, 267933);

procedure do_rangeinfo_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation do_rangeinfo_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p33: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i8: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i6 := copy_from_user($p4, $p5, 16);
    call {:si_unique_call 805} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 24);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    call {:si_unique_call 806} {:cexpr "subd"} boogie_si_record_i32($i12);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 16);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 255);
    call {:si_unique_call 807} {:cexpr "chan"} boogie_si_record_i32($i16);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, $i12);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i12);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 312)), $mul.ref(184, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref($i25, 312)), $mul.ref(192, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref($i25, 312)), $mul.ref(16, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, $i16);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref($i25, 312)), $mul.ref(192, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i16);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p42, $mul.ref($i43, 8));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $p45;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 65535);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i48, $i50);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i86 := $mul.i32($i85, 12);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i87 := copy_to_user($p79, $p81, $i86);
    call {:si_unique_call 812} {:cexpr "tmp___1"} boogie_si_record_i32($i87);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb29:
    assume $i88 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i52 := $M.7;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p54, .str.6);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p55, .str.7);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p56, .str.8);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p57, .str.9);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.12, $p59);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 129);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p59, $i62);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p63, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.13, $p64);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 809} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i69 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 65535);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_34 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p3, .str.9, $i72, $i74, $i76);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref($i25, 312)), $mul.ref(184, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const do_bufinfo_ioctl: ref;

axiom do_bufinfo_ioctl == $sub.ref(0, 268965);

procedure do_bufinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation do_bufinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i9: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i7 := copy_from_user($p5, $p6, 44);
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i14 := $uge.i32($i11, $i13);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p16, $mul.ref($i19, 312));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(48, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(40, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(56, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(56, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i67, $i68);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i107);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p3);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i120 := copy_to_user($p118, $p119, 44);
    call {:si_unique_call 821} {:cexpr "tmp___2"} boogie_si_record_i32($i120);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb49:
    assume $i121 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb43:
    assume $i94 == 1;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(20, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 16384);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb45;

  $bb46:
    assume $i98 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i101 := comedi_buf_write_alloc($p31, $i100);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_37 := comedi_buf_write_free($p31, $i104);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb31:
    assume $i72 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(20, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 32768);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb33;

  $bb34:
    assume $i76 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i79 := comedi_buf_read_alloc($p31, $i78);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_36 := comedi_buf_read_free($p31, $i82);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i84 := comedi_is_subdevice_idle($p20);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    call {:si_unique_call 825} {:cexpr "tmp___1"} boogie_si_record_i8($i85);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i86 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i88, $i90);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb38;

  $bb39:
    assume $i91 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} do_become_nonbusy($p0, $p20);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 13);
    goto $bb3;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i34 := $M.7;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p36, .str.6);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p37, .str.49);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p38, .str.5);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p39, .str.48);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.12, $p41);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 987);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p41, $i44);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p45, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.13, $p46);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 818} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_35 := __dynamic_pr_debug.ref.ref($p4, .str.48);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref($i19, 312)), $mul.ref(48, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i27, $i28);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 13);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;
}



const do_lock_ioctl: ref;

axiom do_lock_ioctl == $sub.ref(0, 269997);

procedure do_lock_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_lock_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i22: i32;
  var $p24: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} {:cexpr "do_lock_ioctl:arg:arg"} boogie_si_record_i32($i1);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(72, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p12 := spinlock_check($p11);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 832} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(72, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} spin_unlock_irqrestore($p24, $i13);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i6 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const do_unlock_ioctl: ref;

axiom do_unlock_ioctl == $sub.ref(0, 271029);

procedure do_unlock_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_unlock_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "do_unlock_ioctl:arg:arg"} boogie_si_record_i32($i1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i1);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 13);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const do_cancel_ioctl: ref;

axiom do_cancel_ioctl == $sub.ref(0, 272061);

procedure do_cancel_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation do_cancel_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "do_cancel_ioctl:arg:arg"} boogie_si_record_i32($i1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 312));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(40, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p2);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i30, $i31);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i33 := do_cancel($p0, $p10);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 837} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i34 := comedi_get_subdevice_runflags($p10);
    call {:si_unique_call 839} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i6 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(40, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} __wake_up($p39, 1, 1, $0.ref);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 13);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const do_cmd_ioctl: ref;

axiom do_cmd_ioctl == $sub.ref(0, 273093);

procedure do_cmd_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.19, $CurrAddr, $M.23, $M.22, assertsPassed;



implementation do_cmd_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i24;
  var $i90: i24;
  var $i91: i24;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i24;
  var $i176: i24;
  var $i177: i24;
  var $p178: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i64;
  var $i182: i64;
  var $i183: i64;
  var $i184: i1;
  var $p186: ref;
  var $i187: i32;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i24;
  var $i200: i24;
  var $i201: i24;
  var $p202: ref;
  var $p203: ref;
  var $i204: i8;
  var $i205: i64;
  var $i206: i64;
  var $i207: i64;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i24;
  var $i226: i24;
  var $i227: i24;
  var $p228: ref;
  var $p229: ref;
  var $i230: i8;
  var $i231: i64;
  var $i232: i64;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i64;
  var $i247: i64;
  var $p248: ref;
  var $p251: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i24;
  var $i266: i24;
  var $i267: i24;
  var $p268: ref;
  var $p269: ref;
  var $i270: i8;
  var $i271: i64;
  var $i272: i64;
  var $i273: i64;
  var $i274: i1;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p282: ref;
  var $i283: i32;
  var $i284: i64;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i24;
  var $i297: i24;
  var $i298: i24;
  var $p299: ref;
  var $p300: ref;
  var $i301: i8;
  var $i302: i64;
  var $i303: i64;
  var $i304: i64;
  var $i305: i1;
  var $p309: ref;
  var $i310: i32;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $i324: i24;
  var $i325: i24;
  var $i326: i24;
  var $p327: ref;
  var $p328: ref;
  var $i329: i8;
  var $i330: i64;
  var $i331: i64;
  var $i332: i64;
  var $i333: i1;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i32;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $i353: i24;
  var $i354: i24;
  var $i355: i24;
  var $p356: ref;
  var $p357: ref;
  var $i358: i8;
  var $i359: i64;
  var $i360: i64;
  var $i361: i64;
  var $i362: i1;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i24;
  var $i382: i24;
  var $i383: i24;
  var $p384: ref;
  var $p385: ref;
  var $i386: i8;
  var $i387: i64;
  var $i388: i64;
  var $i389: i64;
  var $i390: i1;
  var $p392: ref;
  var $i393: i32;
  var $i394: i1;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i24;
  var $i404: i24;
  var $i405: i24;
  var $p406: ref;
  var $p407: ref;
  var $i408: i8;
  var $i409: i64;
  var $i410: i64;
  var $i411: i64;
  var $i412: i1;
  var $p414: ref;
  var $p416: ref;
  var $i417: i32;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $i421: i32;
  var $i422: i32;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $i427: i32;
  var $i428: i1;
  var $i307: i32;
  var $i41: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i20 := copy_from_user($p18, $p19, 80);
    call {:si_unique_call 857} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i48 := $uge.i32($i45, $i47);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p71, $mul.ref($i74, 312));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(40, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(12, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(240, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i105 == 1);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(248, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i109 == 1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(40, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(48, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(56, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(24, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i190 := $ugt.i32($i187, $i189);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p3);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 882} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p239, $p240, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(64, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p242, $0.ref);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i246 := $zext.i32.i64($i245);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i247 := $mul.i64($i246, 4);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p248 := kmalloc($i247, 208);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p251, $p248);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i256 := $eq.i64($i255, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p43);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.0, $p282);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i284 := $zext.i32.i64($i283);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i285 := $mul.i64($i284, 4);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i286 := copy_from_user($p279, $p280, $i285);
    call {:si_unique_call 888} {:cexpr "tmp___11"} boogie_si_record_i64($i286);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i314 := comedi_check_chanlist($p75, $i310, $p313);
    call {:si_unique_call 894} {:cexpr "ret"} boogie_si_record_i32($i314);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i315 := $slt.i32($i314, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(248, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.0, $p335);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1));
    call {:si_unique_call 898} $i338 := devirtbounce.23($p336, $p0, $p75, $p337);
    call {:si_unique_call 899} {:cexpr "ret"} boogie_si_record_i32($i338);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(4, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.0, $p340);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i343 == 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i338, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.0, $p392);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i393, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i394} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} comedi_buf_reset($p77);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(264, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p414, 54);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(4, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.0, $p416);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i418 := $and.i32($i417, 32);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i419 := $ne.i32($i418, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} comedi_set_subdevice_runflags($p75, $sub.i32(0, 1), 134217729);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(56, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p424, $p2);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(240, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    call {:si_unique_call 914} $i427 := devirtbounce.4($p426, $p0, $p75);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32($i427);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i307 := $i427;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} do_become_nonbusy($p0, $p75);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i41 := $i307;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb143:
    assume $i428 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb9;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i419 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(264, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.0, $p420);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i422 := $or.i32($i421, 1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(264, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p423, $i422);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb131:
    assume $i394 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i395 := $M.7;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i307 := $sub.i32(0, 12);
    goto $bb99;

  $bb133:
    assume $i396 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p397, .str.6);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p398, .str.50);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p399, .str.5);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p400, .str.64);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p401);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i403 := $load.i24($M.12, $p402);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i404 := $and.i24($i403, $sub.i24(0, 262144));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i405 := $or.i24($i404, 1519);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p402, $i405);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p406, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i408 := $load.i8($M.13, $p407);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i409 := $zext.i8.i64($i408);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i410 := $and.i64($i409, 1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i411 := ldv__builtin_expect($i410, 0);
    call {:si_unique_call 910} {:cexpr "tmp___16"} boogie_si_record_i64($i411);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i412 := $ne.i64($i411, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb135:
    assume $i412 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_51 := __dynamic_pr_debug.ref.ref($p17, .str.64);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i345 := $M.7;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p77, $mul.ref(0, 296)), $mul.ref(96, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p3);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p364);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 903} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p365, $p366, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p367, $p43);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p368, $0.ref);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p3);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i371 := copy_to_user($p369, $p370, 80);
    call {:si_unique_call 905} {:cexpr "tmp___15"} boogie_si_record_i32($i371);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i372 := $ne.i32($i371, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i307 := $sub.i32(0, 11);
    goto $bb99;

  $bb121:
    assume $i372 == 1;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i373 := $M.7;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i307 := $sub.i32(0, 14);
    goto $bb99;

  $bb123:
    assume $i374 == 1;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p375, .str.6);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p376, .str.50);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p377, .str.5);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p378, .str.63);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i381 := $load.i24($M.12, $p380);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i382 := $and.i24($i381, $sub.i24(0, 262144));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i383 := $or.i24($i382, 1509);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p380, $i383);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p384, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i386 := $load.i8($M.13, $p385);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i387 := $zext.i8.i64($i386);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i388 := $and.i64($i387, 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i389 := ldv__builtin_expect($i388, 0);
    call {:si_unique_call 907} {:cexpr "tmp___14"} boogie_si_record_i64($i389);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i390 := $ne.i64($i389, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i390 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_50 := __dynamic_pr_debug.ref.ref($p16, .str.63);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb115:
    assume $i346 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p347, .str.6);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p348, .str.50);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p349, .str.5);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p350, .str.62);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p352 := $bitcast.ref.ref($p351);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i353 := $load.i24($M.12, $p352);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i354 := $and.i24($i353, $sub.i24(0, 262144));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i355 := $or.i24($i354, 1503);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p352, $i355);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p356, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.13, $p357);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i64($i358);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i360 := $and.i64($i359, 1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i361 := ldv__builtin_expect($i360, 0);
    call {:si_unique_call 901} {:cexpr "tmp___13"} boogie_si_record_i64($i361);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i362 := $ne.i64($i361, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb117:
    assume $i362 == 1;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_49 := __dynamic_pr_debug.ref.ref.i32($p15, .str.62, $i338);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb111;

  $bb101:
    assume $i315 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i316 := $M.7;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i307 := $i314;
    goto $bb99;

  $bb103:
    assume $i317 == 1;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p318, .str.6);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p319, .str.50);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p320, .str.5);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p321, .str.61);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i324 := $load.i24($M.12, $p323);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i325 := $and.i24($i324, $sub.i24(0, 262144));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i326 := $or.i24($i325, 1496);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p323, $i326);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p327, 0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.13, $p328);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i64($i329);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i331 := $and.i64($i330, 1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i332 := ldv__builtin_expect($i331, 0);
    call {:si_unique_call 896} {:cexpr "tmp___12"} boogie_si_record_i64($i332);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i333 := $ne.i64($i332, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i333 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_48 := __dynamic_pr_debug.ref.ref($p14, .str.61);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb91:
    assume $i287 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i288 := $M.7;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i307 := $sub.i32(0, 14);
    goto $bb99;

  $bb93:
    assume $i289 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p290, .str.6);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p291, .str.50);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p292, .str.5);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p293, .str.60);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p294);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i296 := $load.i24($M.12, $p295);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i297 := $and.i24($i296, $sub.i24(0, 262144));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i298 := $or.i24($i297, 1486);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p295, $i298);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p299, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.13, $p300);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i64($i301);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i303 := $and.i64($i302, 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i304 := ldv__builtin_expect($i303, 0);
    call {:si_unique_call 890} {:cexpr "tmp___10"} boogie_si_record_i64($i304);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i305 := $ne.i64($i304, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i305 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_47 := __dynamic_pr_debug.ref.ref($p13, .str.60);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb82:
    assume $i256 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i257 := $M.7;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb9;

  $bb84:
    assume $i258 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p259, .str.6);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p260, .str.50);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p261, .str.5);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p262, .str.59);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i265 := $load.i24($M.12, $p264);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i266 := $and.i24($i265, $sub.i24(0, 262144));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i267 := $or.i24($i266, 1480);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p264, $i267);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p268, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.13, $p269);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i64($i270);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i272 := $and.i64($i271, 1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i273 := ldv__builtin_expect($i272, 0);
    call {:si_unique_call 885} {:cexpr "tmp___9"} boogie_si_record_i64($i273);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i274 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_46 := __dynamic_pr_debug.ref.ref($p12, .str.59);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb73:
    assume $i216 == 1;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i217 := $M.7;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb9;

  $bb75:
    assume $i218 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p219, .str.6);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p220, .str.50);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p221, .str.5);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p222, .str.58);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i225 := $load.i24($M.12, $p224);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i226 := $and.i24($i225, $sub.i24(0, 262144));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i227 := $or.i24($i226, 1470);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p224, $i227);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p228, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.13, $p229);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i64($i230);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i232 := $and.i64($i231, 1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i233 := ldv__builtin_expect($i232, 0);
    call {:si_unique_call 880} {:cexpr "tmp___7"} boogie_si_record_i64($i233);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i233, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb77:
    assume $i234 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_45 := __dynamic_pr_debug.ref.ref.i32($p11, .str.58, $i236);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb64:
    assume $i190 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i191 := $M.7;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb9;

  $bb66:
    assume $i192 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p193, .str.6);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p194, .str.50);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p195, .str.5);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p196, .str.57);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i199 := $load.i24($M.12, $p198);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i200 := $and.i24($i199, $sub.i24(0, 262144));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i201 := $or.i24($i200, 1463);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p198, $i201);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p202, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.13, $p203);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i64($i204);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i206 := $and.i64($i205, 1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i207 := ldv__builtin_expect($i206, 0);
    call {:si_unique_call 877} {:cexpr "tmp___6"} boogie_si_record_i64($i207);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i208 := $ne.i64($i207, 0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i208 == 1;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(24, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_44 := __dynamic_pr_debug.ref.ref.i32.i32($p10, .str.57, $i210, $i212);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb55:
    assume $i166 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i167 := $M.7;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 16);
    goto $bb9;

  $bb57:
    assume $i168 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p169, .str.6);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p170, .str.50);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p171, .str.5);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p172, .str.56);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i175 := $load.i24($M.12, $p174);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i176 := $and.i24($i175, $sub.i24(0, 262144));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i177 := $or.i24($i176, 1456);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p174, $i177);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p178, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.13, $p179);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i64($i180);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i182 := $and.i64($i181, 1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i183 := ldv__builtin_expect($i182, 0);
    call {:si_unique_call 874} {:cexpr "tmp___5"} boogie_si_record_i64($i183);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i184 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_43 := __dynamic_pr_debug.ref.ref($p9, .str.56);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb43:
    assume $i138 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p71, $mul.ref($i74, 312)), $mul.ref(48, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p2);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i141, $i142);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb45;

  $bb46:
    assume $i143 == 1;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i144 := $M.7;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 13);
    goto $bb9;

  $bb48:
    assume $i145 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p146, .str.6);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p147, .str.50);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p148, .str.5);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p149, .str.55);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.12, $p151);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 1450);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p151, $i154);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p155, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.13, $p156);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 871} {:cexpr "tmp___4"} boogie_si_record_i64($i160);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i161 == 1;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_42 := __dynamic_pr_debug.ref.ref($p8, .str.55);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i114 := $M.7;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb9;

  $bb36:
    assume $i115 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p116, .str.6);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p117, .str.50);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p118, .str.5);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p119, .str.54);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.12, $p121);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 1444);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p121, $i124);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p125, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.13, $p126);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 868} {:cexpr "tmp___3"} boogie_si_record_i64($i130);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i131 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_41 := __dynamic_pr_debug.ref.ref.i32($p7, .str.54, $i133);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb30;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i81 := $M.7;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb9;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p83, .str.6);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p84, .str.50);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p85, .str.5);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p86, .str.53);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i89 := $load.i24($M.12, $p88);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i90 := $and.i24($i89, $sub.i24(0, 262144));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i91 := $or.i24($i90, 1438);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p88, $i91);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p92, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.13, $p93);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 865} {:cexpr "tmp___2"} boogie_si_record_i64($i97);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i98 == 1;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_40 := __dynamic_pr_debug.ref.ref.i32($p6, .str.53, $i100);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i49 := $M.7;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb9;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p51, .str.6);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p52, .str.50);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p53, .str.5);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p54, .str.52);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.12, $p56);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 1430);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p56, $i59);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p60, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.13, $p61);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 862} {:cexpr "tmp___1"} boogie_si_record_i64($i65);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i66 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_39 := __dynamic_pr_debug.ref.ref.i32($p5, .str.52, $i68);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i22 := $M.7;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 14);
    goto $bb9;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p24, .str.6);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p25, .str.50);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p26, .str.5);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p27, .str.51);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.12, $p29);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 1423);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p29, $i32);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p33, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.13, $p34);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 859} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_38 := __dynamic_pr_debug.ref.ref($p4, .str.51);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const do_cmdtest_ioctl: ref;

axiom do_cmdtest_ioctl == $sub.ref(0, 274125);

procedure do_cmdtest_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation do_cmdtest_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i24;
  var $i112: i24;
  var $i113: i24;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i24;
  var $i138: i24;
  var $i139: i24;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i24;
  var $i175: i24;
  var $i176: i24;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i64;
  var $i181: i64;
  var $i182: i64;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i64;
  var $i190: i64;
  var $i191: i64;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i24;
  var $i202: i24;
  var $i203: i24;
  var $p204: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i24;
  var $i225: i24;
  var $i226: i24;
  var $p227: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i64;
  var $i231: i64;
  var $i232: i64;
  var $i233: i1;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i24;
  var $i254: i24;
  var $i255: i24;
  var $p256: ref;
  var $p257: ref;
  var $i258: i8;
  var $i259: i64;
  var $i260: i64;
  var $i261: i64;
  var $i262: i1;
  var $i152: i32;
  var $p153: ref;
  var $p264: ref;
  var $i36: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i15 := copy_from_user($p13, $p14, 80);
    call {:si_unique_call 927} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i43 := $uge.i32($i40, $i42);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p66, $mul.ref($i69, 312));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(12, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(240, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i98 == 1);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(248, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(24, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i128 := $ugt.i32($i125, $i127);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $p236 := $0.ref;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(248, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    call {:si_unique_call 958} $i239 := devirtbounce.23($p238, $p0, $p70, $p3);
    call {:si_unique_call 959} {:cexpr "ret"} boogie_si_record_i32($i239);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p240, $p38);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p3);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i243 := copy_to_user($p241, $p242, 80);
    call {:si_unique_call 961} {:cexpr "tmp___11"} boogie_si_record_i32($i243);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i152, $p153 := $i239, $p236;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p153);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} kfree($p264);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i36 := $i152;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb81:
    assume $i244 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i245 := $M.7;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i152, $p153 := $sub.i32(0, 14), $p236;
    goto $bb49;

  $bb83:
    assume $i246 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p247, .str.6);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p248, .str.65);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p249, .str.5);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p250, .str.51);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i253 := $load.i24($M.12, $p252);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i254 := $and.i24($i253, $sub.i24(0, 262144));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i255 := $or.i24($i254, 1635);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p252, $i255);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p256, 0);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.13, $p257);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i64($i258);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i260 := $and.i64($i259, 1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i261 := ldv__builtin_expect($i260, 0);
    call {:si_unique_call 963} {:cexpr "tmp___10"} boogie_si_record_i64($i261);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i262 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_60 := __dynamic_pr_debug.ref.ref($p12, .str.51);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb51:
    assume $i157 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i159);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i161 := $mul.i64($i160, 4);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p162 := kmalloc($i161, 208);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i165 := $eq.i64($i164, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p163);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p38);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i189 := $zext.i32.i64($i188);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i190 := $mul.i64($i189, 4);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i191 := copy_from_user($p185, $p186, $i190);
    call {:si_unique_call 949} {:cexpr "tmp___8"} boogie_si_record_i64($i191);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i214 := comedi_check_chanlist($p70, $i213, $p163);
    call {:si_unique_call 954} {:cexpr "ret"} boogie_si_record_i32($i214);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i214, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, $p162);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p236 := $p162;
    goto $bb80;

  $bb71:
    assume $i215 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i216 := $M.7;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i152, $p153 := $i214, $p162;
    goto $bb49;

  $bb73:
    assume $i217 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p218, .str.6);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p219, .str.65);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p220, .str.5);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p221, .str.61);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i224 := $load.i24($M.12, $p223);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i225 := $and.i24($i224, $sub.i24(0, 262144));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i226 := $or.i24($i225, 1622);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p223, $i226);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p227, 0);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.13, $p228);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i64($i229);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i231 := $and.i64($i230, 1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i232 := ldv__builtin_expect($i231, 0);
    call {:si_unique_call 956} {:cexpr "tmp___9"} boogie_si_record_i64($i232);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i233 := $ne.i64($i232, 0);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i233 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_59 := __dynamic_pr_debug.ref.ref($p11, .str.61);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb62:
    assume $i192 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i193 := $M.7;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i152, $p153 := $sub.i32(0, 14), $p162;
    goto $bb49;

  $bb64:
    assume $i194 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p195, .str.6);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p196, .str.65);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p197, .str.5);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p198, .str.60);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i201 := $load.i24($M.12, $p200);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i202 := $and.i24($i201, $sub.i24(0, 262144));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i203 := $or.i24($i202, 1614);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p200, $i203);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p204, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.13, $p205);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i64($i206);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i208 := $and.i64($i207, 1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i209 := ldv__builtin_expect($i208, 0);
    call {:si_unique_call 951} {:cexpr "tmp___7"} boogie_si_record_i64($i209);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i210 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_58 := __dynamic_pr_debug.ref.ref($p10, .str.60);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb53:
    assume $i165 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i166 := $M.7;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i152, $p153 := $sub.i32(0, 12), $p162;
    goto $bb49;

  $bb55:
    assume $i167 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p168, .str.6);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p169, .str.65);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p170, .str.5);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p171, .str.59);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i174 := $load.i24($M.12, $p173);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i175 := $and.i24($i174, $sub.i24(0, 262144));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i176 := $or.i24($i175, 1607);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p173, $i176);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p177, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.13, $p178);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i64($i179);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i181 := $and.i64($i180, 1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i182 := ldv__builtin_expect($i181, 0);
    call {:si_unique_call 946} {:cexpr "tmp___6"} boogie_si_record_i64($i182);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i183 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_57 := __dynamic_pr_debug.ref.ref($p9, .str.59);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb41:
    assume $i128 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i129 := $M.7;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i152, $p153 := $sub.i32(0, 22), $0.ref;
    goto $bb49;

  $bb43:
    assume $i130 == 1;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p131, .str.6);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p132, .str.65);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p133, .str.5);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p134, .str.66);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i137 := $load.i24($M.12, $p136);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i138 := $and.i24($i137, $sub.i24(0, 262144));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i139 := $or.i24($i138, 1597);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p136, $i139);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p140, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.13, $p141);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i64($i142);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i144 := $and.i64($i143, 1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 941} {:cexpr "tmp___4"} boogie_si_record_i64($i145);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i146 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p66, $mul.ref($i69, 312)), $mul.ref(24, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_56 := __dynamic_pr_debug.ref.ref.i32.i32($p8, .str.66, $i148, $i150);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i103 := $M.7;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 5);
    goto $bb9;

  $bb34:
    assume $i104 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p105, .str.6);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p106, .str.65);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p107, .str.5);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p108, .str.54);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i111 := $load.i24($M.12, $p110);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i112 := $and.i24($i111, $sub.i24(0, 262144));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i113 := $or.i24($i112, 1590);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p110, $i113);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p114, 0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.13, $p115);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i64($i116);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i118 := $and.i64($i117, 1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i119 := ldv__builtin_expect($i118, 0);
    call {:si_unique_call 938} {:cexpr "tmp___3"} boogie_si_record_i64($i119);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i120 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_55 := __dynamic_pr_debug.ref.ref.i32($p7, .str.54, $i122);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb30;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i74 := $M.7;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 5);
    goto $bb9;

  $bb22:
    assume $i75 == 1;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p76, .str.6);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p77, .str.65);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p78, .str.5);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p79, .str.53);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.12, $p81);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 1584);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p81, $i84);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p85, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.13, $p86);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 935} {:cexpr "tmp___2"} boogie_si_record_i64($i90);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i91 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_54 := __dynamic_pr_debug.ref.ref.i32($p6, .str.53, $i93);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i44 := $M.7;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 19);
    goto $bb9;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p46, .str.6);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p47, .str.65);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p48, .str.5);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p49, .str.52);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.12, $p51);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 1578);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p51, $i54);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p55, 0);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.13, $p56);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 932} {:cexpr "tmp___1"} boogie_si_record_i64($i60);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_53 := __dynamic_pr_debug.ref.ref.i32($p5, .str.52, $i63);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i17 := $M.7;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 14);
    goto $bb9;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p19, .str.6);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p20, .str.65);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p21, .str.5);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p22, .str.51);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.12, $p24);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1571);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p24, $i27);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p28, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.13, $p29);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 929} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_52 := __dynamic_pr_debug.ref.ref($p4, .str.51);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const do_insnlist_ioctl: ref;

axiom do_insnlist_ioctl == $sub.ref(0, 275157);

procedure do_insnlist_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation do_insnlist_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i102: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i24;
  var $i117: i24;
  var $i118: i24;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $i127: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i24;
  var $i157: i24;
  var $i158: i24;
  var $p159: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $i167: i64;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i64;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i64;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i24;
  var $i202: i24;
  var $i203: i24;
  var $p204: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i101: i32;
  var $i217: i32;
  var $i218: i32;
  var $i99: i32;
  var $i100: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p219: ref;
  var $p220: ref;
  var $i221: i1;
  var $i14: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i12 := copy_from_user($p10, $p11, 16);
    call {:si_unique_call 973} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p15 := kmalloc(1024, 208);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p44 := kcalloc($i43, 40, 208);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p45);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i74 := $mul.i64($i73, 40);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i75 := copy_from_user($p67, $p70, $i74);
    call {:si_unique_call 985} {:cexpr "tmp___5"} boogie_si_record_i64($i75);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i98 := $ult.i32(0, $i97);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i99, $i100 := 0, 0;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, $i99, $i100;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p38);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} kfree($p219);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p16);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} kfree($p220);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i221 := $slt.i32($i40, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i14 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb80:
    assume $i221 == 1;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i14 := $i40;
    goto $bb3;

  $bb33:
    assume $i98 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb36;

  $bb36:
    call $i102, $p104, $i105, $i106, $i107, $i127, $p129, $i130, $i131, $i132, $p133, $i134, $p136, $p137, $p138, $i139, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p175, $i176, $i177, $i178, $i179, $p181, $p182, $p183, $p184, $i185, $p187, $i188, $i189, $i190, $i191, $i192, $i212, $i213, $i214, $i215, $i216, $i101, $i217, $i218 := do_insnlist_ioctl_loop_$bb36($p0, $p2, $p16, $p45, $p96, $i102, $p104, $i105, $i106, $i107, $i127, $p129, $i130, $i131, $i132, $p133, $i134, $p136, $p137, $p138, $i139, $p141, $i142, $i143, $i144, $i145, $i146, $i147, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p175, $i176, $i177, $i178, $i179, $p181, $p182, $p183, $p184, $i185, $p187, $i188, $i189, $i190, $i191, $i192, $i212, $i213, $i214, $i215, $i216, $i101, $i217, $i218);
    goto $bb36_last;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p45, $mul.ref($i102, 40)), $mul.ref(4, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i106 := $ugt.i32($i105, 256);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i107 := $i101;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i101);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p45, $mul.ref($i127, 40)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 134217728);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i101);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p45, $mul.ref($i167, 40));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i169 := parse_insn($p0, $p168, $p16, $p2);
    call {:si_unique_call 998} {:cexpr "ret"} boogie_si_record_i32($i169);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i171, $i172 := $i101, $i169;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i101);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p45, $mul.ref($i173, 40)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 67108864);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i212 := need_resched();
    call {:si_unique_call 1005} {:cexpr "tmp___11"} boogie_si_record_i32($i212);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i214 := $add.i32($i101, 1);
    call {:si_unique_call 1007} {:cexpr "i"} boogie_si_record_i32($i214);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p96);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i216 := $ult.i32($i214, $i215);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i217, $i218 := $i214, $i169;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i99, $i100 := $i217, $i218;
    goto $bb35;

  $bb77:
    assume $i216 == 1;
    assume {:verifier.code 0} true;
    $i101 := $i214;
    goto $bb77_dummy;

  $bb74:
    assume $i213 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} schedule();
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb62:
    assume $i178 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i101);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p45, $mul.ref($i179, 40)), $mul.ref(8, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p16);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i101);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p45, $mul.ref($i185, 40)), $mul.ref(4, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i189 := $mul.i32($i188, 4);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i190 := copy_to_user($p183, $p184, $i189);
    call {:si_unique_call 1000} {:cexpr "tmp___10"} boogie_si_record_i32($i190);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i192 := $i101;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb64:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i193 := $M.7;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, $i192, $sub.i32(0, 14);
    goto $bb13;

  $bb66:
    assume $i194 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p195, .str.6);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p196, .str.67);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p197, .str.5);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p198, .str.71);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i201 := $load.i24($M.12, $p200);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i202 := $and.i24($i201, $sub.i24(0, 262144));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i203 := $or.i24($i202, 1333);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p200, $i203);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p204, 0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.13, $p205);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i64($i206);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i208 := $and.i64($i207, 1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i209 := ldv__builtin_expect($i208, 0);
    call {:si_unique_call 1002} {:cexpr "tmp___9"} boogie_si_record_i64($i209);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i210 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_66 := __dynamic_pr_debug.ref.ref($p9, .str.71);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb59:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, $i171, $i172;
    goto $bb13;

  $bb47:
    assume $i132 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p16);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i101);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p45, $mul.ref($i134, 40)), $mul.ref(8, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i101);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p45, $mul.ref($i139, 40)), $mul.ref(4, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i142);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i144 := $mul.i64($i143, 4);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i145 := copy_from_user($p133, $p138, $i144);
    call {:si_unique_call 993} {:cexpr "tmp___8"} boogie_si_record_i64($i145);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i147 := $i101;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb49:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i148 := $M.7;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, $i147, $sub.i32(0, 14);
    goto $bb13;

  $bb51:
    assume $i149 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p150, .str.6);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p151, .str.67);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p152, .str.5);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p153, .str.69);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i156 := $load.i24($M.12, $p155);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i157 := $and.i24($i156, $sub.i24(0, 262144));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i158 := $or.i24($i157, 1322);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p155, $i158);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p159, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.13, $p160);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i64($i161);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i163 := $and.i64($i162, 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i164 := ldv__builtin_expect($i163, 0);
    call {:si_unique_call 995} {:cexpr "tmp___7"} boogie_si_record_i64($i164);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i165 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_65 := __dynamic_pr_debug.ref.ref($p8, .str.69);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb38:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i108 := $M.7;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, $i107, $sub.i32(0, 22);
    goto $bb13;

  $bb40:
    assume $i109 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p110, .str.6);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p111, .str.67);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p112, .str.5);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p113, .str.70);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i116 := $load.i24($M.12, $p115);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i117 := $and.i24($i116, $sub.i24(0, 262144));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i118 := $or.i24($i117, 1315);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p115, $i118);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p119, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.13, $p120);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i124 := ldv__builtin_expect($i123, 0);
    call {:si_unique_call 990} {:cexpr "tmp___6"} boogie_si_record_i64($i124);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i125 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_64 := __dynamic_pr_debug.ref.ref($p7, .str.70);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i77 := $M.7;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, 0, $sub.i32(0, 14);
    goto $bb13;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p79, .str.6);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p80, .str.67);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p81, .str.5);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p82, .str.69);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.12, $p84);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 1308);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p84, $i87);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p88, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.13, $p89);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 987} {:cexpr "tmp___4"} boogie_si_record_i64($i93);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i94 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_63 := __dynamic_pr_debug.ref.ref($p6, .str.69);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i48 := $M.7;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p44, 0, $sub.i32(0, 12);
    goto $bb13;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p50, .str.6);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p51, .str.67);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p52, .str.5);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p53, .str.68);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.12, $p55);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 1301);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p55, $i58);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p59, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.13, $p60);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 982} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_62 := __dynamic_pr_debug.ref.ref($p5, .str.68);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i19 := $M.7;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $0.ref, 0, $sub.i32(0, 12);
    goto $bb13;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p21, .str.6);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p22, .str.67);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p23, .str.5);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p24, .str.68);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.12, $p26);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 1294);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p26, $i29);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p30, 0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.13, $p31);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 976} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_61 := __dynamic_pr_debug.ref.ref($p4, .str.68);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb3;

  $bb77_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;
}



const do_insn_ioctl: ref;

axiom do_insn_ioctl == $sub.ref(0, 276189);

procedure do_insn_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation do_insn_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i8: i32;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p4 := kmalloc(1024, 208);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i11 := copy_from_user($p9, $p10, 40);
    call {:si_unique_call 1012} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 256);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 134217728);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i31 := parse_insn($p0, $p3, $p5, $p2);
    call {:si_unique_call 1016} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 67108864);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    call {:si_unique_call 1019} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i8 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p5);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} kfree($p48);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i42, 4);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i44 := copy_to_user($p39, $p40, $i43);
    call {:si_unique_call 1018} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p5);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i27, 4);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i29 := copy_from_user($p21, $p24, $i28);
    call {:si_unique_call 1014} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 256);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const do_poll_ioctl: ref;

axiom do_poll_ioctl == $sub.ref(0, 277221);

procedure do_poll_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation do_poll_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} {:cexpr "do_poll_ioctl:arg:arg"} boogie_si_record_i32($i1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 312));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(56, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i26, $i27);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(256, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(256, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 1021} $i35 := devirtbounce.4($p34, $p0, $p10);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 1022} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i6 := $i35;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($i9, 312)), $mul.ref(48, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 13);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 278253);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1024} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 279285);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1029} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} might_fault();
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1032} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1036} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1040} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_67 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} warn_slowpath_fmt.ref.i32.ref(.str.92, 66, .str.93);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 1038} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 1034} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const parse_insn: ref;

axiom parse_insn == $sub.ref(0, 280317);

procedure parse_insn($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation parse_insn($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i24;
  var $i116: i24;
  var $i117: i24;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i24;
  var $i143: i24;
  var $i144: i24;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i1;
  var $i27: i32;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i24;
  var $i168: i24;
  var $i169: i24;
  var $p170: ref;
  var $p171: ref;
  var $i172: i8;
  var $i173: i64;
  var $i174: i64;
  var $i175: i64;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i64;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i24;
  var $i199: i24;
  var $i200: i24;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i64;
  var $i205: i64;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i24;
  var $i229: i24;
  var $i230: i24;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $i237: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i24;
  var $i251: i24;
  var $i252: i24;
  var $p253: ref;
  var $p254: ref;
  var $i255: i8;
  var $i256: i64;
  var $i257: i64;
  var $i258: i64;
  var $i259: i1;
  var $p261: ref;
  var $p262: ref;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $i286: i64;
  var $i287: i64;
  var $p288: ref;
  var $i289: i32;
  var $p291: ref;
  var $i292: i32;
  var $i290: i32;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $i297: i64;
  var $p298: ref;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i24;
  var $i310: i24;
  var $i311: i24;
  var $p312: ref;
  var $p313: ref;
  var $i314: i8;
  var $i315: i64;
  var $i316: i64;
  var $i317: i64;
  var $i318: i1;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $i296: i32;
  var $i320: i32;
  var $i324: i1;
  var $p325: ref;
  var $p326: ref;
  var $i327: i32;
  var $i328: i32;
  var $p329: ref;
  var $i330: i32;
  var $i331: i1;
  var $i333: i32;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i342: i32;
  var $i343: i32;
  var $p344: ref;
  var $i345: i32;
  var $i346: i32;
  var $p347: ref;
  var $i348: i32;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i32;
  var $p356: ref;
  var $i332: i32;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $i277: i32;
  var $p362: ref;
  var $i153: i32;
  var $i180: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 33554432);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i158 := $uge.i32($i155, $i157);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i185 := $zext.i32.i64($i184);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p182, $mul.ref($i185, 312));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(12, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(48, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i240 := comedi_check_chanlist($p186, 1, $p239);
    call {:si_unique_call 1079} {:cexpr "ret"} boogie_si_record_i32($i240);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i240, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(56, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p262);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i264 := $ne.i64($i263, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(56, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, parse_insn);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 201326594);
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i267, 201326595);
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i267, 201326595);
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i277 := $sub.i32(0, 22);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(56, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p362, $0.ref);
    assume {:verifier.code 0} true;
    $i153 := $i277;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i180 := $i153;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $r := $i180;
    return;

  $bb112:
    assume $i270 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i357 := check_insn_config_length($p1, $p2);
    call {:si_unique_call 1084} {:cexpr "ret"} boogie_si_record_i32($i357);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(232, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    call {:si_unique_call 1097} $i361 := devirtbounce.25($p360, $p0, $p186, $p1, $p2);
    call {:si_unique_call 1098} {:cexpr "ret"} boogie_si_record_i32($i361);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i277 := $i361;
    goto $bb121;

  $bb158:
    assume $i358 == 1;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i277 := $i357;
    goto $bb121;

  $bb110:
    assume $i269 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 2);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i331 == 1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.0, $p2);
    call {:si_unique_call 1093} {:cexpr "orig_mask"} boogie_si_record_i32($i333);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(16, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i336 := $sle.i32($i335, 32);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i348 := 0;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(224, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    call {:si_unique_call 1095} $i351 := devirtbounce.25($p350, $p0, $p186, $p1, $p2);
    call {:si_unique_call 1096} {:cexpr "ret"} boogie_si_record_i32($i351);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i333);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i352 := $ne.i32($i348, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i332 := $i351;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i277 := $i332;
    goto $bb121;

  $bb155:
    assume $i352 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p353);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i355 := $lshr.i32($i354, $i348);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p356, $i355);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb149:
    assume $i336 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.0, $p337);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i339 := $and.i32($i338, 65535);
    call {:si_unique_call 1094} {:cexpr "shift"} boogie_si_record_i32($i339);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i348 := $i339;
    goto $bb154;

  $bb151:
    assume $i340 == 1;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p341, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.0, $p2);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i343 := $shl.i32($i342, $i339);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i343);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i346 := $shl.i32($i345, $i339);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p347, $i346);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb146:
    assume $i331 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i332 := $sub.i32(0, 22);
    goto $bb148;

  $bb108:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i267, 134217729);
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i267, 134217729);
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb114;

  $bb117:
    assume $i272 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(152, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p279);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i281 := $ne.i64($i280, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i281 == 1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(148, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i290 := $i292;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i295 := $ult.i32(0, $i294);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i320 := $i240;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i320, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i328 := $i320;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i277 := $i328;
    goto $bb121;

  $bb143:
    assume $i324 == 1;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(216, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    call {:si_unique_call 1091} $i327 := devirtbounce.25($p326, $p0, $p186, $p1, $p2);
    call {:si_unique_call 1092} {:cexpr "ret"} boogie_si_record_i32($i327);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i328 := $i327;
    goto $bb145;

  $bb125:
    assume $i295 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i296 := 0;
    goto $bb128;

  $bb128:
    call $i297, $p298, $i299, $i300, $i321, $i322, $i323, $i296 := parse_insn_loop_$bb128($p2, $i290, $p293, $i297, $p298, $i299, $i300, $i321, $i322, $i323, $i296);
    goto $bb128_last;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i297 := $sext.i32.i64($i296);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p2, $mul.ref($i297, 4));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.0, $p298);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i300 := $ugt.i32($i299, $i290);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i321 := $add.i32($i296, 1);
    call {:si_unique_call 1090} {:cexpr "i"} boogie_si_record_i32($i321);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p293);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i323 := $ult.i32($i321, $i322);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i323 == 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb140:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i296 := $i321;
    goto $bb140_dummy;

  $bb130:
    assume $i300 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i301 := $M.7;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i320 := $sub.i32(0, 22);
    goto $bb138;

  $bb132:
    assume $i302 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p303, .str.6);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p304, .str.72);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p305, .str.5);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p306, .str.80);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p308 := $bitcast.ref.ref($p307);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i309 := $load.i24($M.12, $p308);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i310 := $and.i24($i309, $sub.i24(0, 262144));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i311 := $or.i24($i310, 1212);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p308, $i311);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p312, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.13, $p313);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i64($i314);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i316 := $and.i64($i315, 1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i317 := ldv__builtin_expect($i316, 0);
    call {:si_unique_call 1088} {:cexpr "tmp___7"} boogie_si_record_i64($i317);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i318 := $ne.i64($i317, 0);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i318 == 1;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_76 := __dynamic_pr_debug.ref.ref($p13, .str.80);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb122:
    assume $i281 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(152, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i286 := $zext.i32.i64($i285);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i287 := $and.i64($i286, 65535);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($p283, $mul.ref($i287, 4));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p288);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i290 := $i289;
    goto $bb124;

  $bb115:
    assume $i271 == 1;
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i267, 67108864);
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb114;

  $bb119:
    assume $i273 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(208, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    call {:si_unique_call 1085} $i276 := devirtbounce.25($p275, $p0, $p186, $p1, $p2);
    call {:si_unique_call 1086} {:cexpr "ret"} boogie_si_record_i32($i276);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i277 := $i276;
    goto $bb121;

  $bb104:
    assume $i264 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32(0, 16);
    goto $bb72;

  $bb95:
    assume $i241 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i242 := $M.7;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i243 := $ne.i32($i242, 0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32(0, 22);
    goto $bb72;

  $bb97:
    assume $i243 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p244, .str.6);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p245, .str.72);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p246, .str.5);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p247, .str.79);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i250 := $load.i24($M.12, $p249);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i251 := $and.i24($i250, $sub.i24(0, 262144));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i252 := $or.i24($i251, 1191);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p249, $i252);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p253, 0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.13, $p254);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i64($i255);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i257 := $and.i64($i256, 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i258 := ldv__builtin_expect($i257, 0);
    call {:si_unique_call 1081} {:cexpr "tmp___6"} boogie_si_record_i64($i258);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i259 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_75 := __dynamic_pr_debug.ref.ref($p12, .str.79);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb83:
    assume $i214 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p182, $mul.ref($i185, 312)), $mul.ref(48, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p3);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i217, $i218);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb85;

  $bb86:
    assume $i219 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i220 := $M.7;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32(0, 13);
    goto $bb72;

  $bb88:
    assume $i221 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p222, .str.6);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p223, .str.72);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p224, .str.5);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p225, .str.78);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i228 := $load.i24($M.12, $p227);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i229 := $and.i24($i228, $sub.i24(0, 262144));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i230 := $or.i24($i229, 1183);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p227, $i230);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p231, 0);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.13, $p232);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i64($i233);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, 1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i236 := ldv__builtin_expect($i235, 0);
    call {:si_unique_call 1076} {:cexpr "tmp___5"} boogie_si_record_i64($i236);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i237 := $ne.i64($i236, 0);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb90:
    assume $i237 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} vslice_dummy_var_74 := __dynamic_pr_debug.ref.ref($p11, .str.78);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb74:
    assume $i189 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i190 := $M.7;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32(0, 5);
    goto $bb72;

  $bb76:
    assume $i191 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p192, .str.6);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p193, .str.72);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p194, .str.5);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p195, .str.73);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i198 := $load.i24($M.12, $p197);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i199 := $and.i24($i198, $sub.i24(0, 262144));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i200 := $or.i24($i199, 1176);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p197, $i200);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p201, 0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.13, $p202);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i64($i203);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i205 := $and.i64($i204, 1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i206 := ldv__builtin_expect($i205, 0);
    call {:si_unique_call 1073} {:cexpr "tmp___4"} boogie_si_record_i64($i206);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i207 == 1;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_73 := __dynamic_pr_debug.ref.ref.i32($p10, .str.73, $i209);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb64:
    assume $i158 == 1;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i159 := $M.7;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32(0, 22);
    goto $bb72;

  $bb66:
    assume $i160 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p161, .str.6);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p162, .str.72);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p163, .str.5);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p164, .str.77);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i167 := $load.i24($M.12, $p166);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i168 := $and.i24($i167, $sub.i24(0, 262144));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i169 := $or.i24($i168, 1169);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p166, $i169);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p170, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.13, $p171);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i64($i172);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i174 := $and.i64($i173, 1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i175 := ldv__builtin_expect($i174, 0);
    call {:si_unique_call 1070} {:cexpr "tmp___3"} boogie_si_record_i64($i175);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i176 := $ne.i64($i175, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i176 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_72 := __dynamic_pr_debug.ref.ref.i32($p9, .str.77, $i178);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 167772165);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 167772166);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 167772166);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i134 := $M.7;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i153 := $i27;
    goto $bb63;

  $bb57:
    assume $i135 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p136, .str.6);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p137, .str.72);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p138, .str.5);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p139, .str.76);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i142 := $load.i24($M.12, $p141);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i143 := $and.i24($i142, $sub.i24(0, 262144));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i144 := $or.i24($i143, 1160);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p141, $i144);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p145, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.13, $p146);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i64($i147);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i149 := $and.i64($i148, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i150 := ldv__builtin_expect($i149, 0);
    call {:si_unique_call 1067} {:cexpr "tmp___2"} boogie_si_record_i64($i150);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i151 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_71 := __dynamic_pr_debug.ref.ref($p8, .str.76);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i50 := $uge.i32($i47, $i49);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p73, $mul.ref($i76, 312));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p73, $mul.ref($i76, 312)), $mul.ref(40, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p73, $mul.ref($i76, 312)), $mul.ref(40, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p73, $mul.ref($i76, 312)), $mul.ref(40, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p2);
    call {:si_unique_call 1064} $i131 := devirtbounce.24($p129, $p0, $p77, $i130);
    call {:si_unique_call 1065} {:cexpr "ret"} boogie_si_record_i32($i131);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i132 := $sge.i32($i131, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $i131;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i27 := $i133;
    goto $bb15;

  $bb53:
    assume $i132 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i133 := 1;
    goto $bb55;

  $bb44:
    assume $i106 == 1;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i107 := $M.7;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 11);
    goto $bb15;

  $bb46:
    assume $i108 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p109, .str.6);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p110, .str.72);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p111, .str.5);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p112, .str.75);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i115 := $load.i24($M.12, $p114);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i116 := $and.i24($i115, $sub.i24(0, 262144));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i117 := $or.i24($i116, 1151);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p114, $i117);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p118, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.13, $p119);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i64($i120);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i121, 1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 1062} {:cexpr "tmp___1"} boogie_si_record_i64($i123);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i124 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_70 := __dynamic_pr_debug.ref.ref($p7, .str.75);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb35:
    assume $i81 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i82 := $M.7;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p84, .str.6);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p85, .str.72);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p86, .str.5);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p87, .str.74);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.12, $p89);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 1146);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p89, $i92);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p93, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.13, $p94);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i64($i98);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i99 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_69 := __dynamic_pr_debug.ref.ref($p6, .str.74);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i51 := $M.7;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p53, .str.6);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p54, .str.72);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p55, .str.5);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p56, .str.73);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.12, $p58);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 1140);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p58, $i61);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p62, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.13, $p63);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 1056} {:cexpr "tmp"} boogie_si_record_i64($i67);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_68 := __dynamic_pr_debug.ref.ref.i32($p5, .str.73, $i70);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 1);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i37 == 1);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p2);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 99999);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p2);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i32($i40, 1000);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __udelay($i42);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb18;

  $bb4:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 100663300);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 2);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} do_gettimeofday($p4);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.30, $p28);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i30);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.31, $p31);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i27 := 2;
    goto $bb15;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb15;

  $bb140_dummy:
    assume false;
    return;

  $bb128_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 281349);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} might_fault();
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 1102} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 282381);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 283413);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1103} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 284445);

procedure do_gettimeofday($p0: ref);
  free requires assertsPassed;



implementation do_gettimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    return;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 285477);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    return;
}



const comedi_check_chanlist: ref;

axiom comedi_check_chanlist == $sub.ref(0, 286509);

procedure comedi_check_chanlist($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation comedi_check_chanlist($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i27: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p53: ref;
  var $p54: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $i14: i32;
  var $p68: ref;
  var $p69: ref;
  var $i56: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "comedi_check_chanlist:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(192, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_77 := dev_err.ref.ref($p69, .str.11);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32(0, $i1);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb25;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb9:
    call $i15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $p39, $p40, $i41, $i42, $i27, $p43, $i44, $i45, $i50, $i51, $i52, $i46, $i47, $i48, $i49, $i57, $i58, $i59, $i60, $i61, $i62, $i66, $i67, $i14 := comedi_check_chanlist_loop_$bb9($p0, $i1, $p2, $i15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $p39, $p40, $i41, $i42, $i27, $p43, $i44, $i45, $i50, $i51, $i52, $i46, $i47, $i48, $i49, $i57, $i58, $i59, $i60, $i61, $i62, $i66, $i67, $i14);
    goto $bb9_last;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 4));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 1109} {:cexpr "chanspec"} boogie_si_record_i32($i17);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 65535);
    call {:si_unique_call 1110} {:cexpr "chan"} boogie_si_record_i32($i18);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(192, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27 := $i42;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, $i18);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48, $i49 := $i14, $i17, $i18, $i27;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i45 == 1);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i32($i17, 16);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 255);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i52 := $uge.i32($i51, $i27);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48, $i49 := $i14, $i17, $i18, $i27;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i57 := aref_invalid($p0, $i17);
    call {:si_unique_call 1115} {:cexpr "tmp"} boogie_si_record_i32($i57);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i59, $i60, $i61, $i62 := $i14, $i17, $i18, $i27;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i14, 1);
    call {:si_unique_call 1117} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, $i1);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb30:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i66;
    goto $bb30_dummy;

  $bb26:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_79 := dev_warn.ref.ref.i32.i32.i32.i32($p64, .str.10, $i59, $i60, $i61, $i62);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_78 := dev_warn.ref.ref.i32.i32.i32.i32($p54, .str.10, $i46, $i47, $i48, $i49);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb21;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, $i18);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(192, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i18);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 8));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 1112} {:cexpr "range_len"} boogie_si_record_i32($i41);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb19;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1111} {:cexpr "range_len"} boogie_si_record_i32($i26);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb13;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb30_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5777;
}



const check_insn_config_length: ref;

axiom check_insn_config_length == $sub.ref(0, 287541);

procedure check_insn_config_length($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_insn_config_length($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p65: ref;
  var $i66: i32;
  var $i5: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2001);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 4098);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 5001);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 5003);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 5004);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 5004);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_80 := printk.ref.i32(.str.81, $i62);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_81 := printk.ref.ref.ref(.str.82, .str.83, .str.5);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_82 := printk.ref.i32(.str.84, $i66);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 3);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb119:
    assume $i55 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 5002);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i52 == 1;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb22;

  $bb10:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 4109);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 5000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb27:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 4109);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb20;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i6, 4099);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i6, 4099);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb36, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb20;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb8:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i6, 2004);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i6, 2006);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i6, 4097);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb43:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i6, 2006);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb47;

  $bb41:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i6, 2005);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb39:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i6, 2002);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i6, 2003);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i24 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i6, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i6, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i6, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i6, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb67;

  $bb67:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i6, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i49 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb66;

  $bb63:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb71:
    assume $i31 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb61:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i6, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i6, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb78;

  $bb78:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i6, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb20;

  $bb79:
    assume $i34 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 5);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb122:
    assume $i58 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb77;

  $bb74:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i6, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb84;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb82;

  $bb59:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i6, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i6, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb92;

  $bb89:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i6, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb95;

  $bb87:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i6, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb99;

  $bb99:
    assume !($i41 == 1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 6);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i61 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb98;

  $bb85:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb20;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb105;

  $bb102:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb20;

  $bb107:
    assume $i45 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb100:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb20;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb110;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 288573);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 289605);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1129} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1131} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1133} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const aref_invalid: ref;

axiom aref_invalid == $sub.ref(0, 290637);

procedure aref_invalid($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation aref_invalid($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1136} {:cexpr "aref_invalid:arg:chanspec"} boogie_si_record_i32($i1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 291669);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 292701);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1141} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1142} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 293733);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 294765);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1145} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1146} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const need_resched: ref;

axiom need_resched == $sub.ref(0, 295797);

procedure need_resched() returns ($r: i32);
  free requires assertsPassed;



implementation need_resched() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p0 := current_thread_info();
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i1 := test_ti_thread_flag($p0, 3);
    call {:si_unique_call 1150} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1152} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 296829);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 297861);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 1155} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 298893);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1157} $i2 := devirtbounce.26(0, $p1, $i0);
    call {:si_unique_call 1158} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 299925);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1160} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1161} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 300957);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 301989);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1164} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    return;
}



const comedi_buf_read_alloc: ref;

axiom comedi_buf_read_alloc == $sub.ref(0, 303021);

procedure comedi_buf_read_alloc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_read_alloc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} {:cexpr "comedi_buf_read_alloc:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i3, $i5);
    call {:si_unique_call 1166} {:cexpr "available"} boogie_si_record_i32($i6);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i1, $i6);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i8);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    call {:si_unique_call 1167} devirtbounce.27(0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const comedi_buf_read_free: ref;

axiom comedi_buf_read_free == $sub.ref(0, 304053);

procedure comedi_buf_read_free($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_read_free($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "comedi_buf_read_free:arg:nbytes"} boogie_si_record_i32($i1);
    call {:si_unique_call 1169} devirtbounce.27(0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i2 := comedi_buf_read_n_allocated($p0);
    call {:si_unique_call 1171} {:cexpr "allocated"} boogie_si_record_i32($i2);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, $i2);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i4);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i17 := $urem.i32($i14, $i16);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const comedi_is_subdevice_idle: ref;

axiom comedi_is_subdevice_idle == $sub.ref(0, 305085);

procedure comedi_is_subdevice_idle($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_subdevice_idle($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i1 := comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 134217732);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_buf_write_alloc: ref;

axiom comedi_buf_write_alloc == $sub.ref(0, 306117);

procedure comedi_buf_write_alloc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_write_alloc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "comedi_buf_write_alloc:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i2 := __comedi_buf_write_alloc($p0, $i1, 0);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_buf_write_free: ref;

axiom comedi_buf_write_free == $sub.ref(0, 307149);

procedure comedi_buf_write_free($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_write_free($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "comedi_buf_write_free:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i2 := comedi_buf_write_n_allocated($p0);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, $i2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i4);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i4);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i14, $i16);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} vslice_dummy_var_84 := comedi_buf_munge($p0, $i17);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i20, $i22);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i28 := $urem.i32($i25, $i27);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const comedi_buf_write_n_allocated: ref;

axiom comedi_buf_write_n_allocated == $sub.ref(0, 308181);

procedure comedi_buf_write_n_allocated($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_write_n_allocated($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(48, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(44, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const comedi_buf_munge: ref;

axiom comedi_buf_munge == $sub.ref(0, 309213);

procedure comedi_buf_munge($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_munge($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i23: i32;
  var $i72: i32;
  var $i22: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} {:cexpr "comedi_buf_munge:arg:num_bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i4 := bytes_per_sample($p3);
    call {:si_unique_call 1183} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(280, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(4, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 128);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i19 := $urem.i32($i1, $i4);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i1, $i19);
    call {:si_unique_call 1185} {:cexpr "num_bytes"} boogie_si_record_i32($i20);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32(0, $i20);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i22 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i18 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb10;

  $bb10:
    call $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i23, $i72 := comedi_buf_munge_loop_$bb10($p0, $p3, $i4, $i20, $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i23, $i72);
    goto $bb10_last;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, $i23);
    call {:si_unique_call 1186} {:cexpr "block_size"} boogie_si_record_i32($i24);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i26, $i28);
    call {:si_unique_call 1187} {:cexpr "buf_end"} boogie_si_record_i32($i29);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i24, $i29);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(280, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 1188} devirtbounce.28($p33, $p35, $p3, $p41, $i31, $i43);
    call {:si_unique_call 1189} devirtbounce.27(0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i46 := $udiv.i32($i31, $i4);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i45, $i46);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i54 := $urem.i32($i50, $i53);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $i31);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, $i31);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i68 := $urem.i32($i65, $i67);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i23, $i31);
    call {:si_unique_call 1190} {:cexpr "count"} boogie_si_record_i32($i70);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i70, $i20);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i22 := $i72;
    goto $bb9;

  $bb15:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i70;
    goto $bb15_dummy;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $i1);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    call {:si_unique_call 1184} {:cexpr "comedi_buf_munge:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i18 := $i1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;
}



const bytes_per_sample: ref;

axiom bytes_per_sample == $sub.ref(0, 310245);

procedure bytes_per_sample($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bytes_per_sample($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 268435456);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i5 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i5 := 4;
    goto $bb3;
}



const __comedi_buf_write_alloc: ref;

axiom __comedi_buf_write_alloc == $sub.ref(0, 311277);

procedure __comedi_buf_write_alloc($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __comedi_buf_write_alloc($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} {:cexpr "__comedi_buf_write_alloc:arg:nbytes"} boogie_si_record_i32($i1);
    call {:si_unique_call 1192} {:cexpr "__comedi_buf_write_alloc:arg:strict"} boogie_si_record_i32($i2);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i3 := comedi_buf_write_n_available($p0);
    call {:si_unique_call 1194} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i1, $i3);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(48, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $i7);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(48, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    call {:si_unique_call 1195} devirtbounce.27(0);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb5;
}



const comedi_buf_write_n_available: ref;

axiom comedi_buf_write_n_available == $sub.ref(0, 312309);

procedure comedi_buf_write_n_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_write_n_available($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i2, $i4);
    call {:si_unique_call 1196} {:cexpr "free_end"} boogie_si_record_i32($i5);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(48, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i5, $i7);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const comedi_buf_read_n_allocated: ref;

axiom comedi_buf_read_n_allocated == $sub.ref(0, 313341);

procedure comedi_buf_read_n_allocated($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_read_n_allocated($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const insn_inval: ref;

axiom insn_inval == $sub.ref(0, 314373);

procedure insn_inval($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation insn_inval($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 315405);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 316437);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1197} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const resize_async_buffer: ref;

axiom resize_async_buffer == $sub.ref(0, 317469);

procedure resize_async_buffer($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.32, $M.33;



implementation resize_async_buffer($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i10: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1203} {:cexpr "resize_async_buffer:arg:new_size"} boogie_si_record_i32($i3);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32($i8, $i3);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i3, 4095);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, $sub.i32(0, 4096));
    call {:si_unique_call 1210} {:cexpr "new_size"} boogie_si_record_i32($i57);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $i59 := comedi_buf_alloc($p0, $p1, $i58);
    call {:si_unique_call 1212} {:cexpr "retval"} boogie_si_record_i32($i59);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(272, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i70 := $M.7;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb32:
    assume $i71 == 1;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p72, .str.6);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p73, .str.28);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p74, .str.5);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p75, .str.31);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.12, $p77);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 301);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p77, $i80);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p81, 0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.13, $p82);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 1216} {:cexpr "tmp___1"} boogie_si_record_i64($i86);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_87 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p6, .str.31, $i89, $i91, $i93);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(272, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i57);
    call {:si_unique_call 1213} $i68 := devirtbounce.29($p66, $p0, $p1, $i67);
    call {:si_unique_call 1214} {:cexpr "retval"} boogie_si_record_i32($i68);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i10 := $i68;
    goto $bb3;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i10 := $i59;
    goto $bb3;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i37 := $M.7;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p39, .str.6);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p40, .str.28);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p41, .str.5);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p42, .str.30);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.12, $p44);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 282);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p44, $i47);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p48, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.13, $p49);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 1208} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_86 := __dynamic_pr_debug.ref.ref($p5, .str.30);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i15 := $M.7;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p17, .str.6);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p18, .str.28);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p19, .str.5);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p20, .str.29);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.12, $p22);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 278);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p22, $i25);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p26, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.13, $p27);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1205} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_85 := __dynamic_pr_debug.ref.ref($p4, .str.29);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;
}



const comedi_buf_alloc: ref;

axiom comedi_buf_alloc == $sub.ref(0, 318501);

procedure comedi_buf_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $CurrAddr;



implementation comedi_buf_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "comedi_buf_alloc:arg:new_size"} boogie_si_record_i64($i2);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i2, 4095);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $sub.i64(0, 4096));
    call {:si_unique_call 1219} {:cexpr "new_size"} boogie_si_record_i64($i6);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} __comedi_buf_free($p0, $p1, $i17);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i6, 0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i6);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i6, 12);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 1221} {:cexpr "n_pages"} boogie_si_record_i32($i20);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} __comedi_buf_alloc($p0, $p1, $i20);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i20);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __comedi_buf_free($p0, $p1, $i20);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, $i6);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const __comedi_buf_free: ref;

axiom __comedi_buf_free == $sub.ref(0, 319533);

procedure __comedi_buf_free($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __comedi_buf_free($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $i18: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "__comedi_buf_free:arg:n_pages"} boogie_si_record_i32($i2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i2);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vfree($p50);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb11:
    call $p19, $p20, $i21, $p23, $p24, $i25, $i26, $p27, $p28, $i29, $i30, $i31, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $i47, $i18 := __comedi_buf_free_loop_$bb11($p0, $p1, $i2, $p4, $p19, $p20, $i21, $p23, $p24, $i25, $i26, $p27, $p28, $i29, $i30, $i31, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $i47, $i18);
    goto $bb11_last;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i18);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i18, 1);
    call {:si_unique_call 1231} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i46, $i2);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i46;
    goto $bb19_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i30 := __phys_addr($i29);
    call {:si_unique_call 1227} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i64($i30, 12);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i31, 64)), $mul.ref(0, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} clear_bit(10, $p33);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(288, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 3);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} free_pages($i45, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p20, $mul.ref($i21, 16)), $mul.ref(8, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} dma_free_attrs($p38, 4096, $p40, $i42, $0.ref);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vunmap($p10);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;
}



const __comedi_buf_alloc: ref;

axiom __comedi_buf_alloc == $sub.ref(0, 320565);

procedure __comedi_buf_alloc($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $CurrAddr;



implementation __comedi_buf_alloc($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i24: i32;
  var $i63: i32;
  var $i23: i32;
  var $i45: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1234} {:cexpr "__comedi_buf_alloc:arg:n_pages"} boogie_si_record_i32($i2);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i2);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 16);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p8 := vzalloc($i7);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32(0, $i2);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i23 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45 := $i23;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i45, $i2);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p19);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vfree($p70);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p65, $sub.i64(0, 9223372036854775429));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.32, $p66);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p68 := vmap($p19, $i2, 4, $i67);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    call $p25, $p26, $i27, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $i37, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p46, $p47, $i48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i24, $i63 := __comedi_buf_alloc_loop_$bb11($p0, $p1, $i2, $p5, $p19, $p25, $p26, $i27, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $i37, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p46, $p47, $i48, $i49, $i50, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i24, $i63);
    goto $bb11_last;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i24);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(288, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 3);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i37 := get_zeroed_page(208);
    call {:si_unique_call 1239} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i44 := $i24;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i49 := __phys_addr($i48);
    call {:si_unique_call 1241} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i64($i49, 12);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i50, 64)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} set_bit(10, $p52);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i56 := __phys_addr($i55);
    call {:si_unique_call 1244} {:cexpr "tmp___3"} boogie_si_record_i64($i56);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i57 := $lshr.i64($i56, 12);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i57, 64));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i24);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p19, $mul.ref($i59, 8));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p58);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i24, 1);
    call {:si_unique_call 1245} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i61, $i2);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i23 := $i63;
    goto $bb10;

  $bb20:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i61;
    goto $bb20_dummy;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb18;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $p35 := dma_alloc_attrs($p33, 4096, $p34, 16592, $0.ref);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p35);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i2);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 8);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p17 := vmalloc($i16);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;
}



const vzalloc: ref;

axiom vzalloc == $sub.ref(0, 321597);

procedure vzalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vzalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} {:cexpr "vzalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p1 := external_alloc();
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 322629);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p1 := external_alloc();
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 323661);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1253} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p5 := get_dma_ops($p0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 1255} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 1257} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 1259} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 1260} $p20 := devirtbounce.30($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const get_zeroed_page: ref;

axiom get_zeroed_page == $sub.ref(0, 324693);

procedure get_zeroed_page($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation get_zeroed_page($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} {:cexpr "get_zeroed_page:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1263} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1264} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 325725);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1266} devirtbounce.31(0, $p1, $i0, $p1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    return;
}



const vmap: ref;

axiom vmap == $sub.ref(0, 326757);

procedure vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33, $CurrAddr;



implementation vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p5, $i3);
    call {:si_unique_call 1268} {:cexpr "vmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1269} {:cexpr "vmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p6 := external_alloc();
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 327789);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 328821);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 329853);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1136, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1136, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 330885);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 1275} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 1277} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 1276} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 331917);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1279} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 332949);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1144, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 1281} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 1282} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const vunmap: ref;

axiom vunmap == $sub.ref(0, 333981);

procedure vunmap($p0: ref);
  free requires assertsPassed;



implementation vunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 335013);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1284} devirtbounce.31(0, $p1, $i0, $p1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 336045);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_88: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1286} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p5 := get_dma_ops($p0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i6 := arch_local_save_flags();
    call {:si_unique_call 1289} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 1291} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1292} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1294} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} vslice_dummy_var_88 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 1298} devirtbounce.32($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} warn_slowpath_null(.str.102, 166);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 337077);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1300} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 338109);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1302} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1304} $i7 := devirtbounce.33(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 1305} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1303} devirtbounce.3(0, .str.103, 804, 12);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 339141);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 340173);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 341205);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1309} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 342237);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    return;
}



const comedi_device_cleanup: ref;

axiom comedi_device_cleanup == $sub.ref(0, 343269);

procedure comedi_device_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_device_cleanup($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} mutex_lock_nested($p3, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} comedi_device_detach($p0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} mutex_unlock($p23);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} mutex_destroy($p24);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22 := comedi_device_cleanup_loop_$bb11($p0, $p11, $p12, $i15, $i16, $p17, $i18, $i19, $p20, $i21, $i22);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p11);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_module_put_2(__this_module);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p12);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb16_dummy;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_module_put_1($p11);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const comedi_device_detach: ref;

axiom comedi_device_detach == $sub.ref(0, 344301);

procedure comedi_device_detach($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.32, $M.33, $CurrAddr;



implementation comedi_device_detach($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} cleanup_device($p0);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 1317} devirtbounce.2($p9, $p0);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_module_put_1: ref;

axiom ldv_module_put_1 == $sub.ref(0, 345333);

procedure ldv_module_put_1($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} ldv_module_put($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_module_put_2: ref;

axiom ldv_module_put_2 == $sub.ref(0, 346365);

procedure ldv_module_put_2($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_module_put($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 347397);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    return;
}



const cleanup_device: ref;

axiom cleanup_device == $sub.ref(0, 348429);

procedure cleanup_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.32, $M.33, $CurrAddr;



implementation cleanup_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i8: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(16, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} kfree($p35);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(16, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(328, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 0);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(336, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(66, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(344, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(352, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(360, 1));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(376, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $0.ref);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(384, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} comedi_clear_hw_dev($p0);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} kfree($p31);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $p16, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $p25, $i26, $i27, $i28, $i8, vslice_dummy_var_89 := cleanup_device_loop_$bb6($p0, $p5, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $p16, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $p25, $i26, $i27, $i28, $i8, vslice_dummy_var_89);
    goto $bb6_last;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 312));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(64, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} comedi_free_subdevice_minor($p12);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i8, 1);
    call {:si_unique_call 1325} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p5);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i26);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb14_dummy;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_89 := comedi_buf_alloc($p0, $p12, 0);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} kfree($p25);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(32, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} kfree($p17);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6854;
}



const comedi_free_subdevice_minor: ref;

axiom comedi_free_subdevice_minor == $sub.ref(0, 349461);

procedure comedi_free_subdevice_minor($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0;



implementation comedi_free_subdevice_minor($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 255);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1330} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 47);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1333} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, $sub.i32(0, 48));
    call {:si_unique_call 1335} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i23, 8));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.21, $p24);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p35 := $M.29;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 102760448);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} device_destroy($p35, $i38);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i22);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i29, 8));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p30, $0.ref);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i19 == 1;
    call {:si_unique_call 1334} devirtbounce.3(0, .str.5, 2554, 12);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call comedi_free_subdevice_minor_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i12 == 1;
    call {:si_unique_call 1331} devirtbounce.3(0, .str.5, 2553, 12);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call comedi_free_subdevice_minor_loop_$bb10();
    goto $bb10_last;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const comedi_clear_hw_dev: ref;

axiom comedi_clear_hw_dev == $sub.ref(0, 350493);

procedure comedi_clear_hw_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_clear_hw_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} put_device($p2);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 351525);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    return;
}



const is_device_busy: ref;

axiom is_device_busy == $sub.ref(0, 352557);

procedure is_device_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_busy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i8: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i8 := is_device_busy_loop_$bb8($p0, $p5, $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i8);
    goto $bb8_last;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(56, 1));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i8, 1);
    call {:si_unique_call 1340} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p5);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i26);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb19_dummy;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref($i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;
}



const ldv_module_put_3: ref;

axiom ldv_module_put_3 == $sub.ref(0, 353589);

procedure ldv_module_put_3($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_3($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_module_put($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const comedi_device_attach: ref;

axiom comedi_device_attach == $sub.ref(0, 354621);

procedure comedi_device_attach($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.23, $M.21, $M.32, assertsPassed, $CurrAddr, $M.33;



implementation comedi_device_attach($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p18: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p10: ref;
  var $p45: ref;
  var $p9: ref;
  var $p31: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p51: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p86: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i65: i32;
  var $i5: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p6 := $M.34;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p31 := $p9;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p31);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p31);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i81 == 1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p86 := $p90;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $p86);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    call {:si_unique_call 1356} $i94 := devirtbounce.34($p93, $p0, $p1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 1357} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i95 := $sge.i32($i94, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i94;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i65 := $i97;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i5 := $i65;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb58:
    assume $i98 == 1;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} comedi_device_detach($p0);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_module_put_24($p100);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i95 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i96 := comedi_device_postconfig($p0);
    call {:si_unique_call 1359} {:cexpr "ret"} boogie_si_record_i32($i96);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb57;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i81 == 1;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p86 := $p85;
    goto $bb54;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_90 := dev_warn.ref.ref.ref($p71, .str.17, $p73);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} ldv_module_put_23($p76);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 38);
    goto $bb47;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i47 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p48 := $M.34;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb47;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p51 := $p48;
    goto $bb35;

  $bb35:
    call $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p51 := comedi_device_attach_loop_$bb35($p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p51);
    goto $bb35_last;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i54 := ldv_try_module_get_21($p53);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1350} {:cexpr "tmp___3"} boogie_si_record_i8($i55);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} comedi_report_boards($p51);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_module_put_22($p60);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb44:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p62;
    goto $bb44_dummy;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb39;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p10 := $p6;
    goto $bb8;

  $bb8:
    call $p11, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p18, $p41, $p42, $i43, $i44, $p10, $p45 := comedi_device_attach_loop_$bb8($p0, $p1, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p18, $p41, $p42, $i43, $i44, $p10, $p45);
    goto $bb8_last;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i13 := ldv_try_module_get_19($p12);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1344} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i36 := strcmp($p33, $p35);
    call {:si_unique_call 1347} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p38 := $p10;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ldv_module_put_20($p40);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p45 := $p42;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p9 := $p45;
    goto $bb7;

  $bb27:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p42;
    goto $bb27_dummy;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p31 := $p38;
    goto $bb21;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p24 := comedi_recognize($p10, $p23);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p30 := $p10;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb21;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7130;

  $bb27_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7065;
}



const ldv_try_module_get_19: ref;

axiom ldv_try_module_get_19 == $sub.ref(0, 355653);

procedure ldv_try_module_get_19($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_try_module_get_19($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1363} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_recognize: ref;

axiom comedi_recognize == $sub.ref(0, 356685);

procedure comedi_recognize($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_recognize($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;
  var $p8: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i7, $p8 := 0, $p3;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $p12, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $i7, $p8 := comedi_recognize_loop_$bb4($p0, $p1, $p4, $p9, $i10, $i11, $p12, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $i7, $p8);
    goto $bb4_last;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i10 := strcmp($p9, $p1);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p8, $mul.ref($i17, 8));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 1);
    call {:si_unique_call 1366} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p4);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i19, $i20);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7, $p8 := $i19, $p18;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p14 := $p12;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7226;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 357717);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const ldv_module_put_20: ref;

axiom ldv_module_put_20 == $sub.ref(0, 358749);

procedure ldv_module_put_20($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_module_put($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_21: ref;

axiom ldv_try_module_get_21 == $sub.ref(0, 359781);

procedure ldv_try_module_get_21($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_try_module_get_21($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1369} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_report_boards: ref;

axiom comedi_report_boards == $sub.ref(0, 360813);

procedure comedi_report_boards($p0: ref);
  free requires assertsPassed;



implementation comedi_report_boards($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p9: ref;
  var $i10: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_91 := printk.ref.ref(.str.96, $p2);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_93 := printk.ref.ref(.str.97, $p24);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p9, $i10 := $p5, 0;
    goto $bb4;

  $bb4:
    call $p11, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p9, $i10, vslice_dummy_var_92 := comedi_report_boards_loop_$bb4($p0, $p6, $p11, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p9, $i10, vslice_dummy_var_92);
    goto $bb4_last;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p9);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_92 := printk.ref.ref(.str.97, $p11);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref($i15, 8));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, 1);
    call {:si_unique_call 1372} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p6);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, $i17);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p9, $i10 := $p16, $i17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;
}



const ldv_module_put_22: ref;

axiom ldv_module_put_22 == $sub.ref(0, 361845);

procedure ldv_module_put_22($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ldv_module_put($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_module_put_23: ref;

axiom ldv_module_put_23 == $sub.ref(0, 362877);

procedure ldv_module_put_23($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} ldv_module_put($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const comedi_device_postconfig: ref;

axiom comedi_device_postconfig == $sub.ref(0, 363909);

procedure comedi_device_postconfig($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.21, $CurrAddr, $M.33;



implementation comedi_device_postconfig($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i1 := __comedi_device_postconfig($p0);
    call {:si_unique_call 1377} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1378} devirtbounce.27(0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_module_put_24: ref;

axiom ldv_module_put_24 == $sub.ref(0, 364941);

procedure ldv_module_put_24($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_module_put_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_module_put($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const __comedi_device_postconfig: ref;

axiom __comedi_device_postconfig == $sub.ref(0, 365973);

procedure __comedi_device_postconfig($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.21, $CurrAddr, $M.33;



implementation __comedi_device_postconfig($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i4: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $i10, $i11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $i76, $i77, $i78, $i4 := __comedi_device_postconfig_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $p9, $i10, $i11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $i45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $i76, $i77, $i78, $i4);
    goto $bb4_last;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 312));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(12, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(24, 1));
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(240, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(184, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(232, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(256, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i4, 1);
    call {:si_unique_call 1380} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p1);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i76);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i78 == 1);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb53:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i76;
    goto $bb53_dummy;

  $bb50:
    assume $i74 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(256, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, poll_invalid);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i69 == 1;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(232, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, insn_inval);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i64 == 1;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, insn_inval);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, insn_inval);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, insn_inval);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb34;

  $bb35:
    assume $i49 == 1;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, insn_rw_emulate_bits);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, insn_rw_emulate_bits);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(192, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb22;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(184, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, range_unknown);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i20 := __comedi_device_postconfig_async($p0, $p8);
    call {:si_unique_call 1382} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb17;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref($i7, 312)), $mul.ref(24, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb53_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7317;
}



const __comedi_device_postconfig_async: ref;

axiom __comedi_device_postconfig_async == $sub.ref(0, 367005);

procedure __comedi_device_postconfig_async($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.21, $CurrAddr, $M.33;



implementation __comedi_device_postconfig_async($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $i10: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 49152);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(248, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p18 := kzalloc(296, 208);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} __init_waitqueue_head($p22, .str.100, $p2);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p18);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i25 := $M.35;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 1024);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i28 := $M.36;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 1024);
    call {:si_unique_call 1388} {:cexpr "buf_size"} boogie_si_record_i32($i29);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i31, $i29);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i37 := comedi_buf_alloc($p0, $p1, $i36);
    call {:si_unique_call 1391} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(272, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} vslice_dummy_var_97 := comedi_alloc_subdevice_minor($p1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(272, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i35);
    call {:si_unique_call 1393} $i49 := devirtbounce.29($p47, $p0, $p1, $i48);
    call {:si_unique_call 1394} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i10 := $i49;
    goto $bb3;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_96 := dev_warn.ref.ref($p40, .str.101);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    call {:si_unique_call 1389} {:cexpr "buf_size"} boogie_si_record_i32($i34);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_95 := dev_warn.ref.ref($p16, .str.99);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_94 := dev_warn.ref.ref($p8, .str.98);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const insn_rw_emulate_bits: ref;

axiom insn_rw_emulate_bits == $sub.ref(0, 368037);

procedure insn_rw_emulate_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation insn_rw_emulate_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i26: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 65535);
    call {:si_unique_call 1398} {:cexpr "chan"} boogie_si_record_i32($i8);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i9 := $uge.i32($i8, 32);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 1399} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p11, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1400} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p12, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 201326594);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i10);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 134217729);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(224, 1));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    call {:si_unique_call 1401} $i39 := devirtbounce.25($p37, $p0, $p1, $p4, $p38);
    call {:si_unique_call 1402} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 67108864);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i8, $i10);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i45, $i46);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i48);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i26 := $i39;
    goto $bb8;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 131072);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i8, $i10);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32(1, $i27);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p3);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i8, $i10);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32(1, $i32);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb12;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const poll_invalid: ref;

axiom poll_invalid == $sub.ref(0, 369069);

procedure poll_invalid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poll_invalid($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 370101);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1404} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 371133);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    return;
}



const comedi_alloc_subdevice_minor: ref;

axiom comedi_alloc_subdevice_minor == $sub.ref(0, 372165);

procedure comedi_alloc_subdevice_minor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0;



implementation comedi_alloc_subdevice_minor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i12: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $p184: ref;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $i203: i64;
  var $i204: i1;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $p223: ref;
  var $i224: i64;
  var $i225: i1;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $i236: i64;
  var $i237: i1;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $i248: i64;
  var $i249: i1;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $i269: i64;
  var $i270: i1;
  var $p271: ref;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $i275: i64;
  var $i276: i1;
  var $p277: ref;
  var $i278: i64;
  var $i279: i1;
  var $p280: ref;
  var $i281: i64;
  var $i282: i1;
  var $p283: ref;
  var $i284: i64;
  var $i285: i1;
  var $p286: ref;
  var $i287: i64;
  var $i288: i1;
  var $p289: ref;
  var $i290: i64;
  var $i291: i1;
  var $p292: ref;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $i302: i64;
  var $i303: i1;
  var $p304: ref;
  var $i305: i64;
  var $i306: i1;
  var $p307: ref;
  var $i308: i64;
  var $i309: i1;
  var $p310: ref;
  var $i311: i64;
  var $i312: i1;
  var $p313: ref;
  var $i314: i64;
  var $i315: i1;
  var $p316: ref;
  var $i317: i64;
  var $i318: i1;
  var $p319: ref;
  var $i320: i64;
  var $i321: i1;
  var $p322: ref;
  var $i323: i64;
  var $i324: i1;
  var $p325: ref;
  var $i326: i64;
  var $i327: i1;
  var $p328: ref;
  var $i329: i64;
  var $i330: i1;
  var $p331: ref;
  var $i332: i64;
  var $i333: i1;
  var $p334: ref;
  var $i335: i64;
  var $i336: i1;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $p340: ref;
  var $i341: i64;
  var $i342: i1;
  var $p343: ref;
  var $i344: i64;
  var $i345: i1;
  var $p346: ref;
  var $i347: i64;
  var $i348: i1;
  var $p349: ref;
  var $i350: i64;
  var $i351: i1;
  var $p352: ref;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $i356: i64;
  var $i357: i1;
  var $p358: ref;
  var $i359: i64;
  var $i360: i1;
  var $p361: ref;
  var $i362: i64;
  var $i363: i1;
  var $p364: ref;
  var $i365: i64;
  var $i366: i1;
  var $p367: ref;
  var $i368: i64;
  var $i369: i1;
  var $p370: ref;
  var $i371: i64;
  var $i372: i1;
  var $p373: ref;
  var $i374: i64;
  var $i375: i1;
  var $p376: ref;
  var $i377: i64;
  var $i378: i1;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $i383: i64;
  var $i384: i1;
  var $p385: ref;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $i389: i64;
  var $i390: i1;
  var $p391: ref;
  var $i392: i64;
  var $i393: i1;
  var $p394: ref;
  var $i395: i64;
  var $i396: i1;
  var $p397: ref;
  var $i398: i64;
  var $i399: i1;
  var $p400: ref;
  var $i401: i64;
  var $i402: i1;
  var $p403: ref;
  var $i404: i64;
  var $i405: i1;
  var $p406: ref;
  var $i407: i64;
  var $i408: i1;
  var $p409: ref;
  var $i410: i64;
  var $i411: i1;
  var $p412: ref;
  var $i413: i64;
  var $i414: i1;
  var $p415: ref;
  var $i416: i64;
  var $i417: i1;
  var $p418: ref;
  var $i419: i64;
  var $i420: i1;
  var $p421: ref;
  var $i422: i64;
  var $i423: i1;
  var $p424: ref;
  var $i425: i64;
  var $i426: i1;
  var $p427: ref;
  var $i428: i64;
  var $i429: i1;
  var $p430: ref;
  var $i431: i64;
  var $i432: i1;
  var $p433: ref;
  var $i434: i64;
  var $i435: i1;
  var $p436: ref;
  var $i437: i64;
  var $i438: i1;
  var $p439: ref;
  var $i440: i64;
  var $i441: i1;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $p445: ref;
  var $i446: i64;
  var $i447: i1;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $p451: ref;
  var $i452: i64;
  var $i453: i1;
  var $p454: ref;
  var $i455: i64;
  var $i456: i1;
  var $p457: ref;
  var $i458: i64;
  var $i459: i1;
  var $p460: ref;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $i464: i64;
  var $i465: i1;
  var $p466: ref;
  var $i467: i64;
  var $i468: i1;
  var $p469: ref;
  var $i470: i64;
  var $i471: i1;
  var $p472: ref;
  var $i473: i64;
  var $i474: i1;
  var $p475: ref;
  var $i476: i64;
  var $i477: i1;
  var $p478: ref;
  var $i479: i64;
  var $i480: i1;
  var $p481: ref;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $i485: i64;
  var $i486: i1;
  var $p487: ref;
  var $i488: i64;
  var $i489: i1;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p493: ref;
  var $i494: i64;
  var $i495: i1;
  var $p496: ref;
  var $i497: i64;
  var $i498: i1;
  var $p499: ref;
  var $i500: i64;
  var $i501: i1;
  var $p502: ref;
  var $i503: i64;
  var $i504: i1;
  var $p505: ref;
  var $i506: i64;
  var $i507: i1;
  var $p508: ref;
  var $i509: i64;
  var $i510: i1;
  var $p511: ref;
  var $i512: i64;
  var $i513: i1;
  var $p514: ref;
  var $i515: i64;
  var $i516: i1;
  var $p517: ref;
  var $i518: i64;
  var $i519: i1;
  var $p520: ref;
  var $i521: i64;
  var $i522: i1;
  var $p523: ref;
  var $i524: i64;
  var $i525: i1;
  var $p526: ref;
  var $i527: i64;
  var $i528: i1;
  var $p529: ref;
  var $i530: i64;
  var $i531: i1;
  var $p532: ref;
  var $i533: i64;
  var $i534: i1;
  var $p535: ref;
  var $i536: i64;
  var $i537: i1;
  var $p538: ref;
  var $i539: i64;
  var $i540: i1;
  var $p541: ref;
  var $i542: i64;
  var $i543: i1;
  var $p544: ref;
  var $i545: i64;
  var $i546: i1;
  var $p547: ref;
  var $i548: i64;
  var $i549: i1;
  var $p550: ref;
  var $i551: i64;
  var $i552: i1;
  var $p553: ref;
  var $i554: i64;
  var $i555: i1;
  var $p556: ref;
  var $i557: i64;
  var $i558: i1;
  var $p559: ref;
  var $i560: i64;
  var $i561: i1;
  var $p562: ref;
  var $i563: i64;
  var $i564: i1;
  var $p565: ref;
  var $i566: i64;
  var $i567: i1;
  var $p568: ref;
  var $i569: i64;
  var $i570: i1;
  var $p571: ref;
  var $i572: i64;
  var $i573: i1;
  var $p574: ref;
  var $i575: i64;
  var $i576: i1;
  var $p577: ref;
  var $i578: i64;
  var $i579: i1;
  var $p580: ref;
  var $i581: i64;
  var $i582: i1;
  var $p583: ref;
  var $i584: i64;
  var $i585: i1;
  var $p586: ref;
  var $i587: i64;
  var $i588: i1;
  var $p589: ref;
  var $i590: i64;
  var $i591: i1;
  var $p592: ref;
  var $i593: i64;
  var $i594: i1;
  var $p595: ref;
  var $i596: i64;
  var $i597: i1;
  var $p598: ref;
  var $i599: i64;
  var $i600: i1;
  var $p601: ref;
  var $i602: i64;
  var $i603: i1;
  var $p604: ref;
  var $i605: i64;
  var $i606: i1;
  var $p607: ref;
  var $i608: i64;
  var $i609: i1;
  var $p610: ref;
  var $i611: i64;
  var $i612: i1;
  var $p613: ref;
  var $i614: i64;
  var $i615: i1;
  var $p616: ref;
  var $i617: i64;
  var $i618: i1;
  var $p619: ref;
  var $i620: i64;
  var $i621: i1;
  var $p622: ref;
  var $i623: i64;
  var $i624: i1;
  var $p625: ref;
  var $i626: i64;
  var $i627: i1;
  var $p628: ref;
  var $i629: i64;
  var $i630: i1;
  var $p631: ref;
  var $i632: i64;
  var $i633: i1;
  var $p634: ref;
  var $i635: i64;
  var $i636: i1;
  var $p637: ref;
  var $i638: i64;
  var $i639: i1;
  var $p640: ref;
  var $i641: i64;
  var $i642: i1;
  var $p643: ref;
  var $i644: i64;
  var $i645: i1;
  var $p646: ref;
  var $i647: i64;
  var $i648: i1;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.21, comedi_subdevice_minor_table);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i6 := 2;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i6 := 3;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i6 := 4;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i6 := 5;
    assume {:branchcond $i42} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i6 := 6;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i6 := 7;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)));
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i6 := 8;
    assume {:branchcond $i51} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i6 := 9;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i6 := 10;
    assume {:branchcond $i57} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i6 := 11;
    assume {:branchcond $i60} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i6 := 12;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i6 := 13;
    assume {:branchcond $i66} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i6 := 14;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i6 := 15;
    assume {:branchcond $i72} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i6 := 16;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i6 := 17;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i6 := 18;
    assume {:branchcond $i81} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i83, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i6 := 19;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i6 := 20;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i6 := 21;
    assume {:branchcond $i90} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i6 := 22;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i6 := 23;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i6 := 24;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i6 := 25;
    assume {:branchcond $i102} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i6 := 26;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i6 := 27;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i6 := 28;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i6 := 29;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i6 := 30;
    assume {:branchcond $i117} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i6 := 31;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i6 := 32;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i6 := 33;
    assume {:branchcond $i126} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i6 := 34;
    assume {:branchcond $i129} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i132 := $eq.i64($i131, 0);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i6 := 35;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i6 := 36;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i6 := 37;
    assume {:branchcond $i138} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i6 := 38;
    assume {:branchcond $i141} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i144 := $eq.i64($i143, 0);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i6 := 39;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i147 := $eq.i64($i146, 0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i6 := 40;
    assume {:branchcond $i147} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i149, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i6 := 41;
    assume {:branchcond $i150} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64($i152, 0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i6 := 42;
    assume {:branchcond $i153} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i156 := $eq.i64($i155, 0);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i6 := 43;
    assume {:branchcond $i156} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i159 := $eq.i64($i158, 0);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i6 := 44;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i162 := $eq.i64($i161, 0);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i6 := 45;
    assume {:branchcond $i162} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i165 := $eq.i64($i164, 0);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i6 := 46;
    assume {:branchcond $i165} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i6 := 47;
    assume {:branchcond $i168} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i171 := $eq.i64($i170, 0);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i6 := 48;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i174 := $eq.i64($i173, 0);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i6 := 49;
    assume {:branchcond $i174} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i6 := 50;
    assume {:branchcond $i177} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i6 := 51;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p181);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i183 := $eq.i64($i182, 0);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i6 := 52;
    assume {:branchcond $i183} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i185, 0);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i6 := 53;
    assume {:branchcond $i186} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i189 := $eq.i64($i188, 0);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i6 := 54;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i192 := $eq.i64($i191, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i6 := 55;
    assume {:branchcond $i192} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i195 := $eq.i64($i194, 0);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i6 := 56;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i197, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i6 := 57;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p199);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i201 := $eq.i64($i200, 0);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i6 := 58;
    assume {:branchcond $i201} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i204 := $eq.i64($i203, 0);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i6 := 59;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i206, 0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i6 := 60;
    assume {:branchcond $i207} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i210 := $eq.i64($i209, 0);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i6 := 61;
    assume {:branchcond $i210} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i213 := $eq.i64($i212, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i6 := 62;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p214);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i216 := $eq.i64($i215, 0);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i6 := 63;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i219 := $eq.i64($i218, 0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i6 := 64;
    assume {:branchcond $i219} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i221 := $p2i.ref.i64($p220);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i222 := $eq.i64($i221, 0);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i6 := 65;
    assume {:branchcond $i222} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i224 := $p2i.ref.i64($p223);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i225 := $eq.i64($i224, 0);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i6 := 66;
    assume {:branchcond $i225} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i228 := $eq.i64($i227, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i6 := 67;
    assume {:branchcond $i228} true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i230 := $p2i.ref.i64($p229);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i231 := $eq.i64($i230, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i6 := 68;
    assume {:branchcond $i231} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i6 := 69;
    assume {:branchcond $i234} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p235);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i237 := $eq.i64($i236, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i6 := 70;
    assume {:branchcond $i237} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i240 := $eq.i64($i239, 0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i6 := 71;
    assume {:branchcond $i240} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i243 := $eq.i64($i242, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i6 := 72;
    assume {:branchcond $i243} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i246 := $eq.i64($i245, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i6 := 73;
    assume {:branchcond $i246} true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p247);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i249 := $eq.i64($i248, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i6 := 74;
    assume {:branchcond $i249} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i252 := $eq.i64($i251, 0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i6 := 75;
    assume {:branchcond $i252} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p253);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i255 := $eq.i64($i254, 0);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i6 := 76;
    assume {:branchcond $i255} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i258 := $eq.i64($i257, 0);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i6 := 77;
    assume {:branchcond $i258} true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i261 := $eq.i64($i260, 0);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i6 := 78;
    assume {:branchcond $i261} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p262);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i264 := $eq.i64($i263, 0);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i6 := 79;
    assume {:branchcond $i264} true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p265);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i267 := $eq.i64($i266, 0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i6 := 80;
    assume {:branchcond $i267} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p268);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i270 := $eq.i64($i269, 0);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i6 := 81;
    assume {:branchcond $i270} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p271);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i273 := $eq.i64($i272, 0);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i6 := 82;
    assume {:branchcond $i273} true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i275 := $p2i.ref.i64($p274);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i276 := $eq.i64($i275, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i6 := 83;
    assume {:branchcond $i276} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p277);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i279 := $eq.i64($i278, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i6 := 84;
    assume {:branchcond $i279} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i281 := $p2i.ref.i64($p280);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i282 := $eq.i64($i281, 0);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i6 := 85;
    assume {:branchcond $i282} true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p283);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i285 := $eq.i64($i284, 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i6 := 86;
    assume {:branchcond $i285} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i288 := $eq.i64($i287, 0);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i6 := 87;
    assume {:branchcond $i288} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p289);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i291 := $eq.i64($i290, 0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i6 := 88;
    assume {:branchcond $i291} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i293 := $p2i.ref.i64($p292);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i294 := $eq.i64($i293, 0);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i6 := 89;
    assume {:branchcond $i294} true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p295);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i297 := $eq.i64($i296, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i6 := 90;
    assume {:branchcond $i297} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i300 := $eq.i64($i299, 0);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i6 := 91;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p301);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i303 := $eq.i64($i302, 0);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i6 := 92;
    assume {:branchcond $i303} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i305 := $p2i.ref.i64($p304);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i306 := $eq.i64($i305, 0);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i6 := 93;
    assume {:branchcond $i306} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)));
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i308 := $p2i.ref.i64($p307);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i309 := $eq.i64($i308, 0);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i6 := 94;
    assume {:branchcond $i309} true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i311 := $p2i.ref.i64($p310);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i312 := $eq.i64($i311, 0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i6 := 95;
    assume {:branchcond $i312} true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p313);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i315 := $eq.i64($i314, 0);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i6 := 96;
    assume {:branchcond $i315} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i318 := $eq.i64($i317, 0);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i6 := 97;
    assume {:branchcond $i318} true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i320 := $p2i.ref.i64($p319);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i321 := $eq.i64($i320, 0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i6 := 98;
    assume {:branchcond $i321} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i324 := $eq.i64($i323, 0);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i6 := 99;
    assume {:branchcond $i324} true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)));
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p325);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i327 := $eq.i64($i326, 0);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i6 := 100;
    assume {:branchcond $i327} true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i330 := $eq.i64($i329, 0);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i6 := 101;
    assume {:branchcond $i330} true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i332 := $p2i.ref.i64($p331);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i333 := $eq.i64($i332, 0);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i6 := 102;
    assume {:branchcond $i333} true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i335 := $p2i.ref.i64($p334);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i336 := $eq.i64($i335, 0);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i6 := 103;
    assume {:branchcond $i336} true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p337);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i339 := $eq.i64($i338, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i6 := 104;
    assume {:branchcond $i339} true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i341 := $p2i.ref.i64($p340);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i342 := $eq.i64($i341, 0);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i6 := 105;
    assume {:branchcond $i342} true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i345 := $eq.i64($i344, 0);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i6 := 106;
    assume {:branchcond $i345} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p346);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i348 := $eq.i64($i347, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i6 := 107;
    assume {:branchcond $i348} true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i350 := $p2i.ref.i64($p349);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i351 := $eq.i64($i350, 0);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i6 := 108;
    assume {:branchcond $i351} true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i354 := $eq.i64($i353, 0);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i6 := 109;
    assume {:branchcond $i354} true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i356 := $p2i.ref.i64($p355);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i357 := $eq.i64($i356, 0);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i6 := 110;
    assume {:branchcond $i357} true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p358);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i360 := $eq.i64($i359, 0);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i6 := 111;
    assume {:branchcond $i360} true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i362 := $p2i.ref.i64($p361);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i363 := $eq.i64($i362, 0);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i6 := 112;
    assume {:branchcond $i363} true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $p364 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i365 := $p2i.ref.i64($p364);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i366 := $eq.i64($i365, 0);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i6 := 113;
    assume {:branchcond $i366} true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i368 := $p2i.ref.i64($p367);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i369 := $eq.i64($i368, 0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i6 := 114;
    assume {:branchcond $i369} true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i371 := $p2i.ref.i64($p370);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i372 := $eq.i64($i371, 0);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i6 := 115;
    assume {:branchcond $i372} true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p373);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i375 := $eq.i64($i374, 0);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i6 := 116;
    assume {:branchcond $i375} true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i377 := $p2i.ref.i64($p376);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i378 := $eq.i64($i377, 0);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i6 := 117;
    assume {:branchcond $i378} true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i381 := $eq.i64($i380, 0);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i6 := 118;
    assume {:branchcond $i381} true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i383 := $p2i.ref.i64($p382);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i384 := $eq.i64($i383, 0);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i6 := 119;
    assume {:branchcond $i384} true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i386 := $p2i.ref.i64($p385);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i387 := $eq.i64($i386, 0);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i6 := 120;
    assume {:branchcond $i387} true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i389 := $p2i.ref.i64($p388);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i390 := $eq.i64($i389, 0);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i6 := 121;
    assume {:branchcond $i390} true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i392 := $p2i.ref.i64($p391);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i393 := $eq.i64($i392, 0);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i6 := 122;
    assume {:branchcond $i393} true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p394);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i396 := $eq.i64($i395, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i6 := 123;
    assume {:branchcond $i396} true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i398 := $p2i.ref.i64($p397);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i399 := $eq.i64($i398, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i6 := 124;
    assume {:branchcond $i399} true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i402 := $eq.i64($i401, 0);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i6 := 125;
    assume {:branchcond $i402} true;
    goto $bb513, $bb514;

  $bb514:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i404 := $p2i.ref.i64($p403);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i405 := $eq.i64($i404, 0);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i6 := 126;
    assume {:branchcond $i405} true;
    goto $bb517, $bb518;

  $bb518:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p406);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i408 := $eq.i64($i407, 0);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i6 := 127;
    assume {:branchcond $i408} true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i410 := $p2i.ref.i64($p409);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i411 := $eq.i64($i410, 0);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i6 := 128;
    assume {:branchcond $i411} true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i413 := $p2i.ref.i64($p412);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i414 := $eq.i64($i413, 0);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i6 := 129;
    assume {:branchcond $i414} true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i416 := $p2i.ref.i64($p415);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i417 := $eq.i64($i416, 0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i6 := 130;
    assume {:branchcond $i417} true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i419 := $p2i.ref.i64($p418);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i420 := $eq.i64($i419, 0);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i6 := 131;
    assume {:branchcond $i420} true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p421);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i423 := $eq.i64($i422, 0);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i6 := 132;
    assume {:branchcond $i423} true;
    goto $bb541, $bb542;

  $bb542:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i425 := $p2i.ref.i64($p424);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i426 := $eq.i64($i425, 0);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i6 := 133;
    assume {:branchcond $i426} true;
    goto $bb545, $bb546;

  $bb546:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i428 := $p2i.ref.i64($p427);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i429 := $eq.i64($i428, 0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i6 := 134;
    assume {:branchcond $i429} true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i431 := $p2i.ref.i64($p430);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i432 := $eq.i64($i431, 0);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i6 := 135;
    assume {:branchcond $i432} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i434 := $p2i.ref.i64($p433);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i435 := $eq.i64($i434, 0);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i6 := 136;
    assume {:branchcond $i435} true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i437 := $p2i.ref.i64($p436);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i438 := $eq.i64($i437, 0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i6 := 137;
    assume {:branchcond $i438} true;
    goto $bb561, $bb562;

  $bb562:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i440 := $p2i.ref.i64($p439);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i441 := $eq.i64($i440, 0);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i6 := 138;
    assume {:branchcond $i441} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i444 := $eq.i64($i443, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i6 := 139;
    assume {:branchcond $i444} true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i446 := $p2i.ref.i64($p445);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i447 := $eq.i64($i446, 0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i6 := 140;
    assume {:branchcond $i447} true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    $p448 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i450 := $eq.i64($i449, 0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i6 := 141;
    assume {:branchcond $i450} true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i452 := $p2i.ref.i64($p451);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i453 := $eq.i64($i452, 0);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i6 := 142;
    assume {:branchcond $i453} true;
    goto $bb581, $bb582;

  $bb582:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p454);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i456 := $eq.i64($i455, 0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i6 := 143;
    assume {:branchcond $i456} true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i458 := $p2i.ref.i64($p457);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i459 := $eq.i64($i458, 0);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i6 := 144;
    assume {:branchcond $i459} true;
    goto $bb589, $bb590;

  $bb590:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i461 := $p2i.ref.i64($p460);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i462 := $eq.i64($i461, 0);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i6 := 145;
    assume {:branchcond $i462} true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i464 := $p2i.ref.i64($p463);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i465 := $eq.i64($i464, 0);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i6 := 146;
    assume {:branchcond $i465} true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    $p466 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i467 := $p2i.ref.i64($p466);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i468 := $eq.i64($i467, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i6 := 147;
    assume {:branchcond $i468} true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $p469 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i470 := $p2i.ref.i64($p469);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i471 := $eq.i64($i470, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i6 := 148;
    assume {:branchcond $i471} true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p472);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i474 := $eq.i64($i473, 0);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i6 := 149;
    assume {:branchcond $i474} true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    $p475 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i476 := $p2i.ref.i64($p475);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i477 := $eq.i64($i476, 0);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i6 := 150;
    assume {:branchcond $i477} true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i479 := $p2i.ref.i64($p478);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i480 := $eq.i64($i479, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i6 := 151;
    assume {:branchcond $i480} true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i482 := $p2i.ref.i64($p481);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i483 := $eq.i64($i482, 0);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i6 := 152;
    assume {:branchcond $i483} true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i485 := $p2i.ref.i64($p484);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i486 := $eq.i64($i485, 0);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i6 := 153;
    assume {:branchcond $i486} true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i488 := $p2i.ref.i64($p487);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i489 := $eq.i64($i488, 0);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i6 := 154;
    assume {:branchcond $i489} true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i492 := $eq.i64($i491, 0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i6 := 155;
    assume {:branchcond $i492} true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i494 := $p2i.ref.i64($p493);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i495 := $eq.i64($i494, 0);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i6 := 156;
    assume {:branchcond $i495} true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i497 := $p2i.ref.i64($p496);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i498 := $eq.i64($i497, 0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i6 := 157;
    assume {:branchcond $i498} true;
    goto $bb641, $bb642;

  $bb642:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    $p499 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i500 := $p2i.ref.i64($p499);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i501 := $eq.i64($i500, 0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i6 := 158;
    assume {:branchcond $i501} true;
    goto $bb645, $bb646;

  $bb646:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i503 := $p2i.ref.i64($p502);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i504 := $eq.i64($i503, 0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i6 := 159;
    assume {:branchcond $i504} true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i506 := $p2i.ref.i64($p505);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i507 := $eq.i64($i506, 0);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i6 := 160;
    assume {:branchcond $i507} true;
    goto $bb653, $bb654;

  $bb654:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i509 := $p2i.ref.i64($p508);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i510 := $eq.i64($i509, 0);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i6 := 161;
    assume {:branchcond $i510} true;
    goto $bb657, $bb658;

  $bb658:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    $p511 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i512 := $p2i.ref.i64($p511);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i513 := $eq.i64($i512, 0);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i6 := 162;
    assume {:branchcond $i513} true;
    goto $bb661, $bb662;

  $bb662:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    $p514 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i515 := $p2i.ref.i64($p514);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i516 := $eq.i64($i515, 0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i6 := 163;
    assume {:branchcond $i516} true;
    goto $bb665, $bb666;

  $bb666:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    $p517 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i518 := $p2i.ref.i64($p517);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i519 := $eq.i64($i518, 0);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i6 := 164;
    assume {:branchcond $i519} true;
    goto $bb669, $bb670;

  $bb670:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    $p520 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i521 := $p2i.ref.i64($p520);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i522 := $eq.i64($i521, 0);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i6 := 165;
    assume {:branchcond $i522} true;
    goto $bb673, $bb674;

  $bb674:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i524 := $p2i.ref.i64($p523);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i525 := $eq.i64($i524, 0);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i6 := 166;
    assume {:branchcond $i525} true;
    goto $bb677, $bb678;

  $bb678:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i527 := $p2i.ref.i64($p526);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i528 := $eq.i64($i527, 0);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i6 := 167;
    assume {:branchcond $i528} true;
    goto $bb681, $bb682;

  $bb682:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    $p529 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i530 := $p2i.ref.i64($p529);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i531 := $eq.i64($i530, 0);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i6 := 168;
    assume {:branchcond $i531} true;
    goto $bb685, $bb686;

  $bb686:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i533 := $p2i.ref.i64($p532);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i534 := $eq.i64($i533, 0);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i6 := 169;
    assume {:branchcond $i534} true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i536 := $p2i.ref.i64($p535);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i537 := $eq.i64($i536, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i6 := 170;
    assume {:branchcond $i537} true;
    goto $bb693, $bb694;

  $bb694:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i539 := $p2i.ref.i64($p538);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i540 := $eq.i64($i539, 0);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i6 := 171;
    assume {:branchcond $i540} true;
    goto $bb697, $bb698;

  $bb698:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    $p541 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i542 := $p2i.ref.i64($p541);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i543 := $eq.i64($i542, 0);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i6 := 172;
    assume {:branchcond $i543} true;
    goto $bb701, $bb702;

  $bb702:
    assume !($i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i545 := $p2i.ref.i64($p544);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i546 := $eq.i64($i545, 0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i6 := 173;
    assume {:branchcond $i546} true;
    goto $bb705, $bb706;

  $bb706:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i548 := $p2i.ref.i64($p547);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i549 := $eq.i64($i548, 0);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i6 := 174;
    assume {:branchcond $i549} true;
    goto $bb709, $bb710;

  $bb710:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i551 := $p2i.ref.i64($p550);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i552 := $eq.i64($i551, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i6 := 175;
    assume {:branchcond $i552} true;
    goto $bb713, $bb714;

  $bb714:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    $p553 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i554 := $p2i.ref.i64($p553);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i555 := $eq.i64($i554, 0);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i6 := 176;
    assume {:branchcond $i555} true;
    goto $bb717, $bb718;

  $bb718:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i557 := $p2i.ref.i64($p556);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i558 := $eq.i64($i557, 0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i6 := 177;
    assume {:branchcond $i558} true;
    goto $bb721, $bb722;

  $bb722:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    $p559 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i560 := $p2i.ref.i64($p559);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i561 := $eq.i64($i560, 0);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i6 := 178;
    assume {:branchcond $i561} true;
    goto $bb725, $bb726;

  $bb726:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p562);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i564 := $eq.i64($i563, 0);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i6 := 179;
    assume {:branchcond $i564} true;
    goto $bb729, $bb730;

  $bb730:
    assume !($i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    $p565 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i566 := $p2i.ref.i64($p565);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i567 := $eq.i64($i566, 0);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i6 := 180;
    assume {:branchcond $i567} true;
    goto $bb733, $bb734;

  $bb734:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i569 := $p2i.ref.i64($p568);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i570 := $eq.i64($i569, 0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i6 := 181;
    assume {:branchcond $i570} true;
    goto $bb737, $bb738;

  $bb738:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $p571 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i572 := $p2i.ref.i64($p571);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i573 := $eq.i64($i572, 0);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i6 := 182;
    assume {:branchcond $i573} true;
    goto $bb741, $bb742;

  $bb742:
    assume !($i573 == 1);
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i575 := $p2i.ref.i64($p574);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i576 := $eq.i64($i575, 0);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i6 := 183;
    assume {:branchcond $i576} true;
    goto $bb745, $bb746;

  $bb746:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i578 := $p2i.ref.i64($p577);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i579 := $eq.i64($i578, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i6 := 184;
    assume {:branchcond $i579} true;
    goto $bb749, $bb750;

  $bb750:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    $p580 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i581 := $p2i.ref.i64($p580);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i582 := $eq.i64($i581, 0);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i6 := 185;
    assume {:branchcond $i582} true;
    goto $bb753, $bb754;

  $bb754:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    $p583 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i584 := $p2i.ref.i64($p583);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i585 := $eq.i64($i584, 0);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i6 := 186;
    assume {:branchcond $i585} true;
    goto $bb757, $bb758;

  $bb758:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p586);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i588 := $eq.i64($i587, 0);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i6 := 187;
    assume {:branchcond $i588} true;
    goto $bb761, $bb762;

  $bb762:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i590 := $p2i.ref.i64($p589);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i591 := $eq.i64($i590, 0);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i6 := 188;
    assume {:branchcond $i591} true;
    goto $bb765, $bb766;

  $bb766:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i593 := $p2i.ref.i64($p592);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i594 := $eq.i64($i593, 0);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i6 := 189;
    assume {:branchcond $i594} true;
    goto $bb769, $bb770;

  $bb770:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i596 := $p2i.ref.i64($p595);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i597 := $eq.i64($i596, 0);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i6 := 190;
    assume {:branchcond $i597} true;
    goto $bb773, $bb774;

  $bb774:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i599 := $p2i.ref.i64($p598);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i600 := $eq.i64($i599, 0);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i6 := 191;
    assume {:branchcond $i600} true;
    goto $bb777, $bb778;

  $bb778:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    $p601 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i602 := $p2i.ref.i64($p601);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i603 := $eq.i64($i602, 0);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i6 := 192;
    assume {:branchcond $i603} true;
    goto $bb781, $bb782;

  $bb782:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    $p604 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i605 := $p2i.ref.i64($p604);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i606 := $eq.i64($i605, 0);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i6 := 193;
    assume {:branchcond $i606} true;
    goto $bb785, $bb786;

  $bb786:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    $p607 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i608 := $p2i.ref.i64($p607);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i609 := $eq.i64($i608, 0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i6 := 194;
    assume {:branchcond $i609} true;
    goto $bb789, $bb790;

  $bb790:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i611 := $p2i.ref.i64($p610);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i612 := $eq.i64($i611, 0);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i6 := 195;
    assume {:branchcond $i612} true;
    goto $bb793, $bb794;

  $bb794:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    $p613 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i614 := $p2i.ref.i64($p613);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i615 := $eq.i64($i614, 0);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i6 := 196;
    assume {:branchcond $i615} true;
    goto $bb797, $bb798;

  $bb798:
    assume !($i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i617 := $p2i.ref.i64($p616);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i618 := $eq.i64($i617, 0);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i6 := 197;
    assume {:branchcond $i618} true;
    goto $bb801, $bb802;

  $bb802:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i620 := $p2i.ref.i64($p619);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i621 := $eq.i64($i620, 0);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i6 := 198;
    assume {:branchcond $i621} true;
    goto $bb805, $bb806;

  $bb806:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    $p622 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i623 := $p2i.ref.i64($p622);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i624 := $eq.i64($i623, 0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i6 := 199;
    assume {:branchcond $i624} true;
    goto $bb809, $bb810;

  $bb810:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i626 := $p2i.ref.i64($p625);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i627 := $eq.i64($i626, 0);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i6 := 200;
    assume {:branchcond $i627} true;
    goto $bb813, $bb814;

  $bb814:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i629 := $p2i.ref.i64($p628);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i630 := $eq.i64($i629, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i6 := 201;
    assume {:branchcond $i630} true;
    goto $bb817, $bb818;

  $bb818:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    $p631 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i632 := $p2i.ref.i64($p631);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i633 := $eq.i64($i632, 0);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i6 := 202;
    assume {:branchcond $i633} true;
    goto $bb821, $bb822;

  $bb822:
    assume !($i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    $p634 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p634);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i636 := $eq.i64($i635, 0);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i6 := 203;
    assume {:branchcond $i636} true;
    goto $bb825, $bb826;

  $bb826:
    assume !($i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i638 := $p2i.ref.i64($p637);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i639 := $eq.i64($i638, 0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i6 := 204;
    assume {:branchcond $i639} true;
    goto $bb829, $bb830;

  $bb830:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i641 := $p2i.ref.i64($p640);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i642 := $eq.i64($i641, 0);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i6 := 205;
    assume {:branchcond $i642} true;
    goto $bb833, $bb834;

  $bb834:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    $p643 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i644 := $p2i.ref.i64($p643);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i645 := $eq.i64($i644, 0);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i6 := 206;
    assume {:branchcond $i645} true;
    goto $bb837, $bb838;

  $bb838:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i647 := $p2i.ref.i64($p646);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i648 := $eq.i64($i647, 0);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i6 := 207;
    assume {:branchcond $i648} true;
    goto $bb841, $bb842;

  $bb842:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 208;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 208);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i9, 48);
    call {:si_unique_call 1409} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(304, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p15 := $M.29;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, 102760448);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(8, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p23 := device_create.ref.ref.i32.ref.ref.i32.i32($p15, $p17, $i18, $0.ref, .str.4, $i20, $i22);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $i25 := IS_ERR($p24);
    call {:si_unique_call 1412} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(296, 1));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p23);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_98 := printk.ref(.str.3);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb12;

  $bb841:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i7, 8));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p8, $p0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb6;

  $bb837:
    assume {:verifier.code 0} true;
    assume $i645 == 1;
    goto $bb4;

  $bb833:
    assume {:verifier.code 0} true;
    assume $i642 == 1;
    goto $bb4;

  $bb829:
    assume {:verifier.code 0} true;
    assume $i639 == 1;
    goto $bb4;

  $bb825:
    assume {:verifier.code 0} true;
    assume $i636 == 1;
    goto $bb4;

  $bb821:
    assume {:verifier.code 0} true;
    assume $i633 == 1;
    goto $bb4;

  $bb817:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb4;

  $bb813:
    assume {:verifier.code 0} true;
    assume $i627 == 1;
    goto $bb4;

  $bb809:
    assume {:verifier.code 0} true;
    assume $i624 == 1;
    goto $bb4;

  $bb805:
    assume {:verifier.code 0} true;
    assume $i621 == 1;
    goto $bb4;

  $bb801:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb4;

  $bb797:
    assume {:verifier.code 0} true;
    assume $i615 == 1;
    goto $bb4;

  $bb793:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb4;

  $bb789:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb4;

  $bb785:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb4;

  $bb781:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb4;

  $bb777:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb4;

  $bb773:
    assume {:verifier.code 0} true;
    assume $i597 == 1;
    goto $bb4;

  $bb769:
    assume {:verifier.code 0} true;
    assume $i594 == 1;
    goto $bb4;

  $bb765:
    assume {:verifier.code 0} true;
    assume $i591 == 1;
    goto $bb4;

  $bb761:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb4;

  $bb757:
    assume {:verifier.code 0} true;
    assume $i585 == 1;
    goto $bb4;

  $bb753:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb4;

  $bb749:
    assume {:verifier.code 0} true;
    assume $i579 == 1;
    goto $bb4;

  $bb745:
    assume {:verifier.code 0} true;
    assume $i576 == 1;
    goto $bb4;

  $bb741:
    assume {:verifier.code 0} true;
    assume $i573 == 1;
    goto $bb4;

  $bb737:
    assume {:verifier.code 0} true;
    assume $i570 == 1;
    goto $bb4;

  $bb733:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb4;

  $bb729:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb4;

  $bb725:
    assume {:verifier.code 0} true;
    assume $i561 == 1;
    goto $bb4;

  $bb721:
    assume {:verifier.code 0} true;
    assume $i558 == 1;
    goto $bb4;

  $bb717:
    assume {:verifier.code 0} true;
    assume $i555 == 1;
    goto $bb4;

  $bb713:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb4;

  $bb709:
    assume {:verifier.code 0} true;
    assume $i549 == 1;
    goto $bb4;

  $bb705:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb4;

  $bb701:
    assume {:verifier.code 0} true;
    assume $i543 == 1;
    goto $bb4;

  $bb697:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb4;

  $bb693:
    assume {:verifier.code 0} true;
    assume $i537 == 1;
    goto $bb4;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb4;

  $bb685:
    assume {:verifier.code 0} true;
    assume $i531 == 1;
    goto $bb4;

  $bb681:
    assume {:verifier.code 0} true;
    assume $i528 == 1;
    goto $bb4;

  $bb677:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb4;

  $bb673:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb4;

  $bb669:
    assume {:verifier.code 0} true;
    assume $i519 == 1;
    goto $bb4;

  $bb665:
    assume {:verifier.code 0} true;
    assume $i516 == 1;
    goto $bb4;

  $bb661:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb4;

  $bb657:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb4;

  $bb653:
    assume {:verifier.code 0} true;
    assume $i507 == 1;
    goto $bb4;

  $bb649:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb4;

  $bb645:
    assume {:verifier.code 0} true;
    assume $i501 == 1;
    goto $bb4;

  $bb641:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb4;

  $bb637:
    assume {:verifier.code 0} true;
    assume $i495 == 1;
    goto $bb4;

  $bb633:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb4;

  $bb629:
    assume {:verifier.code 0} true;
    assume $i489 == 1;
    goto $bb4;

  $bb625:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb4;

  $bb621:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb4;

  $bb617:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb4;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb4;

  $bb609:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb4;

  $bb605:
    assume {:verifier.code 0} true;
    assume $i471 == 1;
    goto $bb4;

  $bb601:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb4;

  $bb597:
    assume {:verifier.code 0} true;
    assume $i465 == 1;
    goto $bb4;

  $bb593:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb4;

  $bb589:
    assume {:verifier.code 0} true;
    assume $i459 == 1;
    goto $bb4;

  $bb585:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb4;

  $bb581:
    assume {:verifier.code 0} true;
    assume $i453 == 1;
    goto $bb4;

  $bb577:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb4;

  $bb573:
    assume {:verifier.code 0} true;
    assume $i447 == 1;
    goto $bb4;

  $bb569:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb4;

  $bb565:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb4;

  $bb561:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb4;

  $bb557:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb4;

  $bb553:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb4;

  $bb549:
    assume {:verifier.code 0} true;
    assume $i429 == 1;
    goto $bb4;

  $bb545:
    assume {:verifier.code 0} true;
    assume $i426 == 1;
    goto $bb4;

  $bb541:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb4;

  $bb537:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb4;

  $bb533:
    assume {:verifier.code 0} true;
    assume $i417 == 1;
    goto $bb4;

  $bb529:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb4;

  $bb525:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb4;

  $bb521:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb4;

  $bb517:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb4;

  $bb513:
    assume {:verifier.code 0} true;
    assume $i402 == 1;
    goto $bb4;

  $bb509:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb4;

  $bb505:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb4;

  $bb501:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb4;

  $bb497:
    assume {:verifier.code 0} true;
    assume $i390 == 1;
    goto $bb4;

  $bb493:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb4;

  $bb489:
    assume {:verifier.code 0} true;
    assume $i384 == 1;
    goto $bb4;

  $bb485:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb4;

  $bb481:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb4;

  $bb477:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb4;

  $bb473:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb4;

  $bb469:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb4;

  $bb465:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb4;

  $bb461:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb4;

  $bb457:
    assume {:verifier.code 0} true;
    assume $i360 == 1;
    goto $bb4;

  $bb453:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb4;

  $bb449:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb4;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb4;

  $bb441:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb4;

  $bb437:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb4;

  $bb433:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb4;

  $bb429:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb4;

  $bb425:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb4;

  $bb421:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb4;

  $bb417:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb4;

  $bb413:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb4;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb4;

  $bb405:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb4;

  $bb401:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb4;

  $bb397:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb4;

  $bb393:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb4;

  $bb389:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb4;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb4;

  $bb381:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb4;

  $bb377:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb4;

  $bb373:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb4;

  $bb369:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb4;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb4;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb4;

  $bb357:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb4;

  $bb353:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb4;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb4;

  $bb345:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb4;

  $bb341:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb4;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb4;

  $bb333:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb4;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb4;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb4;

  $bb321:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb4;

  $bb317:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb4;

  $bb313:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb4;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb4;

  $bb305:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb4;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb4;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb4;

  $bb293:
    assume {:verifier.code 0} true;
    assume $i237 == 1;
    goto $bb4;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb4;

  $bb285:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb4;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb4;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb4;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb4;

  $bb269:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb4;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb4;

  $bb261:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb4;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb4;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i207 == 1;
    goto $bb4;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb4;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i201 == 1;
    goto $bb4;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb4;

  $bb237:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb4;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb4;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb4;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb4;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb4;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb4;

  $bb213:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb4;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb4;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb4;

  $bb201:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb4;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb4;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb4;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb4;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb4;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb4;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb4;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb4;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb4;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb4;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb4;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb4;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb4;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb4;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb4;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb4;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb4;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb4;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb4;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb4;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb4;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb4;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb4;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb4;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb4;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb4;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb4;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb4;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb4;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb4;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb4;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb4;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb4;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb4;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb4;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb4;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb4;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 373197);

procedure device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p5 := external_alloc();
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



procedure device_create.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32, p.6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32, p.6: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p5 := external_alloc();
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 374229);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 375261);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1419} devirtbounce.35($p12, $p0, $p1, $p2);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const comedi_buf_read_n_available: ref;

axiom comedi_buf_read_n_available == $sub.ref(0, 376293);

procedure comedi_buf_read_n_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_read_n_available($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(52, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i5, $i7);
    call {:si_unique_call 1420} {:cexpr "num_bytes"} boogie_si_record_i32($i8);
    call {:si_unique_call 1421} devirtbounce.27(0);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i3 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 377325);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p0 := devirtbounce.36(0, current_task);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 378357);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 379389);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    return;
}



const comedi_is_subdevice_in_error: ref;

axiom comedi_is_subdevice_in_error == $sub.ref(0, 380421);

procedure comedi_is_subdevice_in_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_subdevice_in_error($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i1 := comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 1424} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 381453);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 1426} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1428} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 382485);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 383517);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9672)), $mul.ref(8, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 1431} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const max_read_buffer_kb_show: ref;

axiom max_read_buffer_kb_show == $sub.ref(0, 384549);

procedure max_read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation max_read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1432} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} mutex_lock_nested($p10, 0);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p11 := comedi_read_subdevice($p6, $i5);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} mutex_unlock($p28);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i29 := snprintf.ref.i64.ref.i32($p2, 4096, .str.32, $i27);
    call {:si_unique_call 1439} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32768);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1436} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const max_read_buffer_kb_store: ref;

axiom max_read_buffer_kb_store == $sub.ref(0, 385581);

procedure max_read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr;



implementation max_read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1441} {:cexpr "max_read_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1442} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1444} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.37, $p4);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.37, $p4);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p4, $i15);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p16 := comedi_dev_from_minor($i7);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} mutex_lock_nested($p19, 0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p20 := comedi_read_subdevice($p16, $i7);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} mutex_unlock($p36);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb21;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32768);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.37, $p4);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i35 := $i8;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 386613);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1449} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 387645);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const read_buffer_kb_show: ref;

axiom read_buffer_kb_show == $sub.ref(0, 388677);

procedure read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1452} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} mutex_lock_nested($p10, 0);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p11 := comedi_read_subdevice($p6, $i5);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} mutex_unlock($p28);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i29 := snprintf.ref.i64.ref.i32($p2, 4096, .str.32, $i27);
    call {:si_unique_call 1459} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32768);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1456} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const read_buffer_kb_store: ref;

axiom read_buffer_kb_store == $sub.ref(0, 389709);

procedure read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.37, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.32, $M.33;



implementation read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1461} {:cexpr "read_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1462} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1464} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.37, $p4);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.37, $p4);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p4, $i15);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p16 := comedi_dev_from_minor($i7);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} mutex_lock_nested($p19, 0);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p20 := comedi_read_subdevice($p16, $i7);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} mutex_unlock($p36);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb21;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32768);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.37, $p4);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i34 := resize_async_buffer($p16, $p20, $p32, $i33);
    call {:si_unique_call 1469} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const max_write_buffer_kb_show: ref;

axiom max_write_buffer_kb_show == $sub.ref(0, 390741);

procedure max_write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation max_write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1471} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} mutex_lock_nested($p10, 0);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p11 := comedi_write_subdevice($p6, $i5);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} mutex_unlock($p28);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i29 := snprintf.ref.i64.ref.i32($p2, 4096, .str.32, $i27);
    call {:si_unique_call 1478} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16384);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1475} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const max_write_buffer_kb_store: ref;

axiom max_write_buffer_kb_store == $sub.ref(0, 391773);

procedure max_write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr;



implementation max_write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1480} {:cexpr "max_write_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1481} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1483} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.37, $p4);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.37, $p4);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p4, $i15);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p16 := comedi_dev_from_minor($i7);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} mutex_lock_nested($p19, 0);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p20 := comedi_write_subdevice($p16, $i7);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} mutex_unlock($p36);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb21;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16384);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.37, $p4);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(36, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i35 := $i8;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const write_buffer_kb_show: ref;

axiom write_buffer_kb_show == $sub.ref(0, 392805);

procedure write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1488} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p6 := comedi_dev_from_minor($i5);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} mutex_lock_nested($p10, 0);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p11 := comedi_write_subdevice($p6, $i5);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} mutex_unlock($p28);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i29 := snprintf.ref.i64.ref.i32($p2, 4096, .str.32, $i27);
    call {:si_unique_call 1495} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16384);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1492} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const write_buffer_kb_store: ref;

axiom write_buffer_kb_store == $sub.ref(0, 393837);

procedure write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.37, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.32, $M.33;



implementation write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1497} {:cexpr "write_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(1216, 1));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1498} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1500} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.37, $p4);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.37, $p4);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p4, $i15);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p16 := comedi_dev_from_minor($i7);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} mutex_lock_nested($p19, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p20 := comedi_write_subdevice($p16, $i7);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} mutex_unlock($p36);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb21;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(20, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16384);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.37, $p4);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i34 := resize_async_buffer($p16, $p20, $p32, $i33);
    call {:si_unique_call 1505} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 394869);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1507} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1508} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1510} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 395901);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_proc_open: ref;

axiom comedi_proc_open == $sub.ref(0, 396933);

procedure comedi_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i2 := single_open($p1, comedi_read___0, $0.ref);
    call {:si_unique_call 1515} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 397965);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1516} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1517} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_read___0: ref;

axiom comedi_read___0 == $sub.ref(0, 398997);

procedure comedi_read___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_read___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i19: i32;
  var $i6: i32;
  var $i20: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i33: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p26: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i62: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i79: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i96: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i113: i32;
  var $i123: i32;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i130: i32;
  var $i140: i32;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $i145: i8;
  var $i146: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i147: i32;
  var $i157: i32;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $i162: i8;
  var $i163: i1;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i164: i32;
  var $i174: i32;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $i179: i8;
  var $i180: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i181: i32;
  var $i191: i32;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $i197: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i198: i32;
  var $i208: i32;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $i213: i8;
  var $i214: i1;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i215: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $i230: i8;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i232: i32;
  var $i242: i32;
  var $p243: ref;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $i247: i8;
  var $i248: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i249: i32;
  var $i259: i32;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i8;
  var $i265: i1;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i266: i32;
  var $i276: i32;
  var $p277: ref;
  var $i278: i64;
  var $i279: i1;
  var $p280: ref;
  var $i281: i8;
  var $i282: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $i283: i32;
  var $i293: i32;
  var $p294: ref;
  var $i295: i64;
  var $i296: i1;
  var $p297: ref;
  var $i298: i8;
  var $i299: i1;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i300: i32;
  var $i310: i32;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $i315: i8;
  var $i316: i1;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i32;
  var $i317: i32;
  var $i327: i32;
  var $p328: ref;
  var $i329: i64;
  var $i330: i1;
  var $p331: ref;
  var $i332: i8;
  var $i333: i1;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i32;
  var $i334: i32;
  var $i344: i32;
  var $p345: ref;
  var $i346: i64;
  var $i347: i1;
  var $p348: ref;
  var $i349: i8;
  var $i350: i1;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i351: i32;
  var $i361: i32;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $i366: i8;
  var $i367: i1;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $i376: i32;
  var $i368: i32;
  var $i378: i32;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $i383: i8;
  var $i384: i1;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $i393: i32;
  var $i385: i32;
  var $i395: i32;
  var $p396: ref;
  var $i397: i64;
  var $i398: i1;
  var $p399: ref;
  var $i400: i8;
  var $i401: i1;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $i402: i32;
  var $i412: i32;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $i417: i8;
  var $i418: i1;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $i427: i32;
  var $i419: i32;
  var $i429: i32;
  var $p430: ref;
  var $i431: i64;
  var $i432: i1;
  var $p433: ref;
  var $i434: i8;
  var $i435: i1;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $i444: i32;
  var $i436: i32;
  var $i446: i32;
  var $p447: ref;
  var $i448: i64;
  var $i449: i1;
  var $p450: ref;
  var $i451: i8;
  var $i452: i1;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $i461: i32;
  var $i453: i32;
  var $i463: i32;
  var $p464: ref;
  var $i465: i64;
  var $i466: i1;
  var $p467: ref;
  var $i468: i8;
  var $i469: i1;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $i478: i32;
  var $i470: i32;
  var $i480: i32;
  var $p481: ref;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $i485: i8;
  var $i486: i1;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i487: i32;
  var $i497: i32;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $p501: ref;
  var $i502: i8;
  var $i503: i1;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i32;
  var $i504: i32;
  var $i514: i32;
  var $p515: ref;
  var $i516: i64;
  var $i517: i1;
  var $p518: ref;
  var $i519: i8;
  var $i520: i1;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $i529: i32;
  var $i521: i32;
  var $i531: i32;
  var $p532: ref;
  var $i533: i64;
  var $i534: i1;
  var $p535: ref;
  var $i536: i8;
  var $i537: i1;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $i546: i32;
  var $i538: i32;
  var $i548: i32;
  var $p549: ref;
  var $i550: i64;
  var $i551: i1;
  var $p552: ref;
  var $i553: i8;
  var $i554: i1;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $i563: i32;
  var $i555: i32;
  var $i565: i32;
  var $p566: ref;
  var $i567: i64;
  var $i568: i1;
  var $p569: ref;
  var $i570: i8;
  var $i571: i1;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i32;
  var $i572: i32;
  var $i582: i32;
  var $p583: ref;
  var $i584: i64;
  var $i585: i1;
  var $p586: ref;
  var $i587: i8;
  var $i588: i1;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $i597: i32;
  var $i589: i32;
  var $i599: i32;
  var $p600: ref;
  var $i601: i64;
  var $i602: i1;
  var $p603: ref;
  var $i604: i8;
  var $i605: i1;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $i614: i32;
  var $i606: i32;
  var $i616: i32;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $p620: ref;
  var $i621: i8;
  var $i622: i1;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i32;
  var $i623: i32;
  var $i633: i32;
  var $p634: ref;
  var $i635: i64;
  var $i636: i1;
  var $p637: ref;
  var $i638: i8;
  var $i639: i1;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i32;
  var $i640: i32;
  var $i650: i32;
  var $p651: ref;
  var $i652: i64;
  var $i653: i1;
  var $p654: ref;
  var $i655: i8;
  var $i656: i1;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $i665: i32;
  var $i657: i32;
  var $i667: i32;
  var $p668: ref;
  var $i669: i64;
  var $i670: i1;
  var $p671: ref;
  var $i672: i8;
  var $i673: i1;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i32;
  var $i674: i32;
  var $i684: i32;
  var $p685: ref;
  var $i686: i64;
  var $i687: i1;
  var $p688: ref;
  var $i689: i8;
  var $i690: i1;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $i699: i32;
  var $i691: i32;
  var $i701: i32;
  var $p702: ref;
  var $i703: i64;
  var $i704: i1;
  var $p705: ref;
  var $i706: i8;
  var $i707: i1;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i32;
  var $i708: i32;
  var $i718: i32;
  var $p719: ref;
  var $i720: i64;
  var $i721: i1;
  var $p722: ref;
  var $i723: i8;
  var $i724: i1;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $i733: i32;
  var $i725: i32;
  var $i735: i32;
  var $p736: ref;
  var $i737: i64;
  var $i738: i1;
  var $p739: ref;
  var $i740: i8;
  var $i741: i1;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $i750: i32;
  var $i742: i32;
  var $i752: i32;
  var $p753: ref;
  var $i754: i64;
  var $i755: i1;
  var $p756: ref;
  var $i757: i8;
  var $i758: i1;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $i767: i32;
  var $i759: i32;
  var $i769: i32;
  var $p770: ref;
  var $i771: i64;
  var $i772: i1;
  var $p773: ref;
  var $i774: i8;
  var $i775: i1;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $i784: i32;
  var $i776: i32;
  var $i786: i32;
  var $p787: ref;
  var $i788: i64;
  var $i789: i1;
  var $p790: ref;
  var $i791: i8;
  var $i792: i1;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $i801: i32;
  var $i793: i32;
  var $i803: i32;
  var $p804: ref;
  var $i805: i64;
  var $i806: i1;
  var $p807: ref;
  var $i808: i8;
  var $i809: i1;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $i818: i32;
  var $i810: i32;
  var $i820: i32;
  var $p821: ref;
  var $i822: i64;
  var $i823: i1;
  var $p824: ref;
  var $i825: i8;
  var $i826: i1;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $i835: i32;
  var $i827: i32;
  var $i837: i32;
  var $p838: ref;
  var $i839: i64;
  var $i840: i1;
  var $p841: ref;
  var $i842: i8;
  var $i843: i1;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $i852: i32;
  var $i844: i32;
  var $i21: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} vslice_dummy_var_99 := seq_printf.ref.ref.ref($p0, .str.104, .str.105);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p3 := comedi_dev_from_minor(0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i6 := $i19;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p56 := comedi_dev_from_minor(1);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p56, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i6;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i72 := $i62;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $p73 := comedi_dev_from_minor(2);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i72;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i89 := $i79;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p90 := comedi_dev_from_minor(3);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p90, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i89;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i106 := $i96;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p107 := comedi_dev_from_minor(4);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p107, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $i106;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i123 := $i113;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p124 := comedi_dev_from_minor(5);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p124, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $i123;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i140 := $i130;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p141 := comedi_dev_from_minor(6);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p141, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.0, $p144);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i8.i1($i145);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i140;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i157 := $i147;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p158 := comedi_dev_from_minor(7);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p158, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $i157;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i174 := $i164;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p175 := comedi_dev_from_minor(8);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p175, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i8.i1($i179);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $i174;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i191 := $i181;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p192 := comedi_dev_from_minor(9);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i194 := $eq.i64($i193, 0);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p192, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.0, $p195);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i8.i1($i196);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i198 := $i191;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i208 := $i198;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $p209 := comedi_dev_from_minor(10);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p209);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i211 := $eq.i64($i210, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p209, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p212);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i8.i1($i213);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $i208;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i225 := $i215;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $p226 := comedi_dev_from_minor(11);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i228 := $eq.i64($i227, 0);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p226, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i8.i1($i230);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $i225;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i242 := $i232;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $p243 := comedi_dev_from_minor(12);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p243);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i245 := $eq.i64($i244, 0);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p243, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i8.i1($i247);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i249 := $i242;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i259 := $i249;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p260 := comedi_dev_from_minor(13);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i262 := $eq.i64($i261, 0);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p260, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i8.i1($i264);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $i259;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i276 := $i266;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p277 := comedi_dev_from_minor(14);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p277);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i279 := $eq.i64($i278, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p277, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.0, $p280);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i282 := $trunc.i8.i1($i281);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $i276;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i293 := $i283;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p294 := comedi_dev_from_minor(15);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i296 := $eq.i64($i295, 0);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p294, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.0, $p297);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i8.i1($i298);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    $i300 := $i293;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i310 := $i300;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $p311 := comedi_dev_from_minor(16);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i313 := $eq.i64($i312, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p311, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i8.i1($i315);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    $i317 := $i310;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i327 := $i317;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $p328 := comedi_dev_from_minor(17);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i330 := $eq.i64($i329, 0);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p328, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.0, $p331);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i8.i1($i332);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    $i334 := $i327;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i344 := $i334;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p345 := comedi_dev_from_minor(18);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i346 := $p2i.ref.i64($p345);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i347 := $eq.i64($i346, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p345, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.0, $p348);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i8.i1($i349);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    $i351 := $i344;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i361 := $i351;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p362 := comedi_dev_from_minor(19);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i364 := $eq.i64($i363, 0);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p362, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i366 := $load.i8($M.0, $p365);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i8.i1($i366);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    $i368 := $i361;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i378 := $i368;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p379 := comedi_dev_from_minor(20);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i381 := $eq.i64($i380, 0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p379, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.0, $p382);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i384 := $trunc.i8.i1($i383);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    $i385 := $i378;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i395 := $i385;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $p396 := comedi_dev_from_minor(21);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p396);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i398 := $eq.i64($i397, 0);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p396, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i400 := $load.i8($M.0, $p399);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i401 := $trunc.i8.i1($i400);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    $i402 := $i395;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i412 := $i402;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $p413 := comedi_dev_from_minor(22);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i415 := $eq.i64($i414, 0);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p413, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.0, $p416);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i418 := $trunc.i8.i1($i417);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $i419 := $i412;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i429 := $i419;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p430 := comedi_dev_from_minor(23);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i431 := $p2i.ref.i64($p430);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i432 := $eq.i64($i431, 0);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p430, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i434 := $load.i8($M.0, $p433);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i8.i1($i434);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    $i436 := $i429;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i446 := $i436;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $p447 := comedi_dev_from_minor(24);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i448 := $p2i.ref.i64($p447);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i449 := $eq.i64($i448, 0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p447, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.0, $p450);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i452 := $trunc.i8.i1($i451);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $i453 := $i446;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i463 := $i453;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p464 := comedi_dev_from_minor(25);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i465 := $p2i.ref.i64($p464);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i466 := $eq.i64($i465, 0);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p464, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.0, $p467);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i8.i1($i468);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    $i470 := $i463;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i480 := $i470;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p481 := comedi_dev_from_minor(26);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i482 := $p2i.ref.i64($p481);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i483 := $eq.i64($i482, 0);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p481, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.0, $p484);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i486 := $trunc.i8.i1($i485);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    $i487 := $i480;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i497 := $i487;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p498 := comedi_dev_from_minor(27);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i500 := $eq.i64($i499, 0);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p498, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i502 := $load.i8($M.0, $p501);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i503 := $trunc.i8.i1($i502);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    $i504 := $i497;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i514 := $i504;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p515 := comedi_dev_from_minor(28);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i516 := $p2i.ref.i64($p515);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i517 := $eq.i64($i516, 0);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p515, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i519 := $load.i8($M.0, $p518);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i520 := $trunc.i8.i1($i519);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    $i521 := $i514;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i531 := $i521;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $p532 := comedi_dev_from_minor(29);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i533 := $p2i.ref.i64($p532);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i534 := $eq.i64($i533, 0);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p532, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i536 := $load.i8($M.0, $p535);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i537 := $trunc.i8.i1($i536);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i537} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    $i538 := $i531;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i548 := $i538;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p549 := comedi_dev_from_minor(30);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i550 := $p2i.ref.i64($p549);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i551 := $eq.i64($i550, 0);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p549, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.0, $p552);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i554 := $trunc.i8.i1($i553);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    $i555 := $i548;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i565 := $i555;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $p566 := comedi_dev_from_minor(31);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i567 := $p2i.ref.i64($p566);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i568 := $eq.i64($i567, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p566, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i570 := $load.i8($M.0, $p569);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i571 := $trunc.i8.i1($i570);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i571} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    $i572 := $i565;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i582 := $i572;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p583 := comedi_dev_from_minor(32);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i584 := $p2i.ref.i64($p583);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i585 := $eq.i64($i584, 0);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p583, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i587 := $load.i8($M.0, $p586);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i588 := $trunc.i8.i1($i587);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    $i589 := $i582;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i599 := $i589;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p600 := comedi_dev_from_minor(33);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i601 := $p2i.ref.i64($p600);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i602 := $eq.i64($i601, 0);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p600, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i604 := $load.i8($M.0, $p603);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i605 := $trunc.i8.i1($i604);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    $i606 := $i599;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i616 := $i606;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $p617 := comedi_dev_from_minor(34);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i619 := $eq.i64($i618, 0);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p617, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.0, $p620);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i622 := $trunc.i8.i1($i621);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    $i623 := $i616;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i633 := $i623;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p634 := comedi_dev_from_minor(35);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p634);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i636 := $eq.i64($i635, 0);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i636} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i636 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p634, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i638 := $load.i8($M.0, $p637);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i639 := $trunc.i8.i1($i638);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    $i640 := $i633;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i650 := $i640;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $p651 := comedi_dev_from_minor(36);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i652 := $p2i.ref.i64($p651);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i653 := $eq.i64($i652, 0);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p651, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i655 := $load.i8($M.0, $p654);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i656 := $trunc.i8.i1($i655);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    $i657 := $i650;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i667 := $i657;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p668 := comedi_dev_from_minor(37);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i669 := $p2i.ref.i64($p668);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i670 := $eq.i64($i669, 0);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p668, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i672 := $load.i8($M.0, $p671);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i673 := $trunc.i8.i1($i672);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i673} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    $i674 := $i667;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i684 := $i674;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p685 := comedi_dev_from_minor(38);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i686 := $p2i.ref.i64($p685);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i687 := $eq.i64($i686, 0);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p685, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.0, $p688);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i690 := $trunc.i8.i1($i689);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    $i691 := $i684;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $i701 := $i691;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p702 := comedi_dev_from_minor(39);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p702);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i704 := $eq.i64($i703, 0);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p702, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i706 := $load.i8($M.0, $p705);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i707 := $trunc.i8.i1($i706);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    $i708 := $i701;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i718 := $i708;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p719 := comedi_dev_from_minor(40);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i720 := $p2i.ref.i64($p719);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i721 := $eq.i64($i720, 0);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p719, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i723 := $load.i8($M.0, $p722);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $i724 := $trunc.i8.i1($i723);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i724} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    $i725 := $i718;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i735 := $i725;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p736 := comedi_dev_from_minor(41);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i737 := $p2i.ref.i64($p736);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i738 := $eq.i64($i737, 0);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p736, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i740 := $load.i8($M.0, $p739);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i741 := $trunc.i8.i1($i740);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i741} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    $i742 := $i735;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i752 := $i742;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p753 := comedi_dev_from_minor(42);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i754 := $p2i.ref.i64($p753);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i755 := $eq.i64($i754, 0);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p753, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i757 := $load.i8($M.0, $p756);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i758 := $trunc.i8.i1($i757);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    $i759 := $i752;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i769 := $i759;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p770 := comedi_dev_from_minor(43);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i771 := $p2i.ref.i64($p770);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i772 := $eq.i64($i771, 0);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i772} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i772 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p770, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i774 := $load.i8($M.0, $p773);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i775 := $trunc.i8.i1($i774);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i775} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    $i776 := $i769;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i786 := $i776;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p787 := comedi_dev_from_minor(44);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i788 := $p2i.ref.i64($p787);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i789 := $eq.i64($i788, 0);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i789} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i789 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p787, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i791 := $load.i8($M.0, $p790);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i792 := $trunc.i8.i1($i791);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i792} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i792 == 1);
    assume {:verifier.code 0} true;
    $i793 := $i786;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i803 := $i793;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p804 := comedi_dev_from_minor(45);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i805 := $p2i.ref.i64($p804);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i806 := $eq.i64($i805, 0);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i806 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p804, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i808 := $load.i8($M.0, $p807);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i809 := $trunc.i8.i1($i808);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i809 == 1);
    assume {:verifier.code 0} true;
    $i810 := $i803;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i820 := $i810;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p821 := comedi_dev_from_minor(46);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i822 := $p2i.ref.i64($p821);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i823 := $eq.i64($i822, 0);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i823} true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i823 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p821, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i825 := $load.i8($M.0, $p824);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i826 := $trunc.i8.i1($i825);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    $i827 := $i820;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i837 := $i827;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p838 := comedi_dev_from_minor(47);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i839 := $p2i.ref.i64($p838);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i840 := $eq.i64($i839, 0);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p838, $mul.ref(0, 392)), $mul.ref(64, 1));
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i842 := $load.i8($M.0, $p841);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i843 := $trunc.i8.i1($i842);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i843} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i843 == 1);
    assume {:verifier.code 0} true;
    $i844 := $i837;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i21 := $i844;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i21, 0);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p23 := $M.34;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    goto $bb18;

  $bb18:
    call $p27, $p28, $p30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i43, $i44, $i45, $i33, $p46, $i47, $i48, $p49, $p50, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104 := comedi_read___0_loop_$bb18($p0, $p27, $p28, $p30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i43, $i44, $i45, $i33, $p46, $i47, $i48, $p49, $p50, $p52, $p53, $i54, $i55, $p26, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104);
    goto $bb18_last;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_102 := seq_printf.ref.ref.ref($p0, .str.108, $p28);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(0, $i31);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i55 == 1);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb31:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p53;
    goto $bb31_dummy;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_104 := seq_printf.ref.ref.ref($p0, .str.109, $p50);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb23;

  $bb23:
    call $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i43, $i44, $i45, $i33, vslice_dummy_var_103 := comedi_read___0_loop_$bb23($p0, $p30, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i43, $i44, $i45, $i33, $p26, vslice_dummy_var_103);
    goto $bb23_last;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i37, $i33);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p35, $mul.ref($i39, 8));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_103 := seq_printf.ref.ref.ref($p0, .str.109, $p41);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i33, 1);
    call {:si_unique_call 1526} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p30);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32($i43, $i44);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i43;
    goto $bb25_dummy;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} vslice_dummy_var_101 := seq_puts($p0, .str.107);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb405:
    assume $i843 == 1;
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($p838, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p846 := $load.ref($M.0, $p845);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p846, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.0, $p847);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p838, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.0, $p849);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p838, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i852 := $load.i32($M.0, $p851);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} vslice_dummy_var_151 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 47, $p848, $p850, $i852);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i844 := 1;
    goto $bb407;

  $bb402:
    assume $i840 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i21 := $i837;
    goto $bb408;

  $bb397:
    assume $i826 == 1;
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p821, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p829 := $load.ref($M.0, $p828);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p829, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.0, $p830);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p821, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p821, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i835 := $load.i32($M.0, $p834);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_150 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 46, $p831, $p833, $i835);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i827 := 1;
    goto $bb399;

  $bb394:
    assume $i823 == 1;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i837 := $i820;
    goto $bb400;

  $bb389:
    assume $i809 == 1;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p804, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.0, $p811);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p812, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p804, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $p816 := $load.ref($M.0, $p815);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p804, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i818 := $load.i32($M.0, $p817);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} vslice_dummy_var_149 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 45, $p814, $p816, $i818);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i810 := 1;
    goto $bb391;

  $bb386:
    assume $i806 == 1;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i820 := $i803;
    goto $bb392;

  $bb381:
    assume $i792 == 1;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p787, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p795 := $load.ref($M.0, $p794);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p795, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p787, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p799 := $load.ref($M.0, $p798);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($p787, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i801 := $load.i32($M.0, $p800);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_148 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 44, $p797, $p799, $i801);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i793 := 1;
    goto $bb383;

  $bb378:
    assume $i789 == 1;
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i803 := $i786;
    goto $bb384;

  $bb373:
    assume $i775 == 1;
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p770, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.0, $p777);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p778, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p780 := $load.ref($M.0, $p779);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p770, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p770, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i784 := $load.i32($M.0, $p783);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_147 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 43, $p780, $p782, $i784);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i776 := 1;
    goto $bb375;

  $bb370:
    assume $i772 == 1;
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i786 := $i769;
    goto $bb376;

  $bb365:
    assume $i758 == 1;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p753, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p761 := $load.ref($M.0, $p760);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p761, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p763 := $load.ref($M.0, $p762);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p753, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.0, $p764);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p753, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $i767 := $load.i32($M.0, $p766);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} vslice_dummy_var_146 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 42, $p763, $p765, $i767);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i759 := 1;
    goto $bb367;

  $bb362:
    assume $i755 == 1;
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i769 := $i752;
    goto $bb368;

  $bb357:
    assume $i741 == 1;
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p736, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $p744 := $load.ref($M.0, $p743);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p744, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.0, $p745);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p736, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p748 := $load.ref($M.0, $p747);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p736, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $i750 := $load.i32($M.0, $p749);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_145 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 41, $p746, $p748, $i750);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i742 := 1;
    goto $bb359;

  $bb354:
    assume $i738 == 1;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i752 := $i735;
    goto $bb360;

  $bb349:
    assume $i724 == 1;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p719, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p727 := $load.ref($M.0, $p726);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p727, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.0, $p728);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p719, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p731 := $load.ref($M.0, $p730);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p719, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.0, $p732);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} vslice_dummy_var_144 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 40, $p729, $p731, $i733);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i725 := 1;
    goto $bb351;

  $bb346:
    assume $i721 == 1;
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i735 := $i718;
    goto $bb352;

  $bb341:
    assume $i707 == 1;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p702, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p710, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.0, $p711);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p702, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.0, $p713);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p702, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i716 := $load.i32($M.0, $p715);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_143 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 39, $p712, $p714, $i716);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i708 := 1;
    goto $bb343;

  $bb338:
    assume $i704 == 1;
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i718 := $i701;
    goto $bb344;

  $bb333:
    assume $i690 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p685, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p693 := $load.ref($M.0, $p692);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p693, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p695 := $load.ref($M.0, $p694);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p685, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p685, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i699 := $load.i32($M.0, $p698);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} vslice_dummy_var_142 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 38, $p695, $p697, $i699);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i691 := 1;
    goto $bb335;

  $bb330:
    assume $i687 == 1;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i701 := $i684;
    goto $bb336;

  $bb325:
    assume $i673 == 1;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p668, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.0, $p675);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p676, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p668, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p668, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i682 := $load.i32($M.0, $p681);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} vslice_dummy_var_141 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 37, $p678, $p680, $i682);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i674 := 1;
    goto $bb327;

  $bb322:
    assume $i670 == 1;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i684 := $i667;
    goto $bb328;

  $bb317:
    assume $i656 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p651, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.0, $p658);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p659, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p651, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p663 := $load.ref($M.0, $p662);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p651, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i665 := $load.i32($M.0, $p664);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_140 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 36, $p661, $p663, $i665);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i657 := 1;
    goto $bb319;

  $bb314:
    assume $i653 == 1;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i667 := $i650;
    goto $bb320;

  $bb309:
    assume $i639 == 1;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p634, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.0, $p641);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p642, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p644 := $load.ref($M.0, $p643);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p634, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.0, $p645);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p634, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i648 := $load.i32($M.0, $p647);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_139 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 35, $p644, $p646, $i648);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i640 := 1;
    goto $bb311;

  $bb306:
    assume $i636 == 1;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i650 := $i633;
    goto $bb312;

  $bb301:
    assume $i622 == 1;
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p617, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.0, $p624);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p625, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p617, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.0, $p628);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p617, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i631 := $load.i32($M.0, $p630);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_138 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 34, $p627, $p629, $i631);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i623 := 1;
    goto $bb303;

  $bb298:
    assume $i619 == 1;
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i633 := $i616;
    goto $bb304;

  $bb293:
    assume $i605 == 1;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p600, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p608, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.0, $p609);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p600, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p600, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_137 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 33, $p610, $p612, $i614);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i606 := 1;
    goto $bb295;

  $bb290:
    assume $i602 == 1;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i616 := $i599;
    goto $bb296;

  $bb285:
    assume $i588 == 1;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p583, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $p591 := $load.ref($M.0, $p590);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p591, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.0, $p592);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p583, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.0, $p594);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p583, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i597 := $load.i32($M.0, $p596);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_136 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 32, $p593, $p595, $i597);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i589 := 1;
    goto $bb287;

  $bb282:
    assume $i585 == 1;
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i599 := $i582;
    goto $bb288;

  $bb277:
    assume $i571 == 1;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p566, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.0, $p573);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p574, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p576 := $load.ref($M.0, $p575);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p566, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.0, $p577);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p566, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i580 := $load.i32($M.0, $p579);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_135 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 31, $p576, $p578, $i580);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i572 := 1;
    goto $bb279;

  $bb274:
    assume $i568 == 1;
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i582 := $i565;
    goto $bb280;

  $bb269:
    assume $i554 == 1;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p549, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p557 := $load.ref($M.0, $p556);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p557, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p559 := $load.ref($M.0, $p558);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p549, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p549, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i563 := $load.i32($M.0, $p562);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_134 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 30, $p559, $p561, $i563);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i555 := 1;
    goto $bb271;

  $bb266:
    assume $i551 == 1;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i565 := $i548;
    goto $bb272;

  $bb261:
    assume $i537 == 1;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p532, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.0, $p539);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p540, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p532, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.0, $p543);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p532, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.0, $p545);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_133 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 29, $p542, $p544, $i546);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i538 := 1;
    goto $bb263;

  $bb258:
    assume $i534 == 1;
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i548 := $i531;
    goto $bb264;

  $bb253:
    assume $i520 == 1;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p515, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p523, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p525 := $load.ref($M.0, $p524);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p515, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p515, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.0, $p528);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_132 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 28, $p525, $p527, $i529);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i521 := 1;
    goto $bb255;

  $bb250:
    assume $i517 == 1;
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i531 := $i514;
    goto $bb256;

  $bb245:
    assume $i503 == 1;
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p498, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p506, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p507);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p498, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p498, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i512 := $load.i32($M.0, $p511);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_131 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 27, $p508, $p510, $i512);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i504 := 1;
    goto $bb247;

  $bb242:
    assume $i500 == 1;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i514 := $i497;
    goto $bb248;

  $bb237:
    assume $i486 == 1;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p481, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p489 := $load.ref($M.0, $p488);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p489, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p481, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p481, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.0, $p494);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_130 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 26, $p491, $p493, $i495);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i487 := 1;
    goto $bb239;

  $bb234:
    assume $i483 == 1;
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i497 := $i480;
    goto $bb240;

  $bb229:
    assume $i469 == 1;
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p464, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p472, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.0, $p473);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p464, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p464, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.0, $p477);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_129 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 25, $p474, $p476, $i478);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i470 := 1;
    goto $bb231;

  $bb226:
    assume $i466 == 1;
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i480 := $i463;
    goto $bb232;

  $bb221:
    assume $i452 == 1;
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p447, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.0, $p454);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p455, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p447, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p447, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.0, $p460);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_128 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 24, $p457, $p459, $i461);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i453 := 1;
    goto $bb223;

  $bb218:
    assume $i449 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i463 := $i446;
    goto $bb224;

  $bb213:
    assume $i435 == 1;
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p430, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p438, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p430, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p430, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.0, $p443);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_127 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 23, $p440, $p442, $i444);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i436 := 1;
    goto $bb215;

  $bb210:
    assume $i432 == 1;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i446 := $i429;
    goto $bb216;

  $bb205:
    assume $i418 == 1;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p413, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.0, $p420);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p413, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p425 := $load.ref($M.0, $p424);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p413, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i427 := $load.i32($M.0, $p426);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_126 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 22, $p423, $p425, $i427);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i419 := 1;
    goto $bb207;

  $bb202:
    assume $i415 == 1;
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i429 := $i412;
    goto $bb208;

  $bb197:
    assume $i401 == 1;
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p396, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p403);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p404, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p396, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p396, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p409);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_125 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 21, $p406, $p408, $i410);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i402 := 1;
    goto $bb199;

  $bb194:
    assume $i398 == 1;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i412 := $i395;
    goto $bb200;

  $bb189:
    assume $i384 == 1;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p379, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p387, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p379, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p379, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.0, $p392);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_124 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 20, $p389, $p391, $i393);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i385 := 1;
    goto $bb191;

  $bb186:
    assume $i381 == 1;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i395 := $i378;
    goto $bb192;

  $bb181:
    assume $i367 == 1;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p362, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p362, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $p373);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p362, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.0, $p375);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_123 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 19, $p372, $p374, $i376);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i368 := 1;
    goto $bb183;

  $bb178:
    assume $i364 == 1;
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i378 := $i361;
    goto $bb184;

  $bb173:
    assume $i350 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p345, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p353, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p345, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p345, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p358);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_122 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 18, $p355, $p357, $i359);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i351 := 1;
    goto $bb175;

  $bb170:
    assume $i347 == 1;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i361 := $i344;
    goto $bb176;

  $bb165:
    assume $i333 == 1;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p328, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.0, $p335);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p336, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p328, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p328, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.0, $p341);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_121 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 17, $p338, $p340, $i342);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i334 := 1;
    goto $bb167;

  $bb162:
    assume $i330 == 1;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i344 := $i327;
    goto $bb168;

  $bb157:
    assume $i316 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p311, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p319, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p311, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p311, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.0, $p324);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_120 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 16, $p321, $p323, $i325);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i317 := 1;
    goto $bb159;

  $bb154:
    assume $i313 == 1;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i327 := $i310;
    goto $bb160;

  $bb149:
    assume $i299 == 1;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p294, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p302, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p294, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p294, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_119 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 15, $p304, $p306, $i308);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i300 := 1;
    goto $bb151;

  $bb146:
    assume $i296 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i310 := $i293;
    goto $bb152;

  $bb141:
    assume $i282 == 1;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p277, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p285, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p277, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p277, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_118 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 14, $p287, $p289, $i291);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i283 := 1;
    goto $bb143;

  $bb138:
    assume $i279 == 1;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i293 := $i276;
    goto $bb144;

  $bb133:
    assume $i265 == 1;
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p260, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p268, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p260, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p260, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_117 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 13, $p270, $p272, $i274);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i266 := 1;
    goto $bb135;

  $bb130:
    assume $i262 == 1;
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i276 := $i259;
    goto $bb136;

  $bb125:
    assume $i248 == 1;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p243, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p243, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p243, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p256);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_116 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 12, $p253, $p255, $i257);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i249 := 1;
    goto $bb127;

  $bb122:
    assume $i245 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i259 := $i242;
    goto $bb128;

  $bb117:
    assume $i231 == 1;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p226, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p226, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p226, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_115 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 11, $p236, $p238, $i240);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i232 := 1;
    goto $bb119;

  $bb114:
    assume $i228 == 1;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i242 := $i225;
    goto $bb120;

  $bb109:
    assume $i214 == 1;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p209, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p209, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p209, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_114 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 10, $p219, $p221, $i223);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i215 := 1;
    goto $bb111;

  $bb106:
    assume $i211 == 1;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i225 := $i208;
    goto $bb112;

  $bb101:
    assume $i197 == 1;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p192, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p192, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p192, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_113 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 9, $p202, $p204, $i206);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i198 := 1;
    goto $bb103;

  $bb98:
    assume $i194 == 1;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i208 := $i191;
    goto $bb104;

  $bb93:
    assume $i180 == 1;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p175, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p175, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p175, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_112 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 8, $p185, $p187, $i189);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i181 := 1;
    goto $bb95;

  $bb90:
    assume $i177 == 1;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i191 := $i174;
    goto $bb96;

  $bb85:
    assume $i163 == 1;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p158, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p158, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p158, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_111 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 7, $p168, $p170, $i172);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i164 := 1;
    goto $bb87;

  $bb82:
    assume $i160 == 1;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i174 := $i157;
    goto $bb88;

  $bb77:
    assume $i146 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p141, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p141, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p141, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_110 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 6, $p151, $p153, $i155);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i147 := 1;
    goto $bb79;

  $bb74:
    assume $i143 == 1;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i157 := $i140;
    goto $bb80;

  $bb69:
    assume $i129 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p124, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p124, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p124, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_109 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 5, $p134, $p136, $i138);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i130 := 1;
    goto $bb71;

  $bb66:
    assume $i126 == 1;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i140 := $i123;
    goto $bb72;

  $bb61:
    assume $i112 == 1;
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p107, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p107, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p107, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_108 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 4, $p117, $p119, $i121);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i113 := 1;
    goto $bb63;

  $bb58:
    assume $i109 == 1;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i123 := $i106;
    goto $bb64;

  $bb53:
    assume $i95 == 1;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p90, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p90, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p90, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_107 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 3, $p100, $p102, $i104);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb55;

  $bb50:
    assume $i92 == 1;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i106 := $i89;
    goto $bb56;

  $bb45:
    assume $i78 == 1;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p73, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p73, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_106 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 2, $p83, $p85, $i87);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i79 := 1;
    goto $bb47;

  $bb42:
    assume $i75 == 1;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i89 := $i72;
    goto $bb48;

  $bb37:
    assume $i61 == 1;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p56, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p56, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_105 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 1, $p66, $p68, $i70);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i62 := 1;
    goto $bb39;

  $bb34:
    assume $i58 == 1;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i72 := $i6;
    goto $bb40;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(8, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(48, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 392)), $mul.ref(312, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_100 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.106, 0, $p13, $p15, $i17);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9039;

  $bb31_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9028;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 400029);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1622} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1623} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 401061);

procedure seq_printf.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1624} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1625} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 402093);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1628} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1629} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 403125);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1633} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $p4 := calloc(1, $i0);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} __VERIFIER_assume($i7);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const comedi_alloc_board_minor: ref;

axiom comedi_alloc_board_minor == $sub.ref(0, 404157);

procedure comedi_alloc_board_minor($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.20, $M.0, $M.22, $CurrAddr, $M.21, $M.32, assertsPassed, $M.33;



implementation comedi_alloc_board_minor($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i16: i32;
  var $i28: i32;
  var $i15: i32;
  var $i25: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p7: ref;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $p1 := kzalloc(392, 208);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} comedi_device_init($p2);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_152 := comedi_set_hw_dev($p2, $p0);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} mutex_lock_nested($p9, 0);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, 47);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $i15;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i25, 48);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i25);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p36 := $M.29;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i25, 102760448);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p38 := device_create.ref.ref.i32.ref.ref.i32($p36, $p0, $i37, $0.ref, .str.2, $i25);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i40 := IS_ERR($p39);
    call {:si_unique_call 1651} {:cexpr "tmp___2"} boogie_si_record_i64($i40);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(24, 1));
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p38);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} mutex_unlock($p30);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} comedi_device_cleanup($p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} kfree($p31);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} vslice_dummy_var_153 := printk.ref(.str.1);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $p33 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p7 := $p33;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb11;

  $bb11:
    call $i17, $p18, $p19, $i20, $i21, $i22, $i26, $i27, $i16, $i28 := comedi_alloc_board_minor_loop_$bb11($i17, $p18, $p19, $i20, $i21, $i22, $i26, $i27, $i16, $i28);
    goto $bb11_last;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i17, 8));
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.20, $p18);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i22 := $i16;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i16, 1);
    call {:si_unique_call 1643} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 47);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i15 := $i28;
    goto $bb10;

  $bb17:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb17_dummy;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i23, 8));
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p24, $p1);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i25 := $i22;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p5 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10300;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 405189);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const comedi_device_init: ref;

axiom comedi_device_init == $sub.ref(0, 406221);

procedure comedi_device_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation comedi_device_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_154: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(72, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} vslice_dummy_var_154 := spinlock_check($p3);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} __raw_spin_lock_init($p7, .str.22, $p1);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} __mutex_init($p8, .str.23, $p2);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    return;
}



const comedi_set_hw_dev: ref;

axiom comedi_set_hw_dev == $sub.ref(0, 407253);

procedure comedi_set_hw_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_set_hw_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p12 := get_device($p1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 17);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 408285);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p1 := external_alloc();
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 409317);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 410349);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vm_operations_struct_3: ref;

axiom ldv_initialize_vm_operations_struct_3 == $sub.ref(0, 411381);

procedure ldv_initialize_vm_operations_struct_3();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p0 := ldv_zalloc(184);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_2: ref;

axiom ldv_file_operations_2 == $sub.ref(0, 412413);

procedure ldv_file_operations_2();
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.0, $CurrAddr;



implementation ldv_file_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p0 := ldv_zalloc(1032);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p2 := ldv_zalloc(360);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.40 := $p2;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_5: ref;

axiom ldv_initialize_device_attribute_5 == $sub.ref(0, 413445);

procedure ldv_initialize_device_attribute_5();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $p0 := ldv_zalloc(1376);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $p2 := ldv_zalloc(48);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $M.42 := $p2;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_7: ref;

axiom ldv_initialize_device_attribute_7 == $sub.ref(0, 414477);

procedure ldv_initialize_device_attribute_7();
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p0 := ldv_zalloc(1376);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p2 := ldv_zalloc(48);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $M.44 := $p2;
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_4: ref;

axiom ldv_initialize_device_attribute_4 == $sub.ref(0, 415509);

procedure ldv_initialize_device_attribute_4();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $p0 := ldv_zalloc(1376);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p2 := ldv_zalloc(48);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $M.46 := $p2;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_6: ref;

axiom ldv_initialize_device_attribute_6 == $sub.ref(0, 416541);

procedure ldv_initialize_device_attribute_6();
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p0 := ldv_zalloc(1376);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p2 := ldv_zalloc(48);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $M.48 := $p2;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 417573);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.37, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.17, $M.14, $M.15, $M.58, $M.19, $M.59, $M.41, $M.42, $M.43, $M.44, $M.38, $M.45, $M.46, $M.47, $M.48, $M.36, $M.35, $M.39, $M.40, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.7, $M.34, $M.61, $M.60, $M.62, $M.22, $M.63, $M.29, $M.21, $M.20, $M.18, $M.128, $CurrAddr, $M.23, $M.32, $M.25, $M.26, assertsPassed, $M.33, $M.28, $M.27;



implementation main() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i1;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i64;
  var vslice_dummy_var_157: i64;
  var vslice_dummy_var_158: i64;
  var vslice_dummy_var_159: i64;
  var vslice_dummy_var_160: i64;
  var vslice_dummy_var_161: i64;
  var vslice_dummy_var_162: i64;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i64;
  var vslice_dummy_var_171: i64;
  var vslice_dummy_var_172: i64;
  var vslice_dummy_var_173: i64;
  var vslice_dummy_var_174: i64;
  var vslice_dummy_var_175: i64;

  $bb0:
    call {:si_unique_call 1671} $initialize();
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1672} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} $i0 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i0);
    call {:si_unique_call 1675} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p1 := ldv_zalloc(1);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p2 := ldv_zalloc(1);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1678} $i3 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1679} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i3);
    call {:si_unique_call 1680} {:cexpr "tmp___2"} boogie_si_record_i64($i3);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p4 := ldv_zalloc(1);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p5 := ldv_zalloc(1);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p6 := ldv_zalloc(1);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1685} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 1686} {:cexpr "tmp___6"} boogie_si_record_i32($i7);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} $i8 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1688} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i8);
    call {:si_unique_call 1689} {:cexpr "tmp___7"} boogie_si_record_i64($i8);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1691} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    call {:si_unique_call 1692} {:cexpr "tmp___8"} boogie_si_record_i32($i9);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1694} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1695} {:cexpr "tmp___9"} boogie_si_record_i32($i10);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 1698} {:cexpr "tmp___10"} boogie_si_record_i32($i11);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $p12 := ldv_zalloc(16);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p14 := ldv_zalloc(184);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1701} $i16 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1702} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i16);
    call {:si_unique_call 1703} {:cexpr "tmp___13"} boogie_si_record_i64($i16);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} $i17 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1705} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i17);
    call {:si_unique_call 1706} {:cexpr "tmp___14"} boogie_si_record_i64($i17);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1707} $i18 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1708} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i18);
    call {:si_unique_call 1709} {:cexpr "tmp___15"} boogie_si_record_i32($i18);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p19 := ldv_zalloc(8);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p21 := ldv_zalloc(1);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i22 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i22);
    call {:si_unique_call 1714} {:cexpr "tmp___18"} boogie_si_record_i64($i22);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1715} $i23 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1716} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i23);
    call {:si_unique_call 1717} {:cexpr "tmp___19"} boogie_si_record_i64($i23);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p24 := ldv_zalloc(8);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $p26 := ldv_zalloc(1);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p27 := ldv_zalloc(1);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1721} $i28 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1722} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i28);
    call {:si_unique_call 1723} {:cexpr "tmp___23"} boogie_si_record_i64($i28);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $p29 := ldv_zalloc(1);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} $i30 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i30);
    call {:si_unique_call 1727} {:cexpr "tmp___25"} boogie_si_record_i64($i30);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $p31 := ldv_zalloc(1);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} ldv_initialize();
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1736} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $p81, $i83, $i84, $p85, $p86, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i106, $i107, $p108, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i126, $i127, $p128, $i130, $i131, $p132, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p145, $i147, $i148, $p149, $i151, $i152, $p153, $p154, $i156, $i157, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $p177, $i179, $i180, $p181, $p182, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $p210, $i212, $i213, $p214, $p215, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175 := main_loop_$bb1($i0, $p1, $p2, $i3, $p4, $p5, $p6, $i7, $i8, $i9, $i10, $i11, $p13, $p15, $i16, $i17, $i18, $p20, $p21, $i22, $i23, $p25, $p26, $p27, $i28, $p29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p80, $p81, $i83, $i84, $p85, $p86, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i106, $i107, $p108, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i126, $i127, $p128, $i130, $i131, $p132, $i134, $i135, $p136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p145, $i147, $i148, $p149, $i151, $i152, $p153, $p154, $i156, $i157, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $p177, $i179, $i180, $p181, $p182, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $p210, $i212, $i213, $p214, $p215, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_stop();
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i201 := $M.57;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb211:
    assume $i202 == 1;
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1832} $i203 := __VERIFIER_nondet_int();
    call {:si_unique_call 1833} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i203);
    call {:si_unique_call 1834} {:cexpr "tmp___34"} boogie_si_record_i32($i203);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i203, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i203, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_stop();
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb216:
    assume $i205 == 1;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i212 := $M.57;
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb225:
    assume $i213 == 1;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $p214 := $M.41;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p215 := $M.42;
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_175 := max_write_buffer_kb_show($p214, $p215, $p31);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb214:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i203, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb218;

  $bb219:
    assume $i206 == 1;
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i207 := $M.57;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb221:
    assume $i208 == 1;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p209 := $M.41;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p210 := $M.42;
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} vslice_dummy_var_174 := max_write_buffer_kb_store($p209, $p210, $p29, $i30);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i184 := $M.56;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb181:
    assume $i185 == 1;
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1811} $i186 := __VERIFIER_nondet_int();
    call {:si_unique_call 1812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i186);
    call {:si_unique_call 1813} {:cexpr "tmp___33"} boogie_si_record_i32($i186);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_stop();
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb186:
    assume $i188 == 1;
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i194 := $M.56;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb199:
    assume $i195 == 1;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i196 := comedi_init();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $M.59 := $i196;
    call {:si_unique_call 1818} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i196);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i197 := $M.59;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i199 := $M.59;
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb204:
    assume $i200 == 1;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1821} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} ldv_initialize_device_attribute_5();
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} ldv_initialize_device_attribute_7();
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1825} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1827} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_initialize_device_attribute_4();
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1829} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} ldv_initialize_device_attribute_6();
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i198 == 1;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} ldv_check_final_state();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb184:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i186, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb188;

  $bb189:
    assume $i189 == 1;
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i190 := $M.56;
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb191:
    assume $i191 == 1;
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i192 := $M.55;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb193;

  $bb194:
    assume $i193 == 1;
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} comedi_cleanup();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb196;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i168 := $M.54;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb161:
    assume $i169 == 1;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1803} $i170 := __VERIFIER_nondet_int();
    call {:si_unique_call 1804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i170);
    call {:si_unique_call 1805} {:cexpr "tmp___32"} boogie_si_record_i32($i170);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i170, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i170, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} ldv_stop();
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb166:
    assume $i172 == 1;
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i179 := $M.54;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb175:
    assume $i180 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p181 := $M.45;
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $p182 := $M.46;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} vslice_dummy_var_173 := write_buffer_kb_show($p181, $p182, $p26);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb164:
    assume $i171 == 1;
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i170, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb168;

  $bb169:
    assume $i173 == 1;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i174 := $M.54;
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 1);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i175 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p176 := $M.45;
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p177 := $M.46;
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} vslice_dummy_var_172 := write_buffer_kb_store($p176, $p177, $p27, $i28);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i166 := $M.53;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb158:
    assume $i167 == 1;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} ldv_main_exported_1();
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb3:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i88 := $M.52;
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb83:
    assume $i89 == 1;
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1767} $i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 1768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i90);
    call {:si_unique_call 1769} {:cexpr "tmp___31"} boogie_si_record_i32($i90);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i90, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i90, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i90, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i90, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_stop();
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb94:
    assume $i95 == 1;
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i162 := $M.52;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 2);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb152:
    assume $i163 == 1;
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p164 := $M.40;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} vslice_dummy_var_171 := comedi_unlocked_ioctl($p164, $i9, $i17);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i94 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i158 := $M.52;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb149:
    assume $i159 == 1;
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p160 := $M.40;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} vslice_dummy_var_170 := noop_llseek($p160, $i16, $i11);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb90:
    assume $i93 == 1;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i151 := $M.52;
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb146:
    assume $i152 == 1;
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p153 := $M.39;
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p154 := $M.40;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_169 := comedi_close($p153, $p154);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i156 := $M.55;
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i157 := $sub.i32($i156, 1);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $M.55 := $i157;
    call {:si_unique_call 1796} {:cexpr "ref_cnt"} boogie_si_record_i32($i157);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i90, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i96 == 1);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i143 := $M.52;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i147 := $M.52;
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb143:
    assume $i148 == 1;
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p149 := $M.40;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_168 := comedi_mmap($p149, $p15);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i144 == 1;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p145 := $M.40;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_167 := comedi_mmap($p145, $p15);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb97:
    assume $i96 == 1;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i134 := $M.52;
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb134:
    assume $i135 == 1;
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p136 := $M.39;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p137 := $M.40;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i138 := comedi_open($p136, $p137);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $M.58 := $i138;
    call {:si_unique_call 1787} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i138);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i139 := $M.58;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i140 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i141 := $M.55;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i141, 1);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $M.55 := $i142;
    call {:si_unique_call 1789} {:cexpr "ref_cnt"} boogie_si_record_i32($i142);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i90, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i90, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i99 == 1);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i126 := $M.52;
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i130 := $M.52;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 2);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb131:
    assume $i131 == 1;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p132 := $M.40;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_166 := comedi_fasync($i7, $p132, $i10);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i127 == 1;
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p128 := $M.40;
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_165 := comedi_fasync($i7, $p128, $i10);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb103:
    assume $i99 == 1;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i118 := $M.52;
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i122 := $M.52;
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i123 == 1;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p124 := $M.40;
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_164 := comedi_poll($p124, $p13);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i119 == 1;
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p120 := $M.40;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_163 := comedi_poll($p120, $p13);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb101:
    assume $i98 == 1;
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i114 := $M.52;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 2);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb119:
    assume $i115 == 1;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p116 := $M.40;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_162 := comedi_compat_ioctl($p116, $i18, $i22);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i90, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i100 == 1);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i110 := $M.52;
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i111 == 1;
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p112 := $M.40;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_161 := comedi_read($p112, $p6, $i23, $p20);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb105:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb96;

  $bb107:
    assume $i101 == 1;
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i102 := $M.52;
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i106 := $M.52;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 2);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i107 == 1;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p108 := $M.40;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} vslice_dummy_var_160 := comedi_write($p108, $p21, $i8, $p25);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i103 == 1;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p104 := $M.40;
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_159 := comedi_write($p104, $p21, $i8, $p25);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i72 := $M.51;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb63:
    assume $i73 == 1;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 1761} {:cexpr "tmp___30"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_stop();
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb68:
    assume $i76 == 1;
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i83 := $M.51;
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb77:
    assume $i84 == 1;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p85 := $M.43;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p86 := $M.44;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_158 := max_read_buffer_kb_show($p85, $p86, $p4);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb66:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb70;

  $bb71:
    assume $i77 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i78 := $M.51;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i79 == 1;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p80 := $M.43;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p81 := $M.44;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_157 := max_read_buffer_kb_store($p80, $p81, $p5, $i3);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb14:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i58 := $M.50;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb43:
    assume $i59 == 1;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 1751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 1752} {:cexpr "tmp___29"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb48:
    assume $i62 == 1;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i67 := $M.50;
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume $i68 == 1;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $p69 := $M.38;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} comedi_vm_open($p69);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1756} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $i70 := $M.55;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $M.55 := $i71;
    call {:si_unique_call 1757} {:cexpr "ref_cnt"} boogie_si_record_i32($i71);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb46:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb50;

  $bb51:
    assume $i63 == 1;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i64 := $M.50;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i65 == 1;
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $p66 := $M.38;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} comedi_vm_close($p66);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb18:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i42 := $M.49;
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1742} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1743} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 1744} {:cexpr "tmp___28"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_stop();
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i53 := $M.49;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $p55 := $M.47;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p56 := $M.48;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_156 := read_buffer_kb_show($p55, $p56, $p1);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb29;

  $bb30:
    assume $i47 == 1;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i48 := $M.49;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i49 == 1;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p50 := $M.47;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p51 := $M.48;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} vslice_dummy_var_155 := read_buffer_kb_store($p50, $p51, $p2, $i0);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb42_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1739} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 1740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 1741} {:cexpr "tmp___27"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 418605);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const __VERIFIER_nondet_loff_t: ref;

axiom __VERIFIER_nondet_loff_t == $sub.ref(0, 419637);

procedure __VERIFIER_nondet_loff_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 420669);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 421701);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 422733);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.53, $M.62, $M.55, $M.0, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var vslice_dummy_var_176: i64;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1841} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1843} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1844} $i1 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1845} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i1);
    call {:si_unique_call 1846} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1847} $i2 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1848} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i2);
    call {:si_unique_call 1849} {:cexpr "tmp___1"} boogie_si_record_i64($i2);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $p3 := ldv_zalloc(1);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $p4 := ldv_zalloc(8);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1852} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 1854} {:cexpr "tmp___4"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} ldv_stop();
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i32 := $M.53;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume $i33 == 1;
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $p34 := $M.60;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} vslice_dummy_var_178 := seq_lseek($p34, $i1, $i0);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i25 := $M.53;
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $p27 := $M.61;
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p28 := $M.60;
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} vslice_dummy_var_177 := single_release($p27, $p28);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1862} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i30 := $M.55;
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.55 := $i31;
    call {:si_unique_call 1863} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i16 := $M.53;
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p18 := $M.61;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $p19 := $M.60;
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i20 := comedi_proc_open($p18, $p19);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $M.62 := $i20;
    call {:si_unique_call 1858} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i20);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i21 := $M.62;
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i22 == 1;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i23 := $M.55;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.55 := $i24;
    call {:si_unique_call 1860} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i12 := $M.53;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $p14 := $M.60;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} vslice_dummy_var_176 := seq_read($p14, $p3, $i2, $p5);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1856} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const comedi_cleanup: ref;

axiom comedi_cleanup == $sub.ref(0, 423765);

procedure comedi_cleanup();
  free requires assertsPassed;
  modifies $M.52, $M.20, $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_cleanup()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i32;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i32;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i158: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $i165: i32;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $i172: i32;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $i179: i32;
  var $i180: i64;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i32;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $i200: i32;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $i207: i32;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $i214: i32;
  var $i215: i64;
  var $i216: i64;
  var $i217: i1;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $i221: i32;
  var $i222: i64;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $i228: i32;
  var $i229: i64;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $i235: i32;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $i242: i32;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $i247: i64;
  var $i248: i1;
  var $i249: i32;
  var $i250: i64;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $i254: i64;
  var $i255: i1;
  var $i256: i32;
  var $i257: i64;
  var $i258: i64;
  var $i259: i1;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $i263: i32;
  var $i264: i64;
  var $i265: i64;
  var $i266: i1;
  var $p267: ref;
  var $i268: i64;
  var $i269: i1;
  var $i270: i32;
  var $i271: i64;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $i275: i64;
  var $i276: i1;
  var $i277: i32;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $i284: i32;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $i289: i64;
  var $i290: i1;
  var $i291: i32;
  var $i292: i64;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $i305: i32;
  var $i306: i64;
  var $i307: i64;
  var $i308: i1;
  var $p309: ref;
  var $i310: i64;
  var $i311: i1;
  var $i312: i32;
  var $i313: i64;
  var $i314: i64;
  var $i315: i1;
  var $p316: ref;
  var $i317: i64;
  var $i318: i1;
  var $i319: i32;
  var $i320: i64;
  var $i321: i64;
  var $i322: i1;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $i326: i32;
  var $i327: i64;
  var $i328: i64;
  var $i329: i1;
  var $p330: ref;
  var $i331: i64;
  var $i332: i1;
  var $i333: i32;
  var $i334: i64;
  var $i335: i64;
  var $i336: i1;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $i340: i32;
  var $i341: i64;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $i347: i32;
  var $i348: i64;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $i352: i64;
  var $i353: i1;
  var $i354: i32;
  var $i355: i64;
  var $i356: i64;
  var $i357: i1;
  var $p358: ref;
  var $i359: i64;
  var $i360: i1;
  var $i361: i32;
  var $i362: i64;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $i366: i64;
  var $i367: i1;
  var $i368: i32;
  var $i369: i64;
  var $i370: i64;
  var $i371: i1;
  var $p372: ref;
  var $i373: i64;
  var $i374: i1;
  var $i375: i32;
  var $i376: i64;
  var $i377: i64;
  var $i378: i1;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $i382: i32;
  var $i383: i64;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $i389: i32;
  var $i390: i64;
  var $i391: i64;
  var $i392: i1;
  var $p393: ref;
  var $i394: i64;
  var $i395: i1;
  var $i396: i32;
  var $i397: i64;
  var $i398: i64;
  var $i399: i1;
  var $p400: ref;
  var $i401: i64;
  var $i402: i1;
  var $i403: i32;
  var $i404: i64;
  var $i405: i64;
  var $i406: i1;
  var $p407: ref;
  var $i408: i64;
  var $i409: i1;
  var $i410: i32;
  var $i411: i64;
  var $i412: i64;
  var $i413: i1;
  var $p414: ref;
  var $i415: i64;
  var $i416: i1;
  var $i417: i32;
  var $i418: i64;
  var $i419: i64;
  var $i420: i1;
  var $p421: ref;
  var $i422: i64;
  var $i423: i1;
  var $i424: i32;
  var $i425: i64;
  var $i426: i64;
  var $i427: i1;
  var $p428: ref;
  var $i429: i64;
  var $i430: i1;
  var $i431: i32;
  var $i432: i64;
  var $i433: i64;
  var $i434: i1;
  var $p435: ref;
  var $i436: i64;
  var $i437: i1;
  var $i438: i32;
  var $i439: i64;
  var $i440: i64;
  var $i441: i1;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $i445: i32;
  var $i446: i64;
  var $i447: i64;
  var $i448: i1;
  var $p449: ref;
  var $i450: i64;
  var $i451: i1;
  var $i452: i32;
  var $i453: i64;
  var $i454: i64;
  var $i455: i1;
  var $p456: ref;
  var $i457: i64;
  var $i458: i1;
  var $i459: i32;
  var $i460: i64;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $i464: i64;
  var $i465: i1;
  var $i466: i32;
  var $i467: i64;
  var $i468: i64;
  var $i469: i1;
  var $p470: ref;
  var $i471: i64;
  var $i472: i1;
  var $i473: i32;
  var $i474: i64;
  var $i475: i64;
  var $i476: i1;
  var $p477: ref;
  var $i478: i64;
  var $i479: i1;
  var $i480: i32;
  var $i481: i64;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $i485: i64;
  var $i486: i1;
  var $i487: i32;
  var $i488: i64;
  var $i489: i64;
  var $i490: i1;
  var $p491: ref;
  var $i492: i64;
  var $i493: i1;
  var $i494: i32;
  var $i495: i64;
  var $i496: i64;
  var $i497: i1;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $i501: i32;
  var $i502: i64;
  var $i503: i64;
  var $i504: i1;
  var $p505: ref;
  var $i506: i64;
  var $i507: i1;
  var $i508: i32;
  var $i509: i64;
  var $i510: i64;
  var $i511: i1;
  var $p512: ref;
  var $i513: i64;
  var $i514: i1;
  var $i515: i32;
  var $i516: i64;
  var $i517: i64;
  var $i518: i1;
  var $p519: ref;
  var $i520: i64;
  var $i521: i1;
  var $i522: i32;
  var $i523: i64;
  var $i524: i64;
  var $i525: i1;
  var $p526: ref;
  var $i527: i64;
  var $i528: i1;
  var $i529: i32;
  var $i530: i64;
  var $i531: i64;
  var $i532: i1;
  var $p533: ref;
  var $i534: i64;
  var $i535: i1;
  var $i536: i32;
  var $i537: i64;
  var $i538: i64;
  var $i539: i1;
  var $p540: ref;
  var $i541: i64;
  var $i542: i1;
  var $i543: i32;
  var $i544: i64;
  var $i545: i64;
  var $i546: i1;
  var $p547: ref;
  var $i548: i64;
  var $i549: i1;
  var $i550: i32;
  var $i551: i64;
  var $i552: i64;
  var $i553: i1;
  var $p554: ref;
  var $i555: i64;
  var $i556: i1;
  var $i557: i32;
  var $i558: i64;
  var $i559: i64;
  var $i560: i1;
  var $p561: ref;
  var $i562: i64;
  var $i563: i1;
  var $i564: i32;
  var $i565: i64;
  var $i566: i64;
  var $i567: i1;
  var $p568: ref;
  var $i569: i64;
  var $i570: i1;
  var $i571: i32;
  var $i572: i64;
  var $i573: i64;
  var $i574: i1;
  var $p575: ref;
  var $i576: i64;
  var $i577: i1;
  var $i578: i32;
  var $i579: i64;
  var $i580: i64;
  var $i581: i1;
  var $p582: ref;
  var $i583: i64;
  var $i584: i1;
  var $i585: i32;
  var $i586: i64;
  var $i587: i64;
  var $i588: i1;
  var $p589: ref;
  var $i590: i64;
  var $i591: i1;
  var $i592: i32;
  var $i593: i64;
  var $i594: i64;
  var $i595: i1;
  var $p596: ref;
  var $i597: i64;
  var $i598: i1;
  var $i599: i32;
  var $i600: i64;
  var $i601: i64;
  var $i602: i1;
  var $p603: ref;
  var $i604: i64;
  var $i605: i1;
  var $i606: i32;
  var $i607: i64;
  var $i608: i64;
  var $i609: i1;
  var $p610: ref;
  var $i611: i64;
  var $i612: i1;
  var $i613: i32;
  var $i614: i64;
  var $i615: i64;
  var $i616: i1;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $i620: i32;
  var $i621: i64;
  var $i622: i64;
  var $i623: i1;
  var $p624: ref;
  var $i625: i64;
  var $i626: i1;
  var $i627: i32;
  var $i628: i64;
  var $i629: i64;
  var $i630: i1;
  var $p631: ref;
  var $i632: i64;
  var $i633: i1;
  var $i634: i32;
  var $i635: i64;
  var $i636: i64;
  var $i637: i1;
  var $p638: ref;
  var $i639: i64;
  var $i640: i1;
  var $i641: i32;
  var $i642: i64;
  var $i643: i64;
  var $i644: i1;
  var $p645: ref;
  var $i646: i64;
  var $i647: i1;
  var $i648: i32;
  var $i649: i64;
  var $i650: i64;
  var $i651: i1;
  var $p652: ref;
  var $i653: i64;
  var $i654: i1;
  var $i655: i32;
  var $i656: i64;
  var $i657: i64;
  var $i658: i1;
  var $p659: ref;
  var $i660: i64;
  var $i661: i1;
  var $i662: i32;
  var $i663: i64;
  var $i664: i64;
  var $i665: i1;
  var $p666: ref;
  var $i667: i64;
  var $i668: i1;
  var $i669: i32;
  var $i670: i64;
  var $i671: i64;
  var $i672: i1;
  var $p673: ref;
  var $i674: i64;
  var $i675: i1;
  var $i676: i32;
  var $i677: i64;
  var $i678: i64;
  var $i679: i1;
  var $p680: ref;
  var $i681: i64;
  var $i682: i1;
  var $i683: i32;
  var $i684: i64;
  var $i685: i64;
  var $i686: i1;
  var $p687: ref;
  var $i688: i64;
  var $i689: i1;
  var $i690: i32;
  var $i691: i64;
  var $i692: i64;
  var $i693: i1;
  var $p694: ref;
  var $i695: i64;
  var $i696: i1;
  var $i697: i32;
  var $i698: i64;
  var $i699: i64;
  var $i700: i1;
  var $p701: ref;
  var $i702: i64;
  var $i703: i1;
  var $i704: i32;
  var $i705: i64;
  var $i706: i64;
  var $i707: i1;
  var $p708: ref;
  var $i709: i64;
  var $i710: i1;
  var $i711: i32;
  var $i712: i64;
  var $i713: i64;
  var $i714: i1;
  var $p715: ref;
  var $i716: i64;
  var $i717: i1;
  var $i718: i32;
  var $i719: i64;
  var $i720: i64;
  var $i721: i1;
  var $p722: ref;
  var $i723: i64;
  var $i724: i1;
  var $i725: i32;
  var $i726: i64;
  var $i727: i64;
  var $i728: i1;
  var $p729: ref;
  var $i730: i64;
  var $i731: i1;
  var $i732: i32;
  var $i733: i64;
  var $i734: i64;
  var $i735: i1;
  var $p736: ref;
  var $i737: i64;
  var $i738: i1;
  var $i739: i32;
  var $i740: i64;
  var $i741: i64;
  var $i742: i1;
  var $p743: ref;
  var $i744: i64;
  var $i745: i1;
  var $i746: i32;
  var $i747: i64;
  var $i748: i64;
  var $i749: i1;
  var $p750: ref;
  var $i751: i64;
  var $i752: i1;
  var $i753: i32;
  var $i754: i64;
  var $i755: i64;
  var $i756: i1;
  var $p757: ref;
  var $i758: i64;
  var $i759: i1;
  var $i760: i32;
  var $i761: i64;
  var $i762: i64;
  var $i763: i1;
  var $p764: ref;
  var $i765: i64;
  var $i766: i1;
  var $i767: i32;
  var $i768: i64;
  var $i769: i64;
  var $i770: i1;
  var $p771: ref;
  var $i772: i64;
  var $i773: i1;
  var $i774: i32;
  var $i775: i64;
  var $i776: i64;
  var $i777: i1;
  var $p778: ref;
  var $i779: i64;
  var $i780: i1;
  var $i781: i32;
  var $i782: i64;
  var $i783: i64;
  var $i784: i1;
  var $p785: ref;
  var $i786: i64;
  var $i787: i1;
  var $i788: i32;
  var $i789: i64;
  var $i790: i64;
  var $i791: i1;
  var $p792: ref;
  var $i793: i64;
  var $i794: i1;
  var $i795: i32;
  var $i796: i64;
  var $i797: i64;
  var $i798: i1;
  var $p799: ref;
  var $i800: i64;
  var $i801: i1;
  var $i802: i32;
  var $i803: i64;
  var $i804: i64;
  var $i805: i1;
  var $p806: ref;
  var $i807: i64;
  var $i808: i1;
  var $i809: i32;
  var $i810: i64;
  var $i811: i64;
  var $i812: i1;
  var $p813: ref;
  var $i814: i64;
  var $i815: i1;
  var $i816: i32;
  var $i817: i64;
  var $i818: i64;
  var $i819: i1;
  var $p820: ref;
  var $i821: i64;
  var $i822: i1;
  var $i823: i32;
  var $i824: i64;
  var $i825: i64;
  var $i826: i1;
  var $p827: ref;
  var $i828: i64;
  var $i829: i1;
  var $i830: i32;
  var $i831: i64;
  var $i832: i64;
  var $i833: i1;
  var $p834: ref;
  var $i835: i64;
  var $i836: i1;
  var $i837: i32;
  var $i838: i64;
  var $i839: i64;
  var $i840: i1;
  var $p841: ref;
  var $i842: i64;
  var $i843: i1;
  var $i844: i32;
  var $i845: i64;
  var $i846: i64;
  var $i847: i1;
  var $p848: ref;
  var $i849: i64;
  var $i850: i1;
  var $i851: i32;
  var $i852: i64;
  var $i853: i64;
  var $i854: i1;
  var $p855: ref;
  var $i856: i64;
  var $i857: i1;
  var $i858: i32;
  var $i859: i64;
  var $i860: i64;
  var $i861: i1;
  var $p862: ref;
  var $i863: i64;
  var $i864: i1;
  var $i865: i32;
  var $i866: i64;
  var $i867: i64;
  var $i868: i1;
  var $p869: ref;
  var $i870: i64;
  var $i871: i1;
  var $i872: i32;
  var $i873: i64;
  var $i874: i64;
  var $i875: i1;
  var $p876: ref;
  var $i877: i64;
  var $i878: i1;
  var $i879: i32;
  var $i880: i64;
  var $i881: i64;
  var $i882: i1;
  var $p883: ref;
  var $i884: i64;
  var $i885: i1;
  var $i886: i32;
  var $i887: i64;
  var $i888: i64;
  var $i889: i1;
  var $p890: ref;
  var $i891: i64;
  var $i892: i1;
  var $i893: i32;
  var $i894: i64;
  var $i895: i64;
  var $i896: i1;
  var $p897: ref;
  var $i898: i64;
  var $i899: i1;
  var $i900: i32;
  var $i901: i64;
  var $i902: i64;
  var $i903: i1;
  var $p904: ref;
  var $i905: i64;
  var $i906: i1;
  var $i907: i32;
  var $i908: i64;
  var $i909: i64;
  var $i910: i1;
  var $p911: ref;
  var $i912: i64;
  var $i913: i1;
  var $i914: i32;
  var $i915: i64;
  var $i916: i64;
  var $i917: i1;
  var $p918: ref;
  var $i919: i64;
  var $i920: i1;
  var $i921: i32;
  var $i922: i64;
  var $i923: i64;
  var $i924: i1;
  var $p925: ref;
  var $i926: i64;
  var $i927: i1;
  var $i928: i32;
  var $i929: i64;
  var $i930: i64;
  var $i931: i1;
  var $p932: ref;
  var $i933: i64;
  var $i934: i1;
  var $i935: i32;
  var $i936: i64;
  var $i937: i64;
  var $i938: i1;
  var $p939: ref;
  var $i940: i64;
  var $i941: i1;
  var $i942: i32;
  var $i943: i64;
  var $i944: i64;
  var $i945: i1;
  var $p946: ref;
  var $i947: i64;
  var $i948: i1;
  var $i949: i32;
  var $i950: i64;
  var $i951: i64;
  var $i952: i1;
  var $p953: ref;
  var $i954: i64;
  var $i955: i1;
  var $i956: i32;
  var $i957: i64;
  var $i958: i64;
  var $i959: i1;
  var $p960: ref;
  var $i961: i64;
  var $i962: i1;
  var $i963: i32;
  var $i964: i64;
  var $i965: i64;
  var $i966: i1;
  var $p967: ref;
  var $i968: i64;
  var $i969: i1;
  var $i970: i32;
  var $i971: i64;
  var $i972: i64;
  var $i973: i1;
  var $p974: ref;
  var $i975: i64;
  var $i976: i1;
  var $i977: i32;
  var $i978: i64;
  var $i979: i64;
  var $i980: i1;
  var $p981: ref;
  var $i982: i64;
  var $i983: i1;
  var $i984: i32;
  var $i985: i64;
  var $i986: i64;
  var $i987: i1;
  var $p988: ref;
  var $i989: i64;
  var $i990: i1;
  var $i991: i32;
  var $i992: i64;
  var $i993: i64;
  var $i994: i1;
  var $p995: ref;
  var $i996: i64;
  var $i997: i1;
  var $i998: i32;
  var $i999: i64;
  var $i1000: i64;
  var $i1001: i1;
  var $p1002: ref;
  var $i1003: i64;
  var $i1004: i1;
  var $i1005: i32;
  var $i1006: i64;
  var $i1007: i64;
  var $i1008: i1;
  var $p1009: ref;
  var $i1010: i64;
  var $i1011: i1;
  var $i1012: i32;
  var $i1013: i64;
  var $i1014: i64;
  var $i1015: i1;
  var $p1016: ref;
  var $i1017: i64;
  var $i1018: i1;
  var $i1019: i32;
  var $i1020: i64;
  var $i1021: i64;
  var $i1022: i1;
  var $p1023: ref;
  var $i1024: i64;
  var $i1025: i1;
  var $i1026: i32;
  var $i1027: i64;
  var $i1028: i64;
  var $i1029: i1;
  var $p1030: ref;
  var $i1031: i64;
  var $i1032: i1;
  var $i1033: i32;
  var $i1034: i64;
  var $i1035: i64;
  var $i1036: i1;
  var $p1037: ref;
  var $i1038: i64;
  var $i1039: i1;
  var $i1040: i32;
  var $i1041: i64;
  var $i1042: i64;
  var $i1043: i1;
  var $p1044: ref;
  var $i1045: i64;
  var $i1046: i1;
  var $i1047: i32;
  var $i1048: i64;
  var $i1049: i64;
  var $i1050: i1;
  var $p1051: ref;
  var $i1052: i64;
  var $i1053: i1;
  var $i1054: i32;
  var $i1055: i64;
  var $i1056: i64;
  var $i1057: i1;
  var $p1058: ref;
  var $i1059: i64;
  var $i1060: i1;
  var $i1061: i32;
  var $i1062: i64;
  var $i1063: i64;
  var $i1064: i1;
  var $p1065: ref;
  var $i1066: i64;
  var $i1067: i1;
  var $i1068: i32;
  var $i1069: i64;
  var $i1070: i64;
  var $i1071: i1;
  var $p1072: ref;
  var $i1073: i64;
  var $i1074: i1;
  var $i1075: i32;
  var $i1076: i64;
  var $i1077: i64;
  var $i1078: i1;
  var $p1079: ref;
  var $i1080: i64;
  var $i1081: i1;
  var $i1082: i32;
  var $i1083: i64;
  var $i1084: i64;
  var $i1085: i1;
  var $p1086: ref;
  var $i1087: i64;
  var $i1088: i1;
  var $i1089: i32;
  var $i1090: i64;
  var $i1091: i64;
  var $i1092: i1;
  var $p1093: ref;
  var $i1094: i64;
  var $i1095: i1;
  var $i1096: i32;
  var $i1097: i64;
  var $i1098: i64;
  var $i1099: i1;
  var $p1100: ref;
  var $i1101: i64;
  var $i1102: i1;
  var $i1103: i32;
  var $i1104: i64;
  var $i1105: i64;
  var $i1106: i1;
  var $p1107: ref;
  var $i1108: i64;
  var $i1109: i1;
  var $i1110: i32;
  var $i1111: i64;
  var $i1112: i64;
  var $i1113: i1;
  var $p1114: ref;
  var $i1115: i64;
  var $i1116: i1;
  var $i1117: i32;
  var $i1118: i64;
  var $i1119: i64;
  var $i1120: i1;
  var $p1121: ref;
  var $i1122: i64;
  var $i1123: i1;
  var $i1124: i32;
  var $i1125: i64;
  var $i1126: i64;
  var $i1127: i1;
  var $p1128: ref;
  var $i1129: i64;
  var $i1130: i1;
  var $i1131: i32;
  var $i1132: i64;
  var $i1133: i64;
  var $i1134: i1;
  var $p1135: ref;
  var $i1136: i64;
  var $i1137: i1;
  var $i1138: i32;
  var $i1139: i64;
  var $i1140: i64;
  var $i1141: i1;
  var $p1142: ref;
  var $i1143: i64;
  var $i1144: i1;
  var $i1145: i32;
  var $i1146: i64;
  var $i1147: i64;
  var $i1148: i1;
  var $p1149: ref;
  var $i1150: i64;
  var $i1151: i1;
  var $i1152: i32;
  var $i1153: i64;
  var $i1154: i64;
  var $i1155: i1;
  var $p1156: ref;
  var $i1157: i64;
  var $i1158: i1;
  var $i1159: i32;
  var $i1160: i64;
  var $i1161: i64;
  var $i1162: i1;
  var $p1163: ref;
  var $i1164: i64;
  var $i1165: i1;
  var $i1166: i32;
  var $i1167: i64;
  var $i1168: i64;
  var $i1169: i1;
  var $p1170: ref;
  var $i1171: i64;
  var $i1172: i1;
  var $i1173: i32;
  var $i1174: i64;
  var $i1175: i64;
  var $i1176: i1;
  var $p1177: ref;
  var $i1178: i64;
  var $i1179: i1;
  var $i1180: i32;
  var $i1181: i64;
  var $i1182: i64;
  var $i1183: i1;
  var $p1184: ref;
  var $i1185: i64;
  var $i1186: i1;
  var $i1187: i32;
  var $i1188: i64;
  var $i1189: i64;
  var $i1190: i1;
  var $p1191: ref;
  var $i1192: i64;
  var $i1193: i1;
  var $i1194: i32;
  var $i1195: i64;
  var $i1196: i64;
  var $i1197: i1;
  var $p1198: ref;
  var $i1199: i64;
  var $i1200: i1;
  var $i1201: i32;
  var $i1202: i64;
  var $i1203: i64;
  var $i1204: i1;
  var $p1205: ref;
  var $i1206: i64;
  var $i1207: i1;
  var $i1208: i32;
  var $i1209: i64;
  var $i1210: i64;
  var $i1211: i1;
  var $p1212: ref;
  var $i1213: i64;
  var $i1214: i1;
  var $i1215: i32;
  var $i1216: i64;
  var $i1217: i64;
  var $i1218: i1;
  var $p1219: ref;
  var $i1220: i64;
  var $i1221: i1;
  var $i1222: i32;
  var $i1223: i64;
  var $i1224: i64;
  var $i1225: i1;
  var $p1226: ref;
  var $i1227: i64;
  var $i1228: i1;
  var $i1229: i32;
  var $i1230: i64;
  var $i1231: i64;
  var $i1232: i1;
  var $p1233: ref;
  var $i1234: i64;
  var $i1235: i1;
  var $i1236: i32;
  var $i1237: i64;
  var $i1238: i64;
  var $i1239: i1;
  var $p1240: ref;
  var $i1241: i64;
  var $i1242: i1;
  var $i1243: i32;
  var $i1244: i64;
  var $i1245: i64;
  var $i1246: i1;
  var $p1247: ref;
  var $i1248: i64;
  var $i1249: i1;
  var $i1250: i32;
  var $i1251: i64;
  var $i1252: i64;
  var $i1253: i1;
  var $p1254: ref;
  var $i1255: i64;
  var $i1256: i1;
  var $i1257: i32;
  var $i1258: i64;
  var $i1259: i64;
  var $i1260: i1;
  var $p1261: ref;
  var $i1262: i64;
  var $i1263: i1;
  var $i1264: i32;
  var $i1265: i64;
  var $i1266: i64;
  var $i1267: i1;
  var $p1268: ref;
  var $i1269: i64;
  var $i1270: i1;
  var $i1271: i32;
  var $i1272: i64;
  var $i1273: i64;
  var $i1274: i1;
  var $p1275: ref;
  var $i1276: i64;
  var $i1277: i1;
  var $i1278: i32;
  var $i1279: i64;
  var $i1280: i64;
  var $i1281: i1;
  var $p1282: ref;
  var $i1283: i64;
  var $i1284: i1;
  var $i1285: i32;
  var $i1286: i64;
  var $i1287: i64;
  var $i1288: i1;
  var $p1289: ref;
  var $i1290: i64;
  var $i1291: i1;
  var $i1292: i32;
  var $i1293: i64;
  var $i1294: i64;
  var $i1295: i1;
  var $p1296: ref;
  var $i1297: i64;
  var $i1298: i1;
  var $i1299: i32;
  var $i1300: i64;
  var $i1301: i64;
  var $i1302: i1;
  var $p1303: ref;
  var $i1304: i64;
  var $i1305: i1;
  var $i1306: i32;
  var $i1307: i64;
  var $i1308: i64;
  var $i1309: i1;
  var $p1310: ref;
  var $i1311: i64;
  var $i1312: i1;
  var $i1313: i32;
  var $i1314: i64;
  var $i1315: i64;
  var $i1316: i1;
  var $p1317: ref;
  var $i1318: i64;
  var $i1319: i1;
  var $i1320: i32;
  var $i1321: i64;
  var $i1322: i64;
  var $i1323: i1;
  var $p1324: ref;
  var $i1325: i64;
  var $i1326: i1;
  var $i1327: i32;
  var $i1328: i64;
  var $i1329: i64;
  var $i1330: i1;
  var $p1331: ref;
  var $i1332: i64;
  var $i1333: i1;
  var $i1334: i32;
  var $i1335: i64;
  var $i1336: i64;
  var $i1337: i1;
  var $p1338: ref;
  var $i1339: i64;
  var $i1340: i1;
  var $i1341: i32;
  var $i1342: i64;
  var $i1343: i64;
  var $i1344: i1;
  var $p1345: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $i1348: i32;
  var $i1349: i64;
  var $i1350: i64;
  var $i1351: i1;
  var $p1352: ref;
  var $i1353: i64;
  var $i1354: i1;
  var $i1355: i32;
  var $i1356: i64;
  var $i1357: i64;
  var $i1358: i1;
  var $p1359: ref;
  var $i1360: i64;
  var $i1361: i1;
  var $i1362: i32;
  var $i1363: i64;
  var $i1364: i64;
  var $i1365: i1;
  var $p1366: ref;
  var $i1367: i64;
  var $i1368: i1;
  var $i1369: i32;
  var $i1370: i64;
  var $i1371: i64;
  var $i1372: i1;
  var $p1373: ref;
  var $i1374: i64;
  var $i1375: i1;
  var $i1376: i32;
  var $i1377: i64;
  var $i1378: i64;
  var $i1379: i1;
  var $p1380: ref;
  var $i1381: i64;
  var $i1382: i1;
  var $i1383: i32;
  var $i1384: i64;
  var $i1385: i64;
  var $i1386: i1;
  var $p1387: ref;
  var $i1388: i64;
  var $i1389: i1;
  var $i1390: i32;
  var $i1391: i64;
  var $i1392: i64;
  var $i1393: i1;
  var $p1394: ref;
  var $i1395: i64;
  var $i1396: i1;
  var $i1397: i32;
  var $i1398: i64;
  var $i1399: i64;
  var $i1400: i1;
  var $p1401: ref;
  var $i1402: i64;
  var $i1403: i1;
  var $i1404: i32;
  var $i1405: i64;
  var $i1406: i64;
  var $i1407: i1;
  var $p1408: ref;
  var $i1409: i64;
  var $i1410: i1;
  var $i1411: i32;
  var $i1412: i64;
  var $i1413: i64;
  var $i1414: i1;
  var $p1415: ref;
  var $i1416: i64;
  var $i1417: i1;
  var $i1418: i32;
  var $i1419: i64;
  var $i1420: i64;
  var $i1421: i1;
  var $p1422: ref;
  var $i1423: i64;
  var $i1424: i1;
  var $i1425: i32;
  var $i1426: i64;
  var $i1427: i64;
  var $i1428: i1;
  var $p1429: ref;
  var $i1430: i64;
  var $i1431: i1;
  var $i1432: i32;
  var $i1433: i64;
  var $i1434: i64;
  var $i1435: i1;
  var $p1436: ref;
  var $i1437: i64;
  var $i1438: i1;
  var $i1439: i32;
  var $i1440: i64;
  var $i1441: i64;
  var $i1442: i1;
  var $p1443: ref;
  var $i1444: i64;
  var $i1445: i1;
  var $i1446: i32;
  var $i1447: i64;
  var $i1448: i64;
  var $i1449: i1;
  var $p1450: ref;
  var $i1451: i64;
  var $i1452: i1;
  var $i1453: i32;
  var $i1454: i64;
  var $i1455: i64;
  var $i1456: i1;
  var $p1457: ref;
  var $i1458: i64;
  var $i1459: i1;
  var $i1460: i32;
  var $i1461: i64;
  var $i1462: i64;
  var $i1463: i1;
  var $p1464: ref;
  var $i1465: i64;
  var $i1466: i1;
  var $i1467: i32;
  var $i1468: i64;
  var $i1469: i64;
  var $i1470: i1;
  var $p1471: ref;
  var $i1472: i64;
  var $i1473: i1;
  var $i1474: i32;
  var $i1475: i64;
  var $i1476: i64;
  var $i1477: i1;
  var $p1478: ref;
  var $i1479: i64;
  var $i1480: i1;
  var $i1481: i32;
  var $i1482: i64;
  var $i1483: i64;
  var $i1484: i1;
  var $p1485: ref;
  var $i1486: i64;
  var $i1487: i1;
  var $i1488: i32;
  var $i1489: i64;
  var $i1490: i64;
  var $i1491: i1;
  var $p1492: ref;
  var $i1493: i64;
  var $i1494: i1;
  var $i1495: i32;
  var $i1496: i64;
  var $i1497: i64;
  var $i1498: i1;
  var $p1499: ref;
  var $i1500: i64;
  var $i1501: i1;
  var $i1502: i32;
  var $i1503: i64;
  var $i1504: i64;
  var $i1505: i1;
  var $p1506: ref;
  var $i1507: i64;
  var $i1508: i1;
  var $i1509: i32;
  var $i1510: i64;
  var $i1511: i64;
  var $i1512: i1;
  var $p1513: ref;
  var $i1514: i64;
  var $i1515: i1;
  var $i1516: i32;
  var $i1517: i64;
  var $i1518: i64;
  var $i1519: i1;
  var $p1520: ref;
  var $i1521: i64;
  var $i1522: i1;
  var $i1523: i32;
  var $i1524: i64;
  var $i1525: i64;
  var $i1526: i1;
  var $p1527: ref;
  var $i1528: i64;
  var $i1529: i1;
  var $i1530: i32;
  var $i1531: i64;
  var $i1532: i64;
  var $i1533: i1;
  var $p1534: ref;
  var $i1535: i64;
  var $i1536: i1;
  var $i1537: i32;
  var $i1538: i64;
  var $i1539: i64;
  var $i1540: i1;
  var $p1541: ref;
  var $i1542: i64;
  var $i1543: i1;
  var $i1544: i32;
  var $i1545: i64;
  var $i1546: i64;
  var $i1547: i1;
  var $p1548: ref;
  var $i1549: i64;
  var $i1550: i1;
  var $i1551: i32;
  var $i1552: i64;
  var $i1553: i64;
  var $i1554: i1;
  var $p1555: ref;
  var $i1556: i64;
  var $i1557: i1;
  var $i1558: i32;
  var $i1559: i64;
  var $i1560: i64;
  var $i1561: i1;
  var $p1562: ref;
  var $i1563: i64;
  var $i1564: i1;
  var $i1565: i32;
  var $i1566: i64;
  var $i1567: i64;
  var $i1568: i1;
  var $p1569: ref;
  var $i1570: i64;
  var $i1571: i1;
  var $i1572: i32;
  var $i1573: i64;
  var $i1574: i64;
  var $i1575: i1;
  var $p1576: ref;
  var $i1577: i64;
  var $i1578: i1;
  var $i1579: i32;
  var $i1580: i64;
  var $i1581: i64;
  var $i1582: i1;
  var $p1583: ref;
  var $i1584: i64;
  var $i1585: i1;
  var $i1586: i32;
  var $i1587: i64;
  var $i1588: i64;
  var $i1589: i1;
  var $p1590: ref;
  var $i1591: i64;
  var $i1592: i1;
  var $i1593: i32;
  var $i1594: i64;
  var $i1595: i64;
  var $i1596: i1;
  var $p1597: ref;
  var $i1598: i64;
  var $i1599: i1;
  var $i1600: i32;
  var $i1601: i64;
  var $i1602: i64;
  var $i1603: i1;
  var $p1604: ref;
  var $i1605: i64;
  var $i1606: i1;
  var $i1607: i32;
  var $i1608: i64;
  var $i1609: i64;
  var $i1610: i1;
  var $p1611: ref;
  var $i1612: i64;
  var $i1613: i1;
  var $i1614: i32;
  var $i1615: i64;
  var $i1616: i64;
  var $i1617: i1;
  var $p1618: ref;
  var $i1619: i64;
  var $i1620: i1;
  var $i1621: i32;
  var $i1622: i64;
  var $i1623: i64;
  var $i1624: i1;
  var $p1625: ref;
  var $i1626: i64;
  var $i1627: i1;
  var $i1628: i32;
  var $i1629: i64;
  var $i1630: i64;
  var $i1631: i1;
  var $p1632: ref;
  var $i1633: i64;
  var $i1634: i1;
  var $i1635: i32;
  var $i1636: i64;
  var $i1637: i64;
  var $i1638: i1;
  var $p1639: ref;
  var $i1640: i64;
  var $i1641: i1;
  var $i1642: i32;
  var $i1643: i64;
  var $i1644: i64;
  var $i1645: i1;
  var $p1646: ref;
  var $i1647: i64;
  var $i1648: i1;
  var $i1649: i32;
  var $i1650: i64;
  var $i1651: i64;
  var $i1652: i1;
  var $p1653: ref;
  var $i1654: i64;
  var $i1655: i1;
  var $i1656: i32;
  var $i1657: i64;
  var $i1658: i64;
  var $i1659: i1;
  var $p1660: ref;
  var $i1661: i64;
  var $i1662: i1;
  var $i1663: i32;
  var $i1664: i64;
  var $i1665: i64;
  var $i1666: i1;
  var $p1667: ref;
  var $i1668: i64;
  var $i1669: i1;
  var $i1670: i32;
  var $i1671: i64;
  var $i1672: i64;
  var $i1673: i1;
  var $p1674: ref;
  var $i1675: i64;
  var $i1676: i1;
  var $i1677: i32;
  var $i1678: i64;
  var $i1679: i64;
  var $i1680: i1;
  var $p1681: ref;
  var $i1682: i64;
  var $i1683: i1;
  var $i1684: i32;
  var $i1685: i64;
  var $i1686: i64;
  var $i1687: i1;
  var $p1688: ref;
  var $i1689: i64;
  var $i1690: i1;
  var $i1691: i32;
  var $i1692: i64;
  var $i1693: i64;
  var $i1694: i1;
  var $p1695: ref;
  var $i1696: i64;
  var $i1697: i1;
  var $i1698: i32;
  var $i1699: i64;
  var $i1700: i64;
  var $i1701: i1;
  var $p1702: ref;
  var $i1703: i64;
  var $i1704: i1;
  var $i1705: i32;
  var $i1706: i64;
  var $i1707: i64;
  var $i1708: i1;
  var $p1709: ref;
  var $i1710: i64;
  var $i1711: i1;
  var $i1712: i32;
  var $i1713: i64;
  var $i1714: i64;
  var $i1715: i1;
  var $p1716: ref;
  var $i1717: i64;
  var $i1718: i1;
  var $i1719: i32;
  var $i1720: i64;
  var $i1721: i64;
  var $i1722: i1;
  var $p1723: ref;
  var $i1724: i64;
  var $i1725: i1;
  var $i1726: i32;
  var $i1727: i64;
  var $i1728: i64;
  var $i1729: i1;
  var $p1730: ref;
  var $i1731: i64;
  var $i1732: i1;
  var $i1733: i32;
  var $i1734: i64;
  var $i1735: i64;
  var $i1736: i1;
  var $p1737: ref;
  var $i1738: i64;
  var $i1739: i1;
  var $i1740: i32;
  var $i1741: i64;
  var $i1742: i64;
  var $i1743: i1;
  var $p1744: ref;
  var $i1745: i64;
  var $i1746: i1;
  var $i1747: i32;
  var $i1748: i64;
  var $i1749: i64;
  var $i1750: i1;
  var $p1751: ref;
  var $i1752: i64;
  var $i1753: i1;
  var $i1754: i32;
  var $i1755: i64;
  var $i1756: i64;
  var $i1757: i1;
  var $p1758: ref;
  var $i1759: i64;
  var $i1760: i1;
  var $i1761: i32;
  var $i1762: i64;
  var $i1763: i64;
  var $i1764: i1;
  var $p1765: ref;
  var $i1766: i64;
  var $i1767: i1;
  var $i1768: i32;
  var $i1769: i64;
  var $i1770: i64;
  var $i1771: i1;
  var $p1772: ref;
  var $i1773: i64;
  var $i1774: i1;
  var $i1775: i32;
  var $i1776: i64;
  var $i1777: i64;
  var $i1778: i1;
  var $p1779: ref;
  var $i1780: i64;
  var $i1781: i1;
  var $i1782: i32;
  var $i1783: i64;
  var $i1784: i64;
  var $i1785: i1;
  var $p1786: ref;
  var $i1787: i64;
  var $i1788: i1;
  var $i1789: i32;
  var $i1790: i64;
  var $i1791: i64;
  var $i1792: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} comedi_cleanup_board_minors();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.20, comedi_board_minor_table);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1869} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p1464 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(1, 8)));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i1465 := $p2i.ref.i64($p1464);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i1466 := $ne.i64($i1465, 0);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i1467 := $zext.i1.i32($i1466);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i1468 := $sext.i32.i64($i1467);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $i1469 := ldv__builtin_expect($i1468, 0);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $i1470 := $ne.i64($i1469, 0);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1470} true;
    goto $bb846, $bb847;

  $bb847:
    assume !($i1470 == 1);
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    $p1471 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(2, 8)));
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $i1472 := $p2i.ref.i64($p1471);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i1473 := $ne.i64($i1472, 0);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i1474 := $zext.i1.i32($i1473);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $i1475 := $sext.i32.i64($i1474);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} $i1476 := ldv__builtin_expect($i1475, 0);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i1477 := $ne.i64($i1476, 0);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1477} true;
    goto $bb850, $bb851;

  $bb851:
    assume !($i1477 == 1);
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    $p1478 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(3, 8)));
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $i1479 := $p2i.ref.i64($p1478);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $i1480 := $ne.i64($i1479, 0);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i1481 := $zext.i1.i32($i1480);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i1482 := $sext.i32.i64($i1481);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} $i1483 := ldv__builtin_expect($i1482, 0);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i1484 := $ne.i64($i1483, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1484} true;
    goto $bb854, $bb855;

  $bb855:
    assume !($i1484 == 1);
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    $p1485 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(4, 8)));
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $i1486 := $p2i.ref.i64($p1485);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $i1487 := $ne.i64($i1486, 0);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i1488 := $zext.i1.i32($i1487);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i1489 := $sext.i32.i64($i1488);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i1490 := ldv__builtin_expect($i1489, 0);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i1491 := $ne.i64($i1490, 0);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1491} true;
    goto $bb858, $bb859;

  $bb859:
    assume !($i1491 == 1);
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    $p1492 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(5, 8)));
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i1493 := $p2i.ref.i64($p1492);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i1494 := $ne.i64($i1493, 0);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i1495 := $zext.i1.i32($i1494);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $i1496 := $sext.i32.i64($i1495);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $i1497 := ldv__builtin_expect($i1496, 0);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $i1498 := $ne.i64($i1497, 0);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1498} true;
    goto $bb862, $bb863;

  $bb863:
    assume !($i1498 == 1);
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    $p1499 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(6, 8)));
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i1500 := $p2i.ref.i64($p1499);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $i1501 := $ne.i64($i1500, 0);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i1502 := $zext.i1.i32($i1501);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $i1503 := $sext.i32.i64($i1502);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} $i1504 := ldv__builtin_expect($i1503, 0);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i1505 := $ne.i64($i1504, 0);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1505} true;
    goto $bb866, $bb867;

  $bb867:
    assume !($i1505 == 1);
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    $p1506 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(7, 8)));
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $i1507 := $p2i.ref.i64($p1506);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i1508 := $ne.i64($i1507, 0);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i1509 := $zext.i1.i32($i1508);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i1510 := $sext.i32.i64($i1509);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i1511 := ldv__builtin_expect($i1510, 0);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i1512 := $ne.i64($i1511, 0);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1512} true;
    goto $bb870, $bb871;

  $bb871:
    assume !($i1512 == 1);
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    $p1513 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(8, 8)));
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i1514 := $p2i.ref.i64($p1513);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $i1515 := $ne.i64($i1514, 0);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i1516 := $zext.i1.i32($i1515);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i1517 := $sext.i32.i64($i1516);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $i1518 := ldv__builtin_expect($i1517, 0);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i1519 := $ne.i64($i1518, 0);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1519} true;
    goto $bb874, $bb875;

  $bb875:
    assume !($i1519 == 1);
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    $p1520 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(9, 8)));
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i1521 := $p2i.ref.i64($p1520);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i1522 := $ne.i64($i1521, 0);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i1523 := $zext.i1.i32($i1522);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i1524 := $sext.i32.i64($i1523);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $i1525 := ldv__builtin_expect($i1524, 0);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i1526 := $ne.i64($i1525, 0);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1526} true;
    goto $bb878, $bb879;

  $bb879:
    assume !($i1526 == 1);
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    $p1527 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(10, 8)));
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i1528 := $p2i.ref.i64($p1527);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $i1529 := $ne.i64($i1528, 0);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i1530 := $zext.i1.i32($i1529);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i1531 := $sext.i32.i64($i1530);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i1532 := ldv__builtin_expect($i1531, 0);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $i1533 := $ne.i64($i1532, 0);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1533} true;
    goto $bb882, $bb883;

  $bb883:
    assume !($i1533 == 1);
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    $p1534 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(11, 8)));
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i1535 := $p2i.ref.i64($p1534);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i1536 := $ne.i64($i1535, 0);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i1537 := $zext.i1.i32($i1536);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $i1538 := $sext.i32.i64($i1537);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $i1539 := ldv__builtin_expect($i1538, 0);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i1540 := $ne.i64($i1539, 0);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1540} true;
    goto $bb886, $bb887;

  $bb887:
    assume !($i1540 == 1);
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    $p1541 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(12, 8)));
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i1542 := $p2i.ref.i64($p1541);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i1543 := $ne.i64($i1542, 0);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    $i1544 := $zext.i1.i32($i1543);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i1545 := $sext.i32.i64($i1544);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $i1546 := ldv__builtin_expect($i1545, 0);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $i1547 := $ne.i64($i1546, 0);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1547} true;
    goto $bb890, $bb891;

  $bb891:
    assume !($i1547 == 1);
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    $p1548 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(13, 8)));
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i1549 := $p2i.ref.i64($p1548);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i1550 := $ne.i64($i1549, 0);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i1551 := $zext.i1.i32($i1550);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i1552 := $sext.i32.i64($i1551);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $i1553 := ldv__builtin_expect($i1552, 0);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i1554 := $ne.i64($i1553, 0);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1554} true;
    goto $bb894, $bb895;

  $bb895:
    assume !($i1554 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    $p1555 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(14, 8)));
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $i1556 := $p2i.ref.i64($p1555);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i1557 := $ne.i64($i1556, 0);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $i1558 := $zext.i1.i32($i1557);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i1559 := $sext.i32.i64($i1558);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $i1560 := ldv__builtin_expect($i1559, 0);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i1561 := $ne.i64($i1560, 0);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1561} true;
    goto $bb898, $bb899;

  $bb899:
    assume !($i1561 == 1);
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    $p1562 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(15, 8)));
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $i1563 := $p2i.ref.i64($p1562);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $i1564 := $ne.i64($i1563, 0);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i1565 := $zext.i1.i32($i1564);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $i1566 := $sext.i32.i64($i1565);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i1567 := ldv__builtin_expect($i1566, 0);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i1568 := $ne.i64($i1567, 0);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1568} true;
    goto $bb902, $bb903;

  $bb903:
    assume !($i1568 == 1);
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    $p1569 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(16, 8)));
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i1570 := $p2i.ref.i64($p1569);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $i1571 := $ne.i64($i1570, 0);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $i1572 := $zext.i1.i32($i1571);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $i1573 := $sext.i32.i64($i1572);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $i1574 := ldv__builtin_expect($i1573, 0);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $i1575 := $ne.i64($i1574, 0);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1575} true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i1575 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    $p1576 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(17, 8)));
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i1577 := $p2i.ref.i64($p1576);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i1578 := $ne.i64($i1577, 0);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i1579 := $zext.i1.i32($i1578);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $i1580 := $sext.i32.i64($i1579);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i1581 := ldv__builtin_expect($i1580, 0);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $i1582 := $ne.i64($i1581, 0);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1582} true;
    goto $bb910, $bb911;

  $bb911:
    assume !($i1582 == 1);
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    $p1583 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(18, 8)));
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i1584 := $p2i.ref.i64($p1583);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i1585 := $ne.i64($i1584, 0);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i1586 := $zext.i1.i32($i1585);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $i1587 := $sext.i32.i64($i1586);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i1588 := ldv__builtin_expect($i1587, 0);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $i1589 := $ne.i64($i1588, 0);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1589} true;
    goto $bb914, $bb915;

  $bb915:
    assume !($i1589 == 1);
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    $p1590 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(19, 8)));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $i1591 := $p2i.ref.i64($p1590);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i1592 := $ne.i64($i1591, 0);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i1593 := $zext.i1.i32($i1592);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $i1594 := $sext.i32.i64($i1593);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i1595 := ldv__builtin_expect($i1594, 0);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i1596 := $ne.i64($i1595, 0);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1596} true;
    goto $bb918, $bb919;

  $bb919:
    assume !($i1596 == 1);
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    $p1597 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(20, 8)));
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i1598 := $p2i.ref.i64($p1597);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i1599 := $ne.i64($i1598, 0);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i1600 := $zext.i1.i32($i1599);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $i1601 := $sext.i32.i64($i1600);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} $i1602 := ldv__builtin_expect($i1601, 0);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i1603 := $ne.i64($i1602, 0);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1603} true;
    goto $bb922, $bb923;

  $bb923:
    assume !($i1603 == 1);
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    $p1604 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(21, 8)));
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $i1605 := $p2i.ref.i64($p1604);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $i1606 := $ne.i64($i1605, 0);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i1607 := $zext.i1.i32($i1606);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $i1608 := $sext.i32.i64($i1607);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i1609 := ldv__builtin_expect($i1608, 0);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i1610 := $ne.i64($i1609, 0);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1610} true;
    goto $bb926, $bb927;

  $bb927:
    assume !($i1610 == 1);
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    $p1611 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(22, 8)));
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i1612 := $p2i.ref.i64($p1611);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i1613 := $ne.i64($i1612, 0);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i1614 := $zext.i1.i32($i1613);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $i1615 := $sext.i32.i64($i1614);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i1616 := ldv__builtin_expect($i1615, 0);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $i1617 := $ne.i64($i1616, 0);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1617} true;
    goto $bb930, $bb931;

  $bb931:
    assume !($i1617 == 1);
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    $p1618 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(23, 8)));
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i1619 := $p2i.ref.i64($p1618);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i1620 := $ne.i64($i1619, 0);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i1621 := $zext.i1.i32($i1620);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i1622 := $sext.i32.i64($i1621);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i1623 := ldv__builtin_expect($i1622, 0);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i1624 := $ne.i64($i1623, 0);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1624} true;
    goto $bb934, $bb935;

  $bb935:
    assume !($i1624 == 1);
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    $p1625 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(24, 8)));
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i1626 := $p2i.ref.i64($p1625);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i1627 := $ne.i64($i1626, 0);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i1628 := $zext.i1.i32($i1627);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $i1629 := $sext.i32.i64($i1628);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $i1630 := ldv__builtin_expect($i1629, 0);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i1631 := $ne.i64($i1630, 0);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1631} true;
    goto $bb938, $bb939;

  $bb939:
    assume !($i1631 == 1);
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    $p1632 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(25, 8)));
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i1633 := $p2i.ref.i64($p1632);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $i1634 := $ne.i64($i1633, 0);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $i1635 := $zext.i1.i32($i1634);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $i1636 := $sext.i32.i64($i1635);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i1637 := ldv__builtin_expect($i1636, 0);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i1638 := $ne.i64($i1637, 0);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1638} true;
    goto $bb942, $bb943;

  $bb943:
    assume !($i1638 == 1);
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    $p1639 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(26, 8)));
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $i1640 := $p2i.ref.i64($p1639);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i1641 := $ne.i64($i1640, 0);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i1642 := $zext.i1.i32($i1641);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i1643 := $sext.i32.i64($i1642);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i1644 := ldv__builtin_expect($i1643, 0);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $i1645 := $ne.i64($i1644, 0);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1645} true;
    goto $bb946, $bb947;

  $bb947:
    assume !($i1645 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    $p1646 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(27, 8)));
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $i1647 := $p2i.ref.i64($p1646);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i1648 := $ne.i64($i1647, 0);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i1649 := $zext.i1.i32($i1648);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $i1650 := $sext.i32.i64($i1649);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $i1651 := ldv__builtin_expect($i1650, 0);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i1652 := $ne.i64($i1651, 0);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1652} true;
    goto $bb950, $bb951;

  $bb951:
    assume !($i1652 == 1);
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    $p1653 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(28, 8)));
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $i1654 := $p2i.ref.i64($p1653);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $i1655 := $ne.i64($i1654, 0);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i1656 := $zext.i1.i32($i1655);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $i1657 := $sext.i32.i64($i1656);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $i1658 := ldv__builtin_expect($i1657, 0);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i1659 := $ne.i64($i1658, 0);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1659} true;
    goto $bb954, $bb955;

  $bb955:
    assume !($i1659 == 1);
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    $p1660 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(29, 8)));
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i1661 := $p2i.ref.i64($p1660);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i1662 := $ne.i64($i1661, 0);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i1663 := $zext.i1.i32($i1662);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $i1664 := $sext.i32.i64($i1663);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $i1665 := ldv__builtin_expect($i1664, 0);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $i1666 := $ne.i64($i1665, 0);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1666} true;
    goto $bb958, $bb959;

  $bb959:
    assume !($i1666 == 1);
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    $p1667 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(30, 8)));
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i1668 := $p2i.ref.i64($p1667);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $i1669 := $ne.i64($i1668, 0);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i1670 := $zext.i1.i32($i1669);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i1671 := $sext.i32.i64($i1670);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $i1672 := ldv__builtin_expect($i1671, 0);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i1673 := $ne.i64($i1672, 0);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1673} true;
    goto $bb962, $bb963;

  $bb963:
    assume !($i1673 == 1);
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    $p1674 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(31, 8)));
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i1675 := $p2i.ref.i64($p1674);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i1676 := $ne.i64($i1675, 0);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $i1677 := $zext.i1.i32($i1676);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $i1678 := $sext.i32.i64($i1677);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $i1679 := ldv__builtin_expect($i1678, 0);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $i1680 := $ne.i64($i1679, 0);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1680} true;
    goto $bb966, $bb967;

  $bb967:
    assume !($i1680 == 1);
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    $p1681 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(32, 8)));
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $i1682 := $p2i.ref.i64($p1681);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i1683 := $ne.i64($i1682, 0);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i1684 := $zext.i1.i32($i1683);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $i1685 := $sext.i32.i64($i1684);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $i1686 := ldv__builtin_expect($i1685, 0);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $i1687 := $ne.i64($i1686, 0);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1687} true;
    goto $bb970, $bb971;

  $bb971:
    assume !($i1687 == 1);
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    $p1688 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(33, 8)));
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $i1689 := $p2i.ref.i64($p1688);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $i1690 := $ne.i64($i1689, 0);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i1691 := $zext.i1.i32($i1690);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i1692 := $sext.i32.i64($i1691);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i1693 := ldv__builtin_expect($i1692, 0);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i1694 := $ne.i64($i1693, 0);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1694} true;
    goto $bb974, $bb975;

  $bb975:
    assume !($i1694 == 1);
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    $p1695 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(34, 8)));
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    $i1696 := $p2i.ref.i64($p1695);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $i1697 := $ne.i64($i1696, 0);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i1698 := $zext.i1.i32($i1697);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i1699 := $sext.i32.i64($i1698);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $i1700 := ldv__builtin_expect($i1699, 0);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $i1701 := $ne.i64($i1700, 0);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1701} true;
    goto $bb978, $bb979;

  $bb979:
    assume !($i1701 == 1);
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    $p1702 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(35, 8)));
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $i1703 := $p2i.ref.i64($p1702);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $i1704 := $ne.i64($i1703, 0);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i1705 := $zext.i1.i32($i1704);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $i1706 := $sext.i32.i64($i1705);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i1707 := ldv__builtin_expect($i1706, 0);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $i1708 := $ne.i64($i1707, 0);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1708} true;
    goto $bb982, $bb983;

  $bb983:
    assume !($i1708 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    $p1709 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(36, 8)));
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $i1710 := $p2i.ref.i64($p1709);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i1711 := $ne.i64($i1710, 0);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i1712 := $zext.i1.i32($i1711);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $i1713 := $sext.i32.i64($i1712);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} $i1714 := ldv__builtin_expect($i1713, 0);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i1715 := $ne.i64($i1714, 0);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1715} true;
    goto $bb986, $bb987;

  $bb987:
    assume !($i1715 == 1);
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    $p1716 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(37, 8)));
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $i1717 := $p2i.ref.i64($p1716);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $i1718 := $ne.i64($i1717, 0);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i1719 := $zext.i1.i32($i1718);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i1720 := $sext.i32.i64($i1719);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $i1721 := ldv__builtin_expect($i1720, 0);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i1722 := $ne.i64($i1721, 0);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1722} true;
    goto $bb990, $bb991;

  $bb991:
    assume !($i1722 == 1);
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    $p1723 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(38, 8)));
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i1724 := $p2i.ref.i64($p1723);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i1725 := $ne.i64($i1724, 0);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i1726 := $zext.i1.i32($i1725);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $i1727 := $sext.i32.i64($i1726);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} $i1728 := ldv__builtin_expect($i1727, 0);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $i1729 := $ne.i64($i1728, 0);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1729} true;
    goto $bb994, $bb995;

  $bb995:
    assume !($i1729 == 1);
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    $p1730 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(39, 8)));
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $i1731 := $p2i.ref.i64($p1730);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i1732 := $ne.i64($i1731, 0);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $i1733 := $zext.i1.i32($i1732);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $i1734 := $sext.i32.i64($i1733);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} $i1735 := ldv__builtin_expect($i1734, 0);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i1736 := $ne.i64($i1735, 0);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1736} true;
    goto $bb998, $bb999;

  $bb999:
    assume !($i1736 == 1);
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    $p1737 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(40, 8)));
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $i1738 := $p2i.ref.i64($p1737);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i1739 := $ne.i64($i1738, 0);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i1740 := $zext.i1.i32($i1739);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i1741 := $sext.i32.i64($i1740);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $i1742 := ldv__builtin_expect($i1741, 0);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $i1743 := $ne.i64($i1742, 0);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1743} true;
    goto $bb1002, $bb1003;

  $bb1003:
    assume !($i1743 == 1);
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    $p1744 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(41, 8)));
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $i1745 := $p2i.ref.i64($p1744);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i1746 := $ne.i64($i1745, 0);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i1747 := $zext.i1.i32($i1746);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $i1748 := $sext.i32.i64($i1747);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i1749 := ldv__builtin_expect($i1748, 0);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $i1750 := $ne.i64($i1749, 0);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1750} true;
    goto $bb1006, $bb1007;

  $bb1007:
    assume !($i1750 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    $p1751 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(42, 8)));
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $i1752 := $p2i.ref.i64($p1751);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $i1753 := $ne.i64($i1752, 0);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i1754 := $zext.i1.i32($i1753);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $i1755 := $sext.i32.i64($i1754);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $i1756 := ldv__builtin_expect($i1755, 0);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $i1757 := $ne.i64($i1756, 0);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1757} true;
    goto $bb1010, $bb1011;

  $bb1011:
    assume !($i1757 == 1);
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    $p1758 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(43, 8)));
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $i1759 := $p2i.ref.i64($p1758);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i1760 := $ne.i64($i1759, 0);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i1761 := $zext.i1.i32($i1760);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i1762 := $sext.i32.i64($i1761);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i1763 := ldv__builtin_expect($i1762, 0);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i1764 := $ne.i64($i1763, 0);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1764} true;
    goto $bb1014, $bb1015;

  $bb1015:
    assume !($i1764 == 1);
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    $p1765 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(44, 8)));
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $i1766 := $p2i.ref.i64($p1765);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i1767 := $ne.i64($i1766, 0);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $i1768 := $zext.i1.i32($i1767);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $i1769 := $sext.i32.i64($i1768);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $i1770 := ldv__builtin_expect($i1769, 0);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $i1771 := $ne.i64($i1770, 0);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1771} true;
    goto $bb1018, $bb1019;

  $bb1019:
    assume !($i1771 == 1);
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    $p1772 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(45, 8)));
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $i1773 := $p2i.ref.i64($p1772);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $i1774 := $ne.i64($i1773, 0);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i1775 := $zext.i1.i32($i1774);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $i1776 := $sext.i32.i64($i1775);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i1777 := ldv__builtin_expect($i1776, 0);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i1778 := $ne.i64($i1777, 0);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1778} true;
    goto $bb1022, $bb1023;

  $bb1023:
    assume !($i1778 == 1);
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    $p1779 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(46, 8)));
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $i1780 := $p2i.ref.i64($p1779);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i1781 := $ne.i64($i1780, 0);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $i1782 := $zext.i1.i32($i1781);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $i1783 := $sext.i32.i64($i1782);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $i1784 := ldv__builtin_expect($i1783, 0);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $i1785 := $ne.i64($i1784, 0);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1785} true;
    goto $bb1026, $bb1027;

  $bb1027:
    assume !($i1785 == 1);
    assume {:verifier.code 0} true;
    goto $bb1028;

  $bb1028:
    assume {:verifier.code 0} true;
    goto $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    $p1786 := $load.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(47, 8)));
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $i1787 := $p2i.ref.i64($p1786);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $i1788 := $ne.i64($i1787, 0);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $i1789 := $zext.i1.i32($i1788);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $i1790 := $sext.i32.i64($i1789);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $i1791 := ldv__builtin_expect($i1790, 0);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $i1792 := $ne.i64($i1791, 0);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1792} true;
    goto $bb1030, $bb1031;

  $bb1031:
    assume !($i1792 == 1);
    assume {:verifier.code 0} true;
    goto $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.21, comedi_subdevice_minor_table);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1873} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i20 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)));
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $i27 := ldv__builtin_expect($i26, 0);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)));
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i34 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)));
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $i41 := ldv__builtin_expect($i40, 0);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)));
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} $i48 := ldv__builtin_expect($i47, 0);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)));
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i55 := ldv__builtin_expect($i54, 0);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)));
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i62 := ldv__builtin_expect($i61, 0);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i69 := ldv__builtin_expect($i68, 0);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)));
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i76 := ldv__builtin_expect($i75, 0);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} $i83 := ldv__builtin_expect($i82, 0);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)));
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i90 := ldv__builtin_expect($i89, 0);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)));
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} $i97 := ldv__builtin_expect($i96, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)));
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i104 := ldv__builtin_expect($i103, 0);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)));
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i111 := ldv__builtin_expect($i110, 0);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)));
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i118 := ldv__builtin_expect($i117, 0);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)));
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i123);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $i125 := ldv__builtin_expect($i124, 0);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)));
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i32($i129);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $i132 := ldv__builtin_expect($i131, 0);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)));
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i137);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i139 := ldv__builtin_expect($i138, 0);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)));
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i32($i143);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i144);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $i146 := ldv__builtin_expect($i145, 0);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)));
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i153 := ldv__builtin_expect($i152, 0);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)));
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i32($i157);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i158);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $i160 := ldv__builtin_expect($i159, 0);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)));
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i165 := $zext.i1.i32($i164);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i166 := $sext.i32.i64($i165);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i167 := ldv__builtin_expect($i166, 0);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)));
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i32($i171);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i172);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $i174 := ldv__builtin_expect($i173, 0);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i32($i178);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $i181 := ldv__builtin_expect($i180, 0);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, 0);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i184, 0);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i32($i185);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i186);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i188 := ldv__builtin_expect($i187, 0);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)));
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i193 := $zext.i1.i32($i192);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i193);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i195 := ldv__builtin_expect($i194, 0);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)));
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i200 := $zext.i1.i32($i199);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $i202 := ldv__builtin_expect($i201, 0);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)));
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i207 := $zext.i1.i32($i206);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i207);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i209 := ldv__builtin_expect($i208, 0);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)));
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i214 := $zext.i1.i32($i213);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i215 := $sext.i32.i64($i214);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i216 := ldv__builtin_expect($i215, 0);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i217 := $ne.i64($i216, 0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)));
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i221 := $zext.i1.i32($i220);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i221);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i223 := ldv__builtin_expect($i222, 0);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i224 := $ne.i64($i223, 0);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i228 := $zext.i1.i32($i227);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $i230 := ldv__builtin_expect($i229, 0);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i233, 0);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i235 := $zext.i1.i32($i234);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i235);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $i237 := ldv__builtin_expect($i236, 0);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i242 := $zext.i1.i32($i241);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i242);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i244 := ldv__builtin_expect($i243, 0);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i248 := $ne.i64($i247, 0);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i249 := $zext.i1.i32($i248);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i250 := $sext.i32.i64($i249);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i251 := ldv__builtin_expect($i250, 0);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p253);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i256 := $zext.i1.i32($i255);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i257 := $sext.i32.i64($i256);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i258 := ldv__builtin_expect($i257, 0);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i263 := $zext.i1.i32($i262);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i263);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i265 := ldv__builtin_expect($i264, 0);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i266 := $ne.i64($i265, 0);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)));
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i269 := $ne.i64($i268, 0);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i270 := $zext.i1.i32($i269);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i270);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i272 := ldv__builtin_expect($i271, 0);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i275 := $p2i.ref.i64($p274);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i276 := $ne.i64($i275, 0);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i277 := $zext.i1.i32($i276);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i277);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i279 := ldv__builtin_expect($i278, 0);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)));
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i283 := $ne.i64($i282, 0);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i284 := $zext.i1.i32($i283);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i284);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i286 := ldv__builtin_expect($i285, 0);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)));
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i291 := $zext.i1.i32($i290);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i291);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i293 := ldv__builtin_expect($i292, 0);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i294 := $ne.i64($i293, 0);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)));
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p295);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i298 := $zext.i1.i32($i297);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i298);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i300 := ldv__builtin_expect($i299, 0);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)));
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i305 := $zext.i1.i32($i304);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i306 := $sext.i32.i64($i305);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i307 := ldv__builtin_expect($i306, 0);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $i308 := $ne.i64($i307, 0);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $i310 := $p2i.ref.i64($p309);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i311 := $ne.i64($i310, 0);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i312 := $zext.i1.i32($i311);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i313 := $sext.i32.i64($i312);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $i314 := ldv__builtin_expect($i313, 0);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i315 := $ne.i64($i314, 0);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)));
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i318 := $ne.i64($i317, 0);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i32($i318);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $i320 := $sext.i32.i64($i319);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} $i321 := ldv__builtin_expect($i320, 0);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)));
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 0);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i326 := $zext.i1.i32($i325);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i327 := $sext.i32.i64($i326);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i328 := ldv__builtin_expect($i327, 0);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i329 := $ne.i64($i328, 0);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)));
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i333 := $zext.i1.i32($i332);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i334 := $sext.i32.i64($i333);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i335 := ldv__builtin_expect($i334, 0);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i336 := $ne.i64($i335, 0);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p337);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i340 := $zext.i1.i32($i339);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $i341 := $sext.i32.i64($i340);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i342 := ldv__builtin_expect($i341, 0);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i343 := $ne.i64($i342, 0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)));
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i346 := $ne.i64($i345, 0);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i347 := $zext.i1.i32($i346);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i348 := $sext.i32.i64($i347);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $i349 := ldv__builtin_expect($i348, 0);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i350 := $ne.i64($i349, 0);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i353 := $ne.i64($i352, 0);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i354 := $zext.i1.i32($i353);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i355 := $sext.i32.i64($i354);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $i356 := ldv__builtin_expect($i355, 0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i357 := $ne.i64($i356, 0);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)));
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p358);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i360 := $ne.i64($i359, 0);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i361 := $zext.i1.i32($i360);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $i362 := $sext.i32.i64($i361);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i363 := ldv__builtin_expect($i362, 0);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, 0);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p365);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i367 := $ne.i64($i366, 0);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i368 := $zext.i1.i32($i367);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $i369 := $sext.i32.i64($i368);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i370 := ldv__builtin_expect($i369, 0);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $i371 := $ne.i64($i370, 0);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i373 := $p2i.ref.i64($p372);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i374 := $ne.i64($i373, 0);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i375 := $zext.i1.i32($i374);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i375);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i377 := ldv__builtin_expect($i376, 0);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i378 := $ne.i64($i377, 0);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i382 := $zext.i1.i32($i381);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $i384 := ldv__builtin_expect($i383, 0);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i385 := $ne.i64($i384, 0);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i387, 0);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i389 := $zext.i1.i32($i388);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $i390 := $sext.i32.i64($i389);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $i391 := ldv__builtin_expect($i390, 0);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i392 := $ne.i64($i391, 0);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p393);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i395 := $ne.i64($i394, 0);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i396 := $zext.i1.i32($i395);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i397 := $sext.i32.i64($i396);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i398 := ldv__builtin_expect($i397, 0);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i399 := $ne.i64($i398, 0);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)));
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i402 := $ne.i64($i401, 0);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i403 := $zext.i1.i32($i402);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i404 := $sext.i32.i64($i403);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} $i405 := ldv__builtin_expect($i404, 0);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i406 := $ne.i64($i405, 0);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i408 := $p2i.ref.i64($p407);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i409 := $ne.i64($i408, 0);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i410 := $zext.i1.i32($i409);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i411 := $sext.i32.i64($i410);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i412 := ldv__builtin_expect($i411, 0);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i413 := $ne.i64($i412, 0);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p414);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $i417 := $zext.i1.i32($i416);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i418 := $sext.i32.i64($i417);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $i419 := ldv__builtin_expect($i418, 0);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $i420 := $ne.i64($i419, 0);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p421);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $i423 := $ne.i64($i422, 0);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i424 := $zext.i1.i32($i423);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $i426 := ldv__builtin_expect($i425, 0);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $i427 := $ne.i64($i426, 0);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)));
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $i430 := $ne.i64($i429, 0);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $i431 := $zext.i1.i32($i430);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $i432 := $sext.i32.i64($i431);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $i433 := ldv__builtin_expect($i432, 0);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i434 := $ne.i64($i433, 0);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)));
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i436 := $p2i.ref.i64($p435);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i437 := $ne.i64($i436, 0);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i438 := $zext.i1.i32($i437);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i438);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $i440 := ldv__builtin_expect($i439, 0);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i441 := $ne.i64($i440, 0);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)));
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i444 := $ne.i64($i443, 0);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i445 := $zext.i1.i32($i444);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i446 := $sext.i32.i64($i445);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i447 := ldv__builtin_expect($i446, 0);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i448 := $ne.i64($i447, 0);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)));
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i450 := $p2i.ref.i64($p449);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i451 := $ne.i64($i450, 0);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i452 := $zext.i1.i32($i451);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $i453 := $sext.i32.i64($i452);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i454 := ldv__builtin_expect($i453, 0);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i455 := $ne.i64($i454, 0);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)));
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p456);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i458 := $ne.i64($i457, 0);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i459 := $zext.i1.i32($i458);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $i460 := $sext.i32.i64($i459);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} $i461 := ldv__builtin_expect($i460, 0);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i462 := $ne.i64($i461, 0);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)));
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i464 := $p2i.ref.i64($p463);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i465 := $ne.i64($i464, 0);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i466 := $zext.i1.i32($i465);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i466);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i468 := ldv__builtin_expect($i467, 0);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i469 := $ne.i64($i468, 0);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)));
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p470);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i472 := $ne.i64($i471, 0);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i473 := $zext.i1.i32($i472);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $i474 := $sext.i32.i64($i473);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $i475 := ldv__builtin_expect($i474, 0);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i476 := $ne.i64($i475, 0);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)));
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p477);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i479 := $ne.i64($i478, 0);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i480 := $zext.i1.i32($i479);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i481 := $sext.i32.i64($i480);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i482 := ldv__builtin_expect($i481, 0);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)));
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i485 := $p2i.ref.i64($p484);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i486 := $ne.i64($i485, 0);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i487 := $zext.i1.i32($i486);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $i488 := $sext.i32.i64($i487);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $i489 := ldv__builtin_expect($i488, 0);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i490 := $ne.i64($i489, 0);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)));
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i492 := $p2i.ref.i64($p491);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i493 := $ne.i64($i492, 0);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i494 := $zext.i1.i32($i493);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $i495 := $sext.i32.i64($i494);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $i496 := ldv__builtin_expect($i495, 0);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i497 := $ne.i64($i496, 0);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)));
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i500 := $ne.i64($i499, 0);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i501 := $zext.i1.i32($i500);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i502 := $sext.i32.i64($i501);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $i503 := ldv__builtin_expect($i502, 0);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i504 := $ne.i64($i503, 0);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i506 := $p2i.ref.i64($p505);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i507 := $ne.i64($i506, 0);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i508 := $zext.i1.i32($i507);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $i509 := $sext.i32.i64($i508);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i510 := ldv__builtin_expect($i509, 0);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i511 := $ne.i64($i510, 0);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)));
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p512);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i514 := $ne.i64($i513, 0);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i515 := $zext.i1.i32($i514);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i516 := $sext.i32.i64($i515);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $i517 := ldv__builtin_expect($i516, 0);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i518 := $ne.i64($i517, 0);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)));
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i520 := $p2i.ref.i64($p519);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i521 := $ne.i64($i520, 0);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i522 := $zext.i1.i32($i521);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i523 := $sext.i32.i64($i522);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $i524 := ldv__builtin_expect($i523, 0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i525 := $ne.i64($i524, 0);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)));
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i527 := $p2i.ref.i64($p526);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i528 := $ne.i64($i527, 0);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i529 := $zext.i1.i32($i528);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i530 := $sext.i32.i64($i529);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i531 := ldv__builtin_expect($i530, 0);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i532 := $ne.i64($i531, 0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i532} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p533 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)));
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i534 := $p2i.ref.i64($p533);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i535 := $ne.i64($i534, 0);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i536 := $zext.i1.i32($i535);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i537 := $sext.i32.i64($i536);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $i538 := ldv__builtin_expect($i537, 0);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i539 := $ne.i64($i538, 0);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)));
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i541 := $p2i.ref.i64($p540);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i542 := $ne.i64($i541, 0);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $i543 := $zext.i1.i32($i542);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $i544 := $sext.i32.i64($i543);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $i545 := ldv__builtin_expect($i544, 0);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i546 := $ne.i64($i545, 0);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)));
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i548 := $p2i.ref.i64($p547);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i549 := $ne.i64($i548, 0);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i550 := $zext.i1.i32($i549);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i551 := $sext.i32.i64($i550);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $i552 := ldv__builtin_expect($i551, 0);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i553 := $ne.i64($i552, 0);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i553} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)));
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p554);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $i556 := $ne.i64($i555, 0);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i557 := $zext.i1.i32($i556);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i558 := $sext.i32.i64($i557);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $i559 := ldv__builtin_expect($i558, 0);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i560 := $ne.i64($i559, 0);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)));
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $i562 := $p2i.ref.i64($p561);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $i563 := $ne.i64($i562, 0);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i564 := $zext.i1.i32($i563);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i565 := $sext.i32.i64($i564);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $i566 := ldv__builtin_expect($i565, 0);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $i567 := $ne.i64($i566, 0);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i569 := $p2i.ref.i64($p568);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i570 := $ne.i64($i569, 0);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i571 := $zext.i1.i32($i570);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $i572 := $sext.i32.i64($i571);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $i573 := ldv__builtin_expect($i572, 0);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i574 := $ne.i64($i573, 0);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i574} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)));
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i576 := $p2i.ref.i64($p575);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i577 := $ne.i64($i576, 0);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i578 := $zext.i1.i32($i577);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i579 := $sext.i32.i64($i578);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i580 := ldv__builtin_expect($i579, 0);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i581 := $ne.i64($i580, 0);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)));
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i584 := $ne.i64($i583, 0);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i585 := $zext.i1.i32($i584);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $i586 := $sext.i32.i64($i585);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i587 := ldv__builtin_expect($i586, 0);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i588 := $ne.i64($i587, 0);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)));
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i590 := $p2i.ref.i64($p589);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $i591 := $ne.i64($i590, 0);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i592 := $zext.i1.i32($i591);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i593 := $sext.i32.i64($i592);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $i594 := ldv__builtin_expect($i593, 0);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i595 := $ne.i64($i594, 0);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i595} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)));
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i597 := $p2i.ref.i64($p596);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i598 := $ne.i64($i597, 0);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $i599 := $zext.i1.i32($i598);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i600 := $sext.i32.i64($i599);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i601 := ldv__builtin_expect($i600, 0);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $i602 := $ne.i64($i601, 0);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)));
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $i604 := $p2i.ref.i64($p603);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $i605 := $ne.i64($i604, 0);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i606 := $zext.i1.i32($i605);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i607 := $sext.i32.i64($i606);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $i608 := ldv__builtin_expect($i607, 0);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i609 := $ne.i64($i608, 0);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)));
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i611 := $p2i.ref.i64($p610);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i612 := $ne.i64($i611, 0);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i613 := $zext.i1.i32($i612);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $i614 := $sext.i32.i64($i613);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i615 := ldv__builtin_expect($i614, 0);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i616 := $ne.i64($i615, 0);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)));
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $i619 := $ne.i64($i618, 0);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $i620 := $zext.i1.i32($i619);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i621 := $sext.i32.i64($i620);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $i622 := ldv__builtin_expect($i621, 0);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $i623 := $ne.i64($i622, 0);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)));
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p624);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i626 := $ne.i64($i625, 0);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i627 := $zext.i1.i32($i626);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i628 := $sext.i32.i64($i627);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $i629 := ldv__builtin_expect($i628, 0);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i630 := $ne.i64($i629, 0);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p631 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)));
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i632 := $p2i.ref.i64($p631);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $i633 := $ne.i64($i632, 0);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i634 := $zext.i1.i32($i633);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $i635 := $sext.i32.i64($i634);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $i636 := ldv__builtin_expect($i635, 0);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i637 := $ne.i64($i636, 0);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)));
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p638);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $i640 := $ne.i64($i639, 0);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i641 := $zext.i1.i32($i640);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i642 := $sext.i32.i64($i641);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $i643 := ldv__builtin_expect($i642, 0);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $i644 := $ne.i64($i643, 0);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p645 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)));
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $i646 := $p2i.ref.i64($p645);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $i647 := $ne.i64($i646, 0);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i648 := $zext.i1.i32($i647);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i649 := $sext.i32.i64($i648);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $i650 := ldv__builtin_expect($i649, 0);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $i651 := $ne.i64($i650, 0);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)));
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i653 := $p2i.ref.i64($p652);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $i654 := $ne.i64($i653, 0);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $i655 := $zext.i1.i32($i654);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $i656 := $sext.i32.i64($i655);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} $i657 := ldv__builtin_expect($i656, 0);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i658 := $ne.i64($i657, 0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)));
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $i660 := $p2i.ref.i64($p659);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $i661 := $ne.i64($i660, 0);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i662 := $zext.i1.i32($i661);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i663 := $sext.i32.i64($i662);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $i664 := ldv__builtin_expect($i663, 0);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i665 := $ne.i64($i664, 0);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i665 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)));
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i667 := $p2i.ref.i64($p666);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $i668 := $ne.i64($i667, 0);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i669 := $zext.i1.i32($i668);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $i670 := $sext.i32.i64($i669);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i671 := ldv__builtin_expect($i670, 0);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $i672 := $ne.i64($i671, 0);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)));
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $i674 := $p2i.ref.i64($p673);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $i675 := $ne.i64($i674, 0);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $i676 := $zext.i1.i32($i675);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $i677 := $sext.i32.i64($i676);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i678 := ldv__builtin_expect($i677, 0);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $i679 := $ne.i64($i678, 0);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i679} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i679 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)));
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $i681 := $p2i.ref.i64($p680);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i682 := $ne.i64($i681, 0);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i683 := $zext.i1.i32($i682);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i683);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $i685 := ldv__builtin_expect($i684, 0);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i686 := $ne.i64($i685, 0);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $p687 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)));
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $i688 := $p2i.ref.i64($p687);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $i689 := $ne.i64($i688, 0);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i690 := $zext.i1.i32($i689);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i691 := $sext.i32.i64($i690);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i692 := ldv__builtin_expect($i691, 0);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $i693 := $ne.i64($i692, 0);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i695 := $p2i.ref.i64($p694);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $i696 := $ne.i64($i695, 0);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i697 := $zext.i1.i32($i696);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $i698 := $sext.i32.i64($i697);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i699 := ldv__builtin_expect($i698, 0);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i700 := $ne.i64($i699, 0);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p701 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $i702 := $p2i.ref.i64($p701);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i703 := $ne.i64($i702, 0);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i704 := $zext.i1.i32($i703);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $i705 := $sext.i32.i64($i704);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $i706 := ldv__builtin_expect($i705, 0);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $i707 := $ne.i64($i706, 0);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)));
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $i709 := $p2i.ref.i64($p708);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $i710 := $ne.i64($i709, 0);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i711 := $zext.i1.i32($i710);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i712 := $sext.i32.i64($i711);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $i713 := ldv__builtin_expect($i712, 0);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i714 := $ne.i64($i713, 0);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p715 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)));
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $i716 := $p2i.ref.i64($p715);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $i717 := $ne.i64($i716, 0);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i718 := $zext.i1.i32($i717);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i719 := $sext.i32.i64($i718);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} $i720 := ldv__builtin_expect($i719, 0);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $i721 := $ne.i64($i720, 0);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)));
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $i723 := $p2i.ref.i64($p722);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i724 := $ne.i64($i723, 0);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i725 := $zext.i1.i32($i724);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i726 := $sext.i32.i64($i725);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i727 := ldv__builtin_expect($i726, 0);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $i728 := $ne.i64($i727, 0);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)));
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i731 := $ne.i64($i730, 0);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i732 := $zext.i1.i32($i731);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $i733 := $sext.i32.i64($i732);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $i734 := ldv__builtin_expect($i733, 0);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i735 := $ne.i64($i734, 0);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)));
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i737 := $p2i.ref.i64($p736);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i738 := $ne.i64($i737, 0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i739 := $zext.i1.i32($i738);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i740 := $sext.i32.i64($i739);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i741 := ldv__builtin_expect($i740, 0);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i742 := $ne.i64($i741, 0);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)));
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i744 := $p2i.ref.i64($p743);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i745 := $ne.i64($i744, 0);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i746 := $zext.i1.i32($i745);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $i747 := $sext.i32.i64($i746);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $i748 := ldv__builtin_expect($i747, 0);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i749 := $ne.i64($i748, 0);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)));
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i751 := $p2i.ref.i64($p750);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i752 := $ne.i64($i751, 0);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i753 := $zext.i1.i32($i752);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i754 := $sext.i32.i64($i753);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i755 := ldv__builtin_expect($i754, 0);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i756 := $ne.i64($i755, 0);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)));
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i758 := $p2i.ref.i64($p757);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i759 := $ne.i64($i758, 0);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i760 := $zext.i1.i32($i759);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i761 := $sext.i32.i64($i760);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $i762 := ldv__builtin_expect($i761, 0);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i763 := $ne.i64($i762, 0);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)));
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $i765 := $p2i.ref.i64($p764);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $i766 := $ne.i64($i765, 0);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i767 := $zext.i1.i32($i766);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i768 := $sext.i32.i64($i767);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $i769 := ldv__builtin_expect($i768, 0);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $i770 := $ne.i64($i769, 0);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i770 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $p771 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)));
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i772 := $p2i.ref.i64($p771);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i773 := $ne.i64($i772, 0);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $i774 := $zext.i1.i32($i773);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i775 := $sext.i32.i64($i774);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $i776 := ldv__builtin_expect($i775, 0);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i777 := $ne.i64($i776, 0);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)));
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i779 := $p2i.ref.i64($p778);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i780 := $ne.i64($i779, 0);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $i781 := $zext.i1.i32($i780);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i782 := $sext.i32.i64($i781);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i783 := ldv__builtin_expect($i782, 0);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i784 := $ne.i64($i783, 0);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i784} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $p785 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)));
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $i786 := $p2i.ref.i64($p785);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i787 := $ne.i64($i786, 0);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i788 := $zext.i1.i32($i787);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $i789 := $sext.i32.i64($i788);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $i790 := ldv__builtin_expect($i789, 0);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i791 := $ne.i64($i790, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)));
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i793 := $p2i.ref.i64($p792);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $i794 := $ne.i64($i793, 0);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i795 := $zext.i1.i32($i794);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i796 := $sext.i32.i64($i795);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $i797 := ldv__builtin_expect($i796, 0);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $i798 := $ne.i64($i797, 0);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    $p799 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)));
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i800 := $p2i.ref.i64($p799);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i801 := $ne.i64($i800, 0);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i802 := $zext.i1.i32($i801);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $i803 := $sext.i32.i64($i802);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} $i804 := ldv__builtin_expect($i803, 0);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i805 := $ne.i64($i804, 0);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i805} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)));
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i807 := $p2i.ref.i64($p806);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $i808 := $ne.i64($i807, 0);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i809 := $zext.i1.i32($i808);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i810 := $sext.i32.i64($i809);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $i811 := ldv__builtin_expect($i810, 0);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $i812 := $ne.i64($i811, 0);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p813 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)));
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i814 := $p2i.ref.i64($p813);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i815 := $ne.i64($i814, 0);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i816 := $zext.i1.i32($i815);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $i817 := $sext.i32.i64($i816);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i818 := ldv__builtin_expect($i817, 0);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i819 := $ne.i64($i818, 0);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p820 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)));
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i821 := $p2i.ref.i64($p820);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i822 := $ne.i64($i821, 0);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i823 := $zext.i1.i32($i822);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $i824 := $sext.i32.i64($i823);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} $i825 := ldv__builtin_expect($i824, 0);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i826 := $ne.i64($i825, 0);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)));
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i828 := $p2i.ref.i64($p827);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i829 := $ne.i64($i828, 0);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i830 := $zext.i1.i32($i829);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $i831 := $sext.i32.i64($i830);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i832 := ldv__builtin_expect($i831, 0);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i833 := $ne.i64($i832, 0);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)));
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i835 := $p2i.ref.i64($p834);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i836 := $ne.i64($i835, 0);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i837 := $zext.i1.i32($i836);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i838 := $sext.i32.i64($i837);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} $i839 := ldv__builtin_expect($i838, 0);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i840 := $ne.i64($i839, 0);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $p841 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)));
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i842 := $p2i.ref.i64($p841);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i843 := $ne.i64($i842, 0);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i844 := $zext.i1.i32($i843);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i845 := $sext.i32.i64($i844);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i846 := ldv__builtin_expect($i845, 0);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i847 := $ne.i64($i846, 0);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i847} true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i847 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)));
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $i849 := $p2i.ref.i64($p848);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $i850 := $ne.i64($i849, 0);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i851 := $zext.i1.i32($i850);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i852 := $sext.i32.i64($i851);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} $i853 := ldv__builtin_expect($i852, 0);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i854 := $ne.i64($i853, 0);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $p855 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)));
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $i856 := $p2i.ref.i64($p855);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i857 := $ne.i64($i856, 0);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i858 := $zext.i1.i32($i857);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $i859 := $sext.i32.i64($i858);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i860 := ldv__builtin_expect($i859, 0);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $i861 := $ne.i64($i860, 0);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)));
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i863 := $p2i.ref.i64($p862);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i864 := $ne.i64($i863, 0);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i865 := $zext.i1.i32($i864);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i866 := $sext.i32.i64($i865);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} $i867 := ldv__builtin_expect($i866, 0);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i868 := $ne.i64($i867, 0);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i868} true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)));
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $i870 := $p2i.ref.i64($p869);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i871 := $ne.i64($i870, 0);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i872 := $zext.i1.i32($i871);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i873 := $sext.i32.i64($i872);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i874 := ldv__builtin_expect($i873, 0);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i875 := $ne.i64($i874, 0);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p876 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)));
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $i877 := $p2i.ref.i64($p876);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $i878 := $ne.i64($i877, 0);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i879 := $zext.i1.i32($i878);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $i880 := $sext.i32.i64($i879);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $i881 := ldv__builtin_expect($i880, 0);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i882 := $ne.i64($i881, 0);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p883 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)));
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i884 := $p2i.ref.i64($p883);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i885 := $ne.i64($i884, 0);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i886 := $zext.i1.i32($i885);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $i887 := $sext.i32.i64($i886);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $i888 := ldv__builtin_expect($i887, 0);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i889 := $ne.i64($i888, 0);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i889} true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)));
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i891 := $p2i.ref.i64($p890);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i892 := $ne.i64($i891, 0);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i893 := $zext.i1.i32($i892);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i894 := $sext.i32.i64($i893);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $i895 := ldv__builtin_expect($i894, 0);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $i896 := $ne.i64($i895, 0);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $p897 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)));
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i898 := $p2i.ref.i64($p897);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i899 := $ne.i64($i898, 0);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i900 := $zext.i1.i32($i899);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i901 := $sext.i32.i64($i900);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $i902 := ldv__builtin_expect($i901, 0);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $i903 := $ne.i64($i902, 0);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i903} true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $p904 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)));
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $i905 := $p2i.ref.i64($p904);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $i906 := $ne.i64($i905, 0);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $i907 := $zext.i1.i32($i906);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i908 := $sext.i32.i64($i907);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i909 := ldv__builtin_expect($i908, 0);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $i910 := $ne.i64($i909, 0);
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i910} true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i910 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $p911 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)));
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i912 := $p2i.ref.i64($p911);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $i913 := $ne.i64($i912, 0);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i914 := $zext.i1.i32($i913);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $i915 := $sext.i32.i64($i914);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $i916 := ldv__builtin_expect($i915, 0);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i917 := $ne.i64($i916, 0);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $p918 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)));
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $i919 := $p2i.ref.i64($p918);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i920 := $ne.i64($i919, 0);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i921 := $zext.i1.i32($i920);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i922 := $sext.i32.i64($i921);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $i923 := ldv__builtin_expect($i922, 0);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $i924 := $ne.i64($i923, 0);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i924} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    $p925 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)));
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i926 := $p2i.ref.i64($p925);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $i927 := $ne.i64($i926, 0);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i928 := $zext.i1.i32($i927);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i929 := $sext.i32.i64($i928);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i930 := ldv__builtin_expect($i929, 0);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $i931 := $ne.i64($i930, 0);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i931} true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)));
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p932);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i934 := $ne.i64($i933, 0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $i935 := $zext.i1.i32($i934);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $i936 := $sext.i32.i64($i935);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $i937 := ldv__builtin_expect($i936, 0);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $i938 := $ne.i64($i937, 0);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i938 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    $p939 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)));
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i940 := $p2i.ref.i64($p939);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i941 := $ne.i64($i940, 0);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $i942 := $zext.i1.i32($i941);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $i943 := $sext.i32.i64($i942);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $i944 := ldv__builtin_expect($i943, 0);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $i945 := $ne.i64($i944, 0);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $p946 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)));
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $i947 := $p2i.ref.i64($p946);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $i948 := $ne.i64($i947, 0);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i949 := $zext.i1.i32($i948);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i950 := $sext.i32.i64($i949);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $i951 := ldv__builtin_expect($i950, 0);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i952 := $ne.i64($i951, 0);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i952} true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $p953 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)));
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i954 := $p2i.ref.i64($p953);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i955 := $ne.i64($i954, 0);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i956 := $zext.i1.i32($i955);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $i957 := $sext.i32.i64($i956);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $i958 := ldv__builtin_expect($i957, 0);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $i959 := $ne.i64($i958, 0);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)));
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i961 := $p2i.ref.i64($p960);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $i962 := $ne.i64($i961, 0);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i963 := $zext.i1.i32($i962);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $i964 := $sext.i32.i64($i963);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $i965 := ldv__builtin_expect($i964, 0);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $i966 := $ne.i64($i965, 0);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i966} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    $p967 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)));
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i968 := $p2i.ref.i64($p967);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $i969 := $ne.i64($i968, 0);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $i970 := $zext.i1.i32($i969);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $i971 := $sext.i32.i64($i970);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $i972 := ldv__builtin_expect($i971, 0);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i973 := $ne.i64($i972, 0);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i973} true;
    goto $bb563, $bb564;

  $bb564:
    assume !($i973 == 1);
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $p974 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)));
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $i975 := $p2i.ref.i64($p974);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i976 := $ne.i64($i975, 0);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $i977 := $zext.i1.i32($i976);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $i978 := $sext.i32.i64($i977);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $i979 := ldv__builtin_expect($i978, 0);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $i980 := $ne.i64($i979, 0);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i980} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i980 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)));
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $i982 := $p2i.ref.i64($p981);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i983 := $ne.i64($i982, 0);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $i984 := $zext.i1.i32($i983);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $i985 := $sext.i32.i64($i984);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i986 := ldv__builtin_expect($i985, 0);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i987 := $ne.i64($i986, 0);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i987} true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $p988 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)));
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i989 := $p2i.ref.i64($p988);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $i990 := $ne.i64($i989, 0);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i991 := $zext.i1.i32($i990);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $i992 := $sext.i32.i64($i991);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $i993 := ldv__builtin_expect($i992, 0);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i994 := $ne.i64($i993, 0);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i994} true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i994 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $p995 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)));
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $i996 := $p2i.ref.i64($p995);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i997 := $ne.i64($i996, 0);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i998 := $zext.i1.i32($i997);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i999 := $sext.i32.i64($i998);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i1000 := ldv__builtin_expect($i999, 0);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $i1001 := $ne.i64($i1000, 0);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1001} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i1001 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)));
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $i1003 := $p2i.ref.i64($p1002);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i1004 := $ne.i64($i1003, 0);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i1005 := $zext.i1.i32($i1004);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $i1006 := $sext.i32.i64($i1005);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i1007 := ldv__builtin_expect($i1006, 0);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $i1008 := $ne.i64($i1007, 0);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1008} true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i1008 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $p1009 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)));
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $i1010 := $p2i.ref.i64($p1009);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i1011 := $ne.i64($i1010, 0);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i1012 := $zext.i1.i32($i1011);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $i1013 := $sext.i32.i64($i1012);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i1014 := ldv__builtin_expect($i1013, 0);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i1015 := $ne.i64($i1014, 0);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1015} true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $p1016 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)));
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i1017 := $p2i.ref.i64($p1016);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $i1018 := $ne.i64($i1017, 0);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i1019 := $zext.i1.i32($i1018);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i1020 := $sext.i32.i64($i1019);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $i1021 := ldv__builtin_expect($i1020, 0);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i1022 := $ne.i64($i1021, 0);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1022} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i1022 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $p1023 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)));
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $i1024 := $p2i.ref.i64($p1023);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $i1025 := $ne.i64($i1024, 0);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $i1026 := $zext.i1.i32($i1025);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $i1027 := $sext.i32.i64($i1026);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $i1028 := ldv__builtin_expect($i1027, 0);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i1029 := $ne.i64($i1028, 0);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1029} true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    $p1030 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)));
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $i1031 := $p2i.ref.i64($p1030);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i1032 := $ne.i64($i1031, 0);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i1033 := $zext.i1.i32($i1032);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i1034 := $sext.i32.i64($i1033);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $i1035 := ldv__builtin_expect($i1034, 0);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $i1036 := $ne.i64($i1035, 0);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1036} true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    $p1037 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)));
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i1038 := $p2i.ref.i64($p1037);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i1039 := $ne.i64($i1038, 0);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $i1040 := $zext.i1.i32($i1039);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $i1041 := $sext.i32.i64($i1040);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $i1042 := ldv__builtin_expect($i1041, 0);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i1043 := $ne.i64($i1042, 0);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1043} true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    $p1044 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)));
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i1045 := $p2i.ref.i64($p1044);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $i1046 := $ne.i64($i1045, 0);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i1047 := $zext.i1.i32($i1046);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i1048 := $sext.i32.i64($i1047);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $i1049 := ldv__builtin_expect($i1048, 0);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i1050 := $ne.i64($i1049, 0);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1050} true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    $p1051 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)));
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $i1052 := $p2i.ref.i64($p1051);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $i1053 := $ne.i64($i1052, 0);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i1054 := $zext.i1.i32($i1053);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i1055 := $sext.i32.i64($i1054);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $i1056 := ldv__builtin_expect($i1055, 0);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i1057 := $ne.i64($i1056, 0);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1057} true;
    goto $bb611, $bb612;

  $bb612:
    assume !($i1057 == 1);
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p1058 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)));
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $i1059 := $p2i.ref.i64($p1058);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $i1060 := $ne.i64($i1059, 0);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i1061 := $zext.i1.i32($i1060);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i1062 := $sext.i32.i64($i1061);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $i1063 := ldv__builtin_expect($i1062, 0);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $i1064 := $ne.i64($i1063, 0);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1064} true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i1064 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    $p1065 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)));
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $i1066 := $p2i.ref.i64($p1065);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i1067 := $ne.i64($i1066, 0);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i1068 := $zext.i1.i32($i1067);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $i1069 := $sext.i32.i64($i1068);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $i1070 := ldv__builtin_expect($i1069, 0);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $i1071 := $ne.i64($i1070, 0);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1071} true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)));
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $i1073 := $p2i.ref.i64($p1072);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i1074 := $ne.i64($i1073, 0);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i1075 := $zext.i1.i32($i1074);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $i1076 := $sext.i32.i64($i1075);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i1077 := ldv__builtin_expect($i1076, 0);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i1078 := $ne.i64($i1077, 0);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1078} true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i1078 == 1);
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    $p1079 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)));
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i1080 := $p2i.ref.i64($p1079);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i1081 := $ne.i64($i1080, 0);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i1082 := $zext.i1.i32($i1081);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i1083 := $sext.i32.i64($i1082);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i1084 := ldv__builtin_expect($i1083, 0);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i1085 := $ne.i64($i1084, 0);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1085} true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i1085 == 1);
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    $p1086 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)));
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $i1087 := $p2i.ref.i64($p1086);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i1088 := $ne.i64($i1087, 0);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i1089 := $zext.i1.i32($i1088);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $i1090 := $sext.i32.i64($i1089);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $i1091 := ldv__builtin_expect($i1090, 0);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $i1092 := $ne.i64($i1091, 0);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1092} true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    $p1093 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)));
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $i1094 := $p2i.ref.i64($p1093);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $i1095 := $ne.i64($i1094, 0);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i1096 := $zext.i1.i32($i1095);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $i1097 := $sext.i32.i64($i1096);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i1098 := ldv__builtin_expect($i1097, 0);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i1099 := $ne.i64($i1098, 0);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1099} true;
    goto $bb635, $bb636;

  $bb636:
    assume !($i1099 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $p1100 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)));
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i1101 := $p2i.ref.i64($p1100);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $i1102 := $ne.i64($i1101, 0);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i1103 := $zext.i1.i32($i1102);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i1104 := $sext.i32.i64($i1103);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} $i1105 := ldv__builtin_expect($i1104, 0);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $i1106 := $ne.i64($i1105, 0);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1106} true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i1106 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $p1107 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)));
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $i1108 := $p2i.ref.i64($p1107);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i1109 := $ne.i64($i1108, 0);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i1110 := $zext.i1.i32($i1109);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $i1111 := $sext.i32.i64($i1110);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $i1112 := ldv__builtin_expect($i1111, 0);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i1113 := $ne.i64($i1112, 0);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1113} true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i1113 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    $p1114 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)));
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i1115 := $p2i.ref.i64($p1114);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $i1116 := $ne.i64($i1115, 0);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i1117 := $zext.i1.i32($i1116);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $i1118 := $sext.i32.i64($i1117);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i1119 := ldv__builtin_expect($i1118, 0);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $i1120 := $ne.i64($i1119, 0);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1120} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i1120 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    $p1121 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)));
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $i1122 := $p2i.ref.i64($p1121);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $i1123 := $ne.i64($i1122, 0);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i1124 := $zext.i1.i32($i1123);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i1125 := $sext.i32.i64($i1124);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i1126 := ldv__builtin_expect($i1125, 0);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $i1127 := $ne.i64($i1126, 0);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    $p1128 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)));
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $i1129 := $p2i.ref.i64($p1128);
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $i1130 := $ne.i64($i1129, 0);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $i1131 := $zext.i1.i32($i1130);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i1132 := $sext.i32.i64($i1131);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $i1133 := ldv__builtin_expect($i1132, 0);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $i1134 := $ne.i64($i1133, 0);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1134} true;
    goto $bb655, $bb656;

  $bb656:
    assume !($i1134 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    $p1135 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)));
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $i1136 := $p2i.ref.i64($p1135);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $i1137 := $ne.i64($i1136, 0);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i1138 := $zext.i1.i32($i1137);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $i1139 := $sext.i32.i64($i1138);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $i1140 := ldv__builtin_expect($i1139, 0);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $i1141 := $ne.i64($i1140, 0);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1141} true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i1141 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)));
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $i1143 := $p2i.ref.i64($p1142);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i1144 := $ne.i64($i1143, 0);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i1145 := $zext.i1.i32($i1144);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i1146 := $sext.i32.i64($i1145);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i1147 := ldv__builtin_expect($i1146, 0);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $i1148 := $ne.i64($i1147, 0);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1148} true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i1148 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    $p1149 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)));
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $i1150 := $p2i.ref.i64($p1149);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $i1151 := $ne.i64($i1150, 0);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $i1152 := $zext.i1.i32($i1151);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $i1153 := $sext.i32.i64($i1152);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $i1154 := ldv__builtin_expect($i1153, 0);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $i1155 := $ne.i64($i1154, 0);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1155} true;
    goto $bb667, $bb668;

  $bb668:
    assume !($i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $p1156 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $i1157 := $p2i.ref.i64($p1156);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $i1158 := $ne.i64($i1157, 0);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i1159 := $zext.i1.i32($i1158);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i1160 := $sext.i32.i64($i1159);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} $i1161 := ldv__builtin_expect($i1160, 0);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i1162 := $ne.i64($i1161, 0);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1162} true;
    goto $bb671, $bb672;

  $bb672:
    assume !($i1162 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    $p1163 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)));
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i1164 := $p2i.ref.i64($p1163);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $i1165 := $ne.i64($i1164, 0);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i1166 := $zext.i1.i32($i1165);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i1167 := $sext.i32.i64($i1166);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $i1168 := ldv__builtin_expect($i1167, 0);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $i1169 := $ne.i64($i1168, 0);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1169} true;
    goto $bb675, $bb676;

  $bb676:
    assume !($i1169 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    $p1170 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)));
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i1171 := $p2i.ref.i64($p1170);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $i1172 := $ne.i64($i1171, 0);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i1173 := $zext.i1.i32($i1172);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i1174 := $sext.i32.i64($i1173);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} $i1175 := ldv__builtin_expect($i1174, 0);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $i1176 := $ne.i64($i1175, 0);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1176} true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i1176 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $p1177 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)));
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $i1178 := $p2i.ref.i64($p1177);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $i1179 := $ne.i64($i1178, 0);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i1180 := $zext.i1.i32($i1179);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i1181 := $sext.i32.i64($i1180);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $i1182 := ldv__builtin_expect($i1181, 0);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i1183 := $ne.i64($i1182, 0);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1183} true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i1183 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $p1184 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $i1185 := $p2i.ref.i64($p1184);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $i1186 := $ne.i64($i1185, 0);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i1187 := $zext.i1.i32($i1186);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i1188 := $sext.i32.i64($i1187);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i1189 := ldv__builtin_expect($i1188, 0);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $i1190 := $ne.i64($i1189, 0);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1190} true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    $p1191 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)));
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i1192 := $p2i.ref.i64($p1191);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i1193 := $ne.i64($i1192, 0);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i1194 := $zext.i1.i32($i1193);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i1195 := $sext.i32.i64($i1194);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $i1196 := ldv__builtin_expect($i1195, 0);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i1197 := $ne.i64($i1196, 0);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1197} true;
    goto $bb691, $bb692;

  $bb692:
    assume !($i1197 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $p1198 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)));
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i1199 := $p2i.ref.i64($p1198);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $i1200 := $ne.i64($i1199, 0);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i1201 := $zext.i1.i32($i1200);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $i1202 := $sext.i32.i64($i1201);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i1203 := ldv__builtin_expect($i1202, 0);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i1204 := $ne.i64($i1203, 0);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1204} true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i1204 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $p1205 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)));
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i1206 := $p2i.ref.i64($p1205);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i1207 := $ne.i64($i1206, 0);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i1208 := $zext.i1.i32($i1207);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i1209 := $sext.i32.i64($i1208);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $i1210 := ldv__builtin_expect($i1209, 0);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $i1211 := $ne.i64($i1210, 0);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1211} true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i1211 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)));
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i1213 := $p2i.ref.i64($p1212);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i1214 := $ne.i64($i1213, 0);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i1215 := $zext.i1.i32($i1214);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i1216 := $sext.i32.i64($i1215);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $i1217 := ldv__builtin_expect($i1216, 0);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i1218 := $ne.i64($i1217, 0);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1218} true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i1218 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    $p1219 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)));
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i1220 := $p2i.ref.i64($p1219);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i1221 := $ne.i64($i1220, 0);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i1222 := $zext.i1.i32($i1221);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i1223 := $sext.i32.i64($i1222);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $i1224 := ldv__builtin_expect($i1223, 0);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i1225 := $ne.i64($i1224, 0);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1225} true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i1225 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $p1226 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i1227 := $p2i.ref.i64($p1226);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $i1228 := $ne.i64($i1227, 0);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i1229 := $zext.i1.i32($i1228);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i1230 := $sext.i32.i64($i1229);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $i1231 := ldv__builtin_expect($i1230, 0);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i1232 := $ne.i64($i1231, 0);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1232} true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i1232 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    $p1233 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)));
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i1234 := $p2i.ref.i64($p1233);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i1235 := $ne.i64($i1234, 0);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i1236 := $zext.i1.i32($i1235);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i1237 := $sext.i32.i64($i1236);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $i1238 := ldv__builtin_expect($i1237, 0);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i1239 := $ne.i64($i1238, 0);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1239} true;
    goto $bb715, $bb716;

  $bb716:
    assume !($i1239 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    $p1240 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)));
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i1241 := $p2i.ref.i64($p1240);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i1242 := $ne.i64($i1241, 0);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i1243 := $zext.i1.i32($i1242);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i1244 := $sext.i32.i64($i1243);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i1245 := ldv__builtin_expect($i1244, 0);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i1246 := $ne.i64($i1245, 0);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1246} true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i1246 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $p1247 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)));
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i1248 := $p2i.ref.i64($p1247);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $i1249 := $ne.i64($i1248, 0);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $i1250 := $zext.i1.i32($i1249);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i1251 := $sext.i32.i64($i1250);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i1252 := ldv__builtin_expect($i1251, 0);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $i1253 := $ne.i64($i1252, 0);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1253} true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i1253 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $p1254 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)));
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i1255 := $p2i.ref.i64($p1254);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $i1256 := $ne.i64($i1255, 0);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $i1257 := $zext.i1.i32($i1256);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $i1258 := $sext.i32.i64($i1257);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $i1259 := ldv__builtin_expect($i1258, 0);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i1260 := $ne.i64($i1259, 0);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1260} true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i1260 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    $p1261 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)));
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $i1262 := $p2i.ref.i64($p1261);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $i1263 := $ne.i64($i1262, 0);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i1264 := $zext.i1.i32($i1263);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i1265 := $sext.i32.i64($i1264);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $i1266 := ldv__builtin_expect($i1265, 0);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i1267 := $ne.i64($i1266, 0);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1267} true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i1267 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p1268 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)));
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i1269 := $p2i.ref.i64($p1268);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i1270 := $ne.i64($i1269, 0);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i1271 := $zext.i1.i32($i1270);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $i1272 := $sext.i32.i64($i1271);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $i1273 := ldv__builtin_expect($i1272, 0);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i1274 := $ne.i64($i1273, 0);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1274} true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i1274 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    $p1275 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)));
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $i1276 := $p2i.ref.i64($p1275);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i1277 := $ne.i64($i1276, 0);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i1278 := $zext.i1.i32($i1277);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i1279 := $sext.i32.i64($i1278);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $i1280 := ldv__builtin_expect($i1279, 0);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i1281 := $ne.i64($i1280, 0);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1281} true;
    goto $bb739, $bb740;

  $bb740:
    assume !($i1281 == 1);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    $p1282 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $i1283 := $p2i.ref.i64($p1282);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $i1284 := $ne.i64($i1283, 0);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i1.i32($i1284);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $i1286 := $sext.i32.i64($i1285);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $i1287 := ldv__builtin_expect($i1286, 0);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $i1288 := $ne.i64($i1287, 0);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1288} true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    $p1289 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)));
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $i1290 := $p2i.ref.i64($p1289);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i1291 := $ne.i64($i1290, 0);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $i1292 := $zext.i1.i32($i1291);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i1293 := $sext.i32.i64($i1292);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i1294 := ldv__builtin_expect($i1293, 0);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i1295 := $ne.i64($i1294, 0);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1295} true;
    goto $bb747, $bb748;

  $bb748:
    assume !($i1295 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    $p1296 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)));
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $i1297 := $p2i.ref.i64($p1296);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $i1298 := $ne.i64($i1297, 0);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i1299 := $zext.i1.i32($i1298);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i1300 := $sext.i32.i64($i1299);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i1301 := ldv__builtin_expect($i1300, 0);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i1302 := $ne.i64($i1301, 0);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1302} true;
    goto $bb751, $bb752;

  $bb752:
    assume !($i1302 == 1);
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    $p1303 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)));
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i1304 := $p2i.ref.i64($p1303);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i1305 := $ne.i64($i1304, 0);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i1306 := $zext.i1.i32($i1305);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $i1307 := $sext.i32.i64($i1306);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $i1308 := ldv__builtin_expect($i1307, 0);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i1309 := $ne.i64($i1308, 0);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1309} true;
    goto $bb755, $bb756;

  $bb756:
    assume !($i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    $p1310 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)));
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p1310);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $i1312 := $ne.i64($i1311, 0);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $i1313 := $zext.i1.i32($i1312);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $i1314 := $sext.i32.i64($i1313);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} $i1315 := ldv__builtin_expect($i1314, 0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i1316 := $ne.i64($i1315, 0);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1316} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i1316 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    $p1317 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)));
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $i1318 := $p2i.ref.i64($p1317);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i1319 := $ne.i64($i1318, 0);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i1320 := $zext.i1.i32($i1319);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i1321 := $sext.i32.i64($i1320);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i1322 := ldv__builtin_expect($i1321, 0);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $i1323 := $ne.i64($i1322, 0);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1323} true;
    goto $bb763, $bb764;

  $bb764:
    assume !($i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    $p1324 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)));
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $i1325 := $p2i.ref.i64($p1324);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i1326 := $ne.i64($i1325, 0);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i1327 := $zext.i1.i32($i1326);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $i1328 := $sext.i32.i64($i1327);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $i1329 := ldv__builtin_expect($i1328, 0);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i1330 := $ne.i64($i1329, 0);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1330} true;
    goto $bb767, $bb768;

  $bb768:
    assume !($i1330 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    $p1331 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)));
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $i1332 := $p2i.ref.i64($p1331);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $i1333 := $ne.i64($i1332, 0);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i1334 := $zext.i1.i32($i1333);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $i1335 := $sext.i32.i64($i1334);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $i1336 := ldv__builtin_expect($i1335, 0);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i1337 := $ne.i64($i1336, 0);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1337} true;
    goto $bb771, $bb772;

  $bb772:
    assume !($i1337 == 1);
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    $p1338 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)));
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i1339 := $p2i.ref.i64($p1338);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $i1340 := $ne.i64($i1339, 0);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i1341 := $zext.i1.i32($i1340);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $i1342 := $sext.i32.i64($i1341);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $i1343 := ldv__builtin_expect($i1342, 0);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i1344 := $ne.i64($i1343, 0);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1344} true;
    goto $bb775, $bb776;

  $bb776:
    assume !($i1344 == 1);
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    $p1345 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)));
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1345);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i1347 := $ne.i64($i1346, 0);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i1348 := $zext.i1.i32($i1347);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $i1349 := $sext.i32.i64($i1348);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $i1350 := ldv__builtin_expect($i1349, 0);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i1351 := $ne.i64($i1350, 0);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1351} true;
    goto $bb779, $bb780;

  $bb780:
    assume !($i1351 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)));
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i1353 := $p2i.ref.i64($p1352);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $i1354 := $ne.i64($i1353, 0);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $i1355 := $zext.i1.i32($i1354);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i1356 := $sext.i32.i64($i1355);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} $i1357 := ldv__builtin_expect($i1356, 0);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i1358 := $ne.i64($i1357, 0);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1358} true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i1358 == 1);
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    $p1359 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)));
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i1360 := $p2i.ref.i64($p1359);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i1361 := $ne.i64($i1360, 0);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i1362 := $zext.i1.i32($i1361);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i1363 := $sext.i32.i64($i1362);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i1364 := ldv__builtin_expect($i1363, 0);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $i1365 := $ne.i64($i1364, 0);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1365} true;
    goto $bb787, $bb788;

  $bb788:
    assume !($i1365 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    $p1366 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)));
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i1367 := $p2i.ref.i64($p1366);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i1368 := $ne.i64($i1367, 0);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $i1369 := $zext.i1.i32($i1368);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i1370 := $sext.i32.i64($i1369);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i1371 := ldv__builtin_expect($i1370, 0);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $i1372 := $ne.i64($i1371, 0);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1372} true;
    goto $bb791, $bb792;

  $bb792:
    assume !($i1372 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    $p1373 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)));
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i1374 := $p2i.ref.i64($p1373);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $i1375 := $ne.i64($i1374, 0);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i1376 := $zext.i1.i32($i1375);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i1377 := $sext.i32.i64($i1376);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i1378 := ldv__builtin_expect($i1377, 0);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $i1379 := $ne.i64($i1378, 0);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1379} true;
    goto $bb795, $bb796;

  $bb796:
    assume !($i1379 == 1);
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    $p1380 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)));
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $i1381 := $p2i.ref.i64($p1380);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $i1382 := $ne.i64($i1381, 0);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i1383 := $zext.i1.i32($i1382);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i1384 := $sext.i32.i64($i1383);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} $i1385 := ldv__builtin_expect($i1384, 0);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $i1386 := $ne.i64($i1385, 0);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1386} true;
    goto $bb799, $bb800;

  $bb800:
    assume !($i1386 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    $p1387 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)));
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $i1388 := $p2i.ref.i64($p1387);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i1389 := $ne.i64($i1388, 0);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i1390 := $zext.i1.i32($i1389);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $i1391 := $sext.i32.i64($i1390);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $i1392 := ldv__builtin_expect($i1391, 0);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $i1393 := $ne.i64($i1392, 0);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1393} true;
    goto $bb803, $bb804;

  $bb804:
    assume !($i1393 == 1);
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    $p1394 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)));
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $i1395 := $p2i.ref.i64($p1394);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i1396 := $ne.i64($i1395, 0);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $i1397 := $zext.i1.i32($i1396);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $i1398 := $sext.i32.i64($i1397);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} $i1399 := ldv__builtin_expect($i1398, 0);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $i1400 := $ne.i64($i1399, 0);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1400} true;
    goto $bb807, $bb808;

  $bb808:
    assume !($i1400 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    $p1401 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)));
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i1402 := $p2i.ref.i64($p1401);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i1403 := $ne.i64($i1402, 0);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i1404 := $zext.i1.i32($i1403);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $i1405 := $sext.i32.i64($i1404);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $i1406 := ldv__builtin_expect($i1405, 0);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i1407 := $ne.i64($i1406, 0);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1407} true;
    goto $bb811, $bb812;

  $bb812:
    assume !($i1407 == 1);
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    $p1408 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)));
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $i1409 := $p2i.ref.i64($p1408);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i1410 := $ne.i64($i1409, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i1411 := $zext.i1.i32($i1410);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i1412 := $sext.i32.i64($i1411);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} $i1413 := ldv__builtin_expect($i1412, 0);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i1414 := $ne.i64($i1413, 0);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1414} true;
    goto $bb815, $bb816;

  $bb816:
    assume !($i1414 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    $p1415 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)));
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i1416 := $p2i.ref.i64($p1415);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i1417 := $ne.i64($i1416, 0);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i1418 := $zext.i1.i32($i1417);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $i1419 := $sext.i32.i64($i1418);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i1420 := ldv__builtin_expect($i1419, 0);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $i1421 := $ne.i64($i1420, 0);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1421} true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i1421 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    $p1422 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)));
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $i1423 := $p2i.ref.i64($p1422);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i1424 := $ne.i64($i1423, 0);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i1425 := $zext.i1.i32($i1424);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $i1426 := $sext.i32.i64($i1425);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} $i1427 := ldv__builtin_expect($i1426, 0);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $i1428 := $ne.i64($i1427, 0);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1428} true;
    goto $bb823, $bb824;

  $bb824:
    assume !($i1428 == 1);
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    $p1429 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)));
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $i1430 := $p2i.ref.i64($p1429);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $i1431 := $ne.i64($i1430, 0);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i1432 := $zext.i1.i32($i1431);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i1433 := $sext.i32.i64($i1432);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $i1434 := ldv__builtin_expect($i1433, 0);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i1435 := $ne.i64($i1434, 0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1435} true;
    goto $bb827, $bb828;

  $bb828:
    assume !($i1435 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    $p1436 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)));
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i1437 := $p2i.ref.i64($p1436);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $i1438 := $ne.i64($i1437, 0);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i1439 := $zext.i1.i32($i1438);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i1440 := $sext.i32.i64($i1439);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i1441 := ldv__builtin_expect($i1440, 0);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i1442 := $ne.i64($i1441, 0);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1442} true;
    goto $bb831, $bb832;

  $bb832:
    assume !($i1442 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    $p1443 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)));
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i1444 := $p2i.ref.i64($p1443);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $i1445 := $ne.i64($i1444, 0);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i1446 := $zext.i1.i32($i1445);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i1447 := $sext.i32.i64($i1446);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i1448 := ldv__builtin_expect($i1447, 0);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i1449 := $ne.i64($i1448, 0);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1449} true;
    goto $bb835, $bb836;

  $bb836:
    assume !($i1449 == 1);
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $p1450 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)));
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i1451 := $p2i.ref.i64($p1450);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $i1452 := $ne.i64($i1451, 0);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i1453 := $zext.i1.i32($i1452);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i1454 := $sext.i32.i64($i1453);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i1455 := ldv__builtin_expect($i1454, 0);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i1456 := $ne.i64($i1455, 0);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1456} true;
    goto $bb839, $bb840;

  $bb840:
    assume !($i1456 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    $p1457 := $load.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)));
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i1458 := $p2i.ref.i64($p1457);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i1459 := $ne.i64($i1458, 0);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i1460 := $zext.i1.i32($i1459);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $i1461 := $sext.i32.i64($i1460);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $i1462 := ldv__builtin_expect($i1461, 0);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i1463 := $ne.i64($i1462, 0);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1463} true;
    goto $bb843, $bb844;

  $bb844:
    assume !($i1463 == 1);
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p14 := $M.29;
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} class_destroy($p14);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} ldv_cdev_del_14(comedi_cdev);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} comedi_proc_cleanup();
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    return;

  $bb843:
    assume {:verifier.code 0} true;
    assume $i1463 == 1;
    goto $bb13;

  $bb13:
    call {:si_unique_call 1874} devirtbounce.3(0, .str.5, 2643, 12);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call comedi_cleanup_loop_$bb15();
    goto $bb15_last;

  $bb839:
    assume {:verifier.code 0} true;
    assume $i1456 == 1;
    goto $bb13;

  $bb835:
    assume {:verifier.code 0} true;
    assume $i1449 == 1;
    goto $bb13;

  $bb831:
    assume {:verifier.code 0} true;
    assume $i1442 == 1;
    goto $bb13;

  $bb827:
    assume {:verifier.code 0} true;
    assume $i1435 == 1;
    goto $bb13;

  $bb823:
    assume {:verifier.code 0} true;
    assume $i1428 == 1;
    goto $bb13;

  $bb819:
    assume {:verifier.code 0} true;
    assume $i1421 == 1;
    goto $bb13;

  $bb815:
    assume {:verifier.code 0} true;
    assume $i1414 == 1;
    goto $bb13;

  $bb811:
    assume {:verifier.code 0} true;
    assume $i1407 == 1;
    goto $bb13;

  $bb807:
    assume {:verifier.code 0} true;
    assume $i1400 == 1;
    goto $bb13;

  $bb803:
    assume {:verifier.code 0} true;
    assume $i1393 == 1;
    goto $bb13;

  $bb799:
    assume {:verifier.code 0} true;
    assume $i1386 == 1;
    goto $bb13;

  $bb795:
    assume {:verifier.code 0} true;
    assume $i1379 == 1;
    goto $bb13;

  $bb791:
    assume {:verifier.code 0} true;
    assume $i1372 == 1;
    goto $bb13;

  $bb787:
    assume {:verifier.code 0} true;
    assume $i1365 == 1;
    goto $bb13;

  $bb783:
    assume {:verifier.code 0} true;
    assume $i1358 == 1;
    goto $bb13;

  $bb779:
    assume {:verifier.code 0} true;
    assume $i1351 == 1;
    goto $bb13;

  $bb775:
    assume {:verifier.code 0} true;
    assume $i1344 == 1;
    goto $bb13;

  $bb771:
    assume {:verifier.code 0} true;
    assume $i1337 == 1;
    goto $bb13;

  $bb767:
    assume {:verifier.code 0} true;
    assume $i1330 == 1;
    goto $bb13;

  $bb763:
    assume {:verifier.code 0} true;
    assume $i1323 == 1;
    goto $bb13;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i1316 == 1;
    goto $bb13;

  $bb755:
    assume {:verifier.code 0} true;
    assume $i1309 == 1;
    goto $bb13;

  $bb751:
    assume {:verifier.code 0} true;
    assume $i1302 == 1;
    goto $bb13;

  $bb747:
    assume {:verifier.code 0} true;
    assume $i1295 == 1;
    goto $bb13;

  $bb743:
    assume {:verifier.code 0} true;
    assume $i1288 == 1;
    goto $bb13;

  $bb739:
    assume {:verifier.code 0} true;
    assume $i1281 == 1;
    goto $bb13;

  $bb735:
    assume {:verifier.code 0} true;
    assume $i1274 == 1;
    goto $bb13;

  $bb731:
    assume {:verifier.code 0} true;
    assume $i1267 == 1;
    goto $bb13;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i1260 == 1;
    goto $bb13;

  $bb723:
    assume {:verifier.code 0} true;
    assume $i1253 == 1;
    goto $bb13;

  $bb719:
    assume {:verifier.code 0} true;
    assume $i1246 == 1;
    goto $bb13;

  $bb715:
    assume {:verifier.code 0} true;
    assume $i1239 == 1;
    goto $bb13;

  $bb711:
    assume {:verifier.code 0} true;
    assume $i1232 == 1;
    goto $bb13;

  $bb707:
    assume {:verifier.code 0} true;
    assume $i1225 == 1;
    goto $bb13;

  $bb703:
    assume {:verifier.code 0} true;
    assume $i1218 == 1;
    goto $bb13;

  $bb699:
    assume {:verifier.code 0} true;
    assume $i1211 == 1;
    goto $bb13;

  $bb695:
    assume {:verifier.code 0} true;
    assume $i1204 == 1;
    goto $bb13;

  $bb691:
    assume {:verifier.code 0} true;
    assume $i1197 == 1;
    goto $bb13;

  $bb687:
    assume {:verifier.code 0} true;
    assume $i1190 == 1;
    goto $bb13;

  $bb683:
    assume {:verifier.code 0} true;
    assume $i1183 == 1;
    goto $bb13;

  $bb679:
    assume {:verifier.code 0} true;
    assume $i1176 == 1;
    goto $bb13;

  $bb675:
    assume {:verifier.code 0} true;
    assume $i1169 == 1;
    goto $bb13;

  $bb671:
    assume {:verifier.code 0} true;
    assume $i1162 == 1;
    goto $bb13;

  $bb667:
    assume {:verifier.code 0} true;
    assume $i1155 == 1;
    goto $bb13;

  $bb663:
    assume {:verifier.code 0} true;
    assume $i1148 == 1;
    goto $bb13;

  $bb659:
    assume {:verifier.code 0} true;
    assume $i1141 == 1;
    goto $bb13;

  $bb655:
    assume {:verifier.code 0} true;
    assume $i1134 == 1;
    goto $bb13;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i1127 == 1;
    goto $bb13;

  $bb647:
    assume {:verifier.code 0} true;
    assume $i1120 == 1;
    goto $bb13;

  $bb643:
    assume {:verifier.code 0} true;
    assume $i1113 == 1;
    goto $bb13;

  $bb639:
    assume {:verifier.code 0} true;
    assume $i1106 == 1;
    goto $bb13;

  $bb635:
    assume {:verifier.code 0} true;
    assume $i1099 == 1;
    goto $bb13;

  $bb631:
    assume {:verifier.code 0} true;
    assume $i1092 == 1;
    goto $bb13;

  $bb627:
    assume {:verifier.code 0} true;
    assume $i1085 == 1;
    goto $bb13;

  $bb623:
    assume {:verifier.code 0} true;
    assume $i1078 == 1;
    goto $bb13;

  $bb619:
    assume {:verifier.code 0} true;
    assume $i1071 == 1;
    goto $bb13;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i1064 == 1;
    goto $bb13;

  $bb611:
    assume {:verifier.code 0} true;
    assume $i1057 == 1;
    goto $bb13;

  $bb607:
    assume {:verifier.code 0} true;
    assume $i1050 == 1;
    goto $bb13;

  $bb603:
    assume {:verifier.code 0} true;
    assume $i1043 == 1;
    goto $bb13;

  $bb599:
    assume {:verifier.code 0} true;
    assume $i1036 == 1;
    goto $bb13;

  $bb595:
    assume {:verifier.code 0} true;
    assume $i1029 == 1;
    goto $bb13;

  $bb591:
    assume {:verifier.code 0} true;
    assume $i1022 == 1;
    goto $bb13;

  $bb587:
    assume {:verifier.code 0} true;
    assume $i1015 == 1;
    goto $bb13;

  $bb583:
    assume {:verifier.code 0} true;
    assume $i1008 == 1;
    goto $bb13;

  $bb579:
    assume {:verifier.code 0} true;
    assume $i1001 == 1;
    goto $bb13;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i994 == 1;
    goto $bb13;

  $bb571:
    assume {:verifier.code 0} true;
    assume $i987 == 1;
    goto $bb13;

  $bb567:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb13;

  $bb563:
    assume {:verifier.code 0} true;
    assume $i973 == 1;
    goto $bb13;

  $bb559:
    assume {:verifier.code 0} true;
    assume $i966 == 1;
    goto $bb13;

  $bb555:
    assume {:verifier.code 0} true;
    assume $i959 == 1;
    goto $bb13;

  $bb551:
    assume {:verifier.code 0} true;
    assume $i952 == 1;
    goto $bb13;

  $bb547:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb13;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i938 == 1;
    goto $bb13;

  $bb539:
    assume {:verifier.code 0} true;
    assume $i931 == 1;
    goto $bb13;

  $bb535:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb13;

  $bb531:
    assume {:verifier.code 0} true;
    assume $i917 == 1;
    goto $bb13;

  $bb527:
    assume {:verifier.code 0} true;
    assume $i910 == 1;
    goto $bb13;

  $bb523:
    assume {:verifier.code 0} true;
    assume $i903 == 1;
    goto $bb13;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb13;

  $bb515:
    assume {:verifier.code 0} true;
    assume $i889 == 1;
    goto $bb13;

  $bb511:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb13;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb13;

  $bb503:
    assume {:verifier.code 0} true;
    assume $i868 == 1;
    goto $bb13;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i861 == 1;
    goto $bb13;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb13;

  $bb491:
    assume {:verifier.code 0} true;
    assume $i847 == 1;
    goto $bb13;

  $bb487:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb13;

  $bb483:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb13;

  $bb479:
    assume {:verifier.code 0} true;
    assume $i826 == 1;
    goto $bb13;

  $bb475:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb13;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb13;

  $bb467:
    assume {:verifier.code 0} true;
    assume $i805 == 1;
    goto $bb13;

  $bb463:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb13;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i791 == 1;
    goto $bb13;

  $bb455:
    assume {:verifier.code 0} true;
    assume $i784 == 1;
    goto $bb13;

  $bb451:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb13;

  $bb447:
    assume {:verifier.code 0} true;
    assume $i770 == 1;
    goto $bb13;

  $bb443:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb13;

  $bb439:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb13;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i749 == 1;
    goto $bb13;

  $bb431:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb13;

  $bb427:
    assume {:verifier.code 0} true;
    assume $i735 == 1;
    goto $bb13;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb13;

  $bb419:
    assume {:verifier.code 0} true;
    assume $i721 == 1;
    goto $bb13;

  $bb415:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb13;

  $bb411:
    assume {:verifier.code 0} true;
    assume $i707 == 1;
    goto $bb13;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i700 == 1;
    goto $bb13;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb13;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i686 == 1;
    goto $bb13;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i679 == 1;
    goto $bb13;

  $bb391:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb13;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i665 == 1;
    goto $bb13;

  $bb383:
    assume {:verifier.code 0} true;
    assume $i658 == 1;
    goto $bb13;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb13;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i644 == 1;
    goto $bb13;

  $bb371:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb13;

  $bb367:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb13;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb13;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i616 == 1;
    goto $bb13;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb13;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb13;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb13;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb13;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i581 == 1;
    goto $bb13;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb13;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb13;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i560 == 1;
    goto $bb13;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i553 == 1;
    goto $bb13;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb13;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i539 == 1;
    goto $bb13;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb13;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb13;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb13;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i511 == 1;
    goto $bb13;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb13;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i497 == 1;
    goto $bb13;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i490 == 1;
    goto $bb13;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb13;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb13;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb13;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb13;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i455 == 1;
    goto $bb13;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb13;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb13;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb13;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb13;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb13;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb13;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb13;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb13;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb13;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb13;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb13;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb13;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb13;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb13;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb13;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb13;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb13;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb13;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb13;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb13;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb13;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb13;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb13;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb13;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb13;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb13;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb13;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb13;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb13;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb13;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb13;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb13;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb13;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb13;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb13;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb13;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb13;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb13;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb13;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb13;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb13;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb13;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb13;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb13;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb13;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb13;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb13;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb13;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb13;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb13;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb13;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb13;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb13;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb13;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb13;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb13;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb13;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb13;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb13;

  $bb1030:
    assume {:verifier.code 0} true;
    assume $i1792 == 1;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1870} devirtbounce.3(0, .str.5, 2641, 12);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call comedi_cleanup_loop_$bb6();
    goto $bb6_last;

  $bb1026:
    assume {:verifier.code 0} true;
    assume $i1785 == 1;
    goto $bb4;

  $bb1022:
    assume {:verifier.code 0} true;
    assume $i1778 == 1;
    goto $bb4;

  $bb1018:
    assume {:verifier.code 0} true;
    assume $i1771 == 1;
    goto $bb4;

  $bb1014:
    assume {:verifier.code 0} true;
    assume $i1764 == 1;
    goto $bb4;

  $bb1010:
    assume {:verifier.code 0} true;
    assume $i1757 == 1;
    goto $bb4;

  $bb1006:
    assume {:verifier.code 0} true;
    assume $i1750 == 1;
    goto $bb4;

  $bb1002:
    assume {:verifier.code 0} true;
    assume $i1743 == 1;
    goto $bb4;

  $bb998:
    assume {:verifier.code 0} true;
    assume $i1736 == 1;
    goto $bb4;

  $bb994:
    assume {:verifier.code 0} true;
    assume $i1729 == 1;
    goto $bb4;

  $bb990:
    assume {:verifier.code 0} true;
    assume $i1722 == 1;
    goto $bb4;

  $bb986:
    assume {:verifier.code 0} true;
    assume $i1715 == 1;
    goto $bb4;

  $bb982:
    assume {:verifier.code 0} true;
    assume $i1708 == 1;
    goto $bb4;

  $bb978:
    assume {:verifier.code 0} true;
    assume $i1701 == 1;
    goto $bb4;

  $bb974:
    assume {:verifier.code 0} true;
    assume $i1694 == 1;
    goto $bb4;

  $bb970:
    assume {:verifier.code 0} true;
    assume $i1687 == 1;
    goto $bb4;

  $bb966:
    assume {:verifier.code 0} true;
    assume $i1680 == 1;
    goto $bb4;

  $bb962:
    assume {:verifier.code 0} true;
    assume $i1673 == 1;
    goto $bb4;

  $bb958:
    assume {:verifier.code 0} true;
    assume $i1666 == 1;
    goto $bb4;

  $bb954:
    assume {:verifier.code 0} true;
    assume $i1659 == 1;
    goto $bb4;

  $bb950:
    assume {:verifier.code 0} true;
    assume $i1652 == 1;
    goto $bb4;

  $bb946:
    assume {:verifier.code 0} true;
    assume $i1645 == 1;
    goto $bb4;

  $bb942:
    assume {:verifier.code 0} true;
    assume $i1638 == 1;
    goto $bb4;

  $bb938:
    assume {:verifier.code 0} true;
    assume $i1631 == 1;
    goto $bb4;

  $bb934:
    assume {:verifier.code 0} true;
    assume $i1624 == 1;
    goto $bb4;

  $bb930:
    assume {:verifier.code 0} true;
    assume $i1617 == 1;
    goto $bb4;

  $bb926:
    assume {:verifier.code 0} true;
    assume $i1610 == 1;
    goto $bb4;

  $bb922:
    assume {:verifier.code 0} true;
    assume $i1603 == 1;
    goto $bb4;

  $bb918:
    assume {:verifier.code 0} true;
    assume $i1596 == 1;
    goto $bb4;

  $bb914:
    assume {:verifier.code 0} true;
    assume $i1589 == 1;
    goto $bb4;

  $bb910:
    assume {:verifier.code 0} true;
    assume $i1582 == 1;
    goto $bb4;

  $bb906:
    assume {:verifier.code 0} true;
    assume $i1575 == 1;
    goto $bb4;

  $bb902:
    assume {:verifier.code 0} true;
    assume $i1568 == 1;
    goto $bb4;

  $bb898:
    assume {:verifier.code 0} true;
    assume $i1561 == 1;
    goto $bb4;

  $bb894:
    assume {:verifier.code 0} true;
    assume $i1554 == 1;
    goto $bb4;

  $bb890:
    assume {:verifier.code 0} true;
    assume $i1547 == 1;
    goto $bb4;

  $bb886:
    assume {:verifier.code 0} true;
    assume $i1540 == 1;
    goto $bb4;

  $bb882:
    assume {:verifier.code 0} true;
    assume $i1533 == 1;
    goto $bb4;

  $bb878:
    assume {:verifier.code 0} true;
    assume $i1526 == 1;
    goto $bb4;

  $bb874:
    assume {:verifier.code 0} true;
    assume $i1519 == 1;
    goto $bb4;

  $bb870:
    assume {:verifier.code 0} true;
    assume $i1512 == 1;
    goto $bb4;

  $bb866:
    assume {:verifier.code 0} true;
    assume $i1505 == 1;
    goto $bb4;

  $bb862:
    assume {:verifier.code 0} true;
    assume $i1498 == 1;
    goto $bb4;

  $bb858:
    assume {:verifier.code 0} true;
    assume $i1491 == 1;
    goto $bb4;

  $bb854:
    assume {:verifier.code 0} true;
    assume $i1484 == 1;
    goto $bb4;

  $bb850:
    assume {:verifier.code 0} true;
    assume $i1477 == 1;
    goto $bb4;

  $bb846:
    assume {:verifier.code 0} true;
    assume $i1470 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const comedi_init: ref;

axiom comedi_init == $sub.ref(0, 424797);

procedure comedi_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.63, $M.29, $M.0, $M.20, $M.52, $M.39, $M.40, $M.22, $CurrAddr, $M.21, $M.32, assertsPassed, $M.33;



implementation comedi_init() returns ($r: i32)
{
  var $p0: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i27: i32;
  var $i7: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} vslice_dummy_var_179 := printk.ref(.str.85);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $i2 := $M.18;
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 48);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $i8 := register_chrdev_region(102760448, 256, .str.6);
    call {:si_unique_call 2136} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} ldv_cdev_init_11(comedi_cdev, comedi_fops);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), __this_module);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} vslice_dummy_var_181 := kobject_set_name.ref.ref(comedi_cdev, .str.6);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $i11 := cdev_add(comedi_cdev, 102760448, 256);
    call {:si_unique_call 2140} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} $p13 := __class_create(__this_module, .str.6, $p0);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $M.29 := $p13;
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $p14 := $M.29;
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i16 := IS_ERR($p15);
    call {:si_unique_call 2144} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $M.29;
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, comedi_dev_groups);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} comedi_proc_init();
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $i25 := $M.18;
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32(0, $i25);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb20;

  $bb20:
    call $p28, $p29, $i30, $i31, $p32, $p36, $i37, $i38, $i39, $i27 := comedi_init_loop_$bb20($p28, $p29, $i30, $i31, $p32, $p36, $i37, $i38, $i39, $i27);
    goto $bb20_last;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $p28 := comedi_alloc_board_minor($0.ref);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} $i30 := IS_ERR($p29);
    call {:si_unique_call 2153} {:cexpr "tmp___4"} boogie_si_record_i64($i30);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p32 := $p28;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} mutex_unlock($p36);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i27, 1);
    call {:si_unique_call 2160} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $i38 := $M.18;
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, $i38);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i37;
    goto $bb25_dummy;

  $bb22:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} comedi_cleanup_board_minors();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} ldv_cdev_del_13(comedi_cdev);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i34 := PTR_ERR($p33);
    call {:si_unique_call 2158} {:cexpr "tmp___3"} boogie_si_record_i64($i34);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb6;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} vslice_dummy_var_182 := printk.ref(.str.87);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} ldv_cdev_del_12(comedi_cdev);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $p19 := $M.29;
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} $i21 := PTR_ERR($p20);
    call {:si_unique_call 2149} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb6;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb6;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} vslice_dummy_var_180 := printk.ref.i32(.str.86, 48);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12999;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 425829);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} ldv_error();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const register_chrdev_region: ref;

axiom register_chrdev_region == $sub.ref(0, 426861);

procedure register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2162} {:cexpr "register_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2163} {:cexpr "register_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2164} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_cdev_init_11: ref;

axiom ldv_cdev_init_11 == $sub.ref(0, 427893);

procedure ldv_cdev_init_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.52, $M.39, $M.40, $M.0, $CurrAddr;



implementation ldv_cdev_init_11($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} cdev_init($p0, $p1);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 2167} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} ldv_file_operations_2();
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    return;
}



const kobject_set_name: ref;

axiom kobject_set_name == $sub.ref(0, 428925);

procedure kobject_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2169} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 429957);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2171} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2172} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2173} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 430989);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2176} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    return;
}



const __class_create: ref;

axiom __class_create == $sub.ref(0, 432021);

procedure __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p3 := external_alloc();
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_cdev_del_12: ref;

axiom ldv_cdev_del_12 == $sub.ref(0, 433053);

procedure ldv_cdev_del_12($p0: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_cdev_del_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} cdev_del($p0);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 2179} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 434085);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const comedi_proc_init: ref;

axiom comedi_proc_init == $sub.ref(0, 435117);

procedure comedi_proc_init();
  free requires assertsPassed;



implementation comedi_proc_init()
{
  var vslice_dummy_var_183: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} vslice_dummy_var_183 := proc_create(.str.6, 420, $0.ref, comedi_proc_fops);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    return;
}



const comedi_cleanup_board_minors: ref;

axiom comedi_cleanup_board_minors == $sub.ref(0, 436149);

procedure comedi_cleanup_board_minors();
  free requires assertsPassed;
  modifies $M.20, $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_cleanup_board_minors()
{
  var $i1: i32;
  var $i2: i1;
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i0 := comedi_cleanup_board_minors_loop_$bb1($i1, $i2, $i0);
    goto $bb1_last;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} comedi_free_board_minor($i0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    call {:si_unique_call 2182} {:cexpr "i"} boogie_si_record_i32($i1);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, 47);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i1;
    goto $bb3_dummy;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13063;
}



const ldv_cdev_del_13: ref;

axiom ldv_cdev_del_13 == $sub.ref(0, 437181);

procedure ldv_cdev_del_13($p0: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_cdev_del_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} cdev_del($p0);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 2184} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 438213);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    return;
}



const comedi_free_board_minor: ref;

axiom comedi_free_board_minor == $sub.ref(0, 439245);

procedure comedi_free_board_minor($i0: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_free_board_minor($i0: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} {:cexpr "comedi_free_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 47);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2187} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $p6 := comedi_clear_board_minor($i0);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} comedi_free_board_dev($p6);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 2188} devirtbounce.3(0, .str.5, 2492, 12);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_free_board_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const comedi_clear_board_minor: ref;

axiom comedi_clear_board_minor == $sub.ref(0, 440277);

procedure comedi_clear_board_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation comedi_clear_board_minor($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} {:cexpr "comedi_clear_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i1, 8));
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.20, $p2);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i0);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i4, 8));
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p5, $0.ref);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 441309);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 442341);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $p5 := external_alloc();
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const cdev_init: ref;

axiom cdev_init == $sub.ref(0, 443373);

procedure cdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    return;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0, 444405);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_del_14: ref;

axiom ldv_cdev_del_14 == $sub.ref(0, 445437);

procedure ldv_cdev_del_14($p0: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_cdev_del_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} cdev_del($p0);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 2199} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    return;
}



const comedi_proc_cleanup: ref;

axiom comedi_proc_cleanup == $sub.ref(0, 446469);

procedure comedi_proc_cleanup();
  free requires assertsPassed;



implementation comedi_proc_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} remove_proc_entry(.str.6, $0.ref);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 447501);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 448533);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2201} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 1} true;
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 449565);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 450597);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 451629);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 452661);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 453693);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 454725);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 455757);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 456789);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 457821);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 458853);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 459885);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 460917);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 461949);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2202} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2203} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2204} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2205} __VERIFIER_assume($i4);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 462981);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 464013);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 465045);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 466077);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2206} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2207} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2208} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2209} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2210} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2211} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2212} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2213} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2214} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2215} __VERIFIER_assume($i7);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2216} __VERIFIER_assume($i11);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 467109);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 468141);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2217} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2218} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2219} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2220} __VERIFIER_assume($i4);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 469173);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 470205);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 471237);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 472269);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 473301);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2221} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2222} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2223} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2224} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2225} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2226} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2227} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2228} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2229} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2230} __VERIFIER_assume($i7);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2231} __VERIFIER_assume($i11);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 474333);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 475365);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 476397);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 477429);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 478461);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 479493);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 480525);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 481557);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 482589);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2232} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2234} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2235} __VERIFIER_assume($i10);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 483621);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2236} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2237} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2238} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 484653);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2239} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2240} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2241} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 485685);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2242} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2243} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 486717);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 487749);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2244} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2245} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 488781);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 489813);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 490845);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2246} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2247} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2248} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $p6 := malloc($i5);
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 2251} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 491877);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 492909);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.36, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.0, $M.7, $M.34, $M.61, $M.60, $M.62, $M.22, $M.63, $M.29, $M.21, $M.20, $M.18, $M.128;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2252} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.36 := 2048;
    call {:si_unique_call 2253} {:cexpr "comedi_default_buf_size_kb"} boogie_si_record_i32(2048);
    $M.35 := 20480;
    call {:si_unique_call 2254} {:cexpr "comedi_default_buf_maxsize_kb"} boogie_si_record_i32(20480);
    $M.38 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 2255} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 2256} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 2257} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2258} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 2259} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2260} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2261} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2262} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2263} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2264} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2265} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.65 := $store.i32($M.65, range_bipolar10, 1);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 10000000));
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10000000);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i32($M.66, range_bipolar5, 1);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 5000000));
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 5000000);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i32($M.67, range_bipolar2_5, 1);
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 2500000));
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 2500000);
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i32($M.68, range_unipolar10, 1);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10000000);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i32($M.69, range_unipolar5, 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 5000000);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.70 := $store.i32($M.70, range_unipolar2_5, 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 2500000);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.71 := $store.i32($M.71, range_0_20mA, 1);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 20000000);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.72 := $store.i32($M.72, range_4_20mA, 1);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 4000000);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 20000000);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.73 := $store.i32($M.73, range_0_32mA, 1);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 32000000);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.0 := $store.i32($M.0, range_unknown, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 2);
    $M.7 := 0;
    call {:si_unique_call 2266} {:cexpr "comedi_debug"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, comedi_drivers_list_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_drivers_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_drivers_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), comedi_drivers_list_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(24, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(25, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(32, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(33, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.34 := $0.ref;
    $M.61 := $0.ref;
    $M.60 := $0.ref;
    $M.62 := 0;
    call {:si_unique_call 2267} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.22 := 1;
    call {:si_unique_call 2268} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, dev_attr_write_buffer_kb, .str.91);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), write_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), write_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_max_write_buffer_kb, .str.90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), max_write_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), max_write_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_read_buffer_kb, .str.89);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), read_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), read_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_max_read_buffer_kb, .str.88);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), max_read_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), max_read_buffer_kb_store);
    $M.0 := $store.ref($M.0, comedi_dev_attrs, dev_attr_max_read_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(1, 8)), dev_attr_read_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(2, 8)), dev_attr_max_write_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(3, 8)), dev_attr_write_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(4, 8)), $0.ref);
    $M.0 := $store.ref($M.0, comedi_dev_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(16, 1)), comedi_dev_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, comedi_dev_groups, comedi_dev_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.63 := $store.ref($M.63, comedi_cdev, $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(288, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(332, 1)), 0);
    $M.0 := $store.ref($M.0, comedi_vm_ops, comedi_vm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), comedi_vm_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.i32($M.0, comedi_subdevice_minor_table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_subdevice_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_subdevice_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), comedi_subdevice_minor_table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, comedi_board_minor_table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_board_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_board_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), comedi_board_minor_table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.29 := $0.ref;
    $M.21 := $store.ref($M.21, comedi_subdevice_minor_table, $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)), $0.ref);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)), $0.ref);
    $M.20 := $store.ref($M.20, comedi_board_minor_table, $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(1, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(2, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(3, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(4, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(5, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(6, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(7, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(8, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(9, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(10, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(11, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(12, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(13, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(14, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(15, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(16, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(17, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(18, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(19, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(20, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(21, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(22, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(23, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(24, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(25, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(26, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(27, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(28, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(29, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(30, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(31, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(32, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(33, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(34, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(35, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(36, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(37, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(38, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(39, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(40, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(41, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(42, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(43, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(44, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(45, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(46, 8)), $0.ref);
    $M.20 := $store.ref($M.20, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(47, 8)), $0.ref);
    $M.18 := 0;
    call {:si_unique_call 2269} {:cexpr "comedi_num_legacy_minors"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.24, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(29, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(30, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(32, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(34, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(35, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(36, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(37, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(38, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(29, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(33, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(34, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(36, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(38, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(39, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(40, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(41, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(42, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 44)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(29, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.128 := $store.i8($M.128, .str.32, 37);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(1, 1)), 105);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(.str.32, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    call {:si_unique_call 2270} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 493941);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 494973);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2271} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 496005);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(comedi_vm_close, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(comedi_vm_open, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2272} comedi_vm_open($p1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2273} comedi_vm_close($p2);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 497037);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 498069);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(comedi_read___0, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i32 == 1);
    $i31 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i31 == 1);
    $i30 := $eq.ref(comedi_proc_open, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i30 == 1);
    $i29 := $eq.ref(poll_invalid, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i29 == 1);
    $i28 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i28 == 1);
    $i27 := $eq.ref(comedi_close, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i27 == 1);
    $i26 := $eq.ref(comedi_open, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i26 == 1);
    $i25 := $eq.ref(comedi_mmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i25 == 1);
    $i24 := $eq.ref(comedi_poll, $p0);
    assume {:branchcond $i24} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2274} $i3 := comedi_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i25 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2275} $i6 := comedi_mmap($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2276} $i9 := comedi_open($p7, $p8);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    $r := $i9;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2277} $i12 := comedi_close($p10, $p11);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    $r := $i12;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i28 == 1;
    call {:si_unique_call 2278} $i13 := __builtinx_object_size();
    $r := $i13;
    return;

  $bb7:
    assume $i29 == 1;
    call {:si_unique_call 2279} $i14 := poll_invalid(arg, arg1);
    $r := $i14;
    return;

  $bb8:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2280} $i17 := comedi_proc_open($p15, $p16);
    $r := $i17;
    return;

  $bb9:
    assume $i31 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2281} $i20 := single_release($p18, $p19);
    $r := $i20;
    return;

  $bb10:
    assume $i32 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2282} $i23 := comedi_read___0($p21, $p22);
    $r := $i23;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 499101);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.20, $CurrAddr, $M.22, $M.19, $M.25, $M.26, $M.23, $M.28, $M.27, $M.21, $M.32, assertsPassed, $M.33;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(comedi_compat_ioctl, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(comedi_unlocked_ioctl, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2283} $i1 := comedi_unlocked_ioctl(arg, arg1, arg2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    $r := $i1;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2284} $i2 := comedi_compat_ioctl(arg, arg1, arg2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    $r := $i2;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 500133);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 501165);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 502197);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 503229);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2285} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 504261);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2286} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 505293);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 506325);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 507357);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2287} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 508389);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 509421);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2288} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 510453);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 511485);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 512517);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 513549);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 514581);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 515613);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2289} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 516645);

procedure devirtbounce.22(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2290} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 517677);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2291} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 518709);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2292} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 519741);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(insn_rw_emulate_bits, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(insn_inval, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(parse_insn, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    $p2 := $bitcast.ref.ref(arg2);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2293} $i4 := parse_insn(arg, $p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2294} $i5 := __builtinx_object_size();
    $r := $i5;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 2295} $i6 := insn_inval(arg, arg1, arg2, arg3);
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 2296} $i7 := insn_rw_emulate_bits(arg, arg1, arg2, arg3);
    $r := $i7;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 520773);

procedure devirtbounce.26(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.26(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2297} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 521805);

procedure devirtbounce.27(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.27(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 522837);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32);
  free requires assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 523869);

procedure devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2298} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 524901);

procedure devirtbounce.30(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.30(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 525933);

procedure devirtbounce.31(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.31(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 526965);

procedure devirtbounce.32(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.32(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 527997);

procedure devirtbounce.33(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.33(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.34: ref;

axiom devirtbounce.34 == $sub.ref(0, 529029);

procedure devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.0, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(comedi_read___0, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i33 == 1);
    $i32 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i32 == 1);
    $i31 := $eq.ref(comedi_proc_open, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i31 == 1);
    $i30 := $eq.ref(poll_invalid, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i30 == 1);
    $i29 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i29 == 1);
    $i28 := $eq.ref(comedi_close, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i28 == 1);
    $i27 := $eq.ref(comedi_open, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i27 == 1);
    $i26 := $eq.ref(comedi_mmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i26 == 1);
    $i25 := $eq.ref(comedi_poll, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2299} $i3 := comedi_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i26 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2300} $i6 := comedi_mmap($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2301} $i9 := comedi_open($p7, $p8);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    $r := $i9;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i28 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2302} $i12 := comedi_close($p10, $p11);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    $r := $i12;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i29 == 1;
    call {:si_unique_call 2303} $i13 := __builtinx_object_size();
    $r := $i13;
    return;

  $bb7:
    assume $i30 == 1;
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2304} $i15 := poll_invalid(arg, $p14);
    $r := $i15;
    return;

  $bb8:
    assume $i31 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2305} $i18 := comedi_proc_open($p16, $p17);
    $r := $i18;
    return;

  $bb9:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2306} $i21 := single_release($p19, $p20);
    $r := $i21;
    return;

  $bb10:
    assume $i33 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2307} $i24 := comedi_read___0($p22, $p23);
    $r := $i24;
    return;
}



const devirtbounce.35: ref;

axiom devirtbounce.35 == $sub.ref(0, 530061);

procedure devirtbounce.35(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.35(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.36: ref;

axiom devirtbounce.36 == $sub.ref(0, 531093);

procedure devirtbounce.36(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.36(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.36, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.0, $M.7, $M.34, $M.61, $M.60, $M.62, $M.22, $M.63, $M.29, $M.21, $M.20, $M.18, $M.128, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2308} __SMACK_static_init();
    call {:si_unique_call 2309} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.37, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.17, $M.14, $M.15, $M.58, $M.19, $M.59, $M.41, $M.42, $M.43, $M.44, $M.38, $M.45, $M.46, $M.47, $M.48, $M.36, $M.35, $M.39, $M.40, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.7, $M.34, $M.61, $M.60, $M.62, $M.22, $M.63, $M.29, $M.21, $M.20, $M.18, $M.128, $CurrAddr, $M.23, $M.32, $M.25, $M.26, $M.33, $M.28, $M.27;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation comedi_read_loop_$bb32(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p47: ref, in_$p55: ref, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i91: i1, in_$i92: i8, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$i90: i32, in_$i135: i1) returns (out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i91: i1, out_$i92: i8, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$i90: i32, out_$i135: i1)
{

  entry:
    out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i90, out_$i135 := in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i90, in_$i135;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(0, 0);
    goto corral_source_split_157;

  $bb65:
    assume {:verifier.code 0} true;
    assume in_$i68 == 1;
    goto $bb65_dummy;

  $bb64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  $bb63:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i117, out_$i119);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_240;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_239;

  $bb60:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i64(out_$i113, 0);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_233;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_232;

  $bb57:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} out_$i109 := signal_pending(out_$p108);
    call {:si_unique_call 52} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$p108 := get_current();
    goto corral_source_split_226;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} schedule();
    goto corral_source_split_225;

  $bb54:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i32(out_$i105, 2048);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_219;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_218;

  $bb47:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_197;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb44:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := 1;
    goto $bb45;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i94 := 0;
    goto $bb45;

  $bb43:
    assume out_$i93 == 1;
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i93 := $trunc.i8.i1(out_$i92);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i1.i8(out_$i91);
    call {:si_unique_call 41} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i92);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$i91 := comedi_is_subdevice_running(in_$p47);
    goto corral_source_split_190;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i88;
    assume true;
    goto $bb41;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 0);
    goto corral_source_split_187;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  $bb39:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := out_$i73;
    goto $bb40;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i86;
    goto $bb40;

  $bb38:
    assume out_$i87 == 1;
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, out_$i73);
    goto corral_source_split_182;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  $bb36:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := out_$i74;
    goto $bb37;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i85;
    goto $bb37;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i82, out_$i84);
    call {:si_unique_call 39} {:cexpr "m"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.0, out_$p83);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_175;

  $bb35:
    assume out_$i80 == 1;
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i80 := $ugt.i32(out_$i77, out_$i79);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, out_$i74);
    goto corral_source_split_169;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$i74 := comedi_buf_read_n_available(in_$p55);
    call {:si_unique_call 38} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_166;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i64.i32(in_$i2);
    call {:si_unique_call 36} {:cexpr "n"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, in_$p6, out_$i72);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p69, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 35} out_$i72 := devirtbounce(0, out_$p71, out_$i70, out_$p71);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.14, in_$p6);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} out_$p69 := get_current();
    goto corral_source_split_160;

  $bb33:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, in_$p6, 1);
    goto corral_source_split_159;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb71:
    assume out_$i135 == 1;
    goto corral_source_split_267;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i90, out_$i135 := comedi_read_loop_$bb32(in_$p0, in_$i2, in_$p6, in_$p47, in_$p55, in_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i90, out_$i135);
    return;

  exit:
    return;
}



procedure comedi_read_loop_$bb32(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p47: ref, in_$p55: ref, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i91: i1, in_$i92: i8, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$i90: i32, in_$i135: i1) returns (out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i91: i1, out_$i92: i8, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$i90: i32, out_$i135: i1);
  modifies $M.14;



implementation comedi_write_loop_$bb32(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p47: ref, in_$p55: ref, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i8, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$i111: i32, in_$i144: i1, in_vslice_dummy_var_18: i32) returns (out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i8, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$i111: i32, out_$i144: i1, out_vslice_dummy_var_18: i32)
{

  entry:
    out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i111, out_$i144, out_vslice_dummy_var_18 := in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i111, in_$i144, in_vslice_dummy_var_18;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(0, 0);
    goto corral_source_split_398;

  $bb71:
    assume {:verifier.code 0} true;
    assume in_$i68 == 1;
    goto $bb71_dummy;

  $bb70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  $bb69:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i125, out_$i127);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$i125 := $p2i.ref.i64(out_$p124);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_497;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_496;

  $bb66:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i64(out_$i121, 0);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_490;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p47, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_489;

  $bb63:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} out_$i117 := signal_pending(out_$p116);
    call {:si_unique_call 101} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} out_$p116 := get_current();
    goto corral_source_split_483;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} schedule();
    goto corral_source_split_482;

  $bb60:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$i114 := $and.i32(out_$i113, 2048);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_475;

  $bb57:
    assume out_$i110 == 1;
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i109;
    assume true;
    goto $bb57;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_472;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_471;

  $bb55:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := out_$i88;
    goto $bb56;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i107;
    goto $bb56;

  $bb54:
    assume out_$i108 == 1;
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, out_$i88);
    goto corral_source_split_467;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  $bb52:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := out_$i100;
    goto $bb53;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i107 := out_$i106;
    goto $bb53;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} out_$i106 := comedi_buf_write_n_allocated(in_$p55);
    call {:si_unique_call 97} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_464;

  $bb51:
    assume out_$i105 == 1;
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$i105 := $ugt.i32(out_$i100, out_$i104);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} out_$i104 := comedi_buf_write_n_allocated(in_$p55);
    call {:si_unique_call 95} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} out_vslice_dummy_var_18 := comedi_buf_write_alloc(in_$p55, out_$i102);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_457;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  $bb49:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i88;
    goto $bb50;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i99;
    goto $bb50;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i96, out_$i98);
    call {:si_unique_call 92} {:cexpr "m"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_450;

  $bb48:
    assume out_$i94 == 1;
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i94 := $ugt.i32(out_$i91, out_$i93);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i90, out_$i88);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p55, $mul.ref(0, 296)), $mul.ref(60, 1));
    goto corral_source_split_442;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i64.i32(in_$i2);
    call {:si_unique_call 91} {:cexpr "n"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_441;

  $bb39:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_413;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  $bb36:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := 1;
    goto $bb37;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb37;

  $bb35:
    assume out_$i75 == 1;
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i8.i1(out_$i74);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i8(out_$i73);
    call {:si_unique_call 83} {:cexpr "tmp___9"} boogie_si_record_i8(out_$i74);
    goto corral_source_split_407;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} out_$i73 := comedi_is_subdevice_running(in_$p47);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, in_$p6, out_$i72);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p69, $mul.ref(0, 9672)), $mul.ref(0, 1));
    call {:si_unique_call 81} out_$i72 := devirtbounce(0, out_$p71, out_$i70, out_$p71);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.16, in_$p6);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} out_$p69 := get_current();
    goto corral_source_split_401;

  $bb33:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, in_$p6, 1);
    goto corral_source_split_400;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb77:
    assume out_$i144 == 1;
    goto corral_source_split_525;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i111, out_$i144, out_vslice_dummy_var_18 := comedi_write_loop_$bb32(in_$p0, in_$i2, in_$p6, in_$p47, in_$p55, in_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i111, out_$i144, out_vslice_dummy_var_18);
    return;

  exit:
    return;
}



procedure comedi_write_loop_$bb32(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p47: ref, in_$p55: ref, in_$i68: i1, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i8, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$i111: i32, in_$i144: i1, in_vslice_dummy_var_18: i32) returns (out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i8, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$i111: i32, out_$i144: i1, out_vslice_dummy_var_18: i32);
  modifies $M.0, $M.16;



implementation comedi_mmap_loop_$bb42(in_$p1: ref, in_$p4: ref, in_$p49: ref, in_$i86: i32, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$i106: i32, in_$i107: i1, in_$i108: i64, in_$i109: i32, in_$i110: i1, in_$i88: i32, in_$i89: i64) returns (out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$i106: i32, out_$i107: i1, out_$i108: i64, out_$i109: i32, out_$i110: i1, out_$i88: i32, out_$i89: i64)
{

  entry:
    out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i88, out_$i89 := in_$p90, in_$p91, in_$i92, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i88, in_$i89;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_998;

  $bb47:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i88, out_$i89 := out_$i109, out_$i108;
    goto $bb47_dummy;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i109, in_$i86);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i88, 1);
    call {:si_unique_call 215} {:cexpr "i"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1023;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i64(out_$i89, 4096);
    call {:si_unique_call 214} {:cexpr "start"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_1022;

  $bb45:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} out_$i106 := remap_pfn_range(in_$p1, out_$i89, out_$i103, 4096, out_$i105);
    call {:si_unique_call 213} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.19, out_$p104);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i103 := $sdiv.i64(out_$i102, 64);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i64(out_$i101, 24189255811072);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i99, 64));
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i99 := $lshr.i64(out_$i98, 12);
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out_$i98 := __phys_addr(out_$i97);
    call {:si_unique_call 211} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p91, $mul.ref(out_$i92, 16)), $mul.ref(0, 1));
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, out_$p94, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i88);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_1001;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p49, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i88, out_$i89 := comedi_mmap_loop_$bb42(in_$p1, in_$p4, in_$p49, in_$i86, out_$p90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i88, out_$i89);
    return;

  exit:
    return;
}



procedure comedi_mmap_loop_$bb42(in_$p1: ref, in_$p4: ref, in_$p49: ref, in_$i86: i32, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$i106: i32, in_$i107: i1, in_$i108: i64, in_$i109: i32, in_$i110: i1, in_$i88: i32, in_$i89: i64) returns (out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$i106: i32, out_$i107: i1, out_$i108: i64, out_$i109: i32, out_$i110: i1, out_$i88: i32, out_$i89: i64);
  modifies $M.23, $CurrAddr, $M.19;



implementation comedi_close_loop_$bb10(in_$p1: ref, in_$p3: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_vslice_dummy_var_28: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_vslice_dummy_var_28: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_28 := in_$p16, in_$p17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i15, in_vslice_dummy_var_28;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  $bb18:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i34;
    goto $bb18_dummy;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i34);
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p12);
    goto corral_source_split_1311;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i15, 1);
    call {:si_unique_call 256} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1310;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, $0.ref);
    goto corral_source_split_1308;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 312)), $mul.ref(48, 1));
    goto corral_source_split_1307;

  $bb15:
    assume out_$i32 == 1;
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i29, out_$i31);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1300;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 312)), $mul.ref(48, 1));
    goto corral_source_split_1299;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_30:
    goto corral_source_split_1297;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} out_vslice_dummy_var_28 := do_cancel(in_$p3, out_$p19);
    goto SeqInstr_29;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i22, out_$i24);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 312)), $mul.ref(56, 1));
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 312));
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1286;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p3, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_28 := comedi_close_loop_$bb10(in_$p1, in_$p3, in_$p12, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_28);
    return;

  exit:
    return;
}



procedure comedi_close_loop_$bb10(in_$p1: ref, in_$p3: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_vslice_dummy_var_28: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_vslice_dummy_var_28: i32);
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.19, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation comedi_dev_from_board_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_dev_from_board_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_dev_from_board_minor_loop_$bb3();



implementation comedi_subdevice_from_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_subdevice_from_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_subdevice_from_minor_loop_$bb3();



implementation compat_insnlist_loop_$bb21(in_$i22: i32, in_$p32: ref, in_$p38: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i65: i32)
{

  entry:
    out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65 := in_$p66, in_$p67, in_$i68, in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i65;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  $bb26:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i75;
    goto $bb26_dummy;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i76 := $ult.i32(out_$i75, in_$i22);
    goto corral_source_split_2069;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i65, 1);
    call {:si_unique_call 501} {:cexpr "n"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_2068;

  $bb24:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i72;
    assume true;
    goto $bb24;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_$i72 := get_compat_insn(out_$p69, out_$p71);
    call {:si_unique_call 500} {:cexpr "rc"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(in_$p32, $mul.ref(out_$i70, 32));
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i65);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 40));
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i65);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_2058;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65 := compat_insnlist_loop_$bb21(in_$i22, in_$p32, in_$p38, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65);
    return;

  exit:
    return;
}



procedure compat_insnlist_loop_$bb21(in_$i22: i32, in_$p32: ref, in_$p38: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i65: i32);
  modifies $M.27, $CurrAddr;



implementation do_subdinfo_ioctl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$p21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$i130, in_$i131, in_$p132, in_$p133, in_$p134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  $bb46:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i137;
    goto $bb46_dummy;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i139 := $sgt.i32(out_$i138, out_$i137);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, in_$p11);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i14, 1);
    call {:si_unique_call 786} {:cexpr "i"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p136, out_$i135);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_3145;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(176, 1));
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, 2);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p132, 1);
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_3138;

  $bb43:
    assume out_$i131 == 1;
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, $p2i.ref.i64(insn_inval));
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i130 := $p2i.ref.i64(out_$p129);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_3133;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(224, 1));
    goto corral_source_split_3132;

  $bb41:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, out_$i126);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i126 := $or.i32(out_$i125, 4096);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3126;

  $bb40:
    assume out_$i123 == 1;
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i64(out_$i122, 0);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i122 := $p2i.ref.i64(out_$p121);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_3121;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(240, 1));
    goto corral_source_split_3120;

  $bb38:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i118);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i118 := $or.i32(out_$i117, 64);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3114;

  $bb37:
    assume out_$i115 == 1;
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_3109;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(192, 1));
    goto corral_source_split_3108;

  $bb35:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, out_$i110);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i110 := $or.i32(out_$i109, 32);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3102;

  $bb34:
    assume out_$i107 == 1;
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3097;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(168, 1));
    goto corral_source_split_3096;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p103, out_$i102);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i102 := $or.i32(out_$i101, 16);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3090;

  $bb31:
    assume out_$i99 == 1;
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(152, 1));
    goto corral_source_split_3084;

  $bb28:
    assume out_$i95 == 1;
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_3080;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(148, 1));
    goto corral_source_split_3079;

  $bb26:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p92, out_$i91);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i91 := $or.i32(out_$i90, 8);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3073;

  $bb25:
    assume out_$i88 == 1;
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i64(out_$i86, out_$i87);
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i87 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_3067;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(48, 1));
    goto corral_source_split_3066;

  $bb23:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p83, out_$i82);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i81, 4);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3060;

  $bb22:
    assume out_$i79 == 1;
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_3055;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(48, 1));
    goto corral_source_split_3054;

  $bb20:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p75, out_$i74);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i73, 2);
    goto corral_source_split_3050;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3048;

  $bb19:
    assume out_$i71 == 1;
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i64(out_$i69, out_$i70);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_3042;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(56, 1));
    goto corral_source_split_3041;

  $bb17:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p66, out_$i65);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i65 := $or.i32(out_$i64, 1);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  $bb16:
    assume out_$i62 == 1;
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, 0);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(56, 1));
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i57);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(24, 1));
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_3026;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(160, 1));
    goto corral_source_split_3025;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i32(out_$i48, out_$i52);
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_3017;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(184, 1));
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i48 := $shl.i32(out_$i14, 24);
    goto corral_source_split_3013;

  $bb13:
    assume out_$i47 == 1;
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(184, 1));
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i42);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(20, 1));
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(148, 1));
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i39);
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(24, 1));
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, 5);
    goto corral_source_split_2998;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(12, 1));
    goto corral_source_split_2997;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i35);
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i34, 134217728);
    goto corral_source_split_2993;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2991;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i31);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i8(out_$i30);
    call {:si_unique_call 785} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i30 := comedi_is_subdevice_running(out_$p18);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(20, 1));
    goto corral_source_split_2982;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i25);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(4, 1));
    goto corral_source_split_2980;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_2979;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(16, 1));
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, out_$i22);
    goto corral_source_split_2977;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_2975;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 312)), $mul.ref(12, 1));
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 312));
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2969;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_3023;

  $bb14:
    assume !(out_$i47 == 1);
    goto corral_source_split_3022;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb30;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_3142;

  $bb44:
    assume !(out_$i131 == 1);
    goto corral_source_split_3141;

  $bb46_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i14 := do_subdinfo_ioctl_loop_$bb8(in_$p0, in_$p2, in_$p7, in_$p11, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i14);
    return;

  exit:
    return;
}



procedure do_subdinfo_ioctl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i14: i32);
  modifies $M.0;



implementation do_chaninfo_ioctl_loop_$bb37(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i17: i64, in_$p72: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i75: i32) returns (out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i75: i32)
{

  entry:
    out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i75 := in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i75;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  $bb43:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := out_$i99;
    goto $bb43_dummy;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$i101 := $sgt.i32(out_$i100, out_$i99);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, in_$p72);
    goto corral_source_split_3301;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i75, 1);
    call {:si_unique_call 801} {:cexpr "i"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_3300;

  $bb41:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p94, $mul.ref(out_$i95, 4));
    call {:si_unique_call 799} out_$i97 := devirtbounce.22(0, out_$i92, out_$p96);
    call {:si_unique_call 800} {:cexpr "__ret_pu"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i75);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} might_fault();
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i32(out_$i84, out_$i91);
    call {:si_unique_call 797} {:cexpr "x"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p86, $mul.ref(out_$i87, 8));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i75);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p14, $mul.ref(in_$i17, 312)), $mul.ref(192, 1));
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i84 := $or.i32(out_$i82, out_$i83);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i83 := $shl.i32(out_$i75, 16);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i32(out_$i78, out_$i81);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i81 := $shl.i32(out_$i80, 24);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i78 := $shl.i32(out_$i77, 28);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_3274;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(32, 1));
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i75 := do_chaninfo_ioctl_loop_$bb37(in_$p0, in_$p2, in_$p14, in_$i17, in_$p72, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i75);
    return;

  exit:
    return;
}



procedure do_chaninfo_ioctl_loop_$bb37(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i17: i64, in_$p72: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i75: i32) returns (out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i75: i32);



implementation do_insnlist_ioctl_loop_$bb36(in_$p0: ref, in_$p2: ref, in_$p16: ref, in_$p45: ref, in_$p96: ref, in_$i102: i64, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i32, in_$i167: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i173: i64, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i64, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i64, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i101: i32, in_$i217: i32, in_$i218: i32) returns (out_$i102: i64, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i32, out_$i167: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i173: i64, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i64, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i64, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i101: i32, out_$i217: i32, out_$i218: i32)
{

  entry:
    out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i101, out_$i217, out_$i218 := in_$i102, in_$p104, in_$i105, in_$i106, in_$i107, in_$i127, in_$p129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$p136, in_$p137, in_$p138, in_$i139, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p181, in_$p182, in_$p183, in_$p184, in_$i185, in_$p187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i101, in_$i217, in_$i218;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  $bb77:
    assume out_$i216 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := out_$i214;
    goto $bb77_dummy;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    out_$i217, out_$i218 := out_$i214, out_$i169;
    assume true;
    goto $bb77;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    out_$i216 := $ult.i32(out_$i214, out_$i215);
    goto corral_source_split_5037;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, in_$p96);
    goto corral_source_split_5036;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i214 := $add.i32(out_$i101, 1);
    call {:si_unique_call 1007} {:cexpr "i"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_5035;

  $bb75:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} schedule();
    goto corral_source_split_5033;

  $bb74:
    assume out_$i213 == 1;
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$i213 := $ne.i32(out_$i212, 0);
    goto corral_source_split_5030;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} out_$i212 := need_resched();
    call {:si_unique_call 1005} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i212);
    goto corral_source_split_5029;

  $bb63:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb65:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i192 := out_$i101;
    assume true;
    goto $bb65;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, 0);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_$i190 := copy_to_user(out_$p183, out_$p184, out_$i189);
    call {:si_unique_call 1000} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i189 := $mul.i32(out_$i188, 4);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.0, out_$p187);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i185, 40)), $mul.ref(4, 1));
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$i185 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(in_$p16);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(out_$p182);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$p182 := $load.ref($M.0, out_$p181);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i179, 40)), $mul.ref(8, 1));
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4984;

  $bb62:
    assume out_$i178 == 1;
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i177 := $and.i32(out_$i176, 67108864);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i32($M.0, out_$p175);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i173, 40)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto corral_source_split_4977;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i173 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4976;

  $bb60:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$i171, out_$i172 := out_$i101, out_$i169;
    assume true;
    goto $bb60;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i169, 0);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} out_$i169 := parse_insn(in_$p0, out_$p168, in_$p16, in_$p2);
    call {:si_unique_call 998} {:cexpr "ret"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref(in_$p45, $mul.ref(out_$i167, 40));
    goto corral_source_split_4970;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4969;

  $bb48:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i101;
    assume true;
    goto $bb50;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$i145 := copy_from_user(out_$p133, out_$p138, out_$i144);
    call {:si_unique_call 993} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i145);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i144 := $mul.i64(out_$i143, 4);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i32.i64(out_$i142);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.0, out_$p141);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i139, 40)), $mul.ref(4, 1));
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i139 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i134, 40)), $mul.ref(8, 1));
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i134 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(in_$p16);
    goto corral_source_split_4923;

  $bb47:
    assume out_$i132 == 1;
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i131, 0);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i131 := $and.i32(out_$i130, 134217728);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i127, 40)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4915;

  $bb39:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i107 := out_$i101;
    assume true;
    goto $bb39;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i106 := $ugt.i32(out_$i105, 256);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p45, $mul.ref(out_$i102, 40)), $mul.ref(4, 1));
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb77_dummy:
    call {:si_unique_call 1} out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i101, out_$i217, out_$i218 := do_insnlist_ioctl_loop_$bb36(in_$p0, in_$p2, in_$p16, in_$p45, in_$p96, out_$i102, out_$p104, out_$i105, out_$i106, out_$i107, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i101, out_$i217, out_$i218);
    return;

  exit:
    return;
}



procedure do_insnlist_ioctl_loop_$bb36(in_$p0: ref, in_$p2: ref, in_$p16: ref, in_$p45: ref, in_$p96: ref, in_$i102: i64, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i32, in_$i167: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i173: i64, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i64, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i64, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i101: i32, in_$i217: i32, in_$i218: i32) returns (out_$i102: i64, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i32, out_$i167: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i173: i64, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i64, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i64, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i101: i32, out_$i217: i32, out_$i218: i32);
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation parse_insn_loop_$bb128(in_$p2: ref, in_$i290: i32, in_$p293: ref, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i1, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i296: i32) returns (out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i1, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i296: i32)
{

  entry:
    out_$i297, out_$p298, out_$i299, out_$i300, out_$i321, out_$i322, out_$i323, out_$i296 := in_$i297, in_$p298, in_$i299, in_$i300, in_$i321, in_$i322, in_$i323, in_$i296;
    goto $bb128, exit;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  $bb140:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$i296 := out_$i321;
    goto $bb140_dummy;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i323 := $ult.i32(out_$i321, out_$i322);
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.0, in_$p293);
    goto corral_source_split_5683;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i321 := $add.i32(out_$i296, 1);
    call {:si_unique_call 1090} {:cexpr "i"} boogie_si_record_i32(out_$i321);
    goto corral_source_split_5682;

  $bb131:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    out_$i300 := $ugt.i32(out_$i299, in_$i290);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    out_$i299 := $load.i32($M.0, out_$p298);
    goto corral_source_split_5645;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$p298 := $add.ref(in_$p2, $mul.ref(out_$i297, 4));
    goto corral_source_split_5644;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i297 := $sext.i32.i64(out_$i296);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb140_dummy:
    call {:si_unique_call 1} out_$i297, out_$p298, out_$i299, out_$i300, out_$i321, out_$i322, out_$i323, out_$i296 := parse_insn_loop_$bb128(in_$p2, in_$i290, in_$p293, out_$i297, out_$p298, out_$i299, out_$i300, out_$i321, out_$i322, out_$i323, out_$i296);
    return;

  exit:
    return;
}



procedure parse_insn_loop_$bb128(in_$p2: ref, in_$i290: i32, in_$p293: ref, in_$i297: i64, in_$p298: ref, in_$i299: i32, in_$i300: i1, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i296: i32) returns (out_$i297: i64, out_$p298: ref, out_$i299: i32, out_$i300: i1, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i296: i32);



implementation comedi_check_chanlist_loop_$bb9(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i27: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i66: i32, in_$i67: i1, in_$i14: i32) returns (out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i27: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i66: i32, out_$i67: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27, out_$p43, out_$i44, out_$i45, out_$i50, out_$i51, out_$i52, out_$i46, out_$i47, out_$i48, out_$i49, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i14 := in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i27, in_$p43, in_$i44, in_$i45, in_$i50, in_$i51, in_$i52, in_$i46, in_$i47, in_$i48, in_$i49, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i66, in_$i67, in_$i14;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5777;

  $bb30:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i66;
    goto $bb30_dummy;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i66, in_$i1);
    goto corral_source_split_5841;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i14, 1);
    call {:si_unique_call 1117} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_5840;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60, out_$i61, out_$i62 := out_$i14, out_$i17, out_$i18, out_$i27;
    assume true;
    goto $bb27;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_$i57 := aref_invalid(in_$p0, out_$i17);
    call {:si_unique_call 1115} {:cexpr "tmp"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_5830;

  $bb24:
    assume !(out_$i52 == 1);
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i48, out_$i49 := out_$i14, out_$i17, out_$i18, out_$i27;
    assume true;
    goto $bb24;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$i52 := $uge.i32(out_$i51, out_$i27);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i32(out_$i50, 255);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i50 := $lshr.i32(out_$i17, 16);
    goto corral_source_split_5825;

  $bb22:
    assume !(out_$i45 == 1);
    goto corral_source_split_5824;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i48, out_$i49 := out_$i14, out_$i17, out_$i18, out_$i27;
    assume true;
    goto $bb22;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i32(out_$i44, out_$i18);
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_5801;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5800;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i42;
    goto $bb13;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i26;
    goto $bb13;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    call {:si_unique_call 1111} {:cexpr "range_len"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_5789;

  $bb11:
    assume out_$i22 == 1;
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_5785;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i32(out_$i17, 65535);
    call {:si_unique_call 1110} {:cexpr "chan"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    call {:si_unique_call 1109} {:cexpr "chanspec"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5781;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(in_$p2, $mul.ref(out_$i15, 4));
    goto corral_source_split_5780;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_5779;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb19;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i41;
    goto $bb19;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    call {:si_unique_call 1112} {:cexpr "range_len"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(out_$i37, 8));
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i18);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(192, 1));
    goto corral_source_split_5811;

  $bb17:
    assume out_$i34 == 1;
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i33, out_$i18);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_5806;

  $bb14:
    assume out_$i31 == 1;
    goto corral_source_split_5805;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(192, 1));
    goto corral_source_split_5795;

  $bb12:
    assume !(out_$i22 == 1);
    goto corral_source_split_5794;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb16;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27, out_$p43, out_$i44, out_$i45, out_$i50, out_$i51, out_$i52, out_$i46, out_$i47, out_$i48, out_$i49, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i14 := comedi_check_chanlist_loop_$bb9(in_$p0, in_$i1, in_$p2, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i27, out_$p43, out_$i44, out_$i45, out_$i50, out_$i51, out_$i52, out_$i46, out_$i47, out_$i48, out_$i49, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$i14);
    return;

  exit:
    return;
}



procedure comedi_check_chanlist_loop_$bb9(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i27: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i66: i32, in_$i67: i1, in_$i14: i32) returns (out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i27: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i66: i32, out_$i67: i1, out_$i14: i32);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation comedi_buf_munge_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i20: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i23: i32, in_$i72: i32) returns (out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i23: i32, out_$i72: i32)
{

  entry:
    out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72 := in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i23, in_$i72;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;

  $bb15:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i70;
    goto $bb15_dummy;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i70;
    assume true;
    goto $bb15;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i70, in_$i20);
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i23, out_$i31);
    call {:si_unique_call 1190} {:cexpr "count"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, out_$i68);
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$i68 := $urem.i32(out_$i65, out_$i67);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i62);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, out_$i31);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, out_$i58);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, out_$i31);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(80, 1));
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i54);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i54 := $urem.i32(out_$i50, out_$i53);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, out_$i47);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i45, out_$i46);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$i46 := $udiv.i32(out_$i31, in_$i4);
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 1188} devirtbounce.28(out_$p33, out_$p35, in_$p3, out_$p41, out_$i31, out_$i43);
    call {:si_unique_call 1189} devirtbounce.27(0);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(76, 1));
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p37, $mul.ref(out_$i40, 1));
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 312)), $mul.ref(280, 1));
    goto corral_source_split_6137;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6136;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb14;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i29;
    goto $bb14;

  $bb12:
    assume out_$i30 == 1;
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i32(out_$i24, out_$i29);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i26, out_$i28);
    call {:si_unique_call 1187} {:cexpr "buf_end"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(84, 1));
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_6127;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(in_$i20, out_$i23);
    call {:si_unique_call 1186} {:cexpr "block_size"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72 := comedi_buf_munge_loop_$bb10(in_$p0, in_$p3, in_$i4, in_$i20, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72);
    return;

  exit:
    return;
}



procedure comedi_buf_munge_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i20: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i23: i32, in_$i72: i32) returns (out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i23: i32, out_$i72: i32);
  modifies $M.0;



implementation __comedi_buf_free_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i32, in_$i47: i1, in_$i18: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i32, out_$i47: i1, out_$i18: i32)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i18 := in_$p19, in_$p20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i18;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  $bb19:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i46;
    goto $bb19_dummy;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i46, in_$i2);
    goto corral_source_split_6486;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1231} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6485;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} free_pages(out_$i45, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} dma_free_attrs(out_$p38, 4096, out_$p40, out_$i42, $0.ref);
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(8, 1));
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6472;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 3);
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_6468;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 312)), $mul.ref(288, 1));
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} clear_bit(10, out_$p33);
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i31, 64)), $mul.ref(0, 1));
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i31 := $lshr.i64(out_$i30, 12);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out_$i30 := __phys_addr(out_$i29);
    call {:si_unique_call 1227} {:cexpr "tmp"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6459;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_6458;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i18);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_6450;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6449;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_6481;

  $bb16:
    assume !(out_$i36 == 1);
    goto corral_source_split_6480;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i18 := __comedi_buf_free_loop_$bb11(in_$p0, in_$p1, in_$i2, in_$p4, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i18);
    return;

  exit:
    return;
}



procedure __comedi_buf_free_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i32, in_$i47: i1, in_$i18: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i32, out_$i47: i1, out_$i18: i32);



implementation __comedi_buf_alloc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p5: ref, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i24: i32, in_$i63: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i24: i32, out_$i63: i32)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i24, out_$i63 := in_$p25, in_$p26, in_$i27, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i24, in_$i63;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;

  $bb20:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i61;
    goto $bb20_dummy;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i61;
    assume true;
    goto $bb20;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i61, in_$i2);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1245} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, out_$p58);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(in_$p19, $mul.ref(out_$i59, 8));
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i24);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i57, 64));
    goto corral_source_split_6575;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i57 := $lshr.i64(out_$i56, 12);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} out_$i56 := __phys_addr(out_$i55);
    call {:si_unique_call 1244} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} set_bit(10, out_$p52);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i50, 64)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$i50 := $lshr.i64(out_$i49, 12);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} out_$i49 := __phys_addr(out_$i48);
    call {:si_unique_call 1241} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_6563;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6562;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i24;
    assume true;
    goto $bb17;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_6553;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p39, out_$p38);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p36, out_$p35);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} out_$p35 := dma_alloc_attrs(out_$p33, 4096, out_$p34, 16592, $0.ref);
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(40, 1));
    goto corral_source_split_6540;

  $bb13:
    assume out_$i31 == 1;
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 3);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 312)), $mul.ref(288, 1));
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i24);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_6532;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$p38 := $i2p.i64.ref(out_$i37);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} out_$i37 := get_zeroed_page(208);
    call {:si_unique_call 1239} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_6548;

  $bb14:
    assume !(out_$i31 == 1);
    goto corral_source_split_6547;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i24, out_$i63 := __comedi_buf_alloc_loop_$bb11(in_$p0, in_$p1, in_$i2, in_$p5, in_$p19, out_$p25, out_$p26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i24, out_$i63);
    return;

  exit:
    return;
}



procedure __comedi_buf_alloc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p5: ref, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i24: i32, in_$i63: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i24: i32, out_$i63: i32);
  modifies $M.0;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation comedi_device_cleanup_loop_$bb11(in_$p0: ref, in_$p11: ref, in_$p12: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22 := in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb16_dummy;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, 0);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p20, out_$i19);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i32(out_$i18, 1);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  SeqInstr_129:
    goto corral_source_split_6801;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_module_put_2(__this_module);
    goto SeqInstr_128;

  $bb14:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_126:
    goto corral_source_split_6799;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_module_put_1(in_$p11);
    goto SeqInstr_125;

  $bb13:
    assume out_$i16 == 1;
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_6796;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p11);
    goto corral_source_split_6795;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22 := comedi_device_cleanup_loop_$bb11(in_$p0, in_$p11, in_$p12, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure comedi_device_cleanup_loop_$bb11(in_$p0: ref, in_$p11: ref, in_$p12: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1);
  modifies $M.0, $M.22, assertsPassed;



implementation cleanup_device_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32, in_vslice_dummy_var_89: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32, out_vslice_dummy_var_89: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8, out_vslice_dummy_var_89 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i8, in_vslice_dummy_var_89;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6854;

  $bb14:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i26;
    goto $bb14_dummy;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, out_$i26);
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p5);
    goto corral_source_split_6883;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1325} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_6882;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} kfree(out_$p25);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} out_vslice_dummy_var_89 := comedi_buf_alloc(in_$p0, out_$p12, 0);
    goto corral_source_split_6876;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_6870;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} comedi_free_subdevice_minor(out_$p12);
    goto corral_source_split_6869;

  $bb9:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} kfree(out_$p17);
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(32, 1));
    goto corral_source_split_6865;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i14, 0);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(64, 1));
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 312));
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_6857;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8, out_vslice_dummy_var_89 := cleanup_device_loop_$bb6(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8, out_vslice_dummy_var_89);
    return;

  exit:
    return;
}



procedure cleanup_device_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32, in_vslice_dummy_var_89: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32, out_vslice_dummy_var_89: i32);
  modifies $M.0, $M.32, $M.33, $CurrAddr, $M.21;



implementation comedi_free_subdevice_minor_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} comedi_free_subdevice_minor_loop_$bb14();
    return;

  exit:
    return;
}



procedure comedi_free_subdevice_minor_loop_$bb14();



implementation comedi_free_subdevice_minor_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} comedi_free_subdevice_minor_loop_$bb10();
    return;

  exit:
    return;
}



procedure comedi_free_subdevice_minor_loop_$bb10();



implementation is_device_busy_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;

  $bb19:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i26;
    goto $bb19_dummy;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, out_$i26);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7041;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1340} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7040;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb15;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_7032;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_7027;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(40, 1));
    goto corral_source_split_7026;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 312)), $mul.ref(56, 1));
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_7016;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8 := is_device_busy_loop_$bb8(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i8);
    return;

  exit:
    return;
}



procedure is_device_busy_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i8: i32);



implementation comedi_device_attach_loop_$bb35(in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p51;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7130;

  $bb44:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p62;
    goto $bb44_dummy;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_7146;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7145;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i58 == 1;
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_7141;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7140;

  $bb38:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := 1;
    goto $bb39;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i57 := 0;
    goto $bb39;

  $bb37:
    assume out_$i56 == 1;
    goto corral_source_split_7138;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 1350} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} out_$i54 := ldv_try_module_get_21(out_$p53);
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_7133;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7132;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_144:
    goto corral_source_split_7153;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_module_put_22(out_$p60);
    goto SeqInstr_143;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_7152;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7151;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} comedi_report_boards(out_$p51);
    goto corral_source_split_7150;

  $bb41:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := comedi_device_attach_loop_$bb35(out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51);
    return;

  exit:
    return;
}



procedure comedi_device_attach_loop_$bb35(in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref);
  modifies $M.22, assertsPassed;



implementation comedi_device_attach_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p18: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p10: ref, in_$p45: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p18: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p10: ref, out_$p45: ref)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45 := in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p18, in_$p41, in_$p42, in_$i43, in_$i44, in_$p10, in_$p45;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7065;

  $bb27:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p42;
    goto $bb27_dummy;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p42;
    assume true;
    goto $bb27;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_7084;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_7083;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_7082;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7081;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p10;
    goto $bb15;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p10;
    goto $bb15;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_7078;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_7076;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7075;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := 1;
    goto $bb12;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$i16 := 0;
    goto $bb12;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 1344} {:cexpr "tmp"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_$i13 := ldv_try_module_get_19(out_$p12);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_7068;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_141:
    goto corral_source_split_7117;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ldv_module_put_20(out_$p40);
    goto SeqInstr_140;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_7116;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7115;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p10;
    assume true;
    goto $bb20;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_7098;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7096;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, out_$p24);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(56, 1));
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} out_$p24 := comedi_recognize(out_$p10, out_$p23);
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_7091;

  $bb17:
    assume out_$i21 == 1;
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_7088;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_7087;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7086;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p10;
    assume true;
    goto $bb25;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} out_$i36 := strcmp(out_$p33, out_$p35);
    call {:si_unique_call 1347} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_7106;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_7102;

  $bb18:
    assume !(out_$i21 == 1);
    goto corral_source_split_7101;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45 := comedi_device_attach_loop_$bb8(in_$p0, in_$p1, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45);
    return;

  exit:
    return;
}



procedure comedi_device_attach_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p18: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p10: ref, in_$p45: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p18: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p10: ref, out_$p45: ref);
  modifies $M.22, assertsPassed, $M.0;



implementation comedi_recognize_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8 := in_$p9, in_$i10, in_$i11, in_$p12, in_$p15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i7, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7226;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$p8 := out_$i19, out_$p18;
    goto $bb10_dummy;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i21 := $ult.i32(out_$i19, out_$i20);
    goto corral_source_split_7243;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, in_$p4);
    goto corral_source_split_7242;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1366} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_7241;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p8, $mul.ref(out_$i17, 8));
    goto corral_source_split_7240;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_7238;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7237;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_$i10 := strcmp(out_$p9, in_$p1);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_7229;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_7228;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8 := comedi_recognize_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8);
    return;

  exit:
    return;
}



procedure comedi_recognize_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref);



implementation comedi_report_boards_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32, in_vslice_dummy_var_92: i32) returns (out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32, out_vslice_dummy_var_92: i32)
{

  entry:
    out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_92 := in_$p11, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p9, in_$i10, in_vslice_dummy_var_92;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$i10 := out_$p16, out_$i17;
    goto $bb6_dummy;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(out_$i18, out_$i17);
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p6);
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1372} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p9, $mul.ref(out_$i15, 8));
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} out_vslice_dummy_var_92 := printk.ref.ref(.str.97, out_$p11);
    goto corral_source_split_7269;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p9);
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_92 := comedi_report_boards_loop_$bb4(in_$p0, in_$p6, out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_92);
    return;

  exit:
    return;
}



procedure comedi_report_boards_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32, in_vslice_dummy_var_92: i32) returns (out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32, out_vslice_dummy_var_92: i32);



implementation __comedi_device_postconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7317;

  $bb53:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i76;
    goto $bb53_dummy;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i76);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, in_$p1);
    goto corral_source_split_7330;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1380} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_7329;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(12, 1));
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 312));
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_7320;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 392)), $mul.ref(320, 1));
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb51:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, poll_invalid);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(256, 1));
    goto corral_source_split_7441;

  $bb50:
    assume out_$i74 == 1;
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i64(out_$i73, 0);
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_7436;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(256, 1));
    goto corral_source_split_7435;

  $bb48:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p70, insn_inval);
    goto corral_source_split_7433;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(232, 1));
    goto corral_source_split_7432;

  $bb47:
    assume out_$i69 == 1;
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i64(out_$i68, 0);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_7427;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(232, 1));
    goto corral_source_split_7426;

  $bb45:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, insn_inval);
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7423;

  $bb44:
    assume out_$i64 == 1;
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_7418;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7417;

  $bb42:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, insn_inval);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7414;

  $bb41:
    assume out_$i59 == 1;
    goto corral_source_split_7413;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_7409;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7408;

  $bb39:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, insn_inval);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7405;

  $bb38:
    assume out_$i54 == 1;
    goto corral_source_split_7404;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_7400;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7399;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p50, insn_rw_emulate_bits);
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7396;

  $bb35:
    assume out_$i49 == 1;
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7390;

  $bb32:
    assume out_$i45 == 1;
    goto corral_source_split_7389;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i64(out_$i44, 0);
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_7385;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(216, 1));
    goto corral_source_split_7384;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, insn_rw_emulate_bits);
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7381;

  $bb29:
    assume out_$i40 == 1;
    goto corral_source_split_7380;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(224, 1));
    goto corral_source_split_7375;

  $bb26:
    assume out_$i36 == 1;
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i35, 0);
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_7370;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(208, 1));
    goto corral_source_split_7369;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, range_unknown);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(184, 1));
    goto corral_source_split_7366;

  $bb23:
    assume out_$i31 == 1;
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(192, 1));
    goto corral_source_split_7360;

  $bb20:
    assume out_$i27 == 1;
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_7356;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_7355;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(184, 1));
    goto corral_source_split_7354;

  $bb14:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb16;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} out_$i20 := __comedi_device_postconfig_async(in_$p0, out_$p8);
    call {:si_unique_call 1382} {:cexpr "ret"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7347;

  $bb13:
    assume out_$i19 == 1;
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_7342;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(240, 1));
    goto corral_source_split_7341;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p15, 1);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(24, 1));
    goto corral_source_split_7338;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_7334;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 312)), $mul.ref(24, 1));
    goto corral_source_split_7333;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb22;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb28;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb34;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i4 := __comedi_device_postconfig_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i4);
    return;

  exit:
    return;
}



procedure __comedi_device_postconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i4: i32);
  modifies $M.0, $M.32, $M.21, $CurrAddr, $M.33;



implementation comedi_read___0_loop_$bb23(in_$p0: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i33: i32, in_$p26: ref, in_vslice_dummy_var_103: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i33: i32, out_vslice_dummy_var_103: i32)
{

  entry:
    out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_vslice_dummy_var_103 := in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i43, in_$i44, in_$i45, in_$i33, in_vslice_dummy_var_103;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9039;

  $bb25:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i43;
    goto $bb25_dummy;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i43, out_$i44);
    goto corral_source_split_9052;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p30);
    goto corral_source_split_9051;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1526} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_9050;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_vslice_dummy_var_103 := seq_printf.ref.ref.ref(in_$p0, .str.109, out_$p41);
    goto corral_source_split_9049;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_9048;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p35, $mul.ref(out_$i39, 8));
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_9046;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i37, out_$i33);
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p26, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_9042;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p26, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_vslice_dummy_var_103 := comedi_read___0_loop_$bb23(in_$p0, in_$p30, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, in_$p26, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure comedi_read___0_loop_$bb23(in_$p0: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i33: i32, in_$p26: ref, in_vslice_dummy_var_103: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i33: i32, out_vslice_dummy_var_103: i32);



implementation comedi_read___0_loop_$bb18(in_$p0: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i33: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i33: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32)
{

  entry:
    out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := in_$p27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i43, in_$i44, in_$i45, in_$i33, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p52, in_$p53, in_$i54, in_$i55, in_$p26, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9028;

  $bb31:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p53;
    goto $bb31_dummy;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_9066;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9065;

  $bb29:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} out_vslice_dummy_var_104 := seq_printf.ref.ref.ref(in_$p0, .str.109, out_$p50);
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9061;

  $bb28:
    assume out_$i48 == 1;
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_9058;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_9057;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9056;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb22;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume !(out_$i45 == 1);
    goto corral_source_split_9054;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i43, out_$i44);
    goto corral_source_split_9052;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p30);
    goto corral_source_split_9051;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1526} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_9050;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_vslice_dummy_var_103 := seq_printf.ref.ref.ref(in_$p0, .str.109, out_$p41);
    goto corral_source_split_9049;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_9048;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p35, $mul.ref(out_$i39, 8));
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_9046;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i37, out_$i33);
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_9042;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_vslice_dummy_var_103 := comedi_read___0_loop_$bb23(in_$p0, out_$p30, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_$p26, out_vslice_dummy_var_103);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    out_$i33 := 0;
    goto $bb23;

  $bb25:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i43;
    assume false;
    return;

  $bb20:
    assume out_$i32 == 1;
    goto corral_source_split_9037;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(0, out_$i31);
    goto corral_source_split_9035;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} out_vslice_dummy_var_102 := seq_printf.ref.ref.ref(in_$p0, .str.108, out_$p28);
    goto corral_source_split_9032;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_9031;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9030;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := comedi_read___0_loop_$bb18(in_$p0, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i43, out_$i44, out_$i45, out_$i33, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p26, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure comedi_read___0_loop_$bb18(in_$p0: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i33: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p26: ref, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i33: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p26: ref, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32);



implementation comedi_alloc_board_minor_loop_$bb11(in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i26: i32, in_$i27: i1, in_$i16: i32, in_$i28: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i26: i32, out_$i27: i1, out_$i16: i32, out_$i28: i32)
{

  entry:
    out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28 := in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i26, in_$i27, in_$i16, in_$i28;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10300;

  $bb17:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i26;
    goto $bb17_dummy;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    assume true;
    goto $bb17;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$i27 := $ule.i32(out_$i26, 47);
    goto corral_source_split_10318;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1643} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_10317;

  $bb14:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i16;
    assume true;
    goto $bb14;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_10306;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.20, out_$p18);
    goto corral_source_split_10304;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(out_$i17, 8));
    goto corral_source_split_10303;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_10302;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28 := comedi_alloc_board_minor_loop_$bb11(out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28);
    return;

  exit:
    return;
}



procedure comedi_alloc_board_minor_loop_$bb11(in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i26: i32, in_$i27: i1, in_$i16: i32, in_$i28: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i26: i32, out_$i27: i1, out_$i16: i32, out_$i28: i32);



implementation main_loop_$bb1(in_$i0: i64, in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i64, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$p13: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i64, in_vslice_dummy_var_159: i64, in_vslice_dummy_var_160: i64, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i64, in_vslice_dummy_var_171: i64, in_vslice_dummy_var_172: i64, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i64) returns (out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i64, out_vslice_dummy_var_159: i64, out_vslice_dummy_var_160: i64, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i64, out_vslice_dummy_var_171: i64, out_vslice_dummy_var_172: i64, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i64)
{

  entry:
    out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i53, in_$i54, in_$p55, in_$p56, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i83, in_$i84, in_$p85, in_$p86, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i106, in_$i107, in_$p108, in_$i110, in_$i111, in_$p112, in_$i114, in_$i115, in_$p116, in_$i118, in_$i119, in_$p120, in_$i122, in_$i123, in_$p124, in_$i126, in_$i127, in_$p128, in_$i130, in_$i131, in_$p132, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$p145, in_$i147, in_$i148, in_$p149, in_$i151, in_$i152, in_$p153, in_$p154, in_$i156, in_$i157, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$p177, in_$i179, in_$i180, in_$p181, in_$p182, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p209, in_$p210, in_$i212, in_$i213, in_$p214, in_$p215, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1739} out_$i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 1740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i32);
    call {:si_unique_call 1741} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i32);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb23:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10525;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} out_vslice_dummy_var_155 := read_buffer_kb_store(out_$p50, out_$p51, in_$p2, in_$i0);
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    out_$p51 := $M.48;
    goto corral_source_split_10523;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$p50 := $M.47;
    goto corral_source_split_10522;

  $bb32:
    assume out_$i49 == 1;
    goto corral_source_split_10521;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 1);
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    out_$i48 := $M.49;
    goto corral_source_split_10518;

  $bb30:
    assume out_$i47 == 1;
    goto corral_source_split_10517;

  $bb25:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_10511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1742} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1743} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 1744} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i43 == 1;
    goto corral_source_split_10511;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_10509;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    out_$i42 := $M.49;
    goto corral_source_split_10508;

  $bb20:
    assume out_$i41 == 1;
    goto corral_source_split_10507;

  $bb18:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb37:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} out_vslice_dummy_var_156 := read_buffer_kb_show(out_$p55, out_$p56, in_$p1);
    goto corral_source_split_10530;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$p56 := $M.48;
    goto corral_source_split_10529;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    out_$p55 := $M.47;
    goto corral_source_split_10528;

  $bb36:
    assume out_$i54 == 1;
    goto corral_source_split_10527;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_10515;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    out_$i53 := $M.49;
    goto corral_source_split_10514;

  $bb27:
    assume out_$i46 == 1;
    goto corral_source_split_10513;

  $bb26:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_stop();
    goto corral_source_split_10533;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb29;

  $bb44:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10548;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} comedi_vm_close(out_$p66);
    goto corral_source_split_10547;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    out_$p66 := $M.38;
    goto corral_source_split_10546;

  $bb53:
    assume out_$i65 == 1;
    goto corral_source_split_10545;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 2);
    goto corral_source_split_10543;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    out_$i64 := $M.50;
    goto corral_source_split_10542;

  $bb51:
    assume out_$i63 == 1;
    goto corral_source_split_10541;

  $bb46:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_10535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 1751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 1752} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i59 == 1;
    goto corral_source_split_10535;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_10505;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    out_$i58 := $M.50;
    goto corral_source_split_10504;

  $bb19:
    assume !(out_$i40 == 1);
    goto corral_source_split_10503;

  $bb58:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $M.55 := out_$i71;
    call {:si_unique_call 1757} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_10556;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 1);
    goto corral_source_split_10555;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    out_$i70 := $M.55;
    goto corral_source_split_10554;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1756} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10553;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} comedi_vm_open(out_$p69);
    goto corral_source_split_10552;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    out_$p69 := $M.38;
    goto corral_source_split_10551;

  $bb57:
    assume out_$i68 == 1;
    goto corral_source_split_10550;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 1);
    goto corral_source_split_10539;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    out_$i67 := $M.50;
    goto corral_source_split_10538;

  $bb48:
    assume out_$i62 == 1;
    goto corral_source_split_10537;

  $bb47:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_10558;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb50;

  $bb64:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10574;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_157 := max_read_buffer_kb_store(out_$p80, out_$p81, in_$p5, in_$i3);
    goto corral_source_split_10573;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    out_$p81 := $M.44;
    goto corral_source_split_10572;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    out_$p80 := $M.43;
    goto corral_source_split_10571;

  $bb73:
    assume out_$i79 == 1;
    goto corral_source_split_10570;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_10568;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    out_$i78 := $M.51;
    goto corral_source_split_10567;

  $bb71:
    assume out_$i77 == 1;
    goto corral_source_split_10566;

  $bb66:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_10560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} out_$i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i74);
    call {:si_unique_call 1761} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i73 == 1;
    goto corral_source_split_10560;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_10497;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    out_$i72 := $M.51;
    goto corral_source_split_10496;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_10495;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb78:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10580;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} out_vslice_dummy_var_158 := max_read_buffer_kb_show(out_$p85, out_$p86, in_$p4);
    goto corral_source_split_10579;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    out_$p86 := $M.44;
    goto corral_source_split_10578;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    out_$p85 := $M.43;
    goto corral_source_split_10577;

  $bb77:
    assume out_$i84 == 1;
    goto corral_source_split_10576;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 1);
    goto corral_source_split_10564;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    out_$i83 := $M.51;
    goto corral_source_split_10563;

  $bb68:
    assume out_$i76 == 1;
    goto corral_source_split_10562;

  $bb67:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_stop();
    goto corral_source_split_10582;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb70;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb70;

  $bb84:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10637;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_vslice_dummy_var_160 := comedi_write(out_$p108, in_$p21, in_$i8, in_$p25);
    goto corral_source_split_10636;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    out_$p108 := $M.40;
    goto corral_source_split_10635;

  $bb112:
    assume out_$i107 == 1;
    goto corral_source_split_10634;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 2);
    goto corral_source_split_10632;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i106 := $M.52;
    goto corral_source_split_10631;

  $bb110:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10629;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_159 := comedi_write(out_$p104, in_$p21, in_$i8, in_$p25);
    goto corral_source_split_10628;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    out_$p104 := $M.40;
    goto corral_source_split_10627;

  $bb109:
    assume out_$i103 == 1;
    goto corral_source_split_10626;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 1);
    goto corral_source_split_10624;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    out_$i102 := $M.52;
    goto corral_source_split_10623;

  $bb107:
    assume out_$i101 == 1;
    goto corral_source_split_10622;

  $bb105:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb99:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i90, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb86:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i90, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i90, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_10584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1767} out_$i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 1768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i90);
    call {:si_unique_call 1769} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i90);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume out_$i89 == 1;
    goto corral_source_split_10584;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    out_$i88 := $M.52;
    goto corral_source_split_10500;

  $bb17:
    assume !(out_$i39 == 1);
    goto corral_source_split_10499;

  $bb117:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10642;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} out_vslice_dummy_var_161 := comedi_read(out_$p112, in_$p6, in_$i23, in_$p20);
    goto corral_source_split_10641;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    out_$p112 := $M.40;
    goto corral_source_split_10640;

  $bb116:
    assume out_$i111 == 1;
    goto corral_source_split_10639;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 2);
    goto corral_source_split_10620;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    out_$i110 := $M.52;
    goto corral_source_split_10619;

  $bb106:
    assume !(out_$i100 == 1);
    goto corral_source_split_10618;

  $bb120:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10647;

  SeqInstr_171:
    goto corral_source_split_10646;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_vslice_dummy_var_162 := comedi_compat_ioctl(out_$p116, in_$i18, in_$i22);
    goto SeqInstr_170;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    out_$p116 := $M.40;
    goto corral_source_split_10645;

  $bb119:
    assume out_$i115 == 1;
    goto corral_source_split_10644;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 2);
    goto corral_source_split_10608;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    out_$i114 := $M.52;
    goto corral_source_split_10607;

  $bb101:
    assume out_$i98 == 1;
    goto corral_source_split_10606;

  $bb100:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i90, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb126:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_vslice_dummy_var_164 := comedi_poll(out_$p124, in_$p13);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$p124 := $M.40;
    goto corral_source_split_10658;

  $bb125:
    assume out_$i123 == 1;
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 2);
    goto corral_source_split_10655;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i122 := $M.52;
    goto corral_source_split_10654;

  $bb123:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10652;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_163 := comedi_poll(out_$p120, in_$p13);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$p120 := $M.40;
    goto corral_source_split_10650;

  $bb122:
    assume out_$i119 == 1;
    goto corral_source_split_10649;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 1);
    goto corral_source_split_10612;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    out_$i118 := $M.52;
    goto corral_source_split_10611;

  $bb103:
    assume out_$i99 == 1;
    goto corral_source_split_10610;

  $bb102:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb132:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_166 := comedi_fasync(in_$i7, out_$p132, in_$i10);
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$p132 := $M.40;
    goto corral_source_split_10671;

  $bb131:
    assume out_$i131 == 1;
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 2);
    goto corral_source_split_10668;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i130 := $M.52;
    goto corral_source_split_10667;

  $bb129:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10665;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} out_vslice_dummy_var_165 := comedi_fasync(in_$i7, out_$p128, in_$i10);
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    out_$p128 := $M.40;
    goto corral_source_split_10663;

  $bb128:
    assume out_$i127 == 1;
    goto corral_source_split_10662;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    out_$i126 := $M.52;
    goto corral_source_split_10615;

  $bb104:
    assume !(out_$i99 == 1);
    goto corral_source_split_10614;

  $bb135:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $M.55 := out_$i142;
    call {:si_unique_call 1789} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i141, 1);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i141 := $M.55;
    goto corral_source_split_10685;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10684;

  $bb136:
    assume out_$i140 == 1;
    goto corral_source_split_10683;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 0);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    out_$i139 := $M.58;
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $M.58 := out_$i138;
    call {:si_unique_call 1787} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_10679;

  SeqInstr_174:
    goto corral_source_split_10678;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_$i138 := comedi_open(out_$p136, out_$p137);
    goto SeqInstr_173;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$p137 := $M.40;
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$p136 := $M.39;
    goto corral_source_split_10676;

  $bb134:
    assume out_$i135 == 1;
    goto corral_source_split_10675;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_10600;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    out_$i134 := $M.52;
    goto corral_source_split_10599;

  $bb97:
    assume out_$i96 == 1;
    goto corral_source_split_10598;

  $bb88:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i90, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb87:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb144:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_168 := comedi_mmap(out_$p149, in_$p15);
    goto corral_source_split_10699;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    out_$p149 := $M.40;
    goto corral_source_split_10698;

  $bb143:
    assume out_$i148 == 1;
    goto corral_source_split_10697;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_10695;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i147 := $M.52;
    goto corral_source_split_10694;

  $bb141:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_167 := comedi_mmap(out_$p145, in_$p15);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    out_$p145 := $M.40;
    goto corral_source_split_10690;

  $bb140:
    assume out_$i144 == 1;
    goto corral_source_split_10689;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 1);
    goto corral_source_split_10604;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    out_$i143 := $M.52;
    goto corral_source_split_10603;

  $bb98:
    assume !(out_$i96 == 1);
    goto corral_source_split_10602;

  $bb147:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $M.55 := out_$i157;
    call {:si_unique_call 1796} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$i157 := $sub.i32(out_$i156, 1);
    goto corral_source_split_10708;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$i156 := $M.55;
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10706;

  SeqInstr_177:
    goto corral_source_split_10705;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} out_vslice_dummy_var_169 := comedi_close(out_$p153, out_$p154);
    goto SeqInstr_176;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$p154 := $M.40;
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$p153 := $M.39;
    goto corral_source_split_10703;

  $bb146:
    assume out_$i152 == 1;
    goto corral_source_split_10702;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 2);
    goto corral_source_split_10588;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    out_$i151 := $M.52;
    goto corral_source_split_10587;

  $bb90:
    assume out_$i93 == 1;
    goto corral_source_split_10586;

  $bb89:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i90, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb150:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} out_vslice_dummy_var_170 := noop_llseek(out_$p160, in_$i16, in_$i11);
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$p160 := $M.40;
    goto corral_source_split_10712;

  $bb149:
    assume out_$i159 == 1;
    goto corral_source_split_10711;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_10592;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    out_$i158 := $M.52;
    goto corral_source_split_10591;

  $bb92:
    assume out_$i94 == 1;
    goto corral_source_split_10590;

  $bb91:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i90, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb153:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10719;

  SeqInstr_180:
    goto corral_source_split_10718;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_vslice_dummy_var_171 := comedi_unlocked_ioctl(out_$p164, in_$i9, in_$i17);
    goto SeqInstr_179;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p164 := $M.40;
    goto corral_source_split_10717;

  $bb152:
    assume out_$i163 == 1;
    goto corral_source_split_10716;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 2);
    goto corral_source_split_10596;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    out_$i162 := $M.52;
    goto corral_source_split_10595;

  $bb94:
    assume out_$i95 == 1;
    goto corral_source_split_10594;

  $bb93:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i90, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_stop();
    goto corral_source_split_10721;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb96;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb96;

  $bb159:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} ldv_main_exported_1();
    goto corral_source_split_10724;

  $bb158:
    assume out_$i167 == 1;
    goto corral_source_split_10723;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 0);
    goto corral_source_split_10489;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    out_$i166 := $M.53;
    goto corral_source_split_10488;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_10487;

  $bb5:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb162:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1807} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} out_vslice_dummy_var_172 := write_buffer_kb_store(out_$p176, out_$p177, in_$p27, in_$i28);
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    out_$p177 := $M.46;
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$p176 := $M.45;
    goto corral_source_split_10737;

  $bb171:
    assume out_$i175 == 1;
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 1);
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$i174 := $M.54;
    goto corral_source_split_10733;

  $bb169:
    assume out_$i173 == 1;
    goto corral_source_split_10732;

  $bb164:
    assume out_$i171 == 1;
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i170, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i170, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_10726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1803} out_$i170 := __VERIFIER_nondet_int();
    call {:si_unique_call 1804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i170);
    call {:si_unique_call 1805} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i170);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i169 == 1;
    goto corral_source_split_10726;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_10493;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    out_$i168 := $M.54;
    goto corral_source_split_10492;

  $bb13:
    assume !(out_$i37 == 1);
    goto corral_source_split_10491;

  $bb176:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} out_vslice_dummy_var_173 := write_buffer_kb_show(out_$p181, out_$p182, in_$p26);
    goto corral_source_split_10745;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    out_$p182 := $M.46;
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$p181 := $M.45;
    goto corral_source_split_10743;

  $bb175:
    assume out_$i180 == 1;
    goto corral_source_split_10742;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 1);
    goto corral_source_split_10730;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    out_$i179 := $M.54;
    goto corral_source_split_10729;

  $bb166:
    assume out_$i172 == 1;
    goto corral_source_split_10728;

  $bb165:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i170, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} ldv_stop();
    goto corral_source_split_10748;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i172 == 1);
    goto $bb168;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i173 == 1);
    goto $bb168;

  $bb182:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i191 == 1);
    goto $bb193;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i193 == 1);
    goto $bb193;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 0);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$i192 := $M.55;
    goto corral_source_split_10761;

  $bb191:
    assume out_$i191 == 1;
    goto corral_source_split_10760;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 2);
    goto corral_source_split_10758;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    out_$i190 := $M.56;
    goto corral_source_split_10757;

  $bb189:
    assume out_$i189 == 1;
    goto corral_source_split_10756;

  $bb184:
    assume out_$i187 == 1;
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i186, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_10750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1811} out_$i186 := __VERIFIER_nondet_int();
    call {:si_unique_call 1812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i186);
    call {:si_unique_call 1813} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i186);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume out_$i185 == 1;
    goto corral_source_split_10750;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i184, 0);
    goto corral_source_split_10481;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    out_$i184 := $M.56;
    goto corral_source_split_10480;

  $bb7:
    assume out_$i35 == 1;
    goto corral_source_split_10479;

  $bb6:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb200:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb205:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} ldv_initialize_device_attribute_6();
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1829} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_initialize_device_attribute_4();
    goto corral_source_split_10791;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1827} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_10789;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1825} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10788;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} ldv_initialize_device_attribute_7();
    goto corral_source_split_10787;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} ldv_initialize_device_attribute_5();
    goto corral_source_split_10785;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1821} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10783;

  $bb204:
    assume out_$i200 == 1;
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 0);
    goto corral_source_split_10780;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i199 := $M.59;
    goto corral_source_split_10779;

  $bb202:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$i198 := $ne.i32(out_$i197, 0);
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    out_$i197 := $M.59;
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $M.59 := out_$i196;
    call {:si_unique_call 1818} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_10772;

  SeqInstr_189:
    goto corral_source_split_10771;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_$i196 := comedi_init();
    goto SeqInstr_188;

  $bb199:
    assume out_$i195 == 1;
    goto corral_source_split_10770;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$i194 := $M.56;
    goto corral_source_split_10753;

  $bb186:
    assume out_$i188 == 1;
    goto corral_source_split_10752;

  $bb185:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} ldv_stop();
    goto corral_source_split_10795;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb188;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i189 == 1);
    goto $bb188;

  $bb212:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb222:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10811;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_vslice_dummy_var_174 := max_write_buffer_kb_store(out_$p209, out_$p210, in_$p29, in_$i30);
    goto corral_source_split_10810;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    out_$p210 := $M.42;
    goto corral_source_split_10809;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    out_$p209 := $M.41;
    goto corral_source_split_10808;

  $bb221:
    assume out_$i208 == 1;
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 1);
    goto corral_source_split_10805;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i207 := $M.57;
    goto corral_source_split_10804;

  $bb219:
    assume out_$i206 == 1;
    goto corral_source_split_10803;

  $bb214:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i203, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i203, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_10797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1832} out_$i203 := __VERIFIER_nondet_int();
    call {:si_unique_call 1833} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i203);
    call {:si_unique_call 1834} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i203);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb211:
    assume out_$i202 == 1;
    goto corral_source_split_10797;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i32(out_$i201, 0);
    goto corral_source_split_10485;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    out_$i201 := $M.57;
    goto corral_source_split_10484;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_10483;

  $bb8:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb226:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10817;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} out_vslice_dummy_var_175 := max_write_buffer_kb_show(out_$p214, out_$p215, in_$p31);
    goto corral_source_split_10816;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    out_$p215 := $M.42;
    goto corral_source_split_10815;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    out_$p214 := $M.41;
    goto corral_source_split_10814;

  $bb225:
    assume out_$i213 == 1;
    goto corral_source_split_10813;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$i212 := $M.57;
    goto corral_source_split_10800;

  $bb216:
    assume out_$i205 == 1;
    goto corral_source_split_10799;

  $bb215:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i203, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_stop();
    goto corral_source_split_10819;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb217:
    assume {:verifier.code 0} true;
    assume !(out_$i205 == 1);
    goto $bb218;

  $bb220:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb218;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_stop();
    goto corral_source_split_10821;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb11;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := main_loop_$bb1(in_$i0, in_$p1, in_$p2, in_$i3, in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p13, in_$p15, in_$i16, in_$i17, in_$i18, in_$p20, in_$p21, in_$i22, in_$i23, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i147, out_$i148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i64, in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i64, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$p13: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i64, in_vslice_dummy_var_159: i64, in_vslice_dummy_var_160: i64, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i64, in_vslice_dummy_var_171: i64, in_vslice_dummy_var_172: i64, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i64) returns (out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i64, out_vslice_dummy_var_159: i64, out_vslice_dummy_var_160: i64, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i64, out_vslice_dummy_var_171: i64, out_vslice_dummy_var_172: i64, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i64);
  modifies $M.49, $M.37, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr, $M.32, $M.33, $M.50, $M.55, $M.51, $M.52, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.17, $M.14, $M.15, $M.25, $M.26, $M.28, $M.27, $M.20, $M.22, $M.19, $M.23, $M.21, assertsPassed, $M.58, $M.53, $M.62, $M.54, $M.47, $M.48, $M.45, $M.46, $M.38, $M.43, $M.44, $M.41, $M.42, $M.57, $M.56, $M.59, $M.63, $M.29, $M.39, $M.40;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation comedi_cleanup_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} comedi_cleanup_loop_$bb15();
    return;

  exit:
    return;
}



procedure comedi_cleanup_loop_$bb15();



implementation comedi_cleanup_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} comedi_cleanup_loop_$bb6();
    return;

  exit:
    return;
}



procedure comedi_cleanup_loop_$bb6();



implementation comedi_init_loop_$bb20(in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i27: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p36, out_$i37, out_$i38, out_$i39, out_$i27 := in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p36, in_$i37, in_$i38, in_$i39, in_$i27;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_12999;

  $bb25:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i37;
    goto $bb25_dummy;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, out_$i38);
    goto corral_source_split_13019;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    out_$i38 := $M.18;
    goto corral_source_split_13018;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i27, 1);
    call {:si_unique_call 2160} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_13017;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} mutex_unlock(out_$p36);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p28, $mul.ref(0, 392)), $mul.ref(144, 1));
    goto corral_source_split_13015;

  $bb23:
    assume !(out_$i31 == 1);
    goto corral_source_split_13014;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p28;
    assume true;
    goto $bb23;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_13004;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} out_$i30 := IS_ERR(out_$p29);
    call {:si_unique_call 2153} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_13003;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_13002;

  SeqInstr_195:
    goto corral_source_split_13001;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} out_$p28 := comedi_alloc_board_minor($0.ref);
    goto SeqInstr_194;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p36, out_$i37, out_$i38, out_$i39, out_$i27 := comedi_init_loop_$bb20(out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p36, out_$i37, out_$i38, out_$i39, out_$i27);
    return;

  exit:
    return;
}



procedure comedi_init_loop_$bb20(in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i27: i32);
  modifies $M.20, $M.0, $M.22, $CurrAddr, $M.21, $M.32, assertsPassed, $M.33;



implementation {:SIextraRecBound 48} comedi_cleanup_board_minors_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i0: i32) returns (out_$i1: i32, out_$i2: i1, out_$i0: i32)
{

  entry:
    out_$i1, out_$i2, out_$i0 := in_$i1, in_$i2, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_13063;

  $bb3:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i1;
    goto $bb3_dummy;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    out_$i2 := $ule.i32(out_$i1, 47);
    goto corral_source_split_13067;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    out_$i1 := $add.i32(out_$i0, 1);
    call {:si_unique_call 2182} {:cexpr "i"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_13066;

  SeqInstr_204:
    goto corral_source_split_13065;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} comedi_free_board_minor(out_$i0);
    goto SeqInstr_203;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i0 := comedi_cleanup_board_minors_loop_$bb1(out_$i1, out_$i2, out_$i0);
    return;

  exit:
    return;
}



procedure comedi_cleanup_board_minors_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i0: i32) returns (out_$i1: i32, out_$i2: i1, out_$i0: i32);
  modifies $M.20, $M.0, $M.22, $M.21, $M.32, assertsPassed, $M.33, $CurrAddr;



implementation comedi_free_board_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_free_board_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_free_board_minor_loop_$bb3();


