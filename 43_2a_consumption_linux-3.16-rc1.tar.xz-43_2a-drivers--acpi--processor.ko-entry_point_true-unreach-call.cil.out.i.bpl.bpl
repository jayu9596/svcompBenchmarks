var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: [ref]ref;

var $M.4: [ref]i32;

var $M.5: [ref]i8;

var $M.6: i32;

var $M.8: i32;

var $M.9: [ref]i64;

var $M.10: [ref]ref;

var $M.11: [ref]i8;

var $M.12: [ref]i64;

var $M.13: [ref]ref;

var $M.14: [ref]i64;

var $M.15: [ref]ref;

var $M.16: [ref]i64;

var $M.17: i32;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]i24;

var $M.23: [ref]i8;

var $M.25: i32;

var $M.26: [ref]ref;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]i24;

var $M.35: [ref]i8;

var $M.36: i32;

var $M.37: i32;

var $M.38: [ref]ref;

var $M.39: i32;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i64;

var $M.44: i32;

var $M.45: i32;

var $M.47: [ref]i32;

var $M.49: [ref]i64;

var $M.50: [ref]i64;

var $M.51: [ref]i32;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: ref;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: ref;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]i32;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.83: [ref]i8;

var $M.105: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]i8;

var $M.120: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 520298);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const acpi_processor_driver_group0: ref;

axiom acpi_processor_driver_group0 == $sub.ref(0, 2060);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 3088);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 4116);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5144);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 6172);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7200);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 8228);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 9256);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 10284);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 11312);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 12340);

const acpi_idle_driver: ref;

axiom acpi_idle_driver == $sub.ref(0, 14284);

const {:count 10} .str.10: ref;

axiom .str.10 == $sub.ref(0, 15318);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const acpi_cpuidle_device: ref;

axiom acpi_cpuidle_device == $sub.ref(0, 16350);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 17378);

const processor_cooling_ops: ref;

axiom processor_cooling_ops == $sub.ref(0, 18426);

const {:count 38} __kstrtab_acpi_processor_unregister_performance: ref;

axiom __kstrtab_acpi_processor_unregister_performance == $sub.ref(0, 19488);

const {:count 36} __kstrtab_acpi_processor_register_performance: ref;

axiom __kstrtab_acpi_processor_register_performance == $sub.ref(0, 20548);

const {:count 39} __kstrtab_acpi_processor_preregister_performance: ref;

axiom __kstrtab_acpi_processor_preregister_performance == $sub.ref(0, 21611);

const performance_mutex: ref;

axiom performance_mutex == $sub.ref(0, 22803);

const {:count 26} __kstrtab_acpi_processor_notify_smm: ref;

axiom __kstrtab_acpi_processor_notify_smm == $sub.ref(0, 23853);

const {:count 36} __kstrtab_acpi_processor_get_performance_info: ref;

axiom __kstrtab_acpi_processor_get_performance_info == $sub.ref(0, 24913);

const {:count 18} _acpi_module_name___2: ref;

axiom _acpi_module_name___2 == $sub.ref(0, 25955);

const acpi_ppc_notifier_block: ref;

axiom acpi_ppc_notifier_block == $sub.ref(0, 27003);

const {:count 30} __kstrtab_acpi_processor_get_bios_limit: ref;

axiom __kstrtab_acpi_processor_get_bios_limit == $sub.ref(0, 28057);

const ignore_ppc: ref;

axiom ignore_ppc == $sub.ref(0, 29085);

const acpi_thermal_cpufreq_is_init: ref;

axiom acpi_thermal_cpufreq_is_init == $sub.ref(0, 30113);

const acpi_thermal_cpufreq_notifier_block: ref;

axiom acpi_thermal_cpufreq_notifier_block == $sub.ref(0, 31161);

const saved_bm_rld: ref;

axiom saved_bm_rld == $sub.ref(0, 32189);

const {:count 15} _acpi_module_name___1: ref;

axiom _acpi_module_name___1 == $sub.ref(0, 33228);

const max_cstate: ref;

axiom max_cstate == $sub.ref(0, 34256);

const processor_power_dmi_table: ref;

axiom processor_power_dmi_table == $sub.ref(0, 36656);

const c3_cpu_count: ref;

axiom c3_cpu_count == $sub.ref(0, 37684);

const c3_lock: ref;

axiom c3_lock == $sub.ref(0, 38780);

const bm_check_disable: ref;

axiom bm_check_disable == $sub.ref(0, 39808);

const latency_factor: ref;

axiom latency_factor == $sub.ref(0, 40836);

const acpi_processor_syscore_ops: ref;

axiom acpi_processor_syscore_ops == $sub.ref(0, 41900);

const {:count 21} _acpi_module_name___0: ref;

axiom _acpi_module_name___0 == $sub.ref(0, 42945);

const {:count 3} processor_device_ids: ref;

axiom processor_device_ids == $sub.ref(0, 44041);

const acpi_processor_driver: ref;

axiom acpi_processor_driver == $sub.ref(0, 45185);

const acpi_cpu_notifier: ref;

axiom acpi_cpu_notifier == $sub.ref(0, 46233);

const {:count 17} _acpi_module_name: ref;

axiom _acpi_module_name == $sub.ref(0, 47274);

const acpi_processor_ppc_status: ref;

axiom acpi_processor_ppc_status == $sub.ref(0, 48302);

const cpufreq_thermal_reduction_pctg: ref;

axiom cpufreq_thermal_reduction_pctg == $sub.ref(0, 49330);

const __pcpu_unique_cpufreq_thermal_reduction_pctg: ref;

axiom __pcpu_unique_cpufreq_thermal_reduction_pctg == $sub.ref(0, 50355);

const acpi_processor_registered: ref;

axiom acpi_processor_registered == $sub.ref(0, 51383);

const {:count 10} acpi_cstate: ref;

axiom acpi_cstate == $sub.ref(0, 52487);

const __pcpu_unique_acpi_cstate: ref;

axiom __pcpu_unique_acpi_cstate == $sub.ref(0, 53512);

const __pcpu_unique_acpi_cpuidle_device: ref;

axiom __pcpu_unique_acpi_cpuidle_device == $sub.ref(0, 54537);

const nocst: ref;

axiom nocst == $sub.ref(0, 55565);

const ignore_tpc: ref;

axiom ignore_tpc == $sub.ref(0, 56593);

const __mod_acpi__processor_device_ids_device_table: ref;

axiom __mod_acpi__processor_device_ids_device_table == $sub.ref(0, 57641);

const processor_cooling_ops_group0: ref;

axiom processor_cooling_ops_group0 == $sub.ref(0, 58673);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 59701);

const __ksymtab_acpi_processor_unregister_performance: ref;

axiom __ksymtab_acpi_processor_unregister_performance == $sub.ref(0, 60741);

const __ksymtab_acpi_processor_register_performance: ref;

axiom __ksymtab_acpi_processor_register_performance == $sub.ref(0, 61781);

const __ksymtab_acpi_processor_preregister_performance: ref;

axiom __ksymtab_acpi_processor_preregister_performance == $sub.ref(0, 62821);

const __ksymtab_acpi_processor_notify_smm: ref;

axiom __ksymtab_acpi_processor_notify_smm == $sub.ref(0, 63861);

const __ksymtab_acpi_processor_get_performance_info: ref;

axiom __ksymtab_acpi_processor_get_performance_info == $sub.ref(0, 64901);

const __ksymtab_acpi_processor_get_bios_limit: ref;

axiom __ksymtab_acpi_processor_get_bios_limit == $sub.ref(0, 65941);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const cpu_info: ref;

axiom cpu_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 24} .str.40: ref;

axiom .str.40 == $sub.ref(0, 66989);

const processors: ref;

axiom processors == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const acpi_dbg_level: ref;

axiom acpi_dbg_level == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const acpi_dbg_layer: ref;

axiom acpi_dbg_layer == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 30} .str.2: ref;

axiom .str.2 == $sub.ref(0, 68043);

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 69095);

const {:count 45} .str.4: ref;

axiom .str.4 == $sub.ref(0, 70164);

const {:count 35} .str.41: ref;

axiom .str.41 == $sub.ref(0, 71223);

const {:count 20} .str.42: ref;

axiom .str.42 == $sub.ref(0, 72267);

const {:count 45} .str.43: ref;

axiom .str.43 == $sub.ref(0, 73336);

const {:count 31} .str.44: ref;

axiom .str.44 == $sub.ref(0, 74391);

const {:count 49} .str.45: ref;

axiom .str.45 == $sub.ref(0, 75464);

const {:count 44} .str.46: ref;

axiom .str.46 == $sub.ref(0, 76532);

const {:count 40} .str.47: ref;

axiom .str.47 == $sub.ref(0, 77596);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 78625);

const {:count 36} .str.16: ref;

axiom .str.16 == $sub.ref(0, 79685);

const {:count 54} .str.17: ref;

axiom .str.17 == $sub.ref(0, 80763);

const {:count 5} .str.18: ref;

axiom .str.18 == $sub.ref(0, 81792);

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 62} .str.19: ref;

axiom .str.19 == $sub.ref(0, 82878);

const {:count 16} .str.110: ref;

axiom .str.110 == $sub.ref(0, 83918);

const {:count 10} .str.26: ref;

axiom .str.26 == $sub.ref(0, 84952);

const {:count 34} .str.111: ref;

axiom .str.111 == $sub.ref(0, 86010);

const {:count 223} .str.24: ref;

axiom .str.24 == $sub.ref(0, 87257);

const {:count 43} .str.112: ref;

axiom .str.112 == $sub.ref(0, 88324);

const .str.113: ref;

axiom .str.113 == $sub.ref(0, 89349);

const {:count 4} .str.114: ref;

axiom .str.114 == $sub.ref(0, 90377);

const {:count 7} .str.119: ref;

axiom .str.119 == $sub.ref(0, 91408);

const {:count 5} .str.120: ref;

axiom .str.120 == $sub.ref(0, 92437);

const {:count 16} .str.121: ref;

axiom .str.121 == $sub.ref(0, 93477);

const {:count 26} .str.122: ref;

axiom .str.122 == $sub.ref(0, 94527);

const {:count 38} .str.123: ref;

axiom .str.123 == $sub.ref(0, 95589);

const {:count 29} .str.124: ref;

axiom .str.124 == $sub.ref(0, 96642);

const {:count 21} .str.60: ref;

axiom .str.60 == $sub.ref(0, 97687);

const {:count 18} .str.125: ref;

axiom .str.125 == $sub.ref(0, 98729);

const {:count 115} .str.126: ref;

axiom .str.126 == $sub.ref(0, 99868);

const {:count 87} .str.127: ref;

axiom .str.127 == $sub.ref(0, 100979);

const {:count 76} .str.128: ref;

axiom .str.128 == $sub.ref(0, 102079);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 34} .str.65: ref;

axiom .str.65 == $sub.ref(0, 103137);

const {:count 16} .str.115: ref;

axiom .str.115 == $sub.ref(0, 104177);

const {:count 26} .str.116: ref;

axiom .str.116 == $sub.ref(0, 105227);

const {:count 45} .str.117: ref;

axiom .str.117 == $sub.ref(0, 106296);

const {:count 44} .str.118: ref;

axiom .str.118 == $sub.ref(0, 107364);

const acpi_gbl_FADT: ref;

axiom acpi_gbl_FADT == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 26} .str.20: ref;

axiom .str.20 == $sub.ref(0, 108414);

const {:count 31} .str.21: ref;

axiom .str.21 == $sub.ref(0, 109469);

const {:count 53} .str.22: ref;

axiom .str.22 == $sub.ref(0, 110546);

const {:count 60} .str.23: ref;

axiom .str.23 == $sub.ref(0, 111630);

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 6} .str.55: ref;

axiom .str.55 == $sub.ref(0, 112660);

const {:count 5} .str.131: ref;

axiom .str.131 == $sub.ref(0, 113689);

const {:count 26} .str.132: ref;

axiom .str.132 == $sub.ref(0, 114739);

const {:count 33} .str.133: ref;

axiom .str.133 == $sub.ref(0, 115796);

const {:count 30} .str.134: ref;

axiom .str.134 == $sub.ref(0, 116850);

const {:count 32} .str.135: ref;

axiom .str.135 == $sub.ref(0, 117906);

const {:count 42} .str.36: ref;

axiom .str.36 == $sub.ref(0, 118972);

const {:count 222} .str.28: ref;

axiom .str.28 == $sub.ref(0, 120218);

const {:count 25} .str.37: ref;

axiom .str.37 == $sub.ref(0, 121267);

const {:count 5} .str.38: ref;

axiom .str.38 == $sub.ref(0, 122296);

const {:count 16} .str.39: ref;

axiom .str.39 == $sub.ref(0, 123336);

const cpu_bit_bitmap: ref;

axiom cpu_bit_bitmap == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 18} .str.100: ref;

axiom .str.100 == $sub.ref(0, 124378);

const local_apic_timer_c2_ok: ref;

axiom local_apic_timer_c2_ok == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const amd_e400_c1e_detected: ref;

axiom amd_e400_c1e_detected == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const errata: ref;

axiom errata == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const {:count 31} .str.95: ref;

axiom .str.95 == $sub.ref(0, 125433);

const {:count 43} .str.96: ref;

axiom .str.96 == $sub.ref(0, 126500);

const {:count 32} .str.97: ref;

axiom .str.97 == $sub.ref(0, 127556);

const {:count 31} .str.98: ref;

axiom .str.98 == $sub.ref(0, 128611);

const {:count 77} .str.99: ref;

axiom .str.99 == $sub.ref(0, 129712);

const {:count 35} .str.91: ref;

axiom .str.91 == $sub.ref(0, 130771);

const {:count 27} .str.92: ref;

axiom .str.92 == $sub.ref(0, 131822);

const {:count 27} .str.93: ref;

axiom .str.93 == $sub.ref(0, 132873);

const {:count 27} .str.94: ref;

axiom .str.94 == $sub.ref(0, 133924);

const {:count 5} .str.81: ref;

axiom .str.81 == $sub.ref(0, 134953);

const {:count 34} .str.82: ref;

axiom .str.82 == $sub.ref(0, 136011);

const {:count 20} .str.83: ref;

axiom .str.83 == $sub.ref(0, 137055);

const {:count 36} .str.84: ref;

axiom .str.84 == $sub.ref(0, 138115);

const {:count 41} .str.85: ref;

axiom .str.85 == $sub.ref(0, 139180);

const {:count 9} .str.86: ref;

axiom .str.86 == $sub.ref(0, 140213);

const boot_option_idle_override: ref;

axiom boot_option_idle_override == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32912));

const {:count 17} .str.87: ref;

axiom .str.87 == $sub.ref(0, 141254);

const {:count 46} .str.88: ref;

axiom .str.88 == $sub.ref(0, 142324);

const {:count 54} .str.89: ref;

axiom .str.89 == $sub.ref(0, 143402);

const {:count 23} .str.90: ref;

axiom .str.90 == $sub.ref(0, 144449);

const {:count 5} .str.109: ref;

axiom .str.109 == $sub.ref(0, 145478);

const {:count 10} .str.25: ref;

axiom .str.25 == $sub.ref(0, 146512);

const {:count 23} .str.27: ref;

axiom .str.27 == $sub.ref(0, 147559);

const {:count 32} .str.29: ref;

axiom .str.29 == $sub.ref(0, 148615);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 149655);

const {:count 47} .str.31: ref;

axiom .str.31 == $sub.ref(0, 150726);

const {:count 7} .str.32: ref;

axiom .str.32 == $sub.ref(0, 151757);

const {:count 38} .str.33: ref;

axiom .str.33 == $sub.ref(0, 152819);

const {:count 22} .str.34: ref;

axiom .str.34 == $sub.ref(0, 153865);

const {:count 26} .str.35: ref;

axiom .str.35 == $sub.ref(0, 154915);

const {:count 4} .str.101: ref;

axiom .str.101 == $sub.ref(0, 155943);

const {:count 5} .str.102: ref;

axiom .str.102 == $sub.ref(0, 156972);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32920));

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32928));

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32936));

const {:count 44} .str.11: ref;

axiom .str.11 == $sub.ref(0, 158040);

const {:count 38} .str.12: ref;

axiom .str.12 == $sub.ref(0, 159102);

const {:count 35} .str.13: ref;

axiom .str.13 == $sub.ref(0, 160161);

const {:count 35} .str.5: ref;

axiom .str.5 == $sub.ref(0, 161220);

const {:count 53} .str.6: ref;

axiom .str.6 == $sub.ref(0, 162297);

const {:count 48} .str.7: ref;

axiom .str.7 == $sub.ref(0, 163369);

const {:count 28} .str.8: ref;

axiom .str.8 == $sub.ref(0, 164421);

const {:count 32} .str.9: ref;

axiom .str.9 == $sub.ref(0, 165477);

const {:count 5} .str.76: ref;

axiom .str.76 == $sub.ref(0, 166506);

const {:count 16} .str.77: ref;

axiom .str.77 == $sub.ref(0, 167546);

const {:count 26} .str.78: ref;

axiom .str.78 == $sub.ref(0, 168596);

const {:count 33} .str.79: ref;

axiom .str.79 == $sub.ref(0, 169653);

const {:count 30} .str.80: ref;

axiom .str.80 == $sub.ref(0, 170707);

const {:count 30} .str.74: ref;

axiom .str.74 == $sub.ref(0, 171761);

const {:count 46} .str.75: ref;

axiom .str.75 == $sub.ref(0, 172831);

const {:count 34} .str.72: ref;

axiom .str.72 == $sub.ref(0, 173889);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 174946);

const {:count 29} .str.68: ref;

axiom .str.68 == $sub.ref(0, 175999);

const {:count 24} .str.69: ref;

axiom .str.69 == $sub.ref(0, 177047);

const {:count 22} .str.70: ref;

axiom .str.70 == $sub.ref(0, 178093);

const {:count 31} .str.71: ref;

axiom .str.71 == $sub.ref(0, 179148);

const {:count 35} .str.66: ref;

axiom .str.66 == $sub.ref(0, 180207);

const {:count 36} .str.67: ref;

axiom .str.67 == $sub.ref(0, 181267);

const {:count 35} .str.63: ref;

axiom .str.63 == $sub.ref(0, 182326);

const {:count 51} .str.64: ref;

axiom .str.64 == $sub.ref(0, 183401);

const {:count 5} .str.56: ref;

axiom .str.56 == $sub.ref(0, 184430);

const {:count 16} .str.57: ref;

axiom .str.57 == $sub.ref(0, 185470);

const {:count 26} .str.58: ref;

axiom .str.58 == $sub.ref(0, 186520);

const {:count 37} .str.59: ref;

axiom .str.59 == $sub.ref(0, 187581);

const {:count 18} .str.61: ref;

axiom .str.61 == $sub.ref(0, 188623);

const {:count 40} .str.62: ref;

axiom .str.62 == $sub.ref(0, 189687);

const {:count 5} .str.48: ref;

axiom .str.48 == $sub.ref(0, 190716);

const {:count 16} .str.49: ref;

axiom .str.49 == $sub.ref(0, 191756);

const {:count 26} .str.50: ref;

axiom .str.50 == $sub.ref(0, 192806);

const {:count 45} .str.51: ref;

axiom .str.51 == $sub.ref(0, 193875);

const {:count 44} .str.52: ref;

axiom .str.52 == $sub.ref(0, 194943);

const {:count 38} .str.53: ref;

axiom .str.53 == $sub.ref(0, 196005);

const {:count 37} .str.54: ref;

axiom .str.54 == $sub.ref(0, 197066);

const cpu_subsys: ref;

axiom cpu_subsys == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32944));

const {:count 8} .str.103: ref;

axiom .str.103 == $sub.ref(0, 198098);

const {:count 12} .str.104: ref;

axiom .str.104 == $sub.ref(0, 199134);

const {:count 16} .str.105: ref;

axiom .str.105 == $sub.ref(0, 200174);

const {:count 12} .str.106: ref;

axiom .str.106 == $sub.ref(0, 201210);

const {:count 91} .str.108: ref;

axiom .str.108 == $sub.ref(0, 202325);

const {:count 28} .str.129: ref;

axiom .str.129 == $sub.ref(0, 203377);

const {:count 18} .str.130: ref;

axiom .str.130 == $sub.ref(0, 204419);

const acpi_disabled: ref;

axiom acpi_disabled == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

const .str: ref;

axiom .str == $sub.ref(0, 205474);

const {:count 32} .str.1: ref;

axiom .str.1 == $sub.ref(0, 206530);

const {:count 51} .str.14: ref;

axiom .str.14 == $sub.ref(0, 207605);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 208637);

const {:count 3} .str.1.256: ref;

axiom .str.1.256 == $sub.ref(0, 209664);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 210702);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 211730);

const processor_get_max_state: ref;

axiom processor_get_max_state == $sub.ref(0, 212762);

procedure processor_get_max_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation processor_get_max_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1680)), $mul.ref(1456, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p8 := acpi_driver_data($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i12 := acpi_processor_max_state($p9);
    call {:si_unique_call 2} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i13);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const processor_get_cur_state: ref;

axiom processor_get_cur_state == $sub.ref(0, 213794);

procedure processor_get_cur_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.50;



implementation processor_get_cur_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1680)), $mul.ref(1456, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p8 := acpi_driver_data($p4);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i14 := cpufreq_get_cur_state($i13);
    call {:si_unique_call 5} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i15);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p9);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(32, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i21, $i25);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i26);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const processor_set_cur_state: ref;

axiom processor_set_cur_state == $sub.ref(0, 214826);

procedure processor_set_cur_state($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.50, $CurrAddr;



implementation processor_set_cur_state($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p36: ref;
  var $i37: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i35: i32;
  var $i7: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} {:cexpr "processor_set_cur_state:arg:state"} boogie_si_record_i64($i1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1680)), $mul.ref(1456, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p8 := acpi_driver_data($p4);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i14 := cpufreq_get_max_state($i13);
    call {:si_unique_call 9} {:cexpr "max_pstate"} boogie_si_record_i32($i14);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i15 := acpi_processor_max_state($p9);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i17 := $ult.i64($i16, $i1);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i19 := $uge.i64($i18, $i1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_59 := cpufreq_set_cur_state($i37, $i14);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i1);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, $i14);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i41 := acpi_processor_set_throttling($p9, $i40, 0);
    call {:si_unique_call 14} {:cexpr "result"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    $i35 := $i41;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p9);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(32, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_60 := cpufreq_set_cur_state($i32, $i33);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i35 := $i30;
    goto $bb19;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i29 := acpi_processor_set_throttling($p9, 0, 0);
    call {:si_unique_call 16} {:cexpr "result"} boogie_si_record_i32($i29);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb18;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 215858);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const acpi_driver_data: ref;

axiom acpi_driver_data == $sub.ref(0, 216890);

procedure acpi_driver_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation acpi_driver_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(496, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cpufreq_get_max_state: ref;

axiom cpufreq_get_max_state == $sub.ref(0, 217922);

procedure cpufreq_get_max_state($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation cpufreq_get_max_state($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} {:cexpr "cpufreq_get_max_state:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i1 := cpu_has_cpufreq($i0);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const acpi_processor_max_state: ref;

axiom acpi_processor_max_state == $sub.ref(0, 218954);

procedure acpi_processor_max_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation acpi_processor_max_state($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i3 := cpufreq_get_max_state($i2);
    call {:si_unique_call 22} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 0);
    call {:si_unique_call 23} {:cexpr "max_state"} boogie_si_record_i32($i4);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i4);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    call {:si_unique_call 24} {:cexpr "max_state"} boogie_si_record_i32($i14);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const acpi_processor_set_throttling: ref;

axiom acpi_processor_set_throttling == $sub.ref(0, 219986);

procedure acpi_processor_set_throttling($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.0, $CurrAddr, $M.50;



implementation acpi_processor_set_throttling($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i41: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i73: i64;
  var $i74: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i100: i32;
  var $p101: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i1;
  var $p111: ref;
  var $i112: i8;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i64;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i71: i32;
  var $i72: i32;
  var $i75: i32;
  var $i123: i32;
  var $i70: i32;
  var $i94: i32;
  var $i124: i32;
  var $i63: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i131: i32;
  var $i8: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 27} {:cexpr "acpi_processor_set_throttling:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 28} {:cexpr "acpi_processor_set_throttling:arg:force"} boogie_si_record_i1($i2);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(32, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i1, $i18);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i22 := cpumask_check($i21);
    call {:si_unique_call 30} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i27 := variable_test_bit($i23, $p26);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 34} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, $i1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, cpu_online_mask);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i38 := cpumask_next_and($sub.i32(0, 1), $p35, $p37);
    call {:si_unique_call 36} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, $i38);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 253);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, cpu_online_mask);
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i67 := cpumask_next_and($sub.i32(0, 1), $p64, $p66);
    call {:si_unique_call 44} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i68, $i67);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i70 := 0;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i124 := $i70;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i63 := $i124;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, cpu_online_mask);
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i128 := cpumask_next_and($sub.i32(0, 1), $p125, $p127);
    call {:si_unique_call 46} {:cexpr "tmp___6"} boogie_si_record_i32($i128);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i130 := $ugt.i32($i129, $i128);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i8 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb59:
    assume $i130 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i131 := $i128;
    goto $bb62;

  $bb62:
    call $p132, $p133, $p135, $p136, $i137, $i138, $i139, $i131, vslice_dummy_var_62 := acpi_processor_set_throttling_loop_$bb62($p4, $p126, $p132, $p133, $p135, $p136, $i137, $i138, $i139, $i131, vslice_dummy_var_62);
    goto $bb62_last;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p132, $i131);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p4);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_62 := acpi_processor_throttling_notifier(2, $p133);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p126);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i137 := cpumask_next_and($i131, $p135, $p136);
    call {:si_unique_call 60} {:cexpr "tmp___6"} boogie_si_record_i32($i137);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i139 := $ugt.i32($i138, $i137);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i139 == 1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb64:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i131 := $i137;
    goto $bb64_dummy;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i71, $i72 := $i67, 0;
    goto $bb31;

  $bb31:
    call $i73, $i74, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $i99, $i102, $i103, $i104, $i105, $i106, $i107, $i100, $p101, $p108, $p109, $i110, $p111, $i112, $p113, $i114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i71, $i72, $i75, $i123, $i94 := acpi_processor_set_throttling_loop_$bb31($p0, $i1, $p3, $i5, $p65, $i73, $i74, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $i99, $i102, $i103, $i104, $i105, $i106, $i107, $i100, $p101, $p108, $p109, $i110, $p111, $i112, $p113, $i114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i71, $i72, $i75, $i123, $i94);
    goto $bb31_last;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i75 := $i71;
    goto $bb56;

  $bb56:
    call $i73, $i74, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $i99, $i102, $i103, $i104, $i105, $i106, $i107, $i100, $p101, $i75, $i94 := acpi_processor_set_throttling_loop_$bb56($p65, $i73, $i74, $p76, $i77, $i78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $p95, $p96, $i97, $i98, $i99, $i102, $i103, $i104, $i105, $i106, $i107, $i100, $p101, $i72, $i75, $i94);
    goto $bb56_last;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call {:si_unique_call 47} $i73 := devirtbounce(0, processors);
    call {:si_unique_call 48} {:cexpr "__ptr"} boogie_si_record_i64($i73);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i75);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i74, 8));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, $i73);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p80);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(32, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i100, $p101 := $i75, $p80;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p108, $p101);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p109, $i1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i5);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i110);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p111, $i112);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p3);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i116 := work_on_cpu($i114, acpi_processor_throttling_fn, $p115);
    call {:si_unique_call 54} {:cexpr "tmp___4"} boogie_si_record_i64($i116);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i116);
    call {:si_unique_call 55} {:cexpr "ret"} boogie_si_record_i32($i117);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p65);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i120 := cpumask_next_and($i100, $p118, $p119);
    call {:si_unique_call 57} {:cexpr "tmp___5"} boogie_si_record_i32($i120);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i122 := $ugt.i32($i121, $i120);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i123 := $i117;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i70 := $i123;
    goto $bb30;

  $bb54:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i71, $i72 := $i120, $i117;
    goto $bb54_dummy;

  $bb45:
    assume $i99 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 4);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p65);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i91 := cpumask_next_and($i75, $p89, $p90);
    call {:si_unique_call 51} {:cexpr "tmp___5"} boogie_si_record_i32($i91);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i93 := $ugt.i32($i92, $i91);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i94 := $i72;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i124 := $i94;
    goto $bb57;

  $bb42:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i75 := $i91;
    goto $bb42_dummy;

  $bb47:
    assume $i104 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 536870912);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb49;

  $bb50:
    assume $i107 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1186, .str.2, _acpi_module_name___0, 536870912, .str.4, $i75);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb33:
    assume $i82 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 4);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 536870912);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb38:
    assume $i88 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1176, .str.2, _acpi_module_name___0, 536870912, .str.3, $i75);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p53, $p0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p54, $i1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i5);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i55);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p56, $i57);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i61 := work_on_cpu($i59, acpi_processor_throttling_fn, $p60);
    call {:si_unique_call 41} {:cexpr "tmp___3"} boogie_si_record_i64($i61);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    call {:si_unique_call 42} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb27;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb20;

  $bb20:
    call $p42, $p43, $p45, $p46, $i47, $i48, $i49, $i41, vslice_dummy_var_61 := acpi_processor_set_throttling_loop_$bb20($p4, $p36, $p42, $p43, $p45, $p46, $i47, $i48, $i49, $i41, vslice_dummy_var_61);
    goto $bb20_last;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p42, $i41);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_61 := acpi_processor_throttling_notifier(1, $p43);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p36);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i47 := cpumask_next_and($i41, $p45, $p46);
    call {:si_unique_call 39} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i49 := $ugt.i32($i48, $i47);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb22_dummy;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb64_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  $bb42_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  $bb54_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_253;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;
}



const cpufreq_set_cur_state: ref;

axiom cpufreq_set_cur_state == $sub.ref(0, 221018);

procedure cpufreq_set_cur_state($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation cpufreq_set_cur_state($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i15: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} {:cexpr "cpufreq_set_cur_state:arg:cpu"} boogie_si_record_i32($i0);
    call {:si_unique_call 62} {:cexpr "cpufreq_set_cur_state:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i2 := cpu_has_cpufreq($i0);
    call {:si_unique_call 64} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 65} $i4 := devirtbounce.1(0, cpufreq_thermal_reduction_pctg);
    call {:si_unique_call 66} {:cexpr "__ptr"} boogie_si_record_i64($i4);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i5 := phys_package_first_cpu($i0);
    call {:si_unique_call 68} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i6, 8));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i4);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i12 := cpumask_next($sub.i32(0, 1), $p11);
    call {:si_unique_call 70} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i13);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $p19, $i20, $i21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $i15, vslice_dummy_var_63 := cpufreq_set_cur_state_loop_$bb8($i0, $i16, $i17, $i18, $p19, $i20, $i21, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p36, $i37, $i38, $i39, $i15, vslice_dummy_var_63);
    goto $bb8_last;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 71} $i16 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 72} {:cexpr "__ptr___0"} boogie_si_record_i64($i16);
    call {:si_unique_call 73} $i17 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 74} {:cexpr "__ptr___1"} boogie_si_record_i64($i17);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i18, 8));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i16);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i26, 8));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, $i17);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i25, $i33);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i37 := cpumask_next($i15, $p36);
    call {:si_unique_call 77} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, $i38);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb13_dummy;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_63 := cpufreq_update_policy($i15);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;
}



const cpu_has_cpufreq: ref;

axiom cpu_has_cpufreq == $sub.ref(0, 222050);

procedure cpu_has_cpufreq($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation cpu_has_cpufreq($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p1 := $alloc($mul.ref(960, $zext.i32.i64(1)));
    call {:si_unique_call 79} {:cexpr "cpu_has_cpufreq:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i2 := $M.6;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i5 := cpufreq_get_policy($p1, $i0);
    call {:si_unique_call 81} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const phys_package_first_cpu: ref;

axiom phys_package_first_cpu == $sub.ref(0, 223082);

procedure phys_package_first_cpu($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation phys_package_first_cpu($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i14: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "phys_package_first_cpu:arg:cpu"} boogie_si_record_i32($i0);
    call {:si_unique_call 83} $i1 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 84} {:cexpr "__ptr"} boogie_si_record_i64($i1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i2, 8));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 85} {:cexpr "id"} boogie_si_record_i32($i9);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i11 := cpumask_next($sub.i32(0, 1), $p10);
    call {:si_unique_call 87} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb4;

  $bb4:
    call $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i14 := phys_package_first_cpu_loop_$bb4($i9, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i14);
    goto $bb4_last;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call {:si_unique_call 88} $i15 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 89} {:cexpr "__ptr___0"} boogie_si_record_i64($i15);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i16, 8));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, $i15);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, $i9);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i28 := cpumask_next($i14, $p27);
    call {:si_unique_call 91} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, $i29);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i28;
    goto $bb10_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;
}



const cpufreq_update_policy: ref;

axiom cpufreq_update_policy == $sub.ref(0, 224114);

procedure cpufreq_update_policy($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpufreq_update_policy($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} {:cexpr "cpufreq_update_policy:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 225146);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_64 := cpumask_check($i0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 226178);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_65: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 100} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_65 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 103} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 108} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} warn_slowpath_null(.str.40, 108);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 227210);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 111} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 228242);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 115} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 229274);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    return;
}



const cpufreq_get_policy: ref;

axiom cpufreq_get_policy == $sub.ref(0, 230306);

procedure cpufreq_get_policy($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpufreq_get_policy($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} {:cexpr "cpufreq_get_policy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 231338);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.50, $CurrAddr;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 121} $i2 := devirtbounce.3(0, $p1, $i0);
    call {:si_unique_call 122} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acpi_processor_throttling_notifier: ref;

axiom acpi_processor_throttling_notifier == $sub.ref(0, 232370);

procedure acpi_processor_throttling_notifier($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.50, $CurrAddr;



implementation acpi_processor_throttling_notifier($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "acpi_processor_throttling_notifier:arg:event"} boogie_si_record_i64($i0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    call {:si_unique_call 124} {:cexpr "cpu"} boogie_si_record_i32($i4);
    call {:si_unique_call 125} $i5 := devirtbounce(0, processors);
    call {:si_unique_call 126} {:cexpr "__ptr"} boogie_si_record_i64($i5);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i6, 8));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i5);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p11);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(32, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    call {:si_unique_call 129} {:cexpr "target_state"} boogie_si_record_i32($i32);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_67 := printk.ref(.str.47);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb23:
    assume $i35 == 1;
    $p75 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i32);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 4);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i78 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 536870912);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb49;

  $bb50:
    assume $i81 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 310, .str.41, _acpi_module_name___0, 536870912, .str.46, $i4, $i32);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb21:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb25;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i32);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i32;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, $i45);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i45;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, $i53);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i53;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i62 := $uge.i32($i59, $i61);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i67 := $i59;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, $i67);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 4);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i71 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 536870912);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb42;

  $bb43:
    assume $i74 == 1;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 300, .str.41, _acpi_module_name___0, 536870912, .str.45, $i4, $i67);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i62 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_66 := printk.ref(.str.44);
    $p64 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, 1);
    call {:si_unique_call 134} {:cexpr "target_state"} boogie_si_record_i32($i66);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb39;

  $bb34:
    assume $i56 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 132} {:cexpr "target_state"} boogie_si_record_i32($i58);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb36;

  $bb31:
    assume $i49 == 1;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 131} {:cexpr "target_state"} boogie_si_record_i32($i52);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb33;

  $bb28:
    assume $i41 == 1;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 130} {:cexpr "target_state"} boogie_si_record_i32($i44);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb30;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 536870912);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 274, .str.41, _acpi_module_name___0, 536870912, .str.43, $i4);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 536870912);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 269, .str.41, _acpi_module_name___0, 536870912, .str.42);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const cpumask_next_and: ref;

axiom cpumask_next_and == $sub.ref(0, 233402);

procedure cpumask_next_and($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next_and($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} {:cexpr "cpumask_next_and:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acpi_processor_throttling_fn: ref;

axiom acpi_processor_throttling_fn == $sub.ref(0, 234434);

procedure acpi_processor_throttling_fn($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_throttling_fn($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(112, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    call {:si_unique_call 141} $i12 := devirtbounce.4($p6, $p3, $i8, $i11);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const work_on_cpu: ref;

axiom work_on_cpu == $sub.ref(0, 235466);

procedure work_on_cpu($i0: i32, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation work_on_cpu($i0: i32, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} {:cexpr "work_on_cpu:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 145} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acpi_debug_print: ref;

axiom acpi_debug_print == $sub.ref(0, 236498);

procedure acpi_debug_print.i32.i32.ref.ref.i32.ref($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref);
  free requires assertsPassed;



implementation acpi_debug_print.i32.i32.ref.ref.i32.ref($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "acpi_debug_print:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 147} {:cexpr "acpi_debug_print:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 148} {:cexpr "acpi_debug_print:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    return;
}



procedure acpi_debug_print.i32.i32.ref.ref.i32.ref.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32);
  free requires assertsPassed;



implementation acpi_debug_print.i32.i32.ref.ref.i32.ref.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "acpi_debug_print:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 150} {:cexpr "acpi_debug_print:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 151} {:cexpr "acpi_debug_print:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    return;
}



procedure acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "acpi_debug_print:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 153} {:cexpr "acpi_debug_print:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 154} {:cexpr "acpi_debug_print:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    return;
}



procedure acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32, p.8: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} {:cexpr "acpi_debug_print:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 156} {:cexpr "acpi_debug_print:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 157} {:cexpr "acpi_debug_print:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    return;
}



procedure acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32.i32.i32.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32);
  free requires assertsPassed;



implementation acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32.i32.i32.i32.i32($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "acpi_debug_print:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 159} {:cexpr "acpi_debug_print:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 160} {:cexpr "acpi_debug_print:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 237530);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acpi_processor_get_bios_limit: ref;

axiom acpi_processor_get_bios_limit == $sub.ref(0, 238562);

procedure acpi_processor_get_bios_limit($i0: i32, $p1: ref) returns ($r: i32);



const acpi_processor_get_performance_info: ref;

axiom acpi_processor_get_performance_info == $sub.ref(0, 239594);

procedure acpi_processor_get_performance_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, assertsPassed;



implementation acpi_processor_get_performance_info($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i27: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i11: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i14 := acpi_has_method($p13, .str.15);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i25 := acpi_processor_get_performance_control($p0);
    call {:si_unique_call 175} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i28 := acpi_processor_get_performance_states($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 179} {:cexpr "result"} boogie_si_record_i32($i28);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i30 := $M.8;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i28;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i32 := acpi_processor_get_platform_limit___0($p0);
    call {:si_unique_call 181} {:cexpr "result"} boogie_si_record_i32($i32);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb31;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i36 := acpi_has_method($p35, .str.18);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 177} {:cexpr "tmp___2"} boogie_si_record_i8($i37);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb8;

  $bb32:
    assume $i38 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i39 := constant_test_bit(135, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(20, 1)));
    call {:si_unique_call 183} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i40 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_68 := printk.ref(.str.19);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb24;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb8;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 536870912);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 471, .str.16, _acpi_module_name___2, 536870912, .str.17);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const acpi_has_method: ref;

axiom acpi_has_method == $sub.ref(0, 240626);

procedure acpi_has_method($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation acpi_has_method($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acpi_processor_get_performance_control: ref;

axiom acpi_processor_get_performance_control == $sub.ref(0, 241658);

procedure acpi_processor_get_performance_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation acpi_processor_get_performance_control($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i24: i32;
  var $p92: ref;
  var $p93: ref;
  var $i10: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p3, $sub.i64(0, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, $0.ref);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p5, 0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i8 := acpi_evaluate_object($p7, .str.15, $0.ref, $p1);
    call {:si_unique_call 190} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.10, $p11);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p13);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 4);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p13);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 2);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p13);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.11;
    cmdloc_dummy_var_1 := $M.11;
    call {:si_unique_call 194} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p28, $p29, 24, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_2;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.11, $p30);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 3);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i32 == 1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.11, $p34);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 14);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.11, $p38);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i64(15, 63);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.11, $p56);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 197} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p54, $p57, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p13);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(1, 24));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p61);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.11;
    cmdloc_dummy_var_10 := $M.11;
    call {:si_unique_call 198} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p62, $p63, 24, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_11;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.11, $p64);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 3);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i66 == 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.11, $p68);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i70 := $ule.i32($i69, 14);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p2);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.11, $p72);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i77 := $ugt.i64(15, 63);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i77 == 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.11, $p90);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 201} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p88, $p91, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.10, $p92);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} kfree($p93);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb33:
    assume $i77 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p2);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.11, $p83);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 200} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p81, $p84, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vslice_dummy_var_71 := printk.ref(.str.118);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb12;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb26;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.11, $p49);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 196} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p47, $p50, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_70 := printk.ref(.str.117);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_69 := printk.ref(.str.116);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} acpi_exception.ref.i32.i32.ref(_acpi_module_name___2, 270, $i8, .str.115);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;
}



const acpi_processor_get_performance_states: ref;

axiom acpi_processor_get_performance_states == $sub.ref(0, 242690);

procedure acpi_processor_get_performance_states($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, assertsPassed;



implementation acpi_processor_get_performance_states($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $p104: ref;
  var $i105: i64;
  var $i106: i32;
  var $p107: ref;
  var $i108: i64;
  var $i109: i32;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $p113: ref;
  var $i114: i64;
  var $i115: i32;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $i120: i64;
  var $i121: i32;
  var $i122: i32;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i64;
  var $i133: i1;
  var $i134: i32;
  var $i136: i1;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i135: i32;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i62: i32;
  var $i63: i32;
  var $i161: i32;
  var $i61: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i24: i32;
  var $p179: ref;
  var $p180: ref;
  var $i14: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p4, $sub.i64(0, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, $0.ref);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p6, 7);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.119);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p8, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, $0.ref);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i12 := acpi_evaluate_object($p11, .str.120, $0.ref, $p1);
    call {:si_unique_call 206} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.10, $p15);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p17);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 4);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p17);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p17);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 48);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p45 := kmalloc($i44, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p45);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32(0, $i59);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 1);
    assume {:branchcond $i60} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i61, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i61, 0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i24 := $i174;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.10, $p179);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p180);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb62:
    assume $i175 == 1;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i61);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i162 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_74 := printk.ref.i32(.str.128, $i164);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} kfree($p170);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p173, $0.ref);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i174 := $sub.i32(0, 14);
    goto $bb61;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i62, $i63 := 0, $sub.i32(0, 1);
    goto $bb24;

  $bb24:
    call $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $p80, $p81, $i82, $p83, $i84, $i85, $i86, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $p101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $p130, $i131, $i133, $i134, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $i151, $p152, $p153, $i154, $i155, $i135, $i156, $p157, $p158, $i159, $i160, $i62, $i63, $i161, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, vslice_dummy_var_73 := acpi_processor_get_performance_states_loop_$bb24($p0, $p2, $p3, $p17, $p56, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $p80, $p81, $i82, $p83, $i84, $i85, $i86, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $p101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $p130, $i131, $i133, $i134, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $p150, $i151, $p152, $p153, $i154, $i155, $i135, $i156, $p157, $p158, $i159, $i160, $i62, $i63, $i161, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, vslice_dummy_var_73);
    goto $bb24_last;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i62);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 48));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p70, 48);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p72, $p69);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 4);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p17);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i62);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p81, $mul.ref($i82, 24));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i84 := acpi_extract_package($p83, $p2, $p3);
    call {:si_unique_call 214} {:cexpr "status"} boogie_si_record_i32($i84);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i86 := $i84;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} amd_fixup_frequency($p69, $i62);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 4);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p116);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i118 == 1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i64.i32($i120);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i122 := $mul.i32($i121, 1000);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i123 := $zext.i32.i64($i122);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i126 := $mul.i64($i125, 1000);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i123, $i126);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i127 == 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i63, $sub.i32(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i155 := $i63;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i135 := $i155;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i62, 1);
    call {:si_unique_call 220} {:cexpr "i"} boogie_si_record_i32($i156);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p56);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i160 := $ult.i32($i156, $i159);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i161 := $i135;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i61 := $i161;
    goto $bb23;

  $bb56:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i62, $i63 := $i156, $i135;
    goto $bb56_dummy;

  $bb50:
    assume $i136 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i137 := $ugt.i64(48, 63);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i137 == 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i63);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p150, $mul.ref($i151, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p69);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 222} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p152, $p153, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i63, 1);
    call {:si_unique_call 223} {:cexpr "last_invalid"} boogie_si_record_i32($i154);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i155 := $i154;
    goto $bb55;

  $bb52:
    assume $i137 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i63);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p142, $mul.ref($i143, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p69);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 221} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p144, $p145, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, $p130);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_73 := printk.ref.i32.i64(.str.127, $i129, $i131);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i63, $sub.i32(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $i63;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb49;

  $bb46:
    assume $i133 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i134 := $i62;
    goto $bb48;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb42;

  $bb35:
    assume $i94 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 536870912);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb37;

  $bb38:
    assume $i97 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(8, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(16, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i32($i105);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(24, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i108);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(32, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i111);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p67, $mul.ref($i68, 48)), $mul.ref(40, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32.i32.i32.i32.i32(4, 420, .str.123, _acpi_module_name___2, 536870912, .str.126, $i62, $i100, $i103, $i106, $i109, $i112, $i115);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} acpi_exception.ref.i32.i32.ref(_acpi_module_name___2, 405, $i86, .str.125);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} kfree($p91);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 536870912);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb28;

  $bb29:
    assume $i78 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 400, .str.123, _acpi_module_name___2, 536870912, .str.60, $i62);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 536870912);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p17);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 382, .str.123, _acpi_module_name___2, 536870912, .str.124, $i33);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_72 := printk.ref(.str.122);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} acpi_exception.ref.i32.i32.ref(_acpi_module_name___2, 370, $i12, .str.121);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_974;
}



const acpi_processor_get_platform_limit___0: ref;

axiom acpi_processor_get_platform_limit___0 == $sub.ref(0, 243722);

procedure acpi_processor_get_platform_limit___0($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.0, $CurrAddr;



implementation acpi_processor_get_platform_limit___0($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $i5: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p1, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i8 := acpi_evaluate_integer($p7, .str.18, $0.ref, $p1);
    call {:si_unique_call 229} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 5);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i8, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p14, .str.26);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p15, .str.111);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p16, .str.24);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p17, .str.112);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.22, $p19);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 174);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $M.22 := $store.i24($M.22, $p19, $i22);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p23, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.23, $p24);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 233} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.16, $p1);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(24, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.16, $p1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.16, $p1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p36 := (if $i35 == 1 then .str.113 else .str.114);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_75 := __dynamic_pr_debug.ref.ref.i32.i32.ref($p2, .str.112, $i31, $i33, $p36);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i8, 5);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} acpi_exception.ref.i32.i32.ref(_acpi_module_name___2, 169, $i8, .str.110);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i10 := $M.17;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 2);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.17 := $i11;
    call {:si_unique_call 230} {:cexpr "acpi_processor_ppc_status"} boogie_si_record_i32($i11);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 244754);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const acpi_evaluate_integer: ref;

axiom acpi_evaluate_integer == $sub.ref(0, 245786);

procedure acpi_evaluate_integer($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_evaluate_integer($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 236} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 237} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const acpi_exception: ref;

axiom acpi_exception == $sub.ref(0, 246818);

procedure acpi_exception.ref.i32.i32.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation acpi_exception.ref.i32.i32.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "acpi_exception:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 239} {:cexpr "acpi_exception:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    return;
}



procedure acpi_exception.ref.i32.i32.ref.i32.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation acpi_exception.ref.i32.i32.ref.i32.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, p.4: i32, p.5: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "acpi_exception:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 241} {:cexpr "acpi_exception:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 247850);

procedure __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acpi_evaluate_object: ref;

axiom acpi_evaluate_object == $sub.ref(0, 248882);

procedure acpi_evaluate_object($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_evaluate_object($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 245} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 249914);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 247} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_76 := ldv_kmalloc_31($i0, $i1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const acpi_extract_package: ref;

axiom acpi_extract_package == $sub.ref(0, 250946);

procedure acpi_extract_package($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_extract_package($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 251} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 251978);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} free_($p0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    return;
}



const amd_fixup_frequency: ref;

axiom amd_fixup_frequency == $sub.ref(0, 253010);

procedure amd_fixup_frequency($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation amd_fixup_frequency($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 254} {:cexpr "amd_fixup_frequency:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 7);
    call {:si_unique_call 255} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(1, 1)));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 2);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, boot_cpu_data);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 16);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, boot_cpu_data);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 17);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i6, $sub.i32(0, 1073676188));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i20 := paravirt_read_msr($i19, $p2);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    call {:si_unique_call 258} {:cexpr "lo"} boogie_si_record_i32($i21);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i20, 32);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    call {:si_unique_call 259} {:cexpr "hi"} boogie_si_record_i32($i23);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i24 := $sge.i32($i23, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i21, 63);
    call {:si_unique_call 260} {:cexpr "fid"} boogie_si_record_i32($i25);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i32($i21, 6);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 7);
    call {:si_unique_call 261} {:cexpr "did"} boogie_si_record_i32($i27);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, boot_cpu_data);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 16);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i25, 100);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 800);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i32($i37, $i27);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i39);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i25, 100);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1600);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i32, $i27);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(2, 1)));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 9);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 254042);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const paravirt_read_msr: ref;

axiom paravirt_read_msr == $sub.ref(0, 255074);

procedure paravirt_read_msr($i0: i32, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation paravirt_read_msr($i0: i32, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "paravirt_read_msr:arg:msr"} boogie_si_record_i32($i0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(224, 1)));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 266} $p11 := devirtbounce.6(0, 32, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(224, 1)), 511, $i9, $i10);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i12 := $extractvalue($p11, 4);
    call {:si_unique_call 267} {:cexpr "__eax"} boogie_si_record_i64($i12);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    call {:si_unique_call 265} devirtbounce.5(0, .str.65, 128, 12);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call paravirt_read_msr_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const free_: ref;

axiom free_ == $sub.ref(0, 256106);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 268} $free($p0);
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 257138);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_kmalloc_31: ref;

axiom ldv_kmalloc_31 == $sub.ref(0, 258170);

procedure ldv_kmalloc_31($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_31($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "ldv_kmalloc_31:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 272} {:cexpr "ldv_kmalloc_31:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 259202);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 275} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p2 := ldv_malloc($i0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 260234);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 278} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 279} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 280} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p4 := malloc($i0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 282} __VERIFIER_assume($i7);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 261266);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 283} $r := $malloc($i0);
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 262298);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 284} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const acpi_processor_notify_smm: ref;

axiom acpi_processor_notify_smm == $sub.ref(0, 263330);

procedure acpi_processor_notify_smm($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_processor_notify_smm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i5 := try_module_get($p0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 286} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32(0, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(48, 1)));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i13 == 1);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(55, 1)));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 4);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(48, 1)));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(55, 1)));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i36 := acpi_os_write_port($i33, $i35, 8);
    call {:si_unique_call 293} {:cexpr "status"} boogie_si_record_i32($i36);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i41 := $M.17;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 2);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} module_put($p0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i37 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(55, 1)));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(48, 1)));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} acpi_exception.ref.i32.i32.ref.i32.i32(_acpi_module_name___2, 548, $i36, .str.23, $i39, $i40);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} module_put($p0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i4 := $i36;
    goto $bb3;

  $bb29:
    assume $i25 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 536870912);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb31;

  $bb32:
    assume $i28 == 1;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(55, 1)));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(48, 1)));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 540, .str.20, _acpi_module_name___2, 536870912, .str.22, $i30, $i31);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} module_put($p0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb22:
    assume $i19 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 536870912);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb24;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 533, .str.20, _acpi_module_name___2, 536870912, .str.21);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb18;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} module_put($p0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} module_put($p0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 16);
    goto $bb3;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 264362);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 265394);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    return;
}



const acpi_os_write_port: ref;

axiom acpi_os_write_port == $sub.ref(0, 266426);

procedure acpi_os_write_port($i0: i64, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_os_write_port($i0: i64, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} {:cexpr "acpi_os_write_port:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 300} {:cexpr "acpi_os_write_port:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 301} {:cexpr "acpi_os_write_port:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 303} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acpi_processor_preregister_performance: ref;

axiom acpi_processor_preregister_performance == $sub.ref(0, 267458);

procedure acpi_processor_preregister_performance($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5, $M.28, $M.27;



implementation acpi_processor_preregister_performance($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i13: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i32;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i49: i32;
  var $i82: i32;
  var $i46: i32;
  var $i63: i32;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i32;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $i166: i64;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i147: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i188: i32;
  var $i90: i32;
  var $i85: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $i231: i64;
  var $i232: i64;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i230: i32;
  var $i31: i32;
  var $p261: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i3 := zalloc_cpumask_var($p2, 208);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} mutex_lock_nested(performance_mutex, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i10 := cpumask_next($sub.i32(0, 1), $p9);
    call {:si_unique_call 309} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, $i10);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i43 := cpumask_next($sub.i32(0, 1), $p42);
    call {:si_unique_call 319} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, $i43);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i46 := 0;
    assume {:branchcond $i45} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i83 := $i46;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i87 := cpumask_next($sub.i32(0, 1), $p86);
    call {:si_unique_call 334} {:cexpr "i"} boogie_si_record_i32($i87);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i89 := $ugt.i32($i88, $i87);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i227 := cpumask_next($sub.i32(0, 1), $p226);
    call {:si_unique_call 332} {:cexpr "i"} boogie_si_record_i32($i227);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i229 := $ugt.i32($i228, $i227);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i31 := $i85;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} mutex_unlock(performance_mutex);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.26, $p1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} free_cpumask_var($p261);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb122:
    assume $i229 == 1;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i230 := $i227;
    goto $bb125;

  $bb125:
    call $i231, $i232, $p233, $i234, $i235, $p236, $p237, $i238, $i239, $p240, $p241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $p249, $p250, $p251, $p252, $p253, $p254, $p255, $p256, $p257, $p258, $p259, $p260, $i230 := acpi_processor_preregister_performance_loop_$bb125($i85, $i231, $i232, $p233, $i234, $i235, $p236, $p237, $i238, $i239, $p240, $p241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $p249, $p250, $p251, $p252, $p253, $p254, $p255, $p256, $p257, $p258, $p259, $p260, $i230);
    goto $bb125_last;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    call {:si_unique_call 361} $i231 := devirtbounce(0, processors);
    call {:si_unique_call 362} {:cexpr "__ptr___6"} boogie_si_record_i64($i231);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i232 := $zext.i32.i64($i230);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i232, 8));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i234 := $load.i64($M.0, $p233);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i235 := $add.i64($i234, $i231);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p236 := $i2p.i64.ref($i235);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i239 := $eq.i64($i238, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb129;

  $bb129:
    assume !($i239 == 1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i243 := $eq.i64($i242, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i85, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p260, $0.ref);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i245 := cpumask_next($i230, $p244);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32($i245);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i247 := $ugt.i32($i246, $i245);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i247 == 1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb133:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    $i230 := $i245;
    goto $bb133_dummy;

  $bb136:
    assume $i248 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} cpumask_clear($p252);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} cpumask_set_cpu($i230, $p256);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p258, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p259, 2);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb128;

  $bb53:
    assume $i89 == 1;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i90 := $i87;
    goto $bb56;

  $bb56:
    call $i91, $i92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i110, $p111, $p112, $p114, $p115, $p116, $p117, $p118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $p128, $p129, $p130, $p131, $i132, $i133, $p134, $p135, $p136, $p137, $i138, $i139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $p165, $i166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $i147, $p184, $i185, $i186, $i187, $i189, $p190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i198, $p199, $p200, $i201, $i202, $p203, $p204, $p206, $i207, $p208, $i209, $i210, $p211, $p212, $p213, $i214, $p215, $p216, $p217, $p218, $p219, $p220, $p221, $p222, $p223, $p224, $p225, $i188, $i90 := acpi_processor_preregister_performance_loop_$bb56($p1, $i91, $i92, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i110, $p111, $p112, $p114, $p115, $p116, $p117, $p118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $p128, $p129, $p130, $p131, $i132, $i133, $p134, $p135, $p136, $p137, $i138, $i139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $p165, $i166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $i147, $p184, $i185, $i186, $i187, $i189, $p190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i198, $p199, $p200, $i201, $i202, $p203, $p204, $p206, $i207, $p208, $i209, $i210, $p211, $p212, $p213, $i214, $p215, $p216, $p217, $p218, $p219, $p220, $p221, $p222, $p223, $p224, $p225, $i188, $i90);
    goto $bb56_last;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    call {:si_unique_call 335} $i91 := devirtbounce(0, processors);
    call {:si_unique_call 336} {:cexpr "__ptr___3"} boogie_si_record_i64($i91);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i90);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i92, 8));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, $i91);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i104 := cpumask_check($i90);
    call {:si_unique_call 340} {:cexpr "tmp___2"} boogie_si_record_i32($i104);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i104);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.26, $p1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i109 := variable_test_bit($i105, $p108);
    call {:si_unique_call 342} {:cexpr "tmp___3"} boogie_si_record_i32($i109);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} cpumask_set_cpu($i90, $p117);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.26, $p1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} cpumask_set_cpu($i90, $p118);
    $p119 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i121 := $ule.i64($i120, 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $p122 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i64.i32($i123);
    call {:si_unique_call 345} {:cexpr "count_target"} boogie_si_record_i32($i124);
    $p125 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.0, $p125);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i127 := $eq.i64($i126, 252);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i127 == 1);
    $p131 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 254);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i133 == 1);
    $p137 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.0, $p137);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 253);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i144 := cpumask_next($sub.i32(0, 1), $p143);
    call {:si_unique_call 347} {:cexpr "j"} boogie_si_record_i32($i144);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i146 := $ugt.i32($i145, $i144);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i185 := cpumask_next($sub.i32(0, 1), $p184);
    call {:si_unique_call 355} {:cexpr "j"} boogie_si_record_i32($i185);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i187 := $ugt.i32($i186, $i185);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i101 := cpumask_next($i90, $p100);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32($i101);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i103 := $ugt.i32($i102, $i101);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i103 == 1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb61:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i90 := $i101;
    goto $bb61_dummy;

  $bb103:
    assume $i187 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i188 := $i185;
    goto $bb106;

  $bb106:
    call $i189, $p190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i198, $p199, $p200, $i201, $i202, $p203, $p204, $p206, $i207, $p208, $i209, $i210, $p211, $p212, $p213, $i214, $p215, $p216, $p217, $p218, $p219, $p220, $p221, $p222, $p223, $p224, $p225, $i188 := acpi_processor_preregister_performance_loop_$bb106($p97, $p112, $i189, $p190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i198, $p199, $p200, $i201, $i202, $p203, $p204, $p206, $i207, $p208, $i209, $i210, $p211, $p212, $p213, $i214, $p215, $p216, $p217, $p218, $p219, $p220, $p221, $p222, $p223, $p224, $p225, $i188, $i90);
    goto $bb106_last;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i90, $i188);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    call {:si_unique_call 358} $i194 := devirtbounce(0, processors);
    call {:si_unique_call 359} {:cexpr "__ptr___5"} boogie_si_record_i64($i194);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i188);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i195, 8));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p196);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, $i194);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i202 := $eq.i64($i201, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p204, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.0, $p206);
    $p208 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.0, $p208);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i207, $i209);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i214);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p223, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} cpumask_copy($p221, $p225);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i191 := cpumask_next($i188, $p190);
    call {:si_unique_call 357} {:cexpr "j"} boogie_si_record_i32($i191);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i193 := $ugt.i32($i192, $i191);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i193 == 1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb111:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i188 := $i191;
    goto $bb111_dummy;

  $bb117:
    assume $i210 == 1;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb114:
    assume $i202 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume $i189 == 1;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb79:
    assume $i146 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i147 := $i144;
    goto $bb82;

  $bb82:
    call $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $p165, $i166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $i147 := acpi_processor_preregister_performance_loop_$bb82($p1, $p97, $p112, $i124, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $p163, $p165, $i166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $p176, $i177, $i178, $p179, $p180, $p181, $p182, $p183, $i147, $i90);
    goto $bb82_last;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i90, $i147);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    call {:si_unique_call 350} $i153 := devirtbounce(0, processors);
    call {:si_unique_call 351} {:cexpr "__ptr___4"} boogie_si_record_i64($i153);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i147);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i154, 8));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, $i153);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p159, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.0, $p165);
    $p167 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i168 := $load.i64($M.0, $p167);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i166, $i168);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $p170 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i124);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i171, $i172);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    $p174 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p174);
    $p176 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i175, $i177);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.26, $p1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} cpumask_set_cpu($i147, $p179);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} cpumask_set_cpu($i147, $p183);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i150 := cpumask_next($i147, $p149);
    call {:si_unique_call 349} {:cexpr "j"} boogie_si_record_i32($i150);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i152 := $ugt.i32($i151, $i150);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i152 == 1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb87:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i147 := $i150;
    goto $bb87_dummy;

  $bb99:
    assume $i178 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb51;

  $bb96:
    assume $i173 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb51;

  $bb93:
    assume $i169 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb90:
    assume $i161 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume $i148 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb76:
    assume $i139 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, 3);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i133 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i127 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 2);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i121 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64:
    assume $i110 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume $i99 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb49:
    assume $i84 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    goto $bb51;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i43, 0;
    goto $bb33;

  $bb33:
    call $i47, $i48, $i50, $i51, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i49, $i82, $i63 := acpi_processor_preregister_performance_loop_$bb33($p0, $i47, $i48, $i50, $i51, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i49, $i82, $i63);
    goto $bb33_last;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb34;

  $bb34:
    call $i50, $i51, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $i49, $i63 := acpi_processor_preregister_performance_loop_$bb34($p0, $i48, $i50, $i51, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i64, $i65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $i49, $i63);
    goto $bb34_last;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    call {:si_unique_call 320} $i50 := devirtbounce(0, processors);
    call {:si_unique_call 321} {:cexpr "__ptr___1"} boogie_si_record_i64($i50);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i49);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i51, 8));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, $i50);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    call {:si_unique_call 324} $i64 := devirtbounce.7(0, $p0);
    call {:si_unique_call 325} {:cexpr "__ptr___2"} boogie_si_record_i64($i64);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i49);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i65, 8));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, $i64);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} cpumask_set_cpu($i49, $p74);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i75 := acpi_processor_get_psd($p56);
    call {:si_unique_call 328} {:cexpr "tmp___1"} boogie_si_record_i32($i75);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i77 := $i49;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i60 := cpumask_next($i49, $p59);
    call {:si_unique_call 323} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, $i60);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i63 := $i48;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i83 := $i63;
    goto $bb47;

  $bb39:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i60;
    goto $bb39_dummy;

  $bb42:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i79 := cpumask_next($i77, $p78);
    call {:si_unique_call 330} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, $i79);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 22);
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i46 := $i82;
    goto $bb32;

  $bb44:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i47, $i48 := $i79, $sub.i32(0, 22);
    goto $bb44_dummy;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb11;

  $bb11:
    call $i14, $i15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i13 := acpi_processor_preregister_performance_loop_$bb11($p0, $i14, $i15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i13);
    goto $bb11_last;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 310} $i14 := devirtbounce(0, processors);
    call {:si_unique_call 311} {:cexpr "__ptr"} boogie_si_record_i64($i14);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i13);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i15, 8));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i14);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    call {:si_unique_call 316} $i34 := devirtbounce.7(0, $p0);
    call {:si_unique_call 317} {:cexpr "__ptr___0"} boogie_si_record_i64($i34);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i13);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i35, 8));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i34);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i24 := cpumask_next($i13, $p23);
    call {:si_unique_call 313} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i24);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i24;
    goto $bb16_dummy;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb21;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb21;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 16);
    goto $bb21;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb133_dummy:
    assume false;
    return;

  $bb125_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1785;

  $bb111_dummy:
    assume false;
    return;

  $bb106_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  $bb87_dummy:
    assume false;
    return;

  $bb82_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  $bb61_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  $bb44_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;
}



const zalloc_cpumask_var: ref;

axiom zalloc_cpumask_var == $sub.ref(0, 268490);

procedure zalloc_cpumask_var($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation zalloc_cpumask_var($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} {:cexpr "zalloc_cpumask_var:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 369} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 269522);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    return;
}



const cpumask_set_cpu: ref;

axiom cpumask_set_cpu == $sub.ref(0, 270554);

procedure cpumask_set_cpu($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation cpumask_set_cpu($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "cpumask_set_cpu:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i2 := cpumask_check($i0);
    call {:si_unique_call 373} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} set_bit($i3, $p5);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_get_psd: ref;

axiom acpi_processor_get_psd == $sub.ref(0, 271586);

procedure acpi_processor_get_psd($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation acpi_processor_get_psd($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i24: i32;
  var $p60: ref;
  var $p61: ref;
  var $i14: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p4, $sub.i64(0, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, $0.ref);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p6, 6);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.55);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p8, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, $0.ref);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i12 := acpi_evaluate_object($p11, .str.131, $0.ref, $p1);
    call {:si_unique_call 379} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.10, $p15);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p17);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 4);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p17);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p33, 40);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p35, $p32);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p17);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i39 := acpi_extract_package($p38, $p2, $p3);
    call {:si_unique_call 384} {:cexpr "status"} boogie_si_record_i32($i39);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p42 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 5);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p46 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p50 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 252);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.10, $p60);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} kfree($p61);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb24:
    assume $i52 == 1;
    $p53 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 253);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb26;

  $bb27:
    assume $i55 == 1;
    $p56 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 254);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb26;

  $bb29:
    assume $i58 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_82 := printk.ref(.str.135);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_81 := printk.ref(.str.134);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_80 := printk.ref(.str.133);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_79 := printk.ref(.str.132);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_78 := printk.ref(.str.132);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_77 := printk.ref(.str.132);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 14);
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const cpumask_copy: ref;

axiom cpumask_copy == $sub.ref(0, 272618);

procedure cpumask_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation cpumask_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} bitmap_copy($p3, $p5, $i6);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    return;
}



const cpumask_clear: ref;

axiom cpumask_clear == $sub.ref(0, 273650);

procedure cpumask_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation cpumask_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} bitmap_zero($p2, $i3);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 274682);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    return;
}



const free_cpumask_var: ref;

axiom free_cpumask_var == $sub.ref(0, 275714);

procedure free_cpumask_var($p0: ref);
  free requires assertsPassed;



implementation free_cpumask_var($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_zero: ref;

axiom bitmap_zero == $sub.ref(0, 276746);

procedure bitmap_zero($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.27;



implementation bitmap_zero($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "bitmap_zero:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 63);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($i3, 64);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 8);
    call {:si_unique_call 392} {:cexpr "len"} boogie_si_record_i32($i6);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.27;
    call {:si_unique_call 393} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p7, 0, $i8, $zext.i32.i64(1), 0 == 1);
    $M.27 := cmdloc_dummy_var_25;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 277778);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const bitmap_copy: ref;

axiom bitmap_copy == $sub.ref(0, 278810);

procedure bitmap_copy($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.28;



implementation bitmap_copy($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "bitmap_copy:arg:nbits"} boogie_si_record_i32($i2);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 63);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i64($i4, 64);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 8);
    call {:si_unique_call 395} {:cexpr "len"} boogie_si_record_i32($i7);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    call {:si_unique_call 396} {:cexpr "__len"} boogie_si_record_i64($i8);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.28;
    cmdloc_dummy_var_27 := $M.28;
    call {:si_unique_call 397} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p9, $p10, $i8, $zext.i32.i64(1), 0 == 1);
    $M.28 := cmdloc_dummy_var_28;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 279842);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 399} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_register_performance: ref;

axiom acpi_processor_register_performance == $sub.ref(0, 280874);

procedure acpi_processor_register_performance($p0: ref, $i1: i32) returns ($r: i32);



const acpi_processor_unregister_performance: ref;

axiom acpi_processor_unregister_performance == $sub.ref(0, 281906);

procedure acpi_processor_unregister_performance($p0: ref, $i1: i32);



const acpi_cpu_soft_notify: ref;

axiom acpi_cpu_soft_notify == $sub.ref(0, 282938);

procedure acpi_cpu_soft_notify($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.50, $M.39, $M.44, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.27, $M.52, $M.53, assertsPassed;



implementation acpi_cpu_soft_notify($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i16;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i53: i1;
  var $i15: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 401} {:cexpr "acpi_cpu_soft_notify:arg:action"} boogie_si_record_i64($i1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 402} {:cexpr "cpu"} boogie_si_record_i32($i5);
    call {:si_unique_call 403} $i6 := devirtbounce(0, processors);
    call {:si_unique_call 404} {:cexpr "__ptr"} boogie_si_record_i64($i6);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i7, 8));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i6);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i1, 10);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i1, 8);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p12);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i20 := acpi_bus_get_device($p19, $p3);
    call {:si_unique_call 406} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i1, 2);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i1, 7);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} acpi_processor_reevaluate_tstate($p12, $i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p12);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(33, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_84 := acpi_processor_ppc_has_changed($p12, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_85 := acpi_processor_hotplug($p12);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} acpi_processor_reevaluate_tstate($p12, $i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_86 := acpi_processor_tstate_has_changed($p12);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_83 := printk.ref.i32(.str.36, $i29);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i34 := $and.i16($i33, $sub.i16(0, 513));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i34);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.29, $p3);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i36 := __acpi_processor_start($p35);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 409} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 410} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i38);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 412} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i38, 0);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_87 := ldv__builtin_expect($i48, 0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} warn_slowpath_fmt.ref.i32.ref.i32(.str.28, 179, .str.37, $i45);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;
}



const acpi_bus_get_device: ref;

axiom acpi_bus_get_device == $sub.ref(0, 283970);

procedure acpi_bus_get_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_bus_get_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 420} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 421} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __acpi_processor_start: ref;

axiom __acpi_processor_start == $sub.ref(0, 285002);

procedure __acpi_processor_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.39, $M.44, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.50, $M.27, $M.52, $M.53, assertsPassed;



implementation __acpi_processor_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i16;
  var $i23: i16;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $i79: i32;
  var $p103: ref;
  var $p104: ref;
  var $i46: i32;
  var $i6: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p2 := acpi_driver_data($p0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(33, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_88 := acpi_processor_ppc_has_changed($p3, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_89 := acpi_processor_get_throttling_info($p3);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(32, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p24 := cpuidle_get_driver();
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p28 := cpuidle_get_driver();
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, $p2i.ref.i64(acpi_idle_driver));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p33 := thermal_cooling_device_register(.str.25, $p32, processor_cooling_ops);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i38 := IS_ERR($p37);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 431} {:cexpr "tmp___3"} boogie_si_record_i8($i39);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p47, .str.26);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p48, .str.27);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p49, .str.28);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p50, .str.29);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.34, $p52);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 229);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.34 := $store.i24($M.34, $p52, $i55);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p56, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.35, $p57);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 438} {:cexpr "tmp___4"} boogie_si_record_i64($i61);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 1680)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i75 := sysfs_create_link($p70, $p74, .str.30);
    call {:si_unique_call 441} {:cexpr "result"} boogie_si_record_i32($i75);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 1680)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i86 := sysfs_create_link($p83, $p85, .str.32);
    call {:si_unique_call 445} {:cexpr "result"} boogie_si_record_i32($i86);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(8, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i95 := acpi_install_notify_handler($p93, 2, acpi_processor_notify, $p94);
    call {:si_unique_call 449} {:cexpr "status"} boogie_si_record_i32($i95);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 1680)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} sysfs_remove_link($p100, .str.32);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} sysfs_remove_link($p102, .str.30);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i79 := $i86;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} thermal_cooling_device_unregister($p104);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i46 := $i79;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_92 := acpi_processor_power_exit($p3);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i6 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb32:
    assume $i96 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb28:
    assume $i87 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1680)), $mul.ref(24, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_95 := dev_err.ref.ref($p90, .str.33);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(504, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_94 := dev_err.ref.ref($p77, .str.31);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i79 := $i75;
    goto $bb26;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2128)), $mul.ref(504, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1680)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p63, .str.29, $i67);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i44 := PTR_ERR($p43);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 435} {:cexpr "result"} boogie_si_record_i32($i45);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb19;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_91 := acpi_processor_power_init($p3);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_90 := acpi_processor_power_init($p3);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i22 := $and.i16($i21, $sub.i16(0, 9));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i23 := $or.i16($i22, 8);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i23);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 286034);

procedure warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_ppc_has_changed: ref;

axiom acpi_processor_ppc_has_changed == $sub.ref(0, 287066);

procedure acpi_processor_ppc_has_changed($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.0, $CurrAddr;



implementation acpi_processor_ppc_has_changed($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "acpi_processor_ppc_has_changed:arg:event_flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i2 := $M.8;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i8 := acpi_processor_get_platform_limit___0($p0);
    call {:si_unique_call 455} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i15 == 1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i18 := cpufreq_update_policy($i17);
    call {:si_unique_call 459} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb6;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} acpi_processor_ppc_ost($p14, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} acpi_processor_ppc_ost($p12, 1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} acpi_processor_ppc_ost($p6, 1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acpi_processor_hotplug: ref;

axiom acpi_processor_hotplug == $sub.ref(0, 288098);

procedure acpi_processor_hotplug($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.50, $M.9, $M.10, $CurrAddr;



implementation acpi_processor_hotplug($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $i3: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i1 := disabled_by_idle_boot_param();
    call {:si_unique_call 461} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.36;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(32, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 462} $i11 := devirtbounce.9(0, acpi_cpuidle_device);
    call {:si_unique_call 463} {:cexpr "__ptr"} boogie_si_record_i64($i11);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i14, 8));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $i11);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} cpuidle_pause_and_lock();
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} cpuidle_disable_device($p19);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_96 := acpi_processor_get_power_info($p0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(32, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} cpuidle_resume_and_unlock();
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i3 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_97 := acpi_processor_setup_cpuidle_cx($p0, $p19);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i27 := cpuidle_enable_device($p19);
    call {:si_unique_call 469} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb13;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const acpi_processor_reevaluate_tstate: ref;

axiom acpi_processor_reevaluate_tstate == $sub.ref(0, 289130);

procedure acpi_processor_reevaluate_tstate($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.28, $M.49, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.44, $M.39, $CurrAddr, $M.50, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.27, $M.52, $M.53, assertsPassed;



implementation acpi_processor_reevaluate_tstate($p0: ref, $i1: i64)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i16;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i22: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "acpi_processor_reevaluate_tstate:arg:action"} boogie_si_record_i64($i1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 7);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i18 := $and.i16($i17, $sub.i16(0, 5));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i19 := $or.i16($i18, 4);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i19);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i20 := acpi_processor_get_throttling($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 473} {:cexpr "result"} boogie_si_record_i32($i20);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i20;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i22 := $i29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i22, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i34 := $and.i16($i33, $sub.i16(0, 5));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i34);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i27 := acpi_processor_set_throttling($p0, 0, 0);
    call {:si_unique_call 475} {:cexpr "result"} boogie_si_record_i32($i27);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb17;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i22 := $i27;
    goto $bb10;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb10;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 5));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i14);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i6 := $and.i16($i5, $sub.i16(0, 5));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i6);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_tstate_has_changed: ref;

axiom acpi_processor_tstate_has_changed == $sub.ref(0, 290162);

procedure acpi_processor_tstate_has_changed($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.16, $M.0, $CurrAddr, $M.50;



implementation acpi_processor_tstate_has_changed($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i34: i1;
  var $i33: i32;
  var $i35: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i1 := $M.37;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i4 := acpi_processor_get_platform_limit($p0);
    call {:si_unique_call 477} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 478} {:cexpr "throttling_limit"} boogie_si_record_i32($i7);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i11 := $uge.i32($i7, $i10);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 479} {:cexpr "current_state"} boogie_si_record_i32($i14);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, $i7);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i14, $i7);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i33 := $i7;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i35 := acpi_processor_set_throttling($p0, $i33, 0);
    call {:si_unique_call 483} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i3 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i7);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i24);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i24;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb19;

  $bb16:
    assume $i28 == 1;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 481} {:cexpr "target_state"} boogie_si_record_i32($i31);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb18;

  $bb13:
    assume $i20 == 1;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(696, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 480} {:cexpr "target_state"} boogie_si_record_i32($i23);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb15;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const acpi_processor_get_platform_limit: ref;

axiom acpi_processor_get_platform_limit == $sub.ref(0, 291194);

procedure acpi_processor_get_platform_limit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr;



implementation acpi_processor_get_platform_limit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p1, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $M.37;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i9 := acpi_evaluate_integer($p8, .str.38, $0.ref, $p1);
    call {:si_unique_call 486} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.16, $p1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 5);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} acpi_exception.ref.i32.i32.ref(_acpi_module_name___0, 338, $i9, .str.39);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const acpi_processor_get_throttling: ref;

axiom acpi_processor_get_throttling == $sub.ref(0, 292226);

procedure acpi_processor_get_throttling($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.49, $M.1, $M.2, $M.3, $M.4, $M.5, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.44, $M.39, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.50, $M.27, $M.52, $M.53, assertsPassed;



implementation acpi_processor_get_throttling($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i4: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i11 := alloc_cpumask_var($p10, 208);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 490} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p16 := get_current();
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.38, $p1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 10656)), $mul.ref(784, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} cpumask_copy($p17, $p18);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p21 := get_cpu_mask($i20);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p22 := get_current();
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i23 := set_cpus_allowed_ptr($p22, $p21);
    call {:si_unique_call 496} {:cexpr "tmp___4"} boogie_si_record_i32($i23);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(104, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 498} $i30 := devirtbounce.10($p29, $p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 499} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p31 := get_current();
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.38, $p1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_98 := set_cpus_allowed_ptr($p31, $p32);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.38, $p1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} free_cpumask_var($p34);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i4 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.38, $p1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} free_cpumask_var($p25);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const alloc_cpumask_var: ref;

axiom alloc_cpumask_var == $sub.ref(0, 293258);

procedure alloc_cpumask_var($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation alloc_cpumask_var($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} {:cexpr "alloc_cpumask_var:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 504} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 505} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 294290);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p0 := devirtbounce.11(0, current_task);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const get_cpu_mask: ref;

axiom get_cpu_mask == $sub.ref(0, 295322);

procedure get_cpu_mask($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cpu_mask($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} {:cexpr "get_cpu_mask:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 63);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i0, 64);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    $i8 := $add.i64($i3, $i7);
    $p9 := $add.ref($add.ref($add.ref(cpu_bit_bitmap, $mul.ref(0, 66560)), $mul.ref(0, 1024)), $mul.ref($i8, 8));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const set_cpus_allowed_ptr: ref;

axiom set_cpus_allowed_ptr == $sub.ref(0, 296354);

procedure set_cpus_allowed_ptr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation set_cpus_allowed_ptr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 508} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const disabled_by_idle_boot_param: ref;

axiom disabled_by_idle_boot_param == $sub.ref(0, 297386);

procedure disabled_by_idle_boot_param() returns ($r: i32);
  free requires assertsPassed;



implementation disabled_by_idle_boot_param() returns ($r: i32)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i64;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i0 := $load.i64($M.0, boot_option_idle_override);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i1 := $eq.i64($i0, 3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, boot_option_idle_override);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const cpuidle_pause_and_lock: ref;

axiom cpuidle_pause_and_lock == $sub.ref(0, 298418);

procedure cpuidle_pause_and_lock();
  free requires assertsPassed;



implementation cpuidle_pause_and_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    return;
}



const cpuidle_disable_device: ref;

axiom cpuidle_disable_device == $sub.ref(0, 299450);

procedure cpuidle_disable_device($p0: ref);
  free requires assertsPassed;



implementation cpuidle_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_get_power_info: ref;

axiom acpi_processor_get_power_info == $sub.ref(0, 300482);

procedure acpi_processor_get_power_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $CurrAddr, $M.50;



implementation acpi_processor_get_power_info($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i11: i32;
  var $p13: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i16;
  var $i34: i16;
  var $i9: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i16;
  var $i55: i16;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i16;
  var $i76: i16;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i16;
  var $i97: i16;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i16;
  var $i117: i16;
  var $i118: i16;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $p127: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i16;
  var $i138: i16;
  var $i139: i16;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p148: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i16;
  var $i159: i16;
  var $i160: i16;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 510} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p3, 0, 416, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i4 := acpi_processor_get_power_info_cst($p0);
    call {:si_unique_call 512} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 19));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_99 := acpi_processor_get_power_info_default($p0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i11 := acpi_processor_power_verify($p0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(0, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(0, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(4, 52)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(5, 52)), $mul.ref(0, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(6, 52)), $mul.ref(0, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(7, 52)), $mul.ref(0, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb53:
    assume $i146 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 7);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(7, 52)), $mul.ref(1, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i155 := $ugt.i32($i154, 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56:
    assume $i155 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i158 := $load.i16($M.0, $p157);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i159 := $and.i16($i158, $sub.i16(0, 2));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i160 := $or.i16($i159, 1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, $i160);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i125 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 6);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(6, 52)), $mul.ref(1, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i134 := $ugt.i32($i133, 1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49:
    assume $i134 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.0, $p136);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i138 := $and.i16($i137, $sub.i16(0, 2));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i139 := $or.i16($i138, 1);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, $i139);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb39:
    assume $i104 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 5);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(5, 52)), $mul.ref(1, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i113 := $ugt.i32($i112, 1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42:
    assume $i113 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i117 := $and.i16($i116, $sub.i16(0, 2));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i118 := $or.i16($i117, 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i118);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 4);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(4, 52)), $mul.ref(1, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i32($i91, 1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i96 := $and.i16($i95, $sub.i16(0, 2));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i97 := $or.i16($i96, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, $i97);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 3);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(1, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i32($i70, 1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i75 := $and.i16($i74, $sub.i16(0, 2));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i76 := $or.i16($i75, 1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i76);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 2);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(1, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i54 := $and.i16($i53, $sub.i16(0, 2));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i55 := $or.i16($i54, 1);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i55);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(20, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(1, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i28, 1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i33 := $and.i16($i32, $sub.i16(0, 2));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i34 := $or.i16($i33, 1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i34);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i6 := acpi_processor_get_power_info_fadt($p0);
    call {:si_unique_call 514} {:cexpr "result"} boogie_si_record_i32($i6);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const acpi_processor_setup_cpuidle_cx: ref;

axiom acpi_processor_setup_cpuidle_cx == $sub.ref(0, 301514);

procedure acpi_processor_setup_cpuidle_cx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.50, $CurrAddr;



implementation acpi_processor_setup_cpuidle_cx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i28: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i41: i32;
  var $i38: i32;
  var $i44: i1;
  var $i7: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $p150: ref;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $i167: i64;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $p173: ref;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(32, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i18 := $M.39;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $M.39;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i43 := $ule.i32(1, $i42);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i41 := 1;
    assume {:branchcond $i43} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i38, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(1, 52));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(1, 52)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call {:si_unique_call 518} $i29 := devirtbounce.12(0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(1, 8)));
    call {:si_unique_call 519} {:cexpr "__ptr"} boogie_si_record_i64($i29);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i32, 8));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, $i29);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p23);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i37 := 2;
    assume {:branchcond 0} true;
    goto $bb20, $bb22;

  $bb22:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i28 := 2;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i39 := $M.39;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32(2, $i39);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i41 := $i28;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb27;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(2, 52));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref(2, 52)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i28);
    $p54 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i53, 8));
    call {:si_unique_call 520} $i55 := devirtbounce.12(0, $p54);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i58, 8));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, $i55);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p48);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i28, 1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i37 := $i63;
    assume {:branchcond 0} true;
    goto $bb38, $bb39;

  $bb39:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i65 := $M.39;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i66 := $ule.i32(3, $i65);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i41 := $i64;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb27;

  $bb42:
    assume $i66 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(3, 52));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(3, 52)), $mul.ref(0, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i64);
    $p76 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i75, 8));
    call {:si_unique_call 521} $i77 := devirtbounce.12(0, $p76);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i80, 8));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, $i77);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p70);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i64, 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 10);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i37 := $i85;
    assume {:branchcond $i86} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i87 := $i85;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i88 := $M.39;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i89 := $ule.i32(4, $i88);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i41 := $i87;
    assume {:branchcond $i89} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb27;

  $bb52:
    assume $i89 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(4, 52));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p92, $mul.ref(4, 52)), $mul.ref(0, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i87);
    $p99 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i98, 8));
    call {:si_unique_call 522} $i100 := devirtbounce.12(0, $p99);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i103, 8));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, $i100);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $p93);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i87, 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 10);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i37 := $i108;
    assume {:branchcond $i109} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i111 := $M.39;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i112 := $ule.i32(5, $i111);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i41 := $i110;
    assume {:branchcond $i112} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb27;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(5, 52));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p115, $mul.ref(5, 52)), $mul.ref(0, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i110);
    $p122 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i121, 8));
    call {:si_unique_call 523} $i123 := devirtbounce.12(0, $p122);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i126 := $zext.i32.i64($i125);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i126, 8));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, $i123);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $p116);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i110, 1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 10);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i37 := $i131;
    assume {:branchcond $i132} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i133 := $i131;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i134 := $M.39;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i135 := $ule.i32(6, $i134);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i41 := $i133;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb27;

  $bb72:
    assume $i135 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(6, 52));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p138, $mul.ref(6, 52)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i133);
    $p145 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i144, 8));
    call {:si_unique_call 524} $i146 := devirtbounce.12(0, $p145);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i149, 8));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p150);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, $i146);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $p139);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i133, 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 10);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i37 := $i154;
    assume {:branchcond $i155} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i156 := $i154;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i157 := $M.39;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i158 := $ule.i32(7, $i157);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i41 := $i156;
    assume {:branchcond $i158} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb27;

  $bb82:
    assume $i158 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p161, $mul.ref(7, 52));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p161, $mul.ref(7, 52)), $mul.ref(0, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i156);
    $p168 := $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref($i167, 8));
    call {:si_unique_call 525} $i169 := devirtbounce.12(0, $p168);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i172 := $zext.i32.i64($i171);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i172, 8));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, $p173);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, $i169);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p176 := $i2p.i64.ref($i175);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, $p162);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i156, 1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 10);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i37 := $i177;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i179 := $i177;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i41 := $i179;
    goto $bb27;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb23;

  $bb85:
    assume $i166 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i179 := $i156;
    goto $bb91;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb21;

  $bb75:
    assume $i143 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i156 := $i133;
    goto $bb81;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb21;

  $bb65:
    assume $i120 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i133 := $i110;
    goto $bb71;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb21;

  $bb55:
    assume $i97 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i110 := $i87;
    goto $bb61;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb21;

  $bb45:
    assume $i74 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i87 := $i64;
    goto $bb51;

  $bb38:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb21;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i64 := $i28;
    goto $bb41;

  $bb20:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb21;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb18;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 517} {:cexpr "max_cstate"} boogie_si_record_i32(1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const cpuidle_enable_device: ref;

axiom cpuidle_enable_device == $sub.ref(0, 302546);

procedure cpuidle_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpuidle_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpuidle_resume_and_unlock: ref;

axiom cpuidle_resume_and_unlock == $sub.ref(0, 303578);

procedure cpuidle_resume_and_unlock();
  free requires assertsPassed;



implementation cpuidle_resume_and_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_get_power_info_cst: ref;

axiom acpi_processor_get_power_info_cst == $sub.ref(0, 304610);

procedure acpi_processor_get_power_info_cst($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.0, $CurrAddr;



implementation acpi_processor_get_power_info_cst($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i16;
  var $i50: i16;
  var $i51: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i8;
  var $p99: ref;
  var $i100: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i64;
  var $i109: i32;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i32;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i1;
  var $i188: i32;
  var $i64: i32;
  var $i65: i32;
  var $i192: i32;
  var $i193: i64;
  var $i194: i1;
  var $i53: i32;
  var $i54: i32;
  var $i195: i32;
  var $i52: i32;
  var $i191: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i202: i1;
  var $i203: i32;
  var $i31: i32;
  var $p204: ref;
  var $p205: ref;
  var $i7: i32;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p2 := $alloc($mul.ref(52, $zext.i32.i64(1)));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p3, $sub.i64(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, $0.ref);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i5 := $M.36;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i10 := acpi_evaluate_object($p9, .str.81, $0.ref, $p1);
    call {:si_unique_call 531} {:cexpr "status"} boogie_si_record_i32($i10);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.10, $p18);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p20);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 4);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p20);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i29 := $ule.i32($i28, 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p20);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.11, $p36);
    call {:si_unique_call 535} {:cexpr "count"} boogie_si_record_i64($i37);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i38 == 1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p20);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i37);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i49 := $and.i16($i48, $sub.i16(0, 65));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i50 := $or.i16($i49, 64);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i50);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i51 := $ule.i64(1, $i37);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i52 := 0;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i191 := $i52;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 4);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i202 := $sle.i32($i191, 1);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $i10;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i31 := $i203;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.10, $p204);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} kfree($p205);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i7 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb99:
    assume $i202 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32(0, 14);
    goto $bb101;

  $bb93:
    assume $i198 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i199, 536870912);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb95;

  $bb96:
    assume $i201 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 520, .str.82, _acpi_module_name___1, 536870912, .str.90, $i191);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i53, $i54 := 0, 1;
    goto $bb32;

  $bb32:
    call $p55, $p56, $p57, $p58, $i59, $p60, $p61, $i62, $i63, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $p95, $p96, $i97, $i98, $p99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $p132, $p134, $i135, $i136, $i137, $i138, $i139, $p140, $p141, $p142, $p144, $p145, $p146, $i147, $p149, $i150, $i151, $i152, $p153, $p154, $p155, $p156, $p157, $p158, $i159, $i160, $p161, $p162, $i163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $i172, $i173, $i174, $p176, $p177, $i178, $p179, $p180, $p182, $p183, $i184, $p185, $p186, $i187, $i188, $i64, $i65, $i192, $i193, $i194, $i53, $i54, $i195, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104 := acpi_processor_get_power_info_cst_loop_$bb32($p0, $p2, $p20, $i37, $p55, $p56, $p57, $p58, $i59, $p60, $p61, $i62, $i63, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $p95, $p96, $i97, $i98, $p99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $p132, $p134, $i135, $i136, $i137, $i138, $i139, $p140, $p141, $p142, $p144, $p145, $p146, $i147, $p149, $i150, $i151, $i152, $p153, $p154, $p155, $p156, $p157, $p158, $i159, $i160, $p161, $p162, $i163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $i172, $i173, $i174, $p176, $p177, $i178, $p179, $p180, $p182, $p183, $i184, $p185, $p186, $i187, $i188, $i64, $i65, $i192, $i193, $i194, $i53, $i54, $i195, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104);
    goto $bb32_last;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 537} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p55, 0, 52, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p20);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i54);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 24));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.11, $p61);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 4);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p60);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.11, $p67);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 4);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p60);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.11, $p71);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.40, $p73);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 3);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p72);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.40, $p77);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.41, $p80);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p60);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.11, $p89);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(1, 24));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.40, $p92);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 1);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p91);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.40, $p96);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i8($i97);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i54, 1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i106 := $i53;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p79, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.42, $p107);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i108);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i109);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i106);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(9, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i114);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.41, $p117);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 127);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i120 == 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_102 := snprintf.ref.i64.ref.i32($p145, 32, .str.87, $i147);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p60);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.11, $p155);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(2, 24));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.40, $p158);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 1);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p157);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.40, $p162);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i64.i32($i163);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i164);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p60);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.11, $p167);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(3, 24));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.40, $p170);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i106, 1);
    call {:si_unique_call 545} {:cexpr "current_count"} boogie_si_record_i32($i173);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i174 := $ugt.i64(52, 63);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i174 == 1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i173);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p183, $mul.ref($i184, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p2);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 547} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p185, $p186, 52, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i187 := $sgt.i32($i173, 6);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i188 := $i173;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i173;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i64, 1);
    call {:si_unique_call 538} {:cexpr "i"} boogie_si_record_i32($i192);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i192);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i194 := $ule.i64($i193, $i37);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i195 := $i65;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i52 := $i195;
    goto $bb31;

  $bb90:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $i53, $i54 := $i65, $i192;
    goto $bb90_dummy;

  $bb86:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_105 := printk.ref.i32(.str.88, 8);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_106 := printk.ref(.str.89);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i191 := $i188;
    goto $bb88;

  $bb83:
    assume $i174 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i173);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p177, $mul.ref($i178, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p2);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 546} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p179, $p180, 52, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i172 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i106;
    goto $bb36;

  $bb77:
    assume $i160 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i106;
    goto $bb36;

  $bb74:
    assume $i152 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, 1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb59:
    assume $i120 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i123 := acpi_processor_ffh_cstate_probe($i122, $p2, $p79);
    call {:si_unique_call 541} {:cexpr "tmp"} boogie_si_record_i32($i123);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i124 == 1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i129 == 1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i106;
    goto $bb36;

  $bb64:
    assume $i129 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 2);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_103 := snprintf.ref.i64.ref($p132, 32, .str.86);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb67:
    assume $i137 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.0, boot_option_idle_override);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 2);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb69;

  $bb70:
    assume $i139 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, 2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_104 := snprintf.ref.i64.ref($p142, 32, .str.86);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb61:
    assume $i124 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb53:
    assume $i100 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb55;

  $bb56:
    assume $i104 == 1;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i53, 1);
    call {:si_unique_call 539} {:cexpr "current_count"} boogie_si_record_i32($i105);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i106 := $i105;
    goto $bb58;

  $bb50:
    assume $i94 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i53;
    goto $bb36;

  $bb44:
    assume $i83 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.41, $p84);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 127);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb46;

  $bb47:
    assume $i87 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i53;
    goto $bb36;

  $bb41:
    assume $i75 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i53;
    goto $bb36;

  $bb38:
    assume $i69 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i53;
    goto $bb36;

  $bb34:
    assume $i63 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i54, $i53;
    goto $bb36;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_101 := printk.ref(.str.85);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_100 := printk.ref(.str.84);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 536870912);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 384, .str.82, _acpi_module_name___1, 536870912, .str.83);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb90_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;
}



const acpi_processor_get_power_info_fadt: ref;

axiom acpi_processor_get_power_info_fadt == $sub.ref(0, 305642);

procedure acpi_processor_get_power_info_fadt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_get_power_info_fadt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p8: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i16;
  var $i49: i32;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i16;
  var $i64: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p78: ref;
  var $i79: i32;
  var $p83: ref;
  var $i84: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(20, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(1, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 2);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(1, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 3);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(20, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 4);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(4, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i15);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(20, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 5);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(4, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i22);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(96, 1)));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(12, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i28);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(98, 1)));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(12, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i34);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(96, 1)));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 100);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(98, 1)));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, 1000);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 4);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb23:
    assume $i71 == 1;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 536870912);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb25;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(4, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(4, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 348, .str.91, _acpi_module_name___1, 536870912, .str.94, $i79, $i84);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(3, 52)), $mul.ref(4, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 536870912);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb18;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(98, 1)));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 340, .str.91, _acpi_module_name___1, 536870912, .str.93, $i64);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i41 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 4);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(2, 52)), $mul.ref(4, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 536870912);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb9;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(96, 1)));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 329, .str.91, _acpi_module_name___1, 536870912, .str.92, $i49);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const acpi_processor_get_power_info_default: ref;

axiom acpi_processor_get_power_info_default == $sub.ref(0, 306674);

procedure acpi_processor_get_power_info_default($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_get_power_info_default($p0: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $p15: ref;
  var $p19: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(0, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(1, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(0, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1)), $mul.ref(1, 52)), $mul.ref(8, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_power_verify: ref;

axiom acpi_processor_power_verify == $sub.ref(0, 307706);

procedure acpi_processor_power_verify($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_power_verify($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i26: i32;
  var $i31: i32;
  var $i32: i1;
  var $i3: i32;
  var $i4: i32;
  var $i34: i32;
  var $i35: i1;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(440, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 2147483647);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, 1;
    goto $bb1;

  $bb1:
    call $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i26, $i31, $i32, $i3, $i4, $i34, $i35, $i33 := acpi_processor_power_verify_loop_$bb1($p0, $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i26, $i31, $i32, $i3, $i4, $i34, $i35, $i33);
    goto $bb1_last;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i34 := $M.39;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i35 := $ule.i32($i4, $i34);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i33 := $i3;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} lapic_timer_propagate_broadcast($p0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i4);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 52));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(1, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} lapic_timer_check_state($i4, $p0, $p9);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(1, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} tsc_check_state($i29);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i3, 1);
    call {:si_unique_call 558} {:cexpr "working"} boogie_si_record_i32($i30);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i4, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i31, 7);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i33 := $i26;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb24;

  $bb22:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i3, $i4 := $i26, $i31;
    goto $bb22_dummy;

  $bb18:
    assume $i25 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i26 := $i3;
    goto $bb20;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} acpi_processor_power_verify_c3($p0, $p9);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(4, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref($i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;
}



const acpi_processor_power_verify_c3: ref;

axiom acpi_processor_power_verify_c3 == $sub.ref(0, 308738);

procedure acpi_processor_power_verify_c3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_power_verify_c3($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i16;
  var $i23: i16;
  var $i24: i16;
  var $i25: i16;
  var $i26: i16;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i16;
  var $i32: i16;
  var $i33: i16;
  var $i34: i16;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $add.ref(errata, $mul.ref(4, 1)));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($sub.i32(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i16($i18);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p20);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i23 := $and.i16($i21, 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i24 := $shl.i16($i23, 5);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i25 := $and.i16($i22, $sub.i16(0, 33));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i26 := $or.i16($i25, $i24);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i26);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($sub.i32(0, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i16($i27);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p29);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i32 := $and.i16($i30, 1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i33 := $shl.i16($i32, 4);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i34 := $and.i16($i31, $sub.i16(0, 17));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i35 := $or.i16($i34, $i33);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i35);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(32, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(116, 1)));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 1);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_107 := acpi_write_bit_register(15, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb38:
    assume $i65 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 4);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb40:
    assume $i68 == 1;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 536870912);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb42;

  $bb43:
    assume $i71 == 1;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 587, .str.95, _acpi_module_name___1, 536870912, .str.99);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(32, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(32, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 536870912);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb31;

  $bb32:
    assume $i62 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 576, .str.95, _acpi_module_name___1, 536870912, .str.98);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 4);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 536870912);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb25;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 571, .str.95, _acpi_module_name___1, 536870912, .str.97);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} acpi_processor_power_init_bm_check($p15, $i17);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 536870912);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 551, .str.95, _acpi_module_name___1, 536870912, .str.96);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lapic_timer_check_state: ref;

axiom lapic_timer_check_state == $sub.ref(0, 309770);

procedure lapic_timer_check_state($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation lapic_timer_check_state($i0: i32, $p1: ref, $p2: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i8;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "lapic_timer_check_state:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, local_apic_timer_c2_ok);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 3 else 2);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 567} {:cexpr "type"} boogie_si_record_i8($i7);
    call {:si_unique_call 568} $i8 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 569} {:cexpr "__ptr"} boogie_si_record_i64($i8);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i11, 8));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i8);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(20, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i18 := constant_test_bit(225, $p17);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, amd_e400_c1e_detected);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(440, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i22);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i28, $i29);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(440, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb7;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tsc_check_state: ref;

axiom tsc_check_state == $sub.ref(0, 310802);

procedure tsc_check_state($i0: i32);
  free requires assertsPassed;



implementation tsc_check_state($i0: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "tsc_check_state:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(1, 1)));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i0, 1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} mark_tsc_unstable(.str.100);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i6 := constant_test_bit(120, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(20, 1)));
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb8;
}



const lapic_timer_propagate_broadcast: ref;

axiom lapic_timer_propagate_broadcast == $sub.ref(0, 311834);

procedure lapic_timer_propagate_broadcast($p0: ref);
  free requires assertsPassed;



implementation lapic_timer_propagate_broadcast($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_108 := smp_call_function_single($i2, __lapic_timer_propagate_broadcast, $p3, 1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    return;
}



const __lapic_timer_propagate_broadcast: ref;

axiom __lapic_timer_propagate_broadcast == $sub.ref(0, 312866);

procedure __lapic_timer_propagate_broadcast($p0: ref);



const smp_call_function_single: ref;

axiom smp_call_function_single == $sub.ref(0, 313898);

procedure smp_call_function_single($i0: i32, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation smp_call_function_single($i0: i32, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "smp_call_function_single:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 578} {:cexpr "smp_call_function_single:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const clockevents_notify: ref;

axiom clockevents_notify == $sub.ref(0, 314930);

procedure clockevents_notify($i0: i64, $p1: ref) returns ($r: i32);



const mark_tsc_unstable: ref;

axiom mark_tsc_unstable == $sub.ref(0, 315962);

procedure mark_tsc_unstable($p0: ref);
  free requires assertsPassed;



implementation mark_tsc_unstable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_power_init_bm_check: ref;

axiom acpi_processor_power_init_bm_check == $sub.ref(0, 316994);

procedure acpi_processor_power_init_bm_check($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation acpi_processor_power_init_bm_check($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "acpi_processor_power_init_bm_check:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    return;
}



const acpi_write_bit_register: ref;

axiom acpi_write_bit_register == $sub.ref(0, 318026);

procedure acpi_write_bit_register($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_write_bit_register($i0: i32, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "acpi_write_bit_register:arg:register_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 583} {:cexpr "acpi_write_bit_register:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $r := 28;
    return;
}



const acpi_processor_ffh_cstate_probe: ref;

axiom acpi_processor_ffh_cstate_probe == $sub.ref(0, 319058);

procedure acpi_processor_ffh_cstate_probe($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_processor_ffh_cstate_probe($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} {:cexpr "acpi_processor_ffh_cstate_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 320090);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);



const acpi_processor_ppc_ost: ref;

axiom acpi_processor_ppc_ost == $sub.ref(0, 321122);

procedure acpi_processor_ppc_ost($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation acpi_processor_ppc_ost($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "acpi_processor_ppc_ost:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i2 := acpi_has_method($p0, .str.109);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 589} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_109 := acpi_evaluate_ost($p0, 128, $i1, $0.ref);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_evaluate_ost: ref;

axiom acpi_evaluate_ost == $sub.ref(0, 322154);

procedure acpi_evaluate_ost($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_evaluate_ost($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} {:cexpr "acpi_evaluate_ost:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 592} {:cexpr "acpi_evaluate_ost:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const acpi_processor_get_throttling_info: ref;

axiom acpi_processor_get_throttling_info == $sub.ref(0, 323186);

procedure acpi_processor_get_throttling_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.44, $M.39, $CurrAddr, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.50, $M.27, $M.52, $M.53, assertsPassed;



implementation acpi_processor_get_throttling_info($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i16;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i71: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $i92: i16;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i18 := acpi_processor_get_throttling_control($p0);
    call {:si_unique_call 597} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i20 := acpi_processor_get_throttling_states($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 599} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i22 := acpi_processor_get_platform_limit($p0);
    call {:si_unique_call 603} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(104, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, acpi_processor_get_throttling_ptc);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(112, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, acpi_processor_set_throttling_ptc);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i37 := acpi_processor_get_tsd($p0);
    call {:si_unique_call 605} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $add.ref(errata, $mul.ref(4, 1)));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 4);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i67 := $and.i16($i66, $sub.i16(0, 5));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i68 := $or.i16($i67, 4);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i68);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i69 := acpi_processor_get_throttling($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 610} {:cexpr "result"} boogie_si_record_i32($i69);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i69;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i71 := $i87;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i71, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i31 := $i71;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb55:
    assume $i88 == 1;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i92 := $and.i16($i91, $sub.i16(0, 5));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i92);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb43:
    assume $i75 == 1;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 4);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i85 := acpi_processor_set_throttling($p0, 0, 0);
    call {:si_unique_call 613} {:cexpr "result"} boogie_si_record_i32($i85);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i87 := $i85;
    goto $bb54;

  $bb51:
    assume $i86 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i71 := $i85;
    goto $bb41;

  $bb45:
    assume $i78 == 1;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 536870912);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb47;

  $bb48:
    assume $i81 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1284, .str.5, _acpi_module_name___0, 536870912, .str.9, $i84);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i70 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i71 := $i69;
    goto $bb41;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i57 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 536870912);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb35;

  $bb36:
    assume $i60 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1267, .str.5, _acpi_module_name___0, 536870912, .str.8, $i63);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 4);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb16;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 536870912);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb28;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 1262, .str.5, _acpi_module_name___0, 536870912, .str.7);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} cpumask_set_cpu($i42, $p44);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 252);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(104, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, acpi_processor_get_throttling_fadt);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(112, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, acpi_processor_set_throttling_fadt);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i29 := acpi_processor_get_fadt_info($p0);
    call {:si_unique_call 601} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb16;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 536870912);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(124, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(125, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32(4, 1221, .str.5, _acpi_module_name___0, 536870912, .str.6, $i9, $i13, $i17);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const cpuidle_get_driver: ref;

axiom cpuidle_get_driver == $sub.ref(0, 324218);

procedure cpuidle_get_driver() returns ($r: ref);
  free requires assertsPassed;



implementation cpuidle_get_driver() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p0 := external_alloc();
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const acpi_processor_power_init: ref;

axiom acpi_processor_power_init == $sub.ref(0, 325250);

procedure acpi_processor_power_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.44, $M.9, $M.10, $M.50, $CurrAddr, assertsPassed;



implementation acpi_processor_power_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i16;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i3: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i1 := disabled_by_idle_boot_param();
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($u0, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(95, 1)));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_112 := acpi_processor_get_power_info($p0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i27 := $and.i16($i26, $sub.i16(0, 129));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i28 := $or.i16($i27, 128);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i28);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(32, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i34 := $M.44;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p41 := kzalloc(368, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call {:si_unique_call 630} $i45 := devirtbounce.9(0, acpi_cpuidle_device);
    call {:si_unique_call 631} {:cexpr "__ptr"} boogie_si_record_i64($i45);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i48, 8));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, $i45);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p41);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_115 := acpi_processor_setup_cpuidle_cx($p0, $p42);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i54 := cpuidle_register_device($p42);
    call {:si_unique_call 634} {:cexpr "retval"} boogie_si_record_i32($i54);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i58 := $M.44;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $M.44 := $i59;
    call {:si_unique_call 636} {:cexpr "acpi_processor_registered"} boogie_si_record_i32($i59);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i56 := $M.44;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i3 := $i54;
    goto $bb3;

  $bb33:
    assume $i57 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} cpuidle_unregister_driver(acpi_idle_driver);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_113 := acpi_processor_setup_cpuidle_states($p0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i37 := cpuidle_register_driver(acpi_idle_driver);
    call {:si_unique_call 627} {:cexpr "retval"} boogie_si_record_i32($i37);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, acpi_idle_driver);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_114 := printk.ref.ref(.str.13, $p39);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i3 := $i37;
    goto $bb3;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i15 := $M.36;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(48, 1)));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(95, 1)));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i21 := acpi_os_write_port($i18, $i20, 8);
    call {:si_unique_call 622} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} acpi_exception.ref.i32.i32.ref(_acpi_module_name___1, 1169, $i21, .str.12);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_110 := dmi_check_system(processor_power_dmi_table);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i6 := $M.39;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i7 := acpi_processor_cstate_check($i6);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.39 := $i7;
    call {:si_unique_call 619} {:cexpr "max_cstate"} boogie_si_record_i32($i7);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i8 := $M.39;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i8, 2);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i10 := $M.39;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_111 := printk.ref.i32(.str.11, $i10);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const thermal_cooling_device_register: ref;

axiom thermal_cooling_device_register == $sub.ref(0, 326282);

procedure thermal_cooling_device_register($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation thermal_cooling_device_register($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p3 := external_alloc();
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 327314);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 639} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 328346);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 329378);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 640} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 330410);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 331442);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 644} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acpi_processor_notify: ref;

axiom acpi_processor_notify == $sub.ref(0, 332474);

procedure acpi_processor_notify($p0: ref, $i1: i32, $p2: ref);



const acpi_install_notify_handler: ref;

axiom acpi_install_notify_handler == $sub.ref(0, 333506);

procedure acpi_install_notify_handler($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_install_notify_handler($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 646} {:cexpr "acpi_install_notify_handler:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sysfs_remove_link: ref;

axiom sysfs_remove_link == $sub.ref(0, 334538);

procedure sysfs_remove_link($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_link($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    return;
}



const thermal_cooling_device_unregister: ref;

axiom thermal_cooling_device_unregister == $sub.ref(0, 335570);

procedure thermal_cooling_device_unregister($p0: ref);
  free requires assertsPassed;



implementation thermal_cooling_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_power_exit: ref;

axiom acpi_processor_power_exit == $sub.ref(0, 336602);

procedure acpi_processor_power_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.0, $M.50, $CurrAddr;



implementation acpi_processor_power_exit($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i1 := devirtbounce.9(0, acpi_cpuidle_device);
    call {:si_unique_call 650} {:cexpr "__ptr"} boogie_si_record_i64($i1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i4, 8));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i10 := disabled_by_idle_boot_param();
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(32, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(32, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i24 := $and.i16($i23, $sub.i16(0, 129));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i24);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} cpuidle_unregister_device($p9);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i17 := $M.44;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.44 := $i18;
    call {:si_unique_call 654} {:cexpr "acpi_processor_registered"} boogie_si_record_i32($i18);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i19 := $M.44;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} cpuidle_unregister_driver(acpi_idle_driver);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpuidle_unregister_device: ref;

axiom cpuidle_unregister_device == $sub.ref(0, 337634);

procedure cpuidle_unregister_device($p0: ref);
  free requires assertsPassed;



implementation cpuidle_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    return;
}



const cpuidle_unregister_driver: ref;

axiom cpuidle_unregister_driver == $sub.ref(0, 338666);

procedure cpuidle_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation cpuidle_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 339698);

procedure dev_name($p0: ref) returns ($r: ref);



const acpi_bus_generate_netlink_event: ref;

axiom acpi_bus_generate_netlink_event == $sub.ref(0, 340730);

procedure acpi_bus_generate_netlink_event($p0: ref, $p1: ref, $i2: i8, $i3: i32) returns ($r: i32);



const acpi_processor_cst_has_changed: ref;

axiom acpi_processor_cst_has_changed == $sub.ref(0, 341762);

procedure acpi_processor_cst_has_changed($p0: ref) returns ($r: i32);



const get_online_cpus: ref;

axiom get_online_cpus == $sub.ref(0, 342794);

procedure get_online_cpus();



const acpi_processor_setup_cpuidle_states: ref;

axiom acpi_processor_setup_cpuidle_states == $sub.ref(0, 343826);

procedure acpi_processor_setup_cpuidle_states($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39;



implementation acpi_processor_setup_cpuidle_states($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i23: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i1;
  var $i61: i32;
  var $i58: i32;
  var $p64: ref;
  var $i65: i1;
  var $i6: i32;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i1;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i1;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $i205: i64;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $i216: i32;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i1;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i1;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i32;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $p264: ref;
  var $p265: ref;
  var $p267: ref;
  var $i268: i8;
  var $i269: i32;
  var $i270: i1;
  var $i271: i64;
  var $p273: ref;
  var $p274: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i8;
  var $i292: i32;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $i313: i1;
  var $p314: ref;
  var $i315: i8;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $i324: i32;
  var $i325: i1;
  var $i326: i32;
  var $i327: i32;
  var $i328: i1;
  var $p330: ref;
  var $p331: ref;
  var $p333: ref;
  var $i334: i8;
  var $i335: i32;
  var $i336: i1;
  var $i337: i64;
  var $p339: ref;
  var $p340: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p347: ref;
  var $i348: i32;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i32;
  var $i353: i32;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i1;
  var $i360: i1;
  var $i361: i1;
  var $p362: ref;
  var $i363: i32;
  var $i364: i32;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $i368: i8;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i1;
  var $p380: ref;
  var $i381: i8;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $i385: i32;
  var $i386: i32;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i390: i32;
  var $i391: i1;
  var $i392: i32;
  var $i393: i32;
  var $i394: i1;
  var $p396: ref;
  var $p397: ref;
  var $p399: ref;
  var $i400: i8;
  var $i401: i32;
  var $i402: i1;
  var $i403: i64;
  var $p405: ref;
  var $p406: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p413: ref;
  var $i414: i32;
  var $p415: ref;
  var $p416: ref;
  var $i417: i32;
  var $i418: i32;
  var $i419: i32;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $i423: i8;
  var $i424: i32;
  var $i425: i1;
  var $i426: i1;
  var $i427: i1;
  var $p428: ref;
  var $i429: i32;
  var $i430: i32;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i434: i8;
  var $i435: i32;
  var $i436: i1;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i32;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i1;
  var $p446: ref;
  var $i447: i8;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i451: i32;
  var $i452: i32;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i32;
  var $i457: i1;
  var $i458: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: ref;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: ref;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(32, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(32, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $sub.i32(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $M.39;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i62 := $M.39;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i63 := $ule.i32(1, $i62);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i61 := 1;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i58 := $i61;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(904, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i58);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i58, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb47:
    assume $i65 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb44:
    assume $i63 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(0, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_116 := snprintf.ref.i64.ref.i32($add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 16, .str.101, 1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(17, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_117 := strncpy($add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $p26, 32);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(12, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(52, 1)), $i29);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(12, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i32 := $M.45;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i31, $i32);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(60, 1)), $i33);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)), 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(1, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i57 := 2;
    assume {:branchcond 0} true;
    goto $bb36, $bb38;

  $bb38:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i23 := 2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i59 := $M.39;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i60 := $ule.i32(2, $i59);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i61 := $i23;
    assume {:branchcond $i60} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb43;

  $bb41:
    assume $i60 == 1;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i23);
    $p76 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(0, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_118 := snprintf.ref.i64.ref.i32($p77, 16, .str.101, 2);
    $p79 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(16, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(17, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_119 := strncpy($p80, $p82, 32);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(12, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(52, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(12, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i89 := $M.45;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i90 := $mul.i32($i88, $i89);
    $p91 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(60, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    $p92 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(1, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i95, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i95, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i23, 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i57 := $i127;
    assume {:branchcond 0} true;
    goto $bb69, $bb70;

  $bb70:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i128 := $i127;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i129 := $M.39;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i130 := $ule.i32(3, $i129);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i61 := $i128;
    assume {:branchcond $i130} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb43;

  $bb73:
    assume $i130 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(0, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i128);
    $p141 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(0, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_120 := snprintf.ref.i64.ref.i32($p142, 16, .str.101, 3);
    $p144 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(16, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(17, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_121 := strncpy($p145, $p147, 32);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(12, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    $p151 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(52, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i150);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(12, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i154 := $M.45;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i155 := $mul.i32($i153, $i154);
    $p156 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(60, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    $p157 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(1, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i160, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i160, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i160, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i128, 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 10);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i57 := $i192;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i194 := $i192;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i195 := $M.39;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i196 := $ule.i32(4, $i195);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i61 := $i194;
    assume {:branchcond $i196} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb43;

  $bb98:
    assume $i196 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(0, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i205 := $sext.i32.i64($i194);
    $p207 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(0, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_122 := snprintf.ref.i64.ref.i32($p208, 16, .str.101, 4);
    $p210 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(16, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(17, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_123 := strncpy($p211, $p213, 32);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(12, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    $p217 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(52, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i216);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(12, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i220 := $M.45;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i221 := $mul.i32($i219, $i220);
    $p222 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(60, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, $i221);
    $p223 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(1, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.0, $p224);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i226, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i226, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i226, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i194, 1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 10);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i57 := $i258;
    assume {:branchcond $i259} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i260 := $i258;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i261 := $M.39;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i262 := $ule.i32(5, $i261);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i61 := $i260;
    assume {:branchcond $i262} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb43;

  $bb123:
    assume $i262 == 1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.0, $p267);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i268);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i260);
    $p273 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(0, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_124 := snprintf.ref.i64.ref.i32($p274, 16, .str.101, 5);
    $p276 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(16, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(17, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_125 := strncpy($p277, $p279, 32);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(12, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    $p283 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(52, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p283, $i282);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(12, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i286 := $M.45;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i287 := $mul.i32($i285, $i286);
    $p288 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(60, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, $i287);
    $p289 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p289, 0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(1, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i291 := $load.i8($M.0, $p290);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i291);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i292, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    $i294 := $slt.i32($i292, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i292, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i324 := $add.i32($i260, 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 10);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i57 := $i324;
    assume {:branchcond $i325} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i326 := $i324;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i327 := $M.39;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i328 := $ule.i32(6, $i327);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i61 := $i326;
    assume {:branchcond $i328} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb43;

  $bb148:
    assume $i328 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i326);
    $p339 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(0, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p339);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_126 := snprintf.ref.i64.ref.i32($p340, 16, .str.101, 6);
    $p342 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(16, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p343 := $bitcast.ref.ref($p342);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(17, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p345 := $bitcast.ref.ref($p344);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_127 := strncpy($p343, $p345, 32);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(12, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i348 := $load.i32($M.0, $p347);
    $p349 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(52, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p349, $i348);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(12, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i351 := $load.i32($M.0, $p350);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i352 := $M.45;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i353 := $mul.i32($i351, $i352);
    $p354 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(60, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p354, $i353);
    $p355 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p355, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(1, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p356);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i359 := $slt.i32($i358, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    $i360 := $slt.i32($i358, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i358, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i390 := $add.i32($i326, 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 10);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i57 := $i390;
    assume {:branchcond $i391} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i392 := $i390;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i393 := $M.39;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i394 := $ule.i32(7, $i393);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i61 := $i392;
    assume {:branchcond $i394} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i394 == 1);
    goto $bb43;

  $bb173:
    assume $i394 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(0, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i400 := $load.i8($M.0, $p399);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i400);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i403 := $sext.i32.i64($i392);
    $p405 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_128 := snprintf.ref.i64.ref.i32($p406, 16, .str.101, 7);
    $p408 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(16, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p408);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(17, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p410);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_129 := strncpy($p409, $p411, 32);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(12, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    $p415 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(52, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p415, $i414);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(12, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.0, $p416);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i418 := $M.45;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i419 := $mul.i32($i417, $i418);
    $p420 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(60, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p420, $i419);
    $p421 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p421, 0);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(1, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.0, $p422);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i424 := $zext.i8.i32($i423);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i425 := $slt.i32($i424, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    $i426 := $slt.i32($i424, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i424, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i456 := $add.i32($i392, 1);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 10);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i57 := $i456;
    assume {:branchcond $i457} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i458 := $i456;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i61 := $i458;
    goto $bb43;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i457 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb39;

  $bb184:
    assume $i427 == 1;
    $p428 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.0, $p428);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i430 := $or.i32($i429, 1);
    $p431 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p431, $i430);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p432, $mul.ref(32, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i434 := $load.i8($M.0, $p433);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i435 := $zext.i8.i32($i434);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i436 := $ne.i32($i435, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p437 := (if $i436 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p438 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(72, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p438, $p437);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume $i426 == 1;
    $p439 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i441 := $or.i32($i440, 1);
    $p442 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p442, $i441);
    $p443 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(72, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p443, acpi_idle_enter_simple);
    $p444 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(80, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p444, acpi_idle_play_dead);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i392);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb180:
    assume $i425 == 1;
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i424, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i445 == 1);
    goto $bb186;

  $bb188:
    assume $i445 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p397, $mul.ref(7, 52)), $mul.ref(8, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.0, $p446);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i448 := $zext.i8.i32($i447);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    $p454 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(72, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p454, acpi_idle_enter_c1);
    $p455 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(80, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, acpi_idle_play_dead);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i392);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb191:
    assume $i449 == 1;
    $p450 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.0, $p450);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i452 := $or.i32($i451, 1);
    $p453 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i403, 88)), $mul.ref(48, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p453, $i452);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb176:
    assume $i402 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i458 := $i392;
    goto $bb197;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb37;

  $bb159:
    assume $i361 == 1;
    $p362 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i364 := $or.i32($i363, 1);
    $p365 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p365, $i364);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p0);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($p366, $mul.ref(32, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.0, $p367);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p371 := (if $i370 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p372 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(72, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p372, $p371);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i360 == 1;
    $p373 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i375 := $or.i32($i374, 1);
    $p376 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p376, $i375);
    $p377 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(72, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p377, acpi_idle_enter_simple);
    $p378 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(80, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p378, acpi_idle_play_dead);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i326);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb155:
    assume $i359 == 1;
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i358, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb161;

  $bb163:
    assume $i379 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p331, $mul.ref(6, 52)), $mul.ref(8, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.0, $p380);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    $p388 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(72, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p388, acpi_idle_enter_c1);
    $p389 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(80, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p389, acpi_idle_play_dead);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i326);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb166:
    assume $i383 == 1;
    $p384 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p384);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i386 := $or.i32($i385, 1);
    $p387 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i337, 88)), $mul.ref(48, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p387, $i386);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb151:
    assume $i336 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i392 := $i326;
    goto $bb172;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb37;

  $bb134:
    assume $i295 == 1;
    $p296 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i298 := $or.i32($i297, 1);
    $p299 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, $i298);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p300, $mul.ref(32, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p305 := (if $i304 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p306 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(72, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p306, $p305);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume $i294 == 1;
    $p307 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i309 := $or.i32($i308, 1);
    $p310 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p310, $i309);
    $p311 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(72, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p311, acpi_idle_enter_simple);
    $p312 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(80, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p312, acpi_idle_play_dead);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i260);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb130:
    assume $i293 == 1;
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i292, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb136;

  $bb138:
    assume $i313 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p265, $mul.ref(5, 52)), $mul.ref(8, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    $p322 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(72, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p322, acpi_idle_enter_c1);
    $p323 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(80, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p323, acpi_idle_play_dead);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i260);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb141:
    assume $i317 == 1;
    $p318 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i320 := $or.i32($i319, 1);
    $p321 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i271, 88)), $mul.ref(48, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p321, $i320);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb126:
    assume $i270 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i326 := $i260;
    goto $bb147;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb37;

  $bb109:
    assume $i229 == 1;
    $p230 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i232 := $or.i32($i231, 1);
    $p233 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i232);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p234, $mul.ref(32, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.0, $p235);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p239 := (if $i238 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p240 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(72, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p240, $p239);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i228 == 1;
    $p241 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i243 := $or.i32($i242, 1);
    $p244 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, $i243);
    $p245 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(72, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p245, acpi_idle_enter_simple);
    $p246 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(80, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p246, acpi_idle_play_dead);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i194);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb105:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i226, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb111;

  $bb113:
    assume $i247 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p199, $mul.ref(4, 52)), $mul.ref(8, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p248);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    $p256 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(72, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p256, acpi_idle_enter_c1);
    $p257 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(80, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p257, acpi_idle_play_dead);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i194);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb116:
    assume $i251 == 1;
    $p252 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i254 := $or.i32($i253, 1);
    $p255 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i205, 88)), $mul.ref(48, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, $i254);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb101:
    assume $i204 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i260 := $i194;
    goto $bb122;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb37;

  $bb84:
    assume $i163 == 1;
    $p164 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i166 := $or.i32($i165, 1);
    $p167 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(32, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p173 := (if $i172 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p174 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(72, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p174, $p173);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i162 == 1;
    $p175 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i177 := $or.i32($i176, 1);
    $p178 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    $p179 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(72, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p179, acpi_idle_enter_simple);
    $p180 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(80, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, acpi_idle_play_dead);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i128);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb80:
    assume $i161 == 1;
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i160, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb86;

  $bb88:
    assume $i181 == 1;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p133, $mul.ref(3, 52)), $mul.ref(8, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    $p190 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(72, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p190, acpi_idle_enter_c1);
    $p191 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(80, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, acpi_idle_play_dead);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i128);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb91:
    assume $i185 == 1;
    $p186 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, 1);
    $p189 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i139, 88)), $mul.ref(48, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, $i188);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb76:
    assume $i138 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i194 := $i128;
    goto $bb97;

  $bb69:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb37;

  $bb59:
    assume $i98 == 1;
    $p99 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 1);
    $p102 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(32, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p108 := (if $i107 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    $p109 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(72, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $p108);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i97 == 1;
    $p110 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, 1);
    $p113 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    $p114 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(72, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, acpi_idle_enter_simple);
    $p115 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(80, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, acpi_idle_play_dead);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i23);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb55:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb61;

  $bb63:
    assume $i116 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p68, $mul.ref(2, 52)), $mul.ref(8, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    $p125 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(72, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, acpi_idle_enter_c1);
    $p126 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(80, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, acpi_idle_play_dead);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), $i23);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb66:
    assume $i120 == 1;
    $p121 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i122, 1);
    $p124 := $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref($i74, 88)), $mul.ref(48, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb51:
    assume $i73 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i128 := $i23;
    goto $bb72;

  $bb36:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb37;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)), $i50);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(32, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p56 := (if $i55 == 1 then acpi_idle_enter_bm else acpi_idle_enter_simple);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(72, 1)), $p56);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)), $i48);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(72, 1)), acpi_idle_enter_simple);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(80, 1)), acpi_idle_play_dead);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), 1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb22:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(1, 52)), $mul.ref(8, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(72, 1)), acpi_idle_enter_c1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(80, 1)), acpi_idle_play_dead);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), 1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)), $i46);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb19;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 656} {:cexpr "max_cstate"} boogie_si_record_i32(1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const put_online_cpus: ref;

axiom put_online_cpus == $sub.ref(0, 344858);

procedure put_online_cpus();



const strncpy: ref;

axiom strncpy == $sub.ref(0, 345890);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const acpi_idle_enter_c1: ref;

axiom acpi_idle_enter_c1 == $sub.ref(0, 346922);

procedure acpi_idle_enter_c1($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const acpi_idle_play_dead: ref;

axiom acpi_idle_play_dead == $sub.ref(0, 347954);

procedure acpi_idle_play_dead($p0: ref, $i1: i32) returns ($r: i32);



const acpi_idle_enter_simple: ref;

axiom acpi_idle_enter_simple == $sub.ref(0, 348986);

procedure acpi_idle_enter_simple($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const acpi_idle_enter_bm: ref;

axiom acpi_idle_enter_bm == $sub.ref(0, 350018);

procedure acpi_idle_enter_bm($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const __this_cpu_preempt_check: ref;

axiom __this_cpu_preempt_check == $sub.ref(0, 351050);

procedure __this_cpu_preempt_check($p0: ref);



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 352082);

procedure __bad_size_call_parameter();



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 353114);

procedure cpumask_weight($p0: ref) returns ($r: i32);



const acpi_idle_bm_check: ref;

axiom acpi_idle_bm_check == $sub.ref(0, 354146);

procedure acpi_idle_bm_check() returns ($r: i32);



const acpi_safe_halt: ref;

axiom acpi_safe_halt == $sub.ref(0, 355178);

procedure acpi_safe_halt();



const leave_mm: ref;

axiom leave_mm == $sub.ref(0, 356210);

procedure leave_mm($i0: i32);



const sched_clock_idle_sleep_event: ref;

axiom sched_clock_idle_sleep_event == $sub.ref(0, 357242);

procedure sched_clock_idle_sleep_event();



const lapic_timer_state_broadcast: ref;

axiom lapic_timer_state_broadcast == $sub.ref(0, 358274);

procedure lapic_timer_state_broadcast($p0: ref, $p1: ref, $i2: i32);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 359306);

procedure _raw_spin_lock($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 360338);

procedure _raw_spin_unlock($p0: ref);



const wbinvd: ref;

axiom wbinvd == $sub.ref(0, 361370);

procedure wbinvd();



const acpi_idle_do_entry: ref;

axiom acpi_idle_do_entry == $sub.ref(0, 362402);

procedure acpi_idle_do_entry($p0: ref);



const sched_clock_idle_wakeup_event: ref;

axiom sched_clock_idle_wakeup_event == $sub.ref(0, 363434);

procedure sched_clock_idle_wakeup_event($i0: i64);



const stop_critical_timings: ref;

axiom stop_critical_timings == $sub.ref(0, 364466);

procedure stop_critical_timings();



const acpi_processor_ffh_cstate_enter: ref;

axiom acpi_processor_ffh_cstate_enter == $sub.ref(0, 365498);

procedure acpi_processor_ffh_cstate_enter($p0: ref);



const inb: ref;

axiom inb == $sub.ref(0, 366530);

procedure inb($i0: i32) returns ($r: i8);



const inl: ref;

axiom inl == $sub.ref(0, 367562);

procedure inl($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inl($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "inl:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 672} $i1 := devirtbounce.18(0, $i0);
    call {:si_unique_call 673} {:cexpr "value"} boogie_si_record_i32($i1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const start_critical_timings: ref;

axiom start_critical_timings == $sub.ref(0, 368594);

procedure start_critical_timings();



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 369626);

procedure current_thread_info() returns ($r: ref);



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 370658);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 371690);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    return;
}



const arch_safe_halt: ref;

axiom arch_safe_halt == $sub.ref(0, 372722);

procedure arch_safe_halt();



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 373754);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 677} $i7 := devirtbounce.20(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 678} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 676} devirtbounce.5(0, .str.65, 814, 12);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 374786);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    return;
}



const acpi_read_bit_register: ref;

axiom acpi_read_bit_register == $sub.ref(0, 375818);

procedure acpi_read_bit_register($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_read_bit_register($i0: i32, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "acpi_read_bit_register:arg:register_id"} boogie_si_record_i32($i0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $r := 28;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 376850);

procedure inb_p($i0: i32) returns ($r: i8);



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 377882);

procedure slow_down_io();



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 378914);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 379946);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 380978);

procedure kobject_name($p0: ref) returns ($r: ref);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 382010);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 680} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 681} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dmi_check_system: ref;

axiom dmi_check_system == $sub.ref(0, 383042);

procedure dmi_check_system($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmi_check_system($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acpi_processor_cstate_check: ref;

axiom acpi_processor_cstate_check == $sub.ref(0, 384074);

procedure acpi_processor_cstate_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_processor_cstate_check($i0: i32) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i14: i8;
  var $i15: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "acpi_processor_cstate_check:arg:max_cstate___0"} boogie_si_record_i32($i0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, boot_cpu_data);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 15);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, amd_e400_c1e_detected);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i13 := $i0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(1, 1)));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(2, 1)));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i8, 5);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 192)), $mul.ref(3, 1)));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i11, 9);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb10;
}



const cpuidle_register_driver: ref;

axiom cpuidle_register_driver == $sub.ref(0, 385106);

procedure cpuidle_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpuidle_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 386138);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 688} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const cpuidle_register_device: ref;

axiom cpuidle_register_device == $sub.ref(0, 387170);

procedure cpuidle_register_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpuidle_register_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 690} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 691} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acpi_processor_get_throttling_control: ref;

axiom acpi_processor_get_throttling_control == $sub.ref(0, 388202);

procedure acpi_processor_get_throttling_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation acpi_processor_get_throttling_control($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i25: i32;
  var $p112: ref;
  var $p113: ref;
  var $i11: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p3, $sub.i64(0, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, $0.ref);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p5, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i8 := acpi_evaluate_object($p7, .str.48, $0.ref, $p1);
    call {:si_unique_call 695} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.10, $p12);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 4);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p14);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 2);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p14);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p28);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.11;
    cmdloc_dummy_var_40 := $M.11;
    call {:si_unique_call 699} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p29, $p30, 24, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_41;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.11, $p31);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 3);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i33 == 1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.11, $p35);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i37 := $ule.i32($i36, 14);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.11, $p39);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64(15, 63);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i44 == 1);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.11, $p55);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 702} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p53, $p56, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p14);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(1, 24));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p60);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.11;
    cmdloc_dummy_var_49 := $M.11;
    call {:si_unique_call 703} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p61, $p62, 24, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_50;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.11, $p63);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 3);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i65 == 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.11, $p67);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i69 := $ule.i32($i68, 14);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i69 == 1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p2);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.11, $p71);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i76 := $ugt.i64(15, 63);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i76 == 1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p2);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.11, $p87);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 706} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p85, $p88, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i93, $i97);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 32);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(5, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(6, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i104, $i108);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i110 := $sgt.i32($i109, 32);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.10, $p112);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} kfree($p113);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i11 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb42:
    assume $i110 == 1;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_134 := printk.ref(.str.54);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb15;

  $bb39:
    assume $i99 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_133 := printk.ref(.str.53);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb15;

  $bb36:
    assume $i76 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.11, $p81);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 705} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p79, $p82, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_132 := printk.ref(.str.52);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb15;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb29;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.11, $p49);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 701} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p47, $p50, 15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_131 := printk.ref(.str.51);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_130 := printk.ref(.str.50);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i8, 5);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} acpi_exception.ref.i32.i32.ref(_acpi_module_name___0, 471, $i8, .str.49);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acpi_processor_get_throttling_states: ref;

axiom acpi_processor_get_throttling_states == $sub.ref(0, 389234);

procedure acpi_processor_get_throttling_states($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr, assertsPassed;



implementation acpi_processor_get_throttling_states($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i58: i32;
  var $i25: i32;
  var $p96: ref;
  var $p97: ref;
  var $i15: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p4, $sub.i64(0, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, $0.ref);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p6, 6);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.55);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p8, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, $0.ref);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i12 := acpi_evaluate_object($p11, .str.56, $0.ref, $p1);
    call {:si_unique_call 713} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.10, $p16);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p18);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 4);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p18);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p18);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 40);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p45 := kmalloc($i44, 208);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p45);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32(0, $i56);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.10, $p96);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} kfree($p97);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb27;

  $bb27:
    call $p60, $p61, $i62, $p63, $p64, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $i76, $p77, $i78, $i79, $i80, $p85, $i86, $i87, $i93, $i94, $i95, $i58 := acpi_processor_get_throttling_states_loop_$bb27($p0, $p2, $p3, $p18, $p55, $p60, $p61, $i62, $p63, $p64, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $p75, $i76, $p77, $i78, $i79, $i80, $p85, $i86, $i87, $i93, $i94, $i95, $i58);
    goto $bb27_last;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i58);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p61, $mul.ref($i62, 40));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p64, 40);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p66, $p63);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 4);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p18);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i58);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p75, $mul.ref($i76, 24));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i78 := acpi_extract_package($p77, $p2, $p3);
    call {:si_unique_call 721} {:cexpr "status"} boogie_si_record_i32($i78);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p61, $mul.ref($i62, 40)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i58, 1);
    call {:si_unique_call 726} {:cexpr "i"} boogie_si_record_i32($i93);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p55);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32($i93, $i94);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i95 == 1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb41:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i93;
    goto $bb41_dummy;

  $bb38:
    assume $i87 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_136 := printk.ref(.str.62);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} kfree($p92);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb13;

  $bb35:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} acpi_exception.ref.i32.i32.ref(_acpi_module_name___0, 594, $i80, .str.61);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} kfree($p84);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb13;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 536870912);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb31;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 589, .str.59, _acpi_module_name___0, 536870912, .str.60, $i58);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb13;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 536870912);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb17;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p18);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 569, .str.59, _acpi_module_name___0, 536870912, .str.8, $i34);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_135 := printk.ref(.str.58);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 14);
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, 5);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} acpi_exception.ref.i32.i32.ref(_acpi_module_name___0, 556, $i12, .str.57);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb41_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;
}



const acpi_processor_get_throttling_fadt: ref;

axiom acpi_processor_get_throttling_fadt == $sub.ref(0, 390266);

procedure acpi_processor_get_throttling_fadt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_get_throttling_fadt($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(32, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    call {:si_unique_call 727} {:cexpr "duty_mask"} boogie_si_record_i32($i14);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(124, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i14, $i18);
    call {:si_unique_call 728} {:cexpr "duty_mask"} boogie_si_record_i32($i19);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} arch_local_irq_disable();
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} trace_hardirqs_off();
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i23 := inl($i22);
    call {:si_unique_call 732} {:cexpr "value"} boogie_si_record_i32($i23);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} trace_hardirqs_on();
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} arch_local_irq_enable();
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 4);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 536870912);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i38);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref($i47, 4)), $mul.ref(2, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 743, .str.63, _acpi_module_name___0, 536870912, .str.64, $i38, $i53);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i23, $i19);
    call {:si_unique_call 733} {:cexpr "duty_value"} boogie_si_record_i32($i26);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(124, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i26, $i30);
    call {:si_unique_call 734} {:cexpr "duty_value"} boogie_si_record_i32($i31);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb13;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, $i31);
    call {:si_unique_call 735} {:cexpr "state"} boogie_si_record_i32($i36);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const acpi_processor_set_throttling_fadt: ref;

axiom acpi_processor_set_throttling_fadt == $sub.ref(0, 391298);

procedure acpi_processor_set_throttling_fadt($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_set_throttling_fadt($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i64;
  var $i5: i1;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p65: ref;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i64;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "acpi_processor_set_throttling_fadt:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 740} {:cexpr "acpi_processor_set_throttling_fadt:arg:force"} boogie_si_record_i1($i2);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i1, $i11);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(32, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i3);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i18 == 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, $i21);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i1, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := 0, 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} arch_local_irq_disable();
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} trace_hardirqs_off();
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i49 := inl($i48);
    call {:si_unique_call 749} {:cexpr "value"} boogie_si_record_i32($i49);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 16);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i49;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i1, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} trace_hardirqs_on();
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} arch_local_irq_enable();
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 4);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb32:
    assume $i71 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 536870912);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb34;

  $bb35:
    assume $i74 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref($i75, 4)), $mul.ref(2, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i82 == 1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32(4, 1065, .str.66, _acpi_module_name___0, 536870912, .str.67, $i1, $i91);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i82 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref($i83, 4)), $mul.ref(2, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i90 := $udiv.i32($i89, 10);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb39;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i56, $i44);
    call {:si_unique_call 752} {:cexpr "value"} boogie_si_record_i32($i58);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $i45);
    call {:si_unique_call 753} {:cexpr "value"} boogie_si_record_i32($i59);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} outl($i59, $i62);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i59, 16);
    call {:si_unique_call 755} {:cexpr "value"} boogie_si_record_i32($i63);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} outl($i63, $i66);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i49, $sub.i32(0, 17));
    call {:si_unique_call 750} {:cexpr "value"} boogie_si_record_i32($i52);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} outl($i52, $i55);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i56 := $i52;
    goto $bb28;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, $i1);
    call {:si_unique_call 741} {:cexpr "duty_value"} boogie_si_record_i32($i30);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(124, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i30, $i34);
    call {:si_unique_call 742} {:cexpr "duty_value"} boogie_si_record_i32($i35);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    call {:si_unique_call 743} {:cexpr "duty_mask"} boogie_si_record_i32($i39);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(104, 1)));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i39, $i41);
    call {:si_unique_call 744} {:cexpr "duty_mask"} boogie_si_record_i32($i42);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i43 := $xor.i32($i42, $sub.i32(0, 1));
    call {:si_unique_call 745} {:cexpr "duty_mask"} boogie_si_record_i32($i43);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i43, $i35;
    goto $bb25;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb15;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const acpi_processor_get_fadt_info: ref;

axiom acpi_processor_get_fadt_info == $sub.ref(0, 392330);

procedure acpi_processor_get_fadt_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_processor_get_fadt_info($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i64;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i47: i32;
  var $i11: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(120, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(125, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(124, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(125, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i26, $i30);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 4);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $add.ref($add.ref(acpi_gbl_FADT, $mul.ref(0, 320)), $mul.ref(105, 1)));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32(1, $i35);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i42 := $udiv.i32(1000, $i41);
    call {:si_unique_call 763} {:cexpr "step"} boogie_si_record_i32($i42);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32(0, $i45);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb26;

  $bb26:
    call $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $p71, $i72, $i73, $i74, $i47 := acpi_processor_get_fadt_info_loop_$bb26($p0, $i42, $p44, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $p71, $i72, $i73, $i74, $i47);
    goto $bb26_last;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i42);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i47);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i49, $i51);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(1000, $i52);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i47);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref($i55, 4)), $mul.ref(2, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i54);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i42);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i47);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i61, $i63);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(1000, $i64);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i47);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref($i67, 4)), $mul.ref(0, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i66);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i47, 1);
    call {:si_unique_call 764} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p44);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i74 := $ult.i32($i72, $i73);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i74 == 1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i72;
    goto $bb28_dummy;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_137 := printk.ref(.str.71);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 536870912);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 971, .str.68, _acpi_module_name___0, 536870912, .str.70);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 536870912);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 968, .str.68, _acpi_module_name___0, 536870912, .str.69);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;
}



const acpi_processor_get_throttling_ptc: ref;

axiom acpi_processor_get_throttling_ptc == $sub.ref(0, 393362);

procedure acpi_processor_get_throttling_ptc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.52, $M.53, $M.50;



implementation acpi_processor_get_throttling_ptc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p1, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i12 := acpi_read_throttling_status($p0, $p1);
    call {:si_unique_call 767} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i13 := $sge.i32($i12, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.49, $p1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i15 := acpi_get_throttling_state($p0, $i14);
    call {:si_unique_call 769} {:cexpr "state"} boogie_si_record_i32($i15);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i15;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i23 := acpi_processor_set_throttling($p0, 0, 1);
    call {:si_unique_call 772} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb21;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i4 := $i23;
    goto $bb3;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 536870912);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 919, .str.72, _acpi_module_name___0, 536870912, .str.73);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const acpi_processor_set_throttling_ptc: ref;

axiom acpi_processor_set_throttling_ptc == $sub.ref(0, 394394);

procedure acpi_processor_set_throttling_ptc($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation acpi_processor_set_throttling_ptc($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p32: ref;
  var $i7: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 774} {:cexpr "acpi_processor_set_throttling_ptc:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 775} {:cexpr "acpi_processor_set_throttling_ptc:arg:force"} boogie_si_record_i1($i2);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i1, $i12);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(32, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i4);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i19 == 1);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, $i22);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(28, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i1);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p3, 0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i27 := acpi_get_throttling_value($p0, $i1, $p3);
    call {:si_unique_call 777} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i28 := $sge.i32($i27, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.50, $p3);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_138 := acpi_write_throttling_state($p0, $i29);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i26 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb15;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const acpi_processor_get_tsd: ref;

axiom acpi_processor_get_tsd == $sub.ref(0, 395426);

procedure acpi_processor_get_tsd($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $M.0, $CurrAddr;



implementation acpi_processor_get_tsd($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i27: i32;
  var $p73: ref;
  var $p74: ref;
  var $i17: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p4, $sub.i64(0, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, $0.ref);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p6, 6);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.55);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p8, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, $0.ref);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(0, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i14 := acpi_evaluate_object($p13, .str.76, $0.ref, $p1);
    call {:si_unique_call 783} {:cexpr "status"} boogie_si_record_i32($i14);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.10, $p18);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p20);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 4);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p20);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p35, 40);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p37, $p34);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p20);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i41 := acpi_extract_package($p40, $p2, $p3);
    call {:si_unique_call 789} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 5);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 1);
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} cpumask_set_cpu($i59, $p61);
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 252);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.10, $p73);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} kfree($p74);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i17 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb27:
    assume $i64 == 1;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 253);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb29;

  $bb30:
    assume $i67 == 1;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 254);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb29;

  $bb32:
    assume $i70 == 1;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 252);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_143 := printk.ref(.str.80);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb13;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_142 := printk.ref(.str.79);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb13;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_141 := printk.ref(.str.78);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb13;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_140 := printk.ref(.str.78);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_139 := printk.ref(.str.78);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i14, 5);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} acpi_exception.ref.i32.i32.ref(_acpi_module_name___0, 635, $i14, .str.77);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acpi_get_throttling_value: ref;

axiom acpi_get_throttling_value == $sub.ref(0, 396458);

procedure acpi_get_throttling_value($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50;



implementation acpi_get_throttling_value($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "acpi_get_throttling_value:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i3 := $sge.i32($i1, 0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i1, $i6);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(24, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p2, $i14);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const acpi_write_throttling_state: ref;

axiom acpi_write_throttling_state == $sub.ref(0, 397490);

procedure acpi_write_throttling_state($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_write_throttling_state($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $i31: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i30: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "acpi_write_throttling_state:arg:value"} boogie_si_record_i64($i1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 127);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 127);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_145 := printk.ref.i32(.str.74, $i35);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i31 := acpi_throttling_wrmsr($i1);
    call {:si_unique_call 797} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb9;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 798} {:cexpr "bit_width"} boogie_si_record_i32($i13);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    call {:si_unique_call 799} {:cexpr "bit_offset"} boogie_si_record_i32($i17);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i13);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 800} {:cexpr "ptc_mask"} boogie_si_record_i64($i20);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i1, $i20);
    call {:si_unique_call 801} {:cexpr "ptc_value"} boogie_si_record_i64($i21);
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i17);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i26 := $shl.i64($i21, $i25);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i13, $i17);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_144 := acpi_os_write_port($i24, $i27, $i28);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb9;
}



const acpi_throttling_wrmsr: ref;

axiom acpi_throttling_wrmsr == $sub.ref(0, 398522);

procedure acpi_throttling_wrmsr($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_throttling_wrmsr($i0: i64) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i32;
  var $i9: i32;
  var $i5: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "acpi_throttling_wrmsr:arg:value"} boogie_si_record_i64($i0);
    call {:si_unique_call 805} $i1 := devirtbounce.22(0, $add.ref($add.ref(cpu_info, $mul.ref(0, 192)), $mul.ref(1, 1)));
    call {:si_unique_call 806} {:cexpr "pfo_ret__"} boogie_si_record_i8($i1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i6 := x86_this_cpu_constant_test_bit(22, $add.ref($add.ref(cpu_info, $mul.ref(0, 192)), $mul.ref(20, 1)));
    call {:si_unique_call 809} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    call {:si_unique_call 811} {:cexpr "acpi_throttling_wrmsr:arg:msr"} boogie_si_record_i64($i0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i64($i0, 32);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_148 := paravirt_write_msr(410, $i10, $i12);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_147 := printk.ref(.str.75);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb11;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_146 := printk.ref(.str.75);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb8;
}



const x86_this_cpu_constant_test_bit: ref;

axiom x86_this_cpu_constant_test_bit == $sub.ref(0, 399554);

procedure x86_this_cpu_constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation x86_this_cpu_constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "x86_this_cpu_constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    call {:si_unique_call 814} $i5 := devirtbounce.19(0, $p4);
    call {:si_unique_call 815} {:cexpr "pfo_ret__"} boogie_si_record_i64($i5);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const paravirt_write_msr: ref;

axiom paravirt_write_msr == $sub.ref(0, 400586);

procedure paravirt_write_msr($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation paravirt_write_msr($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "paravirt_write_msr:arg:msr"} boogie_si_record_i32($i0);
    call {:si_unique_call 817} {:cexpr "paravirt_write_msr:arg:low"} boogie_si_record_i32($i1);
    call {:si_unique_call 818} {:cexpr "paravirt_write_msr:arg:high"} boogie_si_record_i32($i2);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(232, 1)));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 820} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    call {:si_unique_call 822} $p13 := devirtbounce.23(0, 33, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(232, 1)), 511, $i10, $i11, $i12);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i14 := $extractvalue($p13, 4);
    call {:si_unique_call 823} {:cexpr "__eax"} boogie_si_record_i64($i14);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 824} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 821} devirtbounce.5(0, .str.65, 133, 12);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call paravirt_write_msr_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const acpi_read_throttling_status: ref;

axiom acpi_read_throttling_status == $sub.ref(0, 401618);

procedure acpi_read_throttling_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.0, $M.52, $M.53, $CurrAddr, $M.50;



implementation acpi_read_throttling_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i32: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i31: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 127);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 127);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_150 := printk.ref.i32(.str.74, $i36);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i32 := acpi_throttling_rdmsr($p1);
    call {:si_unique_call 827} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb9;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(5, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 828} {:cexpr "bit_width"} boogie_si_record_i32($i14);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(6, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 829} {:cexpr "bit_offset"} boogie_si_record_i32($i18);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i14, $i18);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_149 := acpi_os_read_port($i21, $p2, $i22);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32(1, $i14);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    call {:si_unique_call 831} {:cexpr "ptc_mask"} boogie_si_record_i64($i26);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.51, $p2);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, $i18);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, $i26);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p1, $i30);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;
}



const acpi_get_throttling_state: ref;

axiom acpi_get_throttling_state == $sub.ref(0, 402650);

procedure acpi_get_throttling_state($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_get_throttling_state($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i6: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "acpi_get_throttling_state:arg:value"} boogie_si_record_i64($i1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(40, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $i18, $i19, $i6 := acpi_get_throttling_state_loop_$bb4($p0, $i1, $p3, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $i18, $i19, $i6);
    goto $bb4_last;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i6);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 40)), $mul.ref(24, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, $i1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i6, 1);
    call {:si_unique_call 834} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p3);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i17, $i18);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;
}



const acpi_os_read_port: ref;

axiom acpi_os_read_port == $sub.ref(0, 403682);

procedure acpi_os_read_port($i0: i64, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_os_read_port($i0: i64, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} {:cexpr "acpi_os_read_port:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 836} {:cexpr "acpi_os_read_port:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acpi_throttling_rdmsr: ref;

axiom acpi_throttling_rdmsr == $sub.ref(0, 404714);

procedure acpi_throttling_rdmsr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.53, $M.49, $CurrAddr, $M.50;



implementation acpi_throttling_rdmsr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i12: i32;
  var $i8: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 842} $i4 := devirtbounce.22(0, $add.ref($add.ref(cpu_info, $mul.ref(0, 192)), $mul.ref(1, 1)));
    call {:si_unique_call 843} {:cexpr "pfo_ret__"} boogie_si_record_i8($i4);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i9 := x86_this_cpu_constant_test_bit(22, $add.ref($add.ref(cpu_info, $mul.ref(0, 192)), $mul.ref(20, 1)));
    call {:si_unique_call 846} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.52 := $store.i64($M.52, $p2, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.53 := $store.i64($M.53, $p1, 0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i13 := paravirt_read_msr(410, $p3);
    call {:si_unique_call 849} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p15, $i14);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i64($i13, 32);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, $p18, $i17);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.53, $p1);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i20 := $shl.i64($i19, 32);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.52, $p2);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i22 := $or.i64($i20, $i21);
    call {:si_unique_call 850} {:cexpr "msr"} boogie_si_record_i64($i22);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p0, $i22);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_152 := printk.ref(.str.75);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb11;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_151 := printk.ref(.str.75);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb8;
}



const outl: ref;

axiom outl == $sub.ref(0, 405746);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 852} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 853} devirtbounce.24(0, $i0, $i1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_irq_enable: ref;

axiom arch_local_irq_enable == $sub.ref(0, 406778);

procedure arch_local_irq_enable();
  free requires assertsPassed;



implementation arch_local_irq_enable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 855} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 857} $i7 := devirtbounce.20(0, 47, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 858} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 856} devirtbounce.5(0, .str.65, 819, 12);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const acpi_processor_start: ref;

axiom acpi_processor_start == $sub.ref(0, 407810);

procedure acpi_processor_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.39, $M.44, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.50, $M.27, $M.52, $M.53, assertsPassed;



implementation acpi_processor_start($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1248, 1)), $mul.ref(0, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i7 := __acpi_processor_start($p3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const acpi_processor_stop: ref;

axiom acpi_processor_stop == $sub.ref(0, 408842);

procedure acpi_processor_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.0, $M.50, $CurrAddr;



implementation acpi_processor_stop($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1248, 1)), $mul.ref(0, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2128)), $mul.ref(8, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_153 := acpi_remove_notify_handler($p7, 2, acpi_processor_notify);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p9 := acpi_driver_data($p3);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_154 := acpi_processor_power_exit($p10);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2128)), $mul.ref(504, 1)), $mul.ref(16, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} sysfs_remove_link($p19, .str.30);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1680)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} sysfs_remove_link($p23, .str.32);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} thermal_cooling_device_unregister($p25);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 736)), $mul.ref(720, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_remove_notify_handler: ref;

axiom acpi_remove_notify_handler == $sub.ref(0, 409874);

procedure acpi_remove_notify_handler($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_remove_notify_handler($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} {:cexpr "acpi_remove_notify_handler:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 868} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 869} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acpi_processor_suspend: ref;

axiom acpi_processor_suspend == $sub.ref(0, 410906);

procedure acpi_processor_suspend() returns ($r: i32);
  free requires assertsPassed;



implementation acpi_processor_suspend() returns ($r: i32)
{
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_155 := acpi_read_bit_register(15, saved_bm_rld);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const acpi_processor_resume: ref;

axiom acpi_processor_resume == $sub.ref(0, 411938);

procedure acpi_processor_resume();
  free requires assertsPassed;
  modifies $M.47, $CurrAddr;



implementation acpi_processor_resume()
{
  var $p0: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p0, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_156 := acpi_read_bit_register(15, $p0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.47, $p0);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.47, saved_bm_rld);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, $i3);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.47, saved_bm_rld);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_157 := acpi_write_bit_register(15, $i5);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_max_cstate: ref;

axiom set_max_cstate == $sub.ref(0, 412970);

procedure set_max_cstate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation set_max_cstate($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 8);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(8, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(336, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_158 := printk.ref.ref.i64.i32(.str.108, $p4, $i7, 9);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(336, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.39 := $i12;
    call {:si_unique_call 875} {:cexpr "max_cstate"} boogie_si_record_i32($i12);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_thermal_cpufreq_notifier: ref;

axiom acpi_thermal_cpufreq_notifier == $sub.ref(0, 414002);

procedure acpi_thermal_cpufreq_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_thermal_cpufreq_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} {:cexpr "acpi_thermal_cpufreq_notifier:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 877} $i5 := devirtbounce.1(0, cpufreq_thermal_reduction_pctg);
    call {:si_unique_call 878} {:cexpr "__ptr"} boogie_si_record_i64($i5);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(20, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i8 := phys_package_first_cpu($i7);
    call {:si_unique_call 880} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i12, 8));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i5);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 20);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(100, $i18);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i11, $i19);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i20, 100);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    call {:si_unique_call 881} {:cexpr "max_freq"} boogie_si_record_i64($i22);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} cpufreq_verify_within_limits($p3, 0, $i23);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpufreq_verify_within_limits: ref;

axiom cpufreq_verify_within_limits == $sub.ref(0, 415034);

procedure cpufreq_verify_within_limits($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cpufreq_verify_within_limits($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} {:cexpr "cpufreq_verify_within_limits:arg:min"} boogie_si_record_i32($i1);
    call {:si_unique_call 884} {:cexpr "cpufreq_verify_within_limits:arg:max"} boogie_si_record_i32($i2);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i4, $i1);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32($i8, $i1);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i2);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, $i2);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i20, $i22);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i2);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i2);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(56, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(52, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_ppc_notifier: ref;

axiom acpi_processor_ppc_notifier == $sub.ref(0, 416066);

procedure acpi_processor_ppc_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.50, $CurrAddr;



implementation acpi_processor_ppc_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "acpi_processor_ppc_notifier:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, 3);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i1, 1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} mutex_lock_nested(performance_mutex, 0);
    call {:si_unique_call 888} $i10 := devirtbounce(0, processors);
    call {:si_unique_call 889} {:cexpr "__ptr"} boogie_si_record_i64($i10);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(20, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i13, 8));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i10);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 736)), $mul.ref(24, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 891} {:cexpr "ppc"} boogie_si_record_i32($i26);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i31 := $ule.i32($i30, $i26);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i26);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 48)), $mul.ref(0, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, 1000);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} cpufreq_verify_within_limits($p3, 0, $i41);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} mutex_unlock(performance_mutex);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb15;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i5 := $M.8;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 0);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 886} {:cexpr "ignore_ppc"} boogie_si_record_i32(0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const cpufreq_get_cur_state: ref;

axiom cpufreq_get_cur_state == $sub.ref(0, 417098);

procedure cpufreq_get_cur_state($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.50;



implementation cpufreq_get_cur_state($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} {:cexpr "cpufreq_get_cur_state:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i1 := cpu_has_cpufreq($i0);
    call {:si_unique_call 895} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 896} $i4 := devirtbounce.1(0, cpufreq_thermal_reduction_pctg);
    call {:si_unique_call 897} {:cexpr "__ptr"} boogie_si_record_i64($i4);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i5 := phys_package_first_cpu($i0);
    call {:si_unique_call 899} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i6, 8));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i4);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 418130);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 903} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p4 := calloc(1, $i0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} __VERIFIER_assume($i7);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_device_driver_6: ref;

axiom ldv_initialize_device_driver_6 == $sub.ref(0, 419162);

procedure ldv_initialize_device_driver_6();
  free requires assertsPassed;
  modifies $M.54, $M.0, $CurrAddr;



implementation ldv_initialize_device_driver_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p0 := ldv_zalloc(1416);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 420194);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.63, $M.44, $M.64, $M.54, $M.65, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.8, $M.6, $M.47, $M.39, $M.77, $M.45, $M.83, $M.17, $M.36, $M.37, $M.105, $M.66, $M.25, $M.118, $M.119, $M.120, $CurrAddr, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.50, $M.27, $M.52, $M.53, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    call {:si_unique_call 907} $initialize();
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 911} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p1 := ldv_zalloc(1);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p2 := ldv_zalloc(24);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_initialize();
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 918} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, vslice_dummy_var_159, vslice_dummy_var_160 := main_loop_$bb1($i0, $p1, $p3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, vslice_dummy_var_159, vslice_dummy_var_160);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_stop();
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb43_dummy;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i58 := $M.62;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb86:
    assume $i59 == 1;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 961} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 962} {:cexpr "tmp___5"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} ldv_stop();
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb89:
    assume $i61 == 1;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i62 := $M.62;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i63 == 1;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_160 := acpi_cpu_soft_notify($p3, $i0, $p1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i56 := $M.61;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb83:
    assume $i57 == 1;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_main_exported_2();
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb5:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i9 == 1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i54 := $M.60;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb80:
    assume $i55 == 1;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_main_exported_3();
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb12:
    assume $i9 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i37 := $M.59;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume $i38 == 1;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} $i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i39);
    call {:si_unique_call 941} {:cexpr "tmp___4"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_stop();
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb55:
    assume $i41 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i47 := $M.59;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb68:
    assume $i48 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i49 := acpi_processor_driver_init();
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.64 := $i49;
    call {:si_unique_call 946} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i49);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i50 := $M.64;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i52 := $M.64;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i53 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} ldv_initialize_thermal_cooling_device_ops_2();
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_initialize_device_driver_6();
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i51 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_check_final_state();
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb53:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb57;

  $bb58:
    assume $i42 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i43 := $M.59;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb60:
    assume $i44 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i45 := $M.58;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb62;

  $bb63:
    assume $i46 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} acpi_processor_driver_exit();
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb3:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i35 := $M.57;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47:
    assume $i36 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_main_exported_1();
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i33 := $M.56;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44:
    assume $i34 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_main_exported_4();
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb14:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb18:
    assume $i12 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i13 := $M.55;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 928} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_stop();
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb25:
    assume $i17 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i27 := $M.55;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i28 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p29 := $M.54;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_159 := acpi_processor_stop($p29);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i31 := $M.58;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.58 := $i32;
    call {:si_unique_call 935} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb23:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb27;

  $bb28:
    assume $i18 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i19 := $M.55;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i20 == 1;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p21 := $M.54;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i22 := acpi_processor_start($p21);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.63 := $i22;
    call {:si_unique_call 930} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i22);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i23 := $M.63;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i25 := $M.58;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.58 := $i26;
    call {:si_unique_call 932} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb43_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 925} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 421226);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 422258);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 423290);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.65, $M.56, $M.47, $M.58, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 967} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 968} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_stop();
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i23 := $M.56;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i24 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_163 := ldv_probe_4();
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i26 := $M.58;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.58 := $i27;
    call {:si_unique_call 983} {:cexpr "ref_cnt"} boogie_si_record_i32($i27);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i13 := $M.56;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i18 := $M.56;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i19 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_162 := ldv_release_4();
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i21 := $M.58;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.58 := $i22;
    call {:si_unique_call 980} {:cexpr "ref_cnt"} boogie_si_record_i32($i22);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i14 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_161 := ldv_release_4();
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i16 := $M.58;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.58 := $i17;
    call {:si_unique_call 977} {:cexpr "ref_cnt"} boogie_si_record_i32($i17);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i11 := $M.56;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i12 == 1;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} acpi_processor_resume();
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i6 := $M.56;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i8 := acpi_processor_suspend();
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.65 := $i8;
    call {:si_unique_call 971} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i8);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i9 := $M.65;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 424322);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.57, $M.50, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 986} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p1 := ldv_zalloc(24);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p3 := ldv_zalloc(1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 992} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i6 := $M.57;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_164 := acpi_processor_ppc_notifier($p2, $i0, $p3);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const acpi_processor_driver_exit: ref;

axiom acpi_processor_driver_exit == $sub.ref(0, 425354);

procedure acpi_processor_driver_exit();
  free requires assertsPassed;
  modifies $M.17, $M.6;



implementation acpi_processor_driver_exit()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, acpi_disabled);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} acpi_processor_ppc_exit();
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} acpi_thermal_cpufreq_exit();
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} unregister_cpu_notifier(acpi_cpu_notifier);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} acpi_processor_syscore_exit();
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} driver_unregister(acpi_processor_driver);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_driver_init: ref;

axiom acpi_processor_driver_init == $sub.ref(0, 426386);

procedure acpi_processor_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.17, $M.0, $M.28, $M.27, $CurrAddr, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5;



implementation acpi_processor_driver_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, acpi_disabled);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i3 := driver_register(acpi_processor_driver);
    call {:si_unique_call 1002} {:cexpr "result"} boogie_si_record_i32($i3);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} acpi_processor_syscore_init();
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_165 := register_cpu_notifier(acpi_cpu_notifier);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} acpi_thermal_cpufreq_init();
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} acpi_processor_ppc_init();
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} acpi_processor_throttling_init();
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;
}



const ldv_initialize_thermal_cooling_device_ops_2: ref;

axiom ldv_initialize_thermal_cooling_device_ops_2 == $sub.ref(0, 427418);

procedure ldv_initialize_thermal_cooling_device_ops_2();
  free requires assertsPassed;
  modifies $M.66, $M.0, $CurrAddr;



implementation ldv_initialize_thermal_cooling_device_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p0 := ldv_zalloc(1672);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 428450);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.60, $M.0, $M.50, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1010} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 1011} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p1 := ldv_zalloc(24);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p3 := ldv_zalloc(1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1015} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1016} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_stop();
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i6 := $M.60;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_166 := acpi_thermal_cpufreq_notifier($p2, $i0, $p3);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 429482);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.61, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.50;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p0 := ldv_zalloc(8);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p2 := ldv_zalloc(8);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1023} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    call {:si_unique_call 1024} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1025} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1026} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1027} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_stop();
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i18 := $M.61;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p20 := $M.66;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_169 := processor_get_cur_state($p20, $p1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i14 := $M.61;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p16 := $M.66;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_168 := processor_get_max_state($p16, $p3);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1031} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i10 := $M.61;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p12 := $M.66;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_167 := processor_set_cur_state($p12, $i4);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 430514);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 431546);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1035} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1036} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acpi_processor_syscore_init: ref;

axiom acpi_processor_syscore_init == $sub.ref(0, 432578);

procedure acpi_processor_syscore_init();
  free requires assertsPassed;



implementation acpi_processor_syscore_init()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} register_syscore_ops(acpi_processor_syscore_ops);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    return;
}



const register_cpu_notifier: ref;

axiom register_cpu_notifier == $sub.ref(0, 433610);

procedure register_cpu_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_cpu_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acpi_thermal_cpufreq_init: ref;

axiom acpi_thermal_cpufreq_init == $sub.ref(0, 434642);

procedure acpi_thermal_cpufreq_init();
  free requires assertsPassed;
  modifies $M.6;



implementation acpi_thermal_cpufreq_init()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i0 := cpufreq_register_notifier(acpi_thermal_cpufreq_notifier_block, 1);
    call {:si_unique_call 1041} {:cexpr "i"} boogie_si_record_i32($i0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 1042} {:cexpr "acpi_thermal_cpufreq_is_init"} boogie_si_record_i32(1);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_ppc_init: ref;

axiom acpi_processor_ppc_init == $sub.ref(0, 435674);

procedure acpi_processor_ppc_init();
  free requires assertsPassed;
  modifies $M.17;



implementation acpi_processor_ppc_init()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i0 := cpufreq_register_notifier(acpi_ppc_notifier_block, 1);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_170 := printk.ref(.str.14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i2 := $M.17;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $M.17 := $i3;
    call {:si_unique_call 1045} {:cexpr "acpi_processor_ppc_status"} boogie_si_record_i32($i3);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_processor_throttling_init: ref;

axiom acpi_processor_throttling_init == $sub.ref(0, 436706);

procedure acpi_processor_throttling_init();
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.27, $CurrAddr, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5;



implementation acpi_processor_throttling_init()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i0 := acpi_processor_update_tsd_coord();
    call {:si_unique_call 1048} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 536870912);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} acpi_debug_print.i32.i32.ref.ref.i32.ref(4, 251, .str, _acpi_module_name___0, 536870912, .str.1);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const acpi_processor_update_tsd_coord: ref;

axiom acpi_processor_update_tsd_coord == $sub.ref(0, 437738);

procedure acpi_processor_update_tsd_coord() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.27, $CurrAddr, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5;



implementation acpi_processor_update_tsd_coord() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i12: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i76: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i74: i32;
  var $i75: i32;
  var $i77: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i64;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i121: i32;
  var $i38: i32;
  var $i33: i32;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i152: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i2 := zalloc_cpumask_var($p1, 208);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i9 := cpumask_next($sub.i32(0, 1), $p8);
    call {:si_unique_call 1054} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, $i9);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i35 := cpumask_next($sub.i32(0, 1), $p34);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, $i35);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.26, $p0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} free_cpumask_var($p147);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i149 := cpumask_next($sub.i32(0, 1), $p148);
    call {:si_unique_call 1061} {:cexpr "i"} boogie_si_record_i32($i149);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i151 := $ugt.i32($i150, $i149);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb92:
    assume $i151 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i152 := $i149;
    goto $bb95;

  $bb95:
    call $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $p168, $p169, $p170, $p171, $p172, $i152 := acpi_processor_update_tsd_coord_loop_$bb95($i33, $i153, $i154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $p168, $p169, $p170, $p171, $p172, $i152);
    goto $bb95_last;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    call {:si_unique_call 1093} $i153 := devirtbounce(0, processors);
    call {:si_unique_call 1094} {:cexpr "__ptr___3"} boogie_si_record_i64($i153);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i152);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i154, 8));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, $i153);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i33, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i163 := cpumask_next($i152, $p162);
    call {:si_unique_call 1096} {:cexpr "i"} boogie_si_record_i32($i163);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i165 := $ugt.i32($i164, $i163);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i165 == 1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb100:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i152 := $i163;
    goto $bb100_dummy;

  $bb103:
    assume $i166 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} cpumask_clear($p169);
    $p170 := $add.ref($add.ref($add.ref($p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} cpumask_set_cpu($i152, $p171);
    $p172 := $add.ref($add.ref($add.ref($p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 252);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb97:
    assume $i161 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb31;

  $bb31:
    call $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p61, $p62, $p63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $i71, $i72, $i73, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $i116, $i74, $i75, $i77, $p117, $i118, $i119, $i120, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $p138, $i139, $p140, $i141, $i142, $p143, $p144, $p145, $p146, $i121, $i38 := acpi_processor_update_tsd_coord_loop_$bb31($p0, $i39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p61, $p62, $p63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $i71, $i72, $i73, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $i116, $i74, $i75, $i77, $p117, $i118, $i119, $i120, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $p138, $i139, $p140, $i141, $i142, $p143, $p144, $p145, $p146, $i121, $i38);
    goto $bb31_last;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call {:si_unique_call 1064} $i39 := devirtbounce(0, processors);
    call {:si_unique_call 1065} {:cexpr "__ptr___0"} boogie_si_record_i64($i39);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i38);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i40, 8));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, $i39);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i52 := cpumask_check($i38);
    call {:si_unique_call 1069} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.26, $p0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i57 := variable_test_bit($i53, $p56);
    call {:si_unique_call 1071} {:cexpr "tmp___2"} boogie_si_record_i32($i57);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} cpumask_set_cpu($i38, $p62);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.26, $p0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} cpumask_set_cpu($i38, $p63);
    $p64 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i66 := $ule.i64($i65, 1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $p67 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i68);
    call {:si_unique_call 1074} {:cexpr "count_target"} boogie_si_record_i32($i69);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i71 := cpumask_next($sub.i32(0, 1), $p70);
    call {:si_unique_call 1076} {:cexpr "j"} boogie_si_record_i32($i71);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i72, $i71);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i118 := cpumask_next($sub.i32(0, 1), $p117);
    call {:si_unique_call 1087} {:cexpr "j"} boogie_si_record_i32($i118);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i120 := $ugt.i32($i119, $i118);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i49 := cpumask_next($i38, $p48);
    call {:si_unique_call 1067} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, $i49);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i51 == 1);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb36:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i49;
    goto $bb36_dummy;

  $bb73:
    assume $i120 == 1;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i121 := $i118;
    goto $bb76;

  $bb76:
    call $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $p138, $i139, $p140, $i141, $i142, $p143, $p144, $p145, $p146, $i121 := acpi_processor_update_tsd_coord_loop_$bb76($p45, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $p138, $i139, $p140, $i141, $i142, $p143, $p144, $p145, $p146, $i121, $i38);
    goto $bb76_last;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i38, $i121);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    call {:si_unique_call 1090} $i127 := devirtbounce(0, processors);
    call {:si_unique_call 1091} {:cexpr "__ptr___2"} boogie_si_record_i64($i127);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i121);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i128, 8));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, $i127);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    $p140 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i139, $i141);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    $p143 := $add.ref($add.ref($add.ref($p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    $p145 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} cpumask_copy($p144, $p146);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i124 := cpumask_next($i121, $p123);
    call {:si_unique_call 1089} {:cexpr "j"} boogie_si_record_i32($i124);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i126 := $ugt.i32($i125, $i124);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i126 == 1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb81:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i121 := $i124;
    goto $bb81_dummy;

  $bb87:
    assume $i142 == 1;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb84:
    assume $i135 == 1;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume $i122 == 1;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb45:
    assume $i73 == 1;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i74, $i75 := $i71, 1;
    goto $bb48;

  $bb48:
    call $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $i116, $i74, $i75, $i77 := acpi_processor_update_tsd_coord_loop_$bb48($p0, $p45, $i69, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $p104, $i105, $p106, $i107, $i108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $i116, $i74, $i75, $i77, $i38);
    goto $bb48_last;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i77 := $i74;
    goto $bb70;

  $bb70:
    call $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $i77 := acpi_processor_update_tsd_coord_loop_$bb70($p45, $i76, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $i77, $i38);
    goto $bb70_last;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i38, $i77);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    call {:si_unique_call 1079} $i82 := devirtbounce(0, processors);
    call {:si_unique_call 1080} {:cexpr "__ptr___1"} boogie_si_record_i64($i82);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i77);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i83, 8));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, $i82);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1));
    $p93 := $add.ref($add.ref($add.ref($add.ref($p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    $p95 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i94, $i96);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i77, $p92;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i69);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i101, $i102);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $p104 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i105, $i107);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.26, $p0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} cpumask_set_cpu($i98, $p109);
    $p110 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} cpumask_set_cpu($i98, $p111);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i75, 1);
    call {:si_unique_call 1083} {:cexpr "count"} boogie_si_record_i32($i112);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i114 := cpumask_next($i98, $p113);
    call {:si_unique_call 1085} {:cexpr "j"} boogie_si_record_i32($i114);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i116 := $ugt.i32($i115, $i114);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i116 == 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb68:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i74, $i75 := $i114, $i112;
    goto $bb68_dummy;

  $bb65:
    assume $i108 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb26;

  $bb62:
    assume $i103 == 1;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb26;

  $bb59:
    assume $i97 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i79 := cpumask_next($i77, $p78);
    call {:si_unique_call 1078} {:cexpr "j"} boogie_si_record_i32($i79);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, $i79);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i81 == 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb53:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i77 := $i79;
    goto $bb53_dummy;

  $bb56:
    assume $i90 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume $i76 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb42:
    assume $i66 == 1;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i58 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb26;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb11;

  $bb11:
    call $i13, $i14, $p15, $i16, $i17, $p18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i12 := acpi_processor_update_tsd_coord_loop_$bb11($i13, $i14, $p15, $i16, $i17, $p18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $p27, $i28, $i29, $i30, $i12);
    goto $bb11_last;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 1055} $i13 := devirtbounce(0, processors);
    call {:si_unique_call 1056} {:cexpr "__ptr"} boogie_si_record_i64($i13);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i12);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i14, 8));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $i13);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i23 := cpumask_next($i12, $p22);
    call {:si_unique_call 1058} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, $i23);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb16_dummy;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb21;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb100_dummy:
    assume false;
    return;

  $bb95_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6396;

  $bb81_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  $bb53_dummy:
    assume false;
    return;

  $bb70_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  $bb68_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  $bb36_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;
}



const cpufreq_register_notifier: ref;

axiom cpufreq_register_notifier == $sub.ref(0, 438770);

procedure cpufreq_register_notifier($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpufreq_register_notifier($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} {:cexpr "cpufreq_register_notifier:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1100} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_syscore_ops: ref;

axiom register_syscore_ops == $sub.ref(0, 439802);

procedure register_syscore_ops($p0: ref);
  free requires assertsPassed;



implementation register_syscore_ops($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_ppc_exit: ref;

axiom acpi_processor_ppc_exit == $sub.ref(0, 440834);

procedure acpi_processor_ppc_exit();
  free requires assertsPassed;
  modifies $M.17;



implementation acpi_processor_ppc_exit()
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 1);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.17;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 2));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $M.17 := $i5;
    call {:si_unique_call 1103} {:cexpr "acpi_processor_ppc_status"} boogie_si_record_i32($i5);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_171 := cpufreq_unregister_notifier(acpi_ppc_notifier_block, 1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_thermal_cpufreq_exit: ref;

axiom acpi_thermal_cpufreq_exit == $sub.ref(0, 441866);

procedure acpi_thermal_cpufreq_exit();
  free requires assertsPassed;
  modifies $M.6;



implementation acpi_thermal_cpufreq_exit()
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 0;
    call {:si_unique_call 1105} {:cexpr "acpi_thermal_cpufreq_is_init"} boogie_si_record_i32(0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_172 := cpufreq_unregister_notifier(acpi_thermal_cpufreq_notifier_block, 1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_cpu_notifier: ref;

axiom unregister_cpu_notifier == $sub.ref(0, 442898);

procedure unregister_cpu_notifier($p0: ref);
  free requires assertsPassed;



implementation unregister_cpu_notifier($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    return;
}



const acpi_processor_syscore_exit: ref;

axiom acpi_processor_syscore_exit == $sub.ref(0, 443930);

procedure acpi_processor_syscore_exit();
  free requires assertsPassed;



implementation acpi_processor_syscore_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} unregister_syscore_ops(acpi_processor_syscore_ops);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 444962);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    return;
}



const unregister_syscore_ops: ref;

axiom unregister_syscore_ops == $sub.ref(0, 445994);

procedure unregister_syscore_ops($p0: ref);
  free requires assertsPassed;



implementation unregister_syscore_ops($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    return;
}



const cpufreq_unregister_notifier: ref;

axiom cpufreq_unregister_notifier == $sub.ref(0, 447026);

procedure cpufreq_unregister_notifier($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpufreq_unregister_notifier($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} {:cexpr "cpufreq_unregister_notifier:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 448058);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 449090);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 450122);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 1} true;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 451154);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 452186);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 453218);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 454250);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 455282);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 456314);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 457346);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 458378);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 459410);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 460442);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 461474);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 462506);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 463538);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1116} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1117} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} __VERIFIER_assume($i4);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 464570);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 465602);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 466634);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 467666);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1121} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1123} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1124} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1126} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1127} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1128} __VERIFIER_assume($i7);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1129} __VERIFIER_assume($i11);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 468698);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 469730);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1130} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1131} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1132} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1133} __VERIFIER_assume($i4);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 470762);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 471794);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 472826);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 473858);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 474890);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1134} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1135} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1136} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1137} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1138} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1139} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1141} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1142} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1143} __VERIFIER_assume($i7);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} __VERIFIER_assume($i11);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 475922);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 476954);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 477986);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 479018);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 480050);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 481082);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 482114);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 483146);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 484178);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1145} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1147} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} __VERIFIER_assume($i10);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 485210);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1150} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1151} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 486242);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1153} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1154} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 487274);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1155} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1156} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 488306);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 489338);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1157} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1158} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 490370);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 491402);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 492434);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1160} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1161} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p6 := malloc($i5);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1164} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 493466);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 494498);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.0, $M.65, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.8, $M.6, $M.47, $M.39, $M.77, $M.45, $M.83, $M.17, $M.44, $M.36, $M.37, $M.105, $M.66, $M.25, $M.118, $M.119, $M.120;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1165} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.54 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1167} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1168} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1169} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1170} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1171} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1173} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1174} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1175} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, acpi_idle_driver, .str.10);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(1, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(2, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(3, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(4, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(5, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(6, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(7, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(8, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(16, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(24, 1)), $mul.ref(9, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(904, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(908, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_idle_driver, $mul.ref(0, 920)), $mul.ref(912, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.10, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.ref($M.0, acpi_cpuidle_device, $0.ref);
    $M.65 := 0;
    call {:si_unique_call 1176} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, processor_cooling_ops, processor_get_max_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(processor_cooling_ops, $mul.ref(0, 24)), $mul.ref(8, 1)), processor_get_cur_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(processor_cooling_ops, $mul.ref(0, 24)), $mul.ref(16, 1)), processor_set_cur_state);
    $M.68 := $store.i8($M.68, __kstrtab_acpi_processor_unregister_performance, 97);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(1, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(2, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(3, 1)), 105);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(4, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(5, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(6, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(7, 1)), 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(8, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(9, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(10, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(11, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(12, 1)), 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(13, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(14, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(15, 1)), 117);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(16, 1)), 110);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(17, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(18, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(19, 1)), 103);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(20, 1)), 105);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(21, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(22, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(23, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(24, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(25, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(26, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(27, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(28, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(29, 1)), 102);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(30, 1)), 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(31, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(32, 1)), 109);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(33, 1)), 97);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(34, 1)), 110);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(36, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(__kstrtab_acpi_processor_unregister_performance, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.69 := $store.i8($M.69, __kstrtab_acpi_processor_register_performance, 97);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(1, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(2, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(3, 1)), 105);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(4, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(5, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(6, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(8, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(9, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(10, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(11, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(12, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(13, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(14, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(15, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(16, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(17, 1)), 103);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(18, 1)), 105);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(19, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(20, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(21, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(22, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(23, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(24, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(25, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(26, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(27, 1)), 102);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(28, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(29, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(30, 1)), 109);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(31, 1)), 97);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(32, 1)), 110);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(33, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(34, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(__kstrtab_acpi_processor_register_performance, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.70 := $store.i8($M.70, __kstrtab_acpi_processor_preregister_performance, 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(1, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(2, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(3, 1)), 105);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(4, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(5, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(6, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(7, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(8, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(9, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(10, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(11, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(12, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(13, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(14, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(15, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(16, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(17, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(18, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(19, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(20, 1)), 103);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(21, 1)), 105);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(22, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(23, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(24, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(25, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(26, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(27, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(28, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(29, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(30, 1)), 102);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(31, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(32, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(33, 1)), 109);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(34, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(35, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(36, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(37, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(__kstrtab_acpi_processor_preregister_performance, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i32($M.0, performance_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.129);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(performance_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(performance_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), performance_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.130);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(performance_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.71 := $store.i8($M.71, __kstrtab_acpi_processor_notify_smm, 97);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(1, 1)), 99);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(2, 1)), 112);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(3, 1)), 105);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(5, 1)), 112);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(6, 1)), 114);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(7, 1)), 111);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(8, 1)), 99);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(10, 1)), 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(11, 1)), 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(12, 1)), 111);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(13, 1)), 114);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(18, 1)), 105);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(19, 1)), 102);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(20, 1)), 121);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(21, 1)), 95);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(22, 1)), 115);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(23, 1)), 109);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(24, 1)), 109);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(__kstrtab_acpi_processor_notify_smm, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.72 := $store.i8($M.72, __kstrtab_acpi_processor_get_performance_info, 97);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(1, 1)), 99);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(2, 1)), 112);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(3, 1)), 105);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(4, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(5, 1)), 112);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(6, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(8, 1)), 99);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(9, 1)), 101);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(10, 1)), 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(11, 1)), 115);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(12, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(13, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(14, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(15, 1)), 103);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(16, 1)), 101);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(17, 1)), 116);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(18, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(19, 1)), 112);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(20, 1)), 101);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(21, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(22, 1)), 102);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(23, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(24, 1)), 114);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(25, 1)), 109);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(26, 1)), 97);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(27, 1)), 110);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(28, 1)), 99);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(29, 1)), 101);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(30, 1)), 95);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(31, 1)), 105);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(32, 1)), 110);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(33, 1)), 102);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(34, 1)), 111);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(__kstrtab_acpi_processor_get_performance_info, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, _acpi_module_name___2, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___2, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.73 := $store.ref($M.73, acpi_ppc_notifier_block, acpi_processor_ppc_notifier);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(acpi_ppc_notifier_block, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.75 := $store.i32($M.75, $add.ref($add.ref(acpi_ppc_notifier_block, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.76 := $store.i8($M.76, __kstrtab_acpi_processor_get_bios_limit, 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(1, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(2, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(3, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(4, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(5, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(6, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(7, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(8, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(9, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(10, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(11, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(12, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(13, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(14, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(15, 1)), 103);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(16, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(17, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(19, 1)), 98);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(20, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(21, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(22, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(23, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(24, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(25, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(26, 1)), 109);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(27, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(28, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_acpi_processor_get_bios_limit, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.8 := $sub.i32(0, 1);
    call {:si_unique_call 1177} {:cexpr "ignore_ppc"} boogie_si_record_i32($sub.i32(0, 1));
    $M.6 := 0;
    call {:si_unique_call 1178} {:cexpr "acpi_thermal_cpufreq_is_init"} boogie_si_record_i32(0);
    $M.73 := $store.ref($M.73, acpi_thermal_cpufreq_notifier_block, acpi_thermal_cpufreq_notifier);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(acpi_thermal_cpufreq_notifier_block, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.75 := $store.i32($M.75, $add.ref($add.ref(acpi_thermal_cpufreq_notifier_block, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.47 := $store.i32($M.47, saved_bm_rld, 0);
    call {:si_unique_call 1179} {:cexpr "saved_bm_rld"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, _acpi_module_name___1, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___1, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.39 := 8;
    call {:si_unique_call 1180} {:cexpr "max_cstate"} boogie_si_record_i32(8);
    $M.77 := $store.ref($M.77, processor_power_dmi_table, set_max_cstate);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(8, 1)), .str.104);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 1);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 80);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 104);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 120);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 84);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 104);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 108);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 103);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 76);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 84);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 68);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 2);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 72);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 69);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 56);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 52);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 53);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 77);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 46);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 56);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 54);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 46);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 49);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 51);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 46);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 68);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 46);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 51);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 50);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 49);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 51);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 49);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 51);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 55);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(336, 1)), $i2p.i64.ref(2));
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(0, 1)), set_max_cstate);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(8, 1)), .str.105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 72);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 119);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 108);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 45);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 80);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 107);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 80);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 118);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 108);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 122);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 118);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 53);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 40);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 68);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 53);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 50);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 65);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 35);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 65);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 66);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 65);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 41);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(344, 1)), $mul.ref(336, 1)), $i2p.i64.ref(1));
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(0, 1)), set_max_cstate);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(8, 1)), .str.106);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 65);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 83);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 85);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 84);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 75);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 67);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 109);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 112);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 117);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 73);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 46);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 76);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 56);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 52);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 48);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 66);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 78);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 98);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 107);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 32);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 80);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 67);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(688, 1)), $mul.ref(336, 1)), $i2p.i64.ref(1));
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $0.ref);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(processor_power_dmi_table, $mul.ref(0, 1376)), $mul.ref(1032, 1)), $mul.ref(336, 1)), $0.ref);
    call {:si_unique_call 1181} {:cexpr "c3_cpu_count"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, c3_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.103);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(c3_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    call {:si_unique_call 1182} {:cexpr "bm_check_disable"} boogie_si_record_i32(0);
    $M.45 := 2;
    call {:si_unique_call 1183} {:cexpr "latency_factor"} boogie_si_record_i32(2);
    $M.0 := $store.i8($M.0, _acpi_module_name___0, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name___0, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.83 := $store.i8($M.83, processor_device_ids, 76);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 88);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 67);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 80);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 85);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.83 := $store.i64($M.83, $add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 65);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 67);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 73);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 55);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.83 := $store.i64($M.83, $add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.83 := $store.i64($M.83, $add.ref($add.ref($add.ref(processor_device_ids, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, _acpi_module_name, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(13, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(_acpi_module_name, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.17 := 0;
    call {:si_unique_call 1184} {:cexpr "acpi_processor_ppc_status"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, cpufreq_thermal_reduction_pctg, 0);
    call {:si_unique_call 1185} {:cexpr "cpufreq_thermal_reduction_pctg"} boogie_si_record_i32(0);
    call {:si_unique_call 1186} {:cexpr "__pcpu_unique_cpufreq_thermal_reduction_pctg"} boogie_si_record_i8(0);
    $M.44 := 0;
    call {:si_unique_call 1187} {:cexpr "acpi_processor_registered"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, acpi_cstate, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(4, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(5, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(6, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(7, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(8, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acpi_cstate, $mul.ref(0, 80)), $mul.ref(9, 8)), $0.ref);
    call {:si_unique_call 1188} {:cexpr "__pcpu_unique_acpi_cstate"} boogie_si_record_i8(0);
    call {:si_unique_call 1189} {:cexpr "__pcpu_unique_acpi_cpuidle_device"} boogie_si_record_i8(0);
    $M.36 := 0;
    call {:si_unique_call 1190} {:cexpr "nocst"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1191} {:cexpr "ignore_tpc"} boogie_si_record_i32(0);
    $M.105 := $store.i8($M.105, __mod_acpi__processor_device_ids_device_table, 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i64($M.105, $add.ref($add.ref(__mod_acpi__processor_device_ids_device_table, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.66 := $0.ref;
    $M.25 := 0;
    call {:si_unique_call 1192} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.118 := $store.i8($M.118, .str.86, 65);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(1, 1)), 67);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(2, 1)), 80);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(4, 1)), 32);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(5, 1)), 72);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(6, 1)), 76);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(7, 1)), 84);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.86, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.119 := $store.i8($M.119, .str.87, 65);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(1, 1)), 67);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(2, 1)), 80);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(3, 1)), 73);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(4, 1)), 32);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(5, 1)), 73);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(6, 1)), 79);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(7, 1)), 80);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(8, 1)), 79);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(9, 1)), 82);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(10, 1)), 84);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(11, 1)), 32);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(12, 1)), 48);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(13, 1)), 120);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(14, 1)), 37);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.87, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.120 := $store.i8($M.120, .str.101, 67);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.101, $mul.ref(0, 4)), $mul.ref(1, 1)), 37);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.101, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.120 := $store.i8($M.120, $add.ref($add.ref(.str.101, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 1193} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 495530);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1194} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 496562);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1195} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 497594);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1196} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 498626);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.50, $CurrAddr;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(processor_set_cur_state, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1197} $i2 := processor_set_cur_state($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 499658);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i1) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(acpi_processor_set_throttling_ptc, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(acpi_processor_set_throttling_fadt, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1198} $i1 := acpi_processor_set_throttling_fadt(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1199} $i2 := acpi_processor_set_throttling_ptc(arg, arg1, arg2);
    $r := $i2;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 500690);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 501722);

procedure devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 502754);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1200} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 503786);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 504818);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1201} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 505850);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.1, $M.2, $M.3, $M.4, $M.5, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.44, $M.39, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.50, $M.28, $M.27, $M.52, $M.53, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(set_max_cstate, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i21 == 1);
    $i20 := $eq.ref(acpi_processor_stop, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i20 == 1);
    $i19 := $eq.ref(acpi_processor_start, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i19 == 1);
    $i18 := $eq.ref(acpi_processor_get_throttling_ptc, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i18 == 1);
    $i17 := $eq.ref(acpi_processor_get_throttling_fadt, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(acpi_processor_preregister_performance, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(acpi_processor_notify_smm, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(acpi_processor_get_performance_info, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    call {:si_unique_call 1202} $i1 := acpi_processor_get_performance_info(arg);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    $r := $i1;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1203} $i3 := acpi_processor_notify_smm($p2);
    $r := $i3;
    return;

  $bb4:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1204} $i5 := acpi_processor_preregister_performance($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i17 == 1;
    call {:si_unique_call 1205} $i6 := acpi_processor_get_throttling_fadt(arg);
    $r := $i6;
    return;

  $bb6:
    assume $i18 == 1;
    call {:si_unique_call 1206} $i7 := acpi_processor_get_throttling_ptc(arg);
    $r := $i7;
    return;

  $bb7:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1207} $i9 := acpi_processor_start($p8);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    $r := $i9;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1208} $i11 := acpi_processor_stop($p10);
    $r := $i11;
    return;

  $bb9:
    assume $i21 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1209} $i13 := set_max_cstate($p12);
    $r := $i13;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 506882);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 507914);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1210} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 508946);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 509978);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 511010);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 512042);

procedure devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: ref);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 513074);

procedure devirtbounce.17(funcPtr: ref, arg: i32) returns ($r: i8);



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 514106);

procedure devirtbounce.18(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 515138);

procedure devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(acpi_processor_throttling_fn, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1211} $i2 := acpi_processor_throttling_fn($p1);
    $r := $i2;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 516170);

procedure devirtbounce.20(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 517202);

procedure devirtbounce.21(funcPtr: ref);



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 518234);

procedure devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 519266);

procedure devirtbounce.23(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64, arg5: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64, arg5: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 520298);

procedure devirtbounce.24(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u2: i8;

const $u3: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.0, $M.65, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.8, $M.6, $M.47, $M.39, $M.77, $M.45, $M.83, $M.17, $M.44, $M.36, $M.37, $M.105, $M.66, $M.25, $M.118, $M.119, $M.120, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1212} __SMACK_static_init();
    call {:si_unique_call 1213} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.63, $M.44, $M.64, $M.54, $M.65, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.8, $M.6, $M.47, $M.39, $M.77, $M.45, $M.83, $M.17, $M.36, $M.37, $M.105, $M.66, $M.25, $M.118, $M.119, $M.120, $CurrAddr, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.50, $M.27, $M.52, $M.53;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation acpi_processor_set_throttling_loop_$bb62(in_$p4: ref, in_$p126: ref, in_$p132: ref, in_$p133: ref, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i131: i32, in_vslice_dummy_var_62: i32) returns (out_$p132: ref, out_$p133: ref, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i131: i32, out_vslice_dummy_var_62: i32)
{

  entry:
    out_$p132, out_$p133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i131, out_vslice_dummy_var_62 := in_$p132, in_$p133, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i131, in_vslice_dummy_var_62;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  $bb64:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := out_$i137;
    goto $bb64_dummy;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i139 := $ugt.i32(out_$i138, out_$i137);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} out_$i137 := cpumask_next_and(out_$i131, out_$p135, out_$p136);
    call {:si_unique_call 60} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.0, in_$p126);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_vslice_dummy_var_62 := acpi_processor_throttling_notifier(2, out_$p133);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p133 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p132, out_$i131);
    goto corral_source_split_333;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p132, out_$p133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i131, out_vslice_dummy_var_62 := acpi_processor_set_throttling_loop_$bb62(in_$p4, in_$p126, out_$p132, out_$p133, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i131, out_vslice_dummy_var_62);
    return;

  exit:
    return;
}



procedure acpi_processor_set_throttling_loop_$bb62(in_$p4: ref, in_$p126: ref, in_$p132: ref, in_$p133: ref, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i131: i32, in_vslice_dummy_var_62: i32) returns (out_$p132: ref, out_$p133: ref, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i131: i32, out_vslice_dummy_var_62: i32);
  modifies $M.0, $M.1, $M.50, $CurrAddr, $M.2;



implementation acpi_processor_set_throttling_loop_$bb56(in_$p65: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i1, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i100: i32, in_$p101: ref, in_$i72: i32, in_$i75: i32, in_$i94: i32) returns (out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i1, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i100: i32, out_$p101: ref, out_$i75: i32, out_$i94: i32)
{

  entry:
    out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$i75, out_$i94 := in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i100, in_$p101, in_$i75, in_$i94;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  $bb42:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := out_$i91;
    goto $bb42_dummy;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i94 := in_$i72;
    assume true;
    goto $bb42;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i93 := $ugt.i32(out_$i92, out_$i91);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$i91 := cpumask_next_and(out_$i75, out_$p89, out_$p90);
    call {:si_unique_call 51} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, in_$p65);
    goto corral_source_split_279;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_278;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1176, .str.2, _acpi_module_name___0, 536870912, .str.3, out_$i75);
    goto corral_source_split_276;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i32(out_$i86, 536870912);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_271;

  $bb35:
    assume out_$i85 == 1;
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i83, 4);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_266;

  $bb33:
    assume out_$i82 == 1;
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i64(out_$i81, 0);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p79 := $i2p.i64.ref(out_$i78);
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, out_$i73);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i74, 8));
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i75);
    goto corral_source_split_256;

  $bb32:
    call {:si_unique_call 47} out_$i73 := devirtbounce(0, processors);
    call {:si_unique_call 48} {:cexpr "__ptr"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_255;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb37;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1186, .str.2, _acpi_module_name___0, 536870912, .str.4, out_$i75);
    goto corral_source_split_303;

  $bb50:
    assume out_$i107 == 1;
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i32(out_$i105, 536870912);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_298;

  $bb47:
    assume out_$i104 == 1;
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 4);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_293;

  $bb45:
    assume out_$i99 == 1;
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i100, out_$p101 := out_$i75, out_$p80;
    assume true;
    goto $bb45;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 0);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p96);
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p95, $mul.ref(32, 1));
    goto corral_source_split_287;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_286;

  $bb34:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb49;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$i75, out_$i94 := acpi_processor_set_throttling_loop_$bb56(in_$p65, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, in_$i72, out_$i75, out_$i94);
    return;

  exit:
    return;
}



procedure acpi_processor_set_throttling_loop_$bb56(in_$p65: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i1, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i100: i32, in_$p101: ref, in_$i72: i32, in_$i75: i32, in_$i94: i32) returns (out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i1, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i100: i32, out_$p101: ref, out_$i75: i32, out_$i94: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_set_throttling_loop_$bb31(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i5: i8, in_$p65: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i1, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i100: i32, in_$p101: ref, in_$p108: ref, in_$p109: ref, in_$i110: i1, in_$p111: ref, in_$i112: i8, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i64, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i71: i32, in_$i72: i32, in_$i75: i32, in_$i123: i32, in_$i94: i32) returns (out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i1, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i100: i32, out_$p101: ref, out_$p108: ref, out_$p109: ref, out_$i110: i1, out_$p111: ref, out_$i112: i8, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i64, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i71: i32, out_$i72: i32, out_$i75: i32, out_$i123: i32, out_$i94: i32)
{

  entry:
    out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i71, out_$i72, out_$i75, out_$i123, out_$i94 := in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i100, in_$p101, in_$p108, in_$p109, in_$i110, in_$p111, in_$i112, in_$p113, in_$i114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i71, in_$i72, in_$i75, in_$i123, in_$i94;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_253;

  $bb54:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i71, out_$i72 := out_$i120, out_$i117;
    goto $bb54_dummy;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i117;
    assume true;
    goto $bb54;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$i122 := $ugt.i32(out_$i121, out_$i120);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_$i120 := cpumask_next_and(out_$i100, out_$p118, out_$p119);
    call {:si_unique_call 57} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, in_$p65);
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i64.i32(out_$i116);
    call {:si_unique_call 55} {:cexpr "ret"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$i116 := work_on_cpu(out_$i114, acpi_processor_throttling_fn, out_$p115);
    call {:si_unique_call 54} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i116);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p111, out_$i112);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i1.i8(out_$i110);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i8.i1(in_$i5);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p109, in_$i1);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p108, out_$p101);
    goto corral_source_split_306;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_305;

  $bb46:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i100, out_$p101 := out_$i75, out_$p80;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 0);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p96);
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p95, $mul.ref(32, 1));
    goto corral_source_split_287;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_286;

  $bb34:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i64(out_$i81, 0);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p79 := $i2p.i64.ref(out_$i78);
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, out_$i73);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i74, 8));
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i75);
    goto corral_source_split_256;

  $bb32:
    call {:si_unique_call 47} out_$i73 := devirtbounce(0, processors);
    call {:si_unique_call 48} {:cexpr "__ptr"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_255;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb56:
    call out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$i75, out_$i94 := acpi_processor_set_throttling_loop_$bb56(in_$p65, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$i72, out_$i75, out_$i94);
    goto $bb56_last;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i71;
    goto $bb56;

  $bb42:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := out_$i91;
    assume false;
    return;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i72;
    assume true;
    goto $bb42;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i93 := $ugt.i32(out_$i92, out_$i91);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$i91 := cpumask_next_and(out_$i75, out_$p89, out_$p90);
    call {:si_unique_call 51} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, in_$p65);
    goto corral_source_split_279;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_278;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1176, .str.2, _acpi_module_name___0, 536870912, .str.3, out_$i75);
    goto corral_source_split_276;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i32(out_$i86, 536870912);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_271;

  $bb35:
    assume out_$i85 == 1;
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i83, 4);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_266;

  $bb33:
    assume out_$i82 == 1;
    goto corral_source_split_265;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb37;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 1186, .str.2, _acpi_module_name___0, 536870912, .str.4, out_$i75);
    goto corral_source_split_303;

  $bb50:
    assume out_$i107 == 1;
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i32(out_$i105, 536870912);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_298;

  $bb47:
    assume out_$i104 == 1;
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 4);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_293;

  $bb45:
    assume out_$i99 == 1;
    goto corral_source_split_292;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb49;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i71, out_$i72, out_$i75, out_$i123, out_$i94 := acpi_processor_set_throttling_loop_$bb31(in_$p0, in_$i1, in_$p3, in_$i5, in_$p65, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i100, out_$p101, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i71, out_$i72, out_$i75, out_$i123, out_$i94);
    return;

  exit:
    return;
}



procedure acpi_processor_set_throttling_loop_$bb31(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i5: i8, in_$p65: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i1, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i100: i32, in_$p101: ref, in_$p108: ref, in_$p109: ref, in_$i110: i1, in_$p111: ref, in_$i112: i8, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i64, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$i71: i32, in_$i72: i32, in_$i75: i32, in_$i123: i32, in_$i94: i32) returns (out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i1, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i100: i32, out_$p101: ref, out_$p108: ref, out_$p109: ref, out_$i110: i1, out_$p111: ref, out_$i112: i8, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i64, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$i71: i32, out_$i72: i32, out_$i75: i32, out_$i123: i32, out_$i94: i32);
  modifies $M.5, $M.4, $M.3, $M.0, $M.50, $CurrAddr;



implementation acpi_processor_set_throttling_loop_$bb20(in_$p4: ref, in_$p36: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32, in_vslice_dummy_var_61: i32) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41, out_vslice_dummy_var_61 := in_$p42, in_$p43, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i41, in_vslice_dummy_var_61;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i47;
    goto $bb22_dummy;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i49 := $ugt.i32(out_$i48, out_$i47);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i47 := cpumask_next_and(out_$i41, out_$p45, out_$p46);
    call {:si_unique_call 39} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p36);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_61 := acpi_processor_throttling_notifier(1, out_$p43);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p42, out_$i41);
    goto corral_source_split_205;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41, out_vslice_dummy_var_61 := acpi_processor_set_throttling_loop_$bb20(in_$p4, in_$p36, out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure acpi_processor_set_throttling_loop_$bb20(in_$p4: ref, in_$p36: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32, in_vslice_dummy_var_61: i32) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32, out_vslice_dummy_var_61: i32);
  modifies $M.0, $M.1, $M.50, $CurrAddr, $M.2;



implementation cpufreq_set_cur_state_loop_$bb8(in_$i0: i32, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i15: i32, in_vslice_dummy_var_63: i32) returns (out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i15: i32, out_vslice_dummy_var_63: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i15, out_vslice_dummy_var_63 := in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i15, in_vslice_dummy_var_63;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  $bb13:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i37;
    goto $bb13_dummy;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, out_$i38);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} out_$i37 := cpumask_next(out_$i15, out_$p36);
    call {:si_unique_call 77} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_390;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_389;

  $bb11:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} out_vslice_dummy_var_63 := cpufreq_update_policy(out_$i15);
    goto corral_source_split_387;

  $bb10:
    assume out_$i34 == 1;
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i25, out_$i33);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p30 := $i2p.i64.ref(out_$i29);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i28, out_$i17);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i26, 8));
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i32.i64(in_$i0);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i21);
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, out_$i16);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i18, 8));
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_368;

  $bb9:
    call {:si_unique_call 71} out_$i16 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 72} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i16);
    call {:si_unique_call 73} out_$i17 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 74} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i15, out_vslice_dummy_var_63 := cpufreq_set_cur_state_loop_$bb8(in_$i0, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i15, out_vslice_dummy_var_63);
    return;

  exit:
    return;
}



procedure cpufreq_set_cur_state_loop_$bb8(in_$i0: i32, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i15: i32, in_vslice_dummy_var_63: i32) returns (out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i15: i32, out_vslice_dummy_var_63: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation phys_package_first_cpu_loop_$bb4(in_$i9: i32, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i14: i32) returns (out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i14 := in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i28;
    goto $bb10_dummy;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i28, out_$i29);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} out_$i28 := cpumask_next(out_$i14, out_$p27);
    call {:si_unique_call 91} {:cexpr "tmp"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_444;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_443;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    assume true;
    goto $bb7;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, in_$i9);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 192)), $mul.ref(178, 1));
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, out_$i15);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, out_$p17);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i16, 8));
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i14);
    goto corral_source_split_429;

  $bb5:
    call {:si_unique_call 88} out_$i15 := devirtbounce.2(0, cpu_info);
    call {:si_unique_call 89} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i14 := phys_package_first_cpu_loop_$bb4(in_$i9, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i14);
    return;

  exit:
    return;
}



procedure phys_package_first_cpu_loop_$bb4(in_$i9: i32, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i14: i32) returns (out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i14: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_get_performance_states_loop_$bb24(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p17: ref, in_$p56: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$p101: ref, in_$i102: i64, in_$i103: i32, in_$p104: ref, in_$i105: i64, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$p113: ref, in_$i114: i64, in_$i115: i32, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$i120: i64, in_$i121: i32, in_$i122: i32, in_$i123: i64, in_$p124: ref, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$p130: ref, in_$i131: i64, in_$i133: i1, in_$i134: i32, in_$i136: i1, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$p152: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i135: i32, in_$i156: i32, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i62: i32, in_$i63: i32, in_$i161: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_vslice_dummy_var_73: i32) returns (out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$p101: ref, out_$i102: i64, out_$i103: i32, out_$p104: ref, out_$i105: i64, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$p113: ref, out_$i114: i64, out_$i115: i32, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$i120: i64, out_$i121: i32, out_$i122: i32, out_$i123: i64, out_$p124: ref, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$p130: ref, out_$i131: i64, out_$i133: i1, out_$i134: i32, out_$i136: i1, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$p152: ref, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i135: i32, out_$i156: i32, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i62: i32, out_$i63: i32, out_$i161: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_vslice_dummy_var_73: i32)
{

  entry:
    out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p152, out_$p153, out_$i154, out_$i155, out_$i135, out_$i156, out_$p157, out_$p158, out_$i159, out_$i160, out_$i62, out_$i63, out_$i161, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_vslice_dummy_var_73 := in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$p130, in_$i131, in_$i133, in_$i134, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$i143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$i151, in_$p152, in_$p153, in_$i154, in_$i155, in_$i135, in_$i156, in_$p157, in_$p158, in_$i159, in_$i160, in_$i62, in_$i63, in_$i161, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_vslice_dummy_var_73;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  $bb56:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i156, out_$i135;
    goto $bb56_dummy;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i135;
    assume true;
    goto $bb56;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i160 := $ult.i32(out_$i156, out_$i159);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, out_$p158);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p157, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p157 := $load.ref($M.0, in_$p56);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i62, 1);
    call {:si_unique_call 220} {:cexpr "i"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_1077;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i135 := out_$i155;
    goto $bb49;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i134;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  $bb47:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := out_$i63;
    goto $bb48;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i62;
    goto $bb48;

  $bb46:
    assume out_$i133 == 1;
    goto corral_source_split_1072;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i63, $sub.i32(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_vslice_dummy_var_73 := printk.ref.i32.i64(.str.127, out_$i129, out_$i131);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i64($M.0, out_$p130);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.0, out_$p128);
    goto corral_source_split_1052;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_1051;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i118 == 1;
    goto $bb42;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i64(out_$i117, 0);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i64($M.0, out_$p116);
    goto corral_source_split_1048;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1047;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32.i32.i32.i32.i32.i32.i32(4, 420, .str.123, _acpi_module_name___2, 536870912, .str.126, out_$i62, out_$i100, out_$i103, out_$i106, out_$i109, out_$i112, out_$i115);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i64.i32(out_$i114);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i64($M.0, out_$p113);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(40, 1));
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$i112 := $trunc.i64.i32(out_$i111);
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i64($M.0, out_$p110);
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(32, 1));
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i64.i32(out_$i108);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.0, out_$p107);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(24, 1));
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i64.i32(out_$i105);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(16, 1));
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i64.i32(out_$i102);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.0, out_$p101);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(8, 1));
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i64.i32(out_$i99);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i64($M.0, out_$p98);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  $bb38:
    assume out_$i97 == 1;
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i95, 536870912);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_1022;

  $bb35:
    assume out_$i94 == 1;
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i32(out_$i92, 4);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_1017;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} amd_fixup_frequency(out_$p69, out_$i62);
    goto corral_source_split_1016;

  $bb33:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i84;
    assume true;
    goto $bb33;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$i84 := acpi_extract_package(out_$p83, in_$p2, in_$p3);
    call {:si_unique_call 214} {:cexpr "status"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(out_$p81, $mul.ref(out_$i82, 24));
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i62);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(in_$p17);
    goto corral_source_split_999;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 400, .str.123, _acpi_module_name___2, 536870912, .str.60, out_$i62);
    goto corral_source_split_997;

  $bb29:
    assume out_$i78 == 1;
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i77 := $and.i32(out_$i76, 536870912);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_992;

  $bb26:
    assume out_$i75 == 1;
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i73, 4);
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p72, out_$p69);
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, out_$p70, 48);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 48));
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i62);
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_977;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb28;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb37;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i123, out_$i126);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i126 := $mul.i64(out_$i125, 1000);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i64($M.0, out_$p124);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i32.i64(out_$i122);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$i122 := $mul.i32(out_$i121, 1000);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i64.i32(out_$i120);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i64($M.0, out_$p119);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  $bb43:
    assume !(out_$i118 == 1);
    goto corral_source_split_1058;

  $bb51:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := out_$i63;
    goto $bb55;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i154;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i32(out_$i63, 1);
    call {:si_unique_call 223} {:cexpr "last_invalid"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    out_cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 222} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p152, out_$p153, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.0;
    out_cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 221} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p144, out_$p145, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_20;
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(out_$p142, $mul.ref(out_$i143, 1));
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i63);
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1087;

  $bb52:
    assume out_$i137 == 1;
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i137 := $ugt.i64(48, 63);
    goto corral_source_split_1084;

  $bb50:
    assume out_$i136 == 1;
    goto corral_source_split_1083;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i63, $sub.i32(0, 1));
    goto corral_source_split_1070;

  $bb45:
    assume !(out_$i127 == 1);
    goto corral_source_split_1069;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$p153 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref(out_$p150, $mul.ref(out_$i151, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(out_$i63);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p150 := $bitcast.ref.ref(out_$p149);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, out_$p148);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.0, out_$p146);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1098;

  $bb53:
    assume !(out_$i137 == 1);
    goto corral_source_split_1097;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p152, out_$p153, out_$i154, out_$i155, out_$i135, out_$i156, out_$p157, out_$p158, out_$i159, out_$i160, out_$i62, out_$i63, out_$i161, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_vslice_dummy_var_73 := acpi_processor_get_performance_states_loop_$bb24(in_$p0, in_$p2, in_$p3, in_$p17, in_$p56, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p152, out_$p153, out_$i154, out_$i155, out_$i135, out_$i156, out_$p157, out_$p158, out_$i159, out_$i160, out_$i62, out_$i63, out_$i161, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure acpi_processor_get_performance_states_loop_$bb24(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p17: ref, in_$p56: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$p101: ref, in_$i102: i64, in_$i103: i32, in_$p104: ref, in_$i105: i64, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$p113: ref, in_$i114: i64, in_$i115: i32, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$i120: i64, in_$i121: i32, in_$i122: i32, in_$i123: i64, in_$p124: ref, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$p130: ref, in_$i131: i64, in_$i133: i1, in_$i134: i32, in_$i136: i1, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$p152: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$i135: i32, in_$i156: i32, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i62: i32, in_$i63: i32, in_$i161: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_vslice_dummy_var_73: i32) returns (out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$p101: ref, out_$i102: i64, out_$i103: i32, out_$p104: ref, out_$i105: i64, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$p113: ref, out_$i114: i64, out_$i115: i32, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$i120: i64, out_$i121: i32, out_$i122: i32, out_$i123: i64, out_$p124: ref, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$p130: ref, out_$i131: i64, out_$i133: i1, out_$i134: i32, out_$i136: i1, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$p152: ref, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$i135: i32, out_$i156: i32, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i62: i32, out_$i63: i32, out_$i161: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_vslice_dummy_var_73: i32);
  modifies $M.0, $CurrAddr, $M.15, $M.14;



implementation paravirt_read_msr_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} paravirt_read_msr_loop_$bb3();
    return;

  exit:
    return;
}



procedure paravirt_read_msr_loop_$bb3();



implementation acpi_processor_preregister_performance_loop_$bb125(in_$i85: i32, in_$i231: i64, in_$i232: i64, in_$p233: ref, in_$i234: i64, in_$i235: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i64, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$i230: i32) returns (out_$i231: i64, out_$i232: i64, out_$p233: ref, out_$i234: i64, out_$i235: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i64, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$i230: i32)
{

  entry:
    out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$i230 := in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$p236, in_$p237, in_$i238, in_$i239, in_$p240, in_$p241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$p249, in_$p250, in_$p251, in_$p252, in_$p253, in_$p254, in_$p255, in_$p256, in_$p257, in_$p258, in_$p259, in_$p260, in_$i230;
    goto $bb125, exit;

  $bb125:
    assume {:verifier.code 0} true;
    goto corral_source_split_1785;

  $bb133:
    assume out_$i247 == 1;
    assume {:verifier.code 0} true;
    out_$i230 := out_$i245;
    goto $bb133_dummy;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i247 := $ugt.i32(out_$i246, out_$i245);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} out_$i245 := cpumask_next(out_$i230, out_$p244);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32(out_$i245);
    goto corral_source_split_1804;

  $bb132:
    assume {:verifier.code 0} true;
    out_$p244 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1803;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume {:verifier.code 0} true;
    assume out_$i243 == 1;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    assume out_$i239 == 1;
    goto $bb128;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb129;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i64(out_$i238, 0);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i238 := $p2i.ref.i64(out_$p237);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p237 := $load.ref($M.0, out_$p236);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$p236 := $i2p.i64.ref(out_$i235);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i235 := $add.i64(out_$i234, out_$i231);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i64($M.0, out_$p233);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i232, 8));
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$i232 := $zext.i32.i64(out_$i230);
    goto corral_source_split_1788;

  $bb126:
    call {:si_unique_call 361} out_$i231 := devirtbounce(0, processors);
    call {:si_unique_call 362} {:cexpr "__ptr___6"} boogie_si_record_i64(out_$i231);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i64(out_$i242, 0);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i242 := $p2i.ref.i64(out_$p241);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p241 := $load.ref($M.0, out_$p240);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(out_$p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1798;

  $bb129:
    assume !(out_$i239 == 1);
    goto corral_source_split_1797;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p260, $0.ref);
    goto corral_source_split_1829;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1828;

  $bb137:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p259, 2);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(out_$p258, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$p258 := $load.ref($M.0, out_$p257);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} cpumask_set_cpu(out_$i230, out_$p256);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p256 := $load.ref($M.0, out_$p255);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(out_$p254, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p254 := $load.ref($M.0, out_$p253);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(out_$p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} cpumask_clear(out_$p252);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$p252 := $load.ref($M.0, out_$p251);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p250, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p250 := $load.ref($M.0, out_$p249);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p237, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1813;

  $bb136:
    assume out_$i248 == 1;
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i248 := $ne.i32(in_$i85, 0);
    goto corral_source_split_1810;

  $bb131:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133_dummy:
    call {:si_unique_call 1} out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$i230 := acpi_processor_preregister_performance_loop_$bb125(in_$i85, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$p240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$i230);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb125(in_$i85: i32, in_$i231: i64, in_$i232: i64, in_$p233: ref, in_$i234: i64, in_$i235: i64, in_$p236: ref, in_$p237: ref, in_$i238: i64, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i242: i64, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$i230: i32) returns (out_$i231: i64, out_$i232: i64, out_$p233: ref, out_$i234: i64, out_$i235: i64, out_$p236: ref, out_$p237: ref, out_$i238: i64, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i242: i64, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$i230: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.27;



implementation acpi_processor_preregister_performance_loop_$bb106(in_$p97: ref, in_$p112: ref, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$i207: i64, in_$p208: ref, in_$i209: i64, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i188: i32, in_$i90: i32) returns (out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$i207: i64, out_$p208: ref, out_$i209: i64, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i188: i32)
{

  entry:
    out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188 := in_$i189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$p199, in_$p200, in_$i201, in_$i202, in_$p203, in_$p204, in_$p206, in_$i207, in_$p208, in_$i209, in_$i210, in_$p211, in_$p212, in_$p213, in_$i214, in_$p215, in_$p216, in_$p217, in_$p218, in_$p219, in_$p220, in_$p221, in_$p222, in_$p223, in_$p224, in_$p225, in_$i188;
    goto $bb106, exit;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  $bb111:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i188 := out_$i191;
    goto $bb111_dummy;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i193 := $ugt.i32(out_$i192, out_$i191);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out_$i191 := cpumask_next(out_$i188, out_$p190);
    call {:si_unique_call 357} {:cexpr "j"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_1738;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1737;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i189 == 1;
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(in_$i90, out_$i188);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb114:
    assume out_$i202 == 1;
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i64(out_$i201, 0);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p200);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p200 := $load.ref($M.0, out_$p199);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p199 := $i2p.i64.ref(out_$i198);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i64(out_$i197, out_$i194);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i64($M.0, out_$p196);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i195, 8));
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i32.i64(out_$i188);
    goto corral_source_split_1745;

  $bb113:
    call {:si_unique_call 358} out_$i194 := devirtbounce(0, processors);
    call {:si_unique_call 359} {:cexpr "__ptr___5"} boogie_si_record_i64(out_$i194);
    goto corral_source_split_1744;

  $bb109:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb117:
    assume out_$i210 == 1;
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i210 := $ne.i64(out_$i207, out_$i209);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i64($M.0, out_$p208);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i64($M.0, out_$p206);
    out_$p208 := $add.ref($add.ref($add.ref(in_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p204, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$p204 := $load.ref($M.0, out_$p203);
    goto corral_source_split_1757;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1756;

  $bb115:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} cpumask_copy(out_$p221, out_$p225);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$p225 := $load.ref($M.0, out_$p224);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(out_$p223, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p223 := $load.ref($M.0, out_$p222);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p221 := $load.ref($M.0, out_$p220);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(out_$p219, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$p219 := $load.ref($M.0, out_$p218);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p217, out_$i214);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p216, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p216 := $load.ref($M.0, out_$p215);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.0, out_$p213);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(out_$p212, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p212 := $load.ref($M.0, out_$p211);
    goto corral_source_split_1766;

  $bb119:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1765;

  $bb118:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb111_dummy:
    call {:si_unique_call 1} out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188 := acpi_processor_preregister_performance_loop_$bb106(in_$p97, in_$p112, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188, in_$i90);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb106(in_$p97: ref, in_$p112: ref, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$i207: i64, in_$p208: ref, in_$i209: i64, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i188: i32, in_$i90: i32) returns (out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$i207: i64, out_$p208: ref, out_$i209: i64, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i188: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.28;



implementation acpi_processor_preregister_performance_loop_$bb82(in_$p1: ref, in_$p97: ref, in_$p112: ref, in_$i124: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i147: i32, in_$i90: i32) returns (out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i147: i32)
{

  entry:
    out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147 := in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p165, in_$i166, in_$p167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$p176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$i147;
    goto $bb82, exit;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  $bb87:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := out_$i150;
    goto $bb87_dummy;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i152 := $ugt.i32(out_$i151, out_$i150);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_$i150 := cpumask_next(out_$i147, out_$p149);
    call {:si_unique_call 349} {:cexpr "j"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_1675;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1674;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i148 == 1;
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(in_$i90, out_$i147);
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb90:
    assume out_$i161 == 1;
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i64(out_$i160, 0);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$p158 := $i2p.i64.ref(out_$i157);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i64(out_$i156, out_$i153);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i154, 8));
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i32.i64(out_$i147);
    goto corral_source_split_1682;

  $bb89:
    call {:si_unique_call 350} out_$i153 := devirtbounce(0, processors);
    call {:si_unique_call 351} {:cexpr "__ptr___4"} boogie_si_record_i64(out_$i153);
    goto corral_source_split_1681;

  $bb85:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb93:
    assume out_$i169 == 1;
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i64(out_$i166, out_$i168);
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i64($M.0, out_$p167);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i64($M.0, out_$p165);
    out_$p167 := $add.ref($add.ref($add.ref(in_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p162);
    goto corral_source_split_1694;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p159, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1693;

  $bb91:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} cpumask_set_cpu(out_$i147, out_$p183);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p181, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p181 := $load.ref($M.0, out_$p180);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} cpumask_set_cpu(out_$i147, out_$p179);
    goto corral_source_split_1717;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.26, in_$p1);
    goto corral_source_split_1716;

  $bb100:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i175, out_$i177);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.0, out_$p176);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.0, out_$p174);
    out_$p176 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1710;

  $bb98:
    out_$p174 := $add.ref($add.ref($add.ref(in_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1709;

  $bb97:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i64(out_$i171, out_$i172);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(in_$i124);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i64($M.0, out_$p170);
    goto corral_source_split_1703;

  $bb95:
    out_$p170 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1702;

  $bb94:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb87_dummy:
    call {:si_unique_call 1} out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147 := acpi_processor_preregister_performance_loop_$bb82(in_$p1, in_$p97, in_$p112, in_$i124, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147, in_$i90);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb82(in_$p1: ref, in_$p97: ref, in_$p112: ref, in_$i124: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i147: i32, in_$i90: i32) returns (out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i147: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_preregister_performance_loop_$bb56(in_$p1: ref, in_$i91: i64, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$i123: i64, in_$i124: i32, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i147: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$i207: i64, in_$p208: ref, in_$i209: i64, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i188: i32, in_$i90: i32) returns (out_$i91: i64, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$i123: i64, out_$i124: i32, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i147: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$i207: i64, out_$p208: ref, out_$i209: i64, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i188: i32, out_$i90: i32)
{

  entry:
    out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147, out_$p184, out_$i185, out_$i186, out_$i187, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188, out_$i90 := in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p128, in_$p129, in_$p130, in_$p131, in_$i132, in_$i133, in_$p134, in_$p135, in_$p136, in_$p137, in_$i138, in_$i139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p165, in_$i166, in_$p167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$p176, in_$i177, in_$i178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$i147, in_$p184, in_$i185, in_$i186, in_$i187, in_$i189, in_$p190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$p199, in_$p200, in_$i201, in_$i202, in_$p203, in_$p204, in_$p206, in_$i207, in_$p208, in_$i209, in_$i210, in_$p211, in_$p212, in_$p213, in_$i214, in_$p215, in_$p216, in_$p217, in_$p218, in_$p219, in_$p220, in_$p221, in_$p222, in_$p223, in_$p224, in_$p225, in_$i188, in_$i90;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  $bb61:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := out_$i101;
    goto $bb61_dummy;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$i103 := $ugt.i32(out_$i102, out_$i101);
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_$i101 := cpumask_next(out_$i90, out_$p100);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1598;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1597;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i99 == 1;
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i64(out_$i98, 0);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$p96 := $i2p.i64.ref(out_$i95);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i94, out_$i91);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.0, out_$p93);
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i92, 8));
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i32.i64(out_$i90);
    goto corral_source_split_1586;

  $bb57:
    call {:si_unique_call 335} out_$i91 := devirtbounce(0, processors);
    call {:si_unique_call 336} {:cexpr "__ptr___3"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb64:
    assume out_$i110 == 1;
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_$i109 := variable_test_bit(out_$i105, out_$p108);
    call {:si_unique_call 342} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.26, in_$p1);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i104);
    goto corral_source_split_1605;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} out_$i104 := cpumask_check(out_$i90);
    call {:si_unique_call 340} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1604;

  $bb59:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb67:
    assume out_$i121 == 1;
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i121 := $ule.i64(out_$i120, 1);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i64($M.0, out_$p119);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} cpumask_set_cpu(out_$i90, out_$p118);
    out_$p119 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.26, in_$p1);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} cpumask_set_cpu(out_$i90, out_$p117);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_1615;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1614;

  $bb65:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(out_$i187 == 1);
    goto $bb105;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb112:
    assume !(out_$i193 == 1);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i193 := $ugt.i32(out_$i192, out_$i191);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out_$i191 := cpumask_next(out_$i188, out_$p190);
    call {:si_unique_call 357} {:cexpr "j"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_1738;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1737;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i189 == 1;
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i90, out_$i188);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    call out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188 := acpi_processor_preregister_performance_loop_$bb106(out_$p97, out_$p112, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188, out_$i90);
    goto $bb106_last;

  $bb106_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i188 := out_$i185;
    goto $bb106;

  $bb111:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i188 := out_$i191;
    assume false;
    return;

  $bb103:
    assume out_$i187 == 1;
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i187 := $ugt.i32(out_$i186, out_$i185);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} out_$i185 := cpumask_next($sub.i32(0, 1), out_$p184);
    call {:si_unique_call 355} {:cexpr "j"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_1725;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p184 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1724;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb81;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb88:
    assume !(out_$i152 == 1);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i152 := $ugt.i32(out_$i151, out_$i150);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_$i150 := cpumask_next(out_$i147, out_$p149);
    call {:si_unique_call 349} {:cexpr "j"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_1675;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1674;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb84:
    assume out_$i148 == 1;
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i90, out_$i147);
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    call out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147 := acpi_processor_preregister_performance_loop_$bb82(in_$p1, out_$p97, out_$p112, out_$i124, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147, out_$i90);
    goto $bb82_last;

  $bb82_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i144;
    goto $bb82;

  $bb87:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := out_$i150;
    assume false;
    return;

  $bb79:
    assume out_$i146 == 1;
    goto corral_source_split_1666;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i146 := $ugt.i32(out_$i145, out_$i144);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} out_$i144 := cpumask_next($sub.i32(0, 1), out_$p143);
    call {:si_unique_call 347} {:cexpr "j"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_1646;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1645;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, 2);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p129, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1636;

  $bb70:
    assume out_$i127 == 1;
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i64(out_$i126, 252);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.0, out_$p125);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i64.i32(out_$i123);
    call {:si_unique_call 345} {:cexpr "count_target"} boogie_si_record_i32(out_$i124);
    out_$p125 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i64($M.0, out_$p122);
    goto corral_source_split_1630;

  $bb69:
    out_$p122 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1629;

  $bb68:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p136, 1);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p135, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1651;

  $bb73:
    assume out_$i133 == 1;
    goto corral_source_split_1650;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i64(out_$i132, 254);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i64($M.0, out_$p131);
    goto corral_source_split_1642;

  $bb71:
    assume !(out_$i127 == 1);
    out_$p131 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1641;

  $bb77:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p142, 3);
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1661;

  $bb76:
    assume out_$i139 == 1;
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i64(out_$i138, 253);
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.0, out_$p137);
    goto corral_source_split_1657;

  $bb74:
    assume !(out_$i133 == 1);
    out_$p137 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1656;

  $bb90:
    assume out_$i161 == 1;
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i64(out_$i160, 0);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$p158 := $i2p.i64.ref(out_$i157);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i64(out_$i156, out_$i153);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i154, 8));
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i32.i64(out_$i147);
    goto corral_source_split_1682;

  $bb89:
    call {:si_unique_call 350} out_$i153 := devirtbounce(0, processors);
    call {:si_unique_call 351} {:cexpr "__ptr___4"} boogie_si_record_i64(out_$i153);
    goto corral_source_split_1681;

  $bb85:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb93:
    assume out_$i169 == 1;
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i64(out_$i166, out_$i168);
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i64($M.0, out_$p167);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i64($M.0, out_$p165);
    out_$p167 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p162);
    goto corral_source_split_1694;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p159, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1693;

  $bb91:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} cpumask_set_cpu(out_$i147, out_$p183);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p181, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p181 := $load.ref($M.0, out_$p180);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} cpumask_set_cpu(out_$i147, out_$p179);
    goto corral_source_split_1717;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.26, in_$p1);
    goto corral_source_split_1716;

  $bb100:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i175, out_$i177);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.0, out_$p176);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.0, out_$p174);
    out_$p176 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1710;

  $bb98:
    out_$p174 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_1709;

  $bb97:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i64(out_$i171, out_$i172);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i124);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i64($M.0, out_$p170);
    goto corral_source_split_1703;

  $bb95:
    out_$p170 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_1702;

  $bb94:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb114:
    assume out_$i202 == 1;
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i64(out_$i201, 0);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p200);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p200 := $load.ref($M.0, out_$p199);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p199 := $i2p.i64.ref(out_$i198);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i64(out_$i197, out_$i194);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i64($M.0, out_$p196);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i195, 8));
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i32.i64(out_$i188);
    goto corral_source_split_1745;

  $bb113:
    call {:si_unique_call 358} out_$i194 := devirtbounce(0, processors);
    call {:si_unique_call 359} {:cexpr "__ptr___5"} boogie_si_record_i64(out_$i194);
    goto corral_source_split_1744;

  $bb109:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb117:
    assume out_$i210 == 1;
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i210 := $ne.i64(out_$i207, out_$i209);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i64($M.0, out_$p208);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i64($M.0, out_$p206);
    out_$p208 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p204, $mul.ref(0, 112)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$p204 := $load.ref($M.0, out_$p203);
    goto corral_source_split_1757;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1756;

  $bb115:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} cpumask_copy(out_$p221, out_$p225);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$p225 := $load.ref($M.0, out_$p224);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(out_$p223, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p223 := $load.ref($M.0, out_$p222);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p221 := $load.ref($M.0, out_$p220);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(out_$p219, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$p219 := $load.ref($M.0, out_$p218);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p217, out_$i214);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p216, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p216 := $load.ref($M.0, out_$p215);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(out_$p200, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.0, out_$p213);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(out_$p212, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p212 := $load.ref($M.0, out_$p211);
    goto corral_source_split_1766;

  $bb119:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p97, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1765;

  $bb118:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb61_dummy:
    call {:si_unique_call 1} out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147, out_$p184, out_$i185, out_$i186, out_$i187, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188, out_$i90 := acpi_processor_preregister_performance_loop_$bb56(in_$p1, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$i147, out_$p184, out_$i185, out_$i186, out_$i187, out_$i189, out_$p190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$p199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$p215, out_$p216, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$p224, out_$p225, out_$i188, out_$i90);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb56(in_$p1: ref, in_$i91: i64, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p112: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$i123: i64, in_$i124: i32, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i147: i32, in_$p184: ref, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i64, in_$i195: i64, in_$p196: ref, in_$i197: i64, in_$i198: i64, in_$p199: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$i207: i64, in_$p208: ref, in_$i209: i64, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$i188: i32, in_$i90: i32) returns (out_$i91: i64, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p112: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$i123: i64, out_$i124: i32, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i147: i32, out_$p184: ref, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i64, out_$i195: i64, out_$p196: ref, out_$i197: i64, out_$i198: i64, out_$p199: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$i207: i64, out_$p208: ref, out_$i209: i64, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$i188: i32, out_$i90: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.28;



implementation acpi_processor_preregister_performance_loop_$bb34(in_$p0: ref, in_$i48: i32, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i49: i32, in_$i63: i32) returns (out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i49: i32, out_$i63: i32)
{

  entry:
    out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i49, out_$i63 := in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i49, in_$i63;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  $bb39:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i60;
    goto $bb39_dummy;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i63 := in_$i48;
    assume true;
    goto $bb39;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i62 := $ugt.i32(out_$i61, out_$i60);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$i60 := cpumask_next(out_$i49, out_$p59);
    call {:si_unique_call 323} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1536;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1535;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i58 == 1;
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i64(out_$i57, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p55 := $i2p.i64.ref(out_$i54);
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, out_$i50);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i51, 8));
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1524;

  $bb35:
    call {:si_unique_call 320} out_$i50 := devirtbounce(0, processors);
    call {:si_unique_call 321} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb43:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i49;
    assume true;
    goto $bb43;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$i75 := acpi_processor_get_psd(out_$p56);
    call {:si_unique_call 328} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} cpumask_set_cpu(out_$i49, out_$p74);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p70, out_$p69);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, out_$i64);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i65, 8));
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1543;

  $bb41:
    call {:si_unique_call 324} out_$i64 := devirtbounce.7(0, in_$p0);
    call {:si_unique_call 325} {:cexpr "__ptr___2"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1542;

  $bb37:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i49, out_$i63 := acpi_processor_preregister_performance_loop_$bb34(in_$p0, in_$i48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i49, out_$i63);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb34(in_$p0: ref, in_$i48: i32, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i49: i32, in_$i63: i32) returns (out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i49: i32, out_$i63: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.9, $M.10, $M.12, $M.13, $M.14, $M.15;



implementation acpi_processor_preregister_performance_loop_$bb33(in_$p0: ref, in_$i47: i32, in_$i48: i32, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i49: i32, in_$i82: i32, in_$i63: i32) returns (out_$i47: i32, out_$i48: i32, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i49: i32, out_$i82: i32, out_$i63: i32)
{

  entry:
    out_$i47, out_$i48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i49, out_$i82, out_$i63 := in_$i47, in_$i48, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i49, in_$i82, in_$i63;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  $bb44:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i79, $sub.i32(0, 22);
    goto $bb44_dummy;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(0, 22);
    assume true;
    goto $bb44;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, out_$i79);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$i79 := cpumask_next(out_$i77, out_$p78);
    call {:si_unique_call 330} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_1560;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1559;

  $bb42:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i49;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$i75 := acpi_processor_get_psd(out_$p56);
    call {:si_unique_call 328} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} cpumask_set_cpu(out_$i49, out_$p74);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p70, out_$p69);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p56, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, out_$i64);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i65, 8));
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1543;

  $bb41:
    call {:si_unique_call 324} out_$i64 := devirtbounce.7(0, in_$p0);
    call {:si_unique_call 325} {:cexpr "__ptr___2"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1542;

  $bb37:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i64(out_$i57, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p55 := $i2p.i64.ref(out_$i54);
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, out_$i50);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i51, 8));
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i49);
    goto corral_source_split_1524;

  $bb35:
    call {:si_unique_call 320} out_$i50 := devirtbounce(0, processors);
    call {:si_unique_call 321} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    call out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i49, out_$i63 := acpi_processor_preregister_performance_loop_$bb34(in_$p0, out_$i48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i49, out_$i63);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    goto $bb34;

  $bb39:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i60;
    assume false;
    return;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i48;
    assume true;
    goto $bb39;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i62 := $ugt.i32(out_$i61, out_$i60);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$i60 := cpumask_next(out_$i49, out_$p59);
    call {:si_unique_call 323} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1536;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1535;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i58 == 1;
    goto corral_source_split_1533;

  $bb43:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i49, out_$i82, out_$i63 := acpi_processor_preregister_performance_loop_$bb33(in_$p0, out_$i47, out_$i48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i49, out_$i82, out_$i63);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb33(in_$p0: ref, in_$i47: i32, in_$i48: i32, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i49: i32, in_$i82: i32, in_$i63: i32) returns (out_$i47: i32, out_$i48: i32, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i49: i32, out_$i82: i32, out_$i63: i32);
  modifies $M.9, $M.10, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.0, $M.50;



implementation acpi_processor_preregister_performance_loop_$bb11(in_$p0: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i13: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i13 := in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i13;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  $bb16:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i24;
    goto $bb16_dummy;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, out_$i24);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} out_$i24 := cpumask_next(out_$i13, out_$p23);
    call {:si_unique_call 313} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1476;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_1475;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i22 == 1;
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, 0);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, out_$i14);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i15, 8));
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i13);
    goto corral_source_split_1464;

  $bb12:
    call {:si_unique_call 310} out_$i14 := devirtbounce(0, processors);
    call {:si_unique_call 311} {:cexpr "__ptr"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p39 := $i2p.i64.ref(out_$i38);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, out_$i34);
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i35, 8));
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i13);
    goto corral_source_split_1500;

  $bb24:
    assume !(out_$i33 == 1);
    call {:si_unique_call 316} out_$i34 := devirtbounce.7(0, in_$p0);
    call {:si_unique_call 317} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_1499;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, 0);
    goto corral_source_split_1495;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1494;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1483;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(0, 736)), $mul.ref(488, 1));
    goto corral_source_split_1482;

  $bb14:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i13 := acpi_processor_preregister_performance_loop_$bb11(in_$p0, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i13);
    return;

  exit:
    return;
}



procedure acpi_processor_preregister_performance_loop_$bb11(in_$p0: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i13: i32) returns (out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i13: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_get_power_info_cst_loop_$bb32(in_$p0: ref, in_$p2: ref, in_$p20: ref, in_$i37: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i8, in_$p99: ref, in_$i100: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i32, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i8, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i147: i32, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i32, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$p179: ref, in_$p180: ref, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$p186: ref, in_$i187: i1, in_$i188: i32, in_$i64: i32, in_$i65: i32, in_$i192: i32, in_$i193: i64, in_$i194: i1, in_$i53: i32, in_$i54: i32, in_$i195: i32, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i8, out_$p99: ref, out_$i100: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i32, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i8, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i147: i32, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i32, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$p179: ref, out_$p180: ref, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$p186: ref, out_$i187: i1, out_$i188: i32, out_$i64: i32, out_$i65: i32, out_$i192: i32, out_$i193: i64, out_$i194: i1, out_$i53: i32, out_$i54: i32, out_$i195: i32, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32)
{

  entry:
    out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p144, out_$p145, out_$p146, out_$i147, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p182, out_$p183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i64, out_$i65, out_$i192, out_$i193, out_$i194, out_$i53, out_$i54, out_$i195, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$p141, in_$p142, in_$p144, in_$p145, in_$p146, in_$i147, in_$p149, in_$i150, in_$i151, in_$i152, in_$p153, in_$p154, in_$p155, in_$p156, in_$p157, in_$p158, in_$i159, in_$i160, in_$p161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p176, in_$p177, in_$i178, in_$p179, in_$p180, in_$p182, in_$p183, in_$i184, in_$p185, in_$p186, in_$i187, in_$i188, in_$i64, in_$i65, in_$i192, in_$i193, in_$i194, in_$i53, in_$i54, in_$i195, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;

  $bb90:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$i53, out_$i54 := out_$i65, out_$i192;
    goto $bb90_dummy;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i195 := out_$i65;
    assume true;
    goto $bb90;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i194 := $ule.i64(out_$i193, in_$i37);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i193 := $sext.i32.i64(out_$i192);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i64, 1);
    call {:si_unique_call 538} {:cexpr "i"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_3014;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i173;
    goto $bb36;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i106;
    goto $bb36;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i106;
    goto $bb36;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i106;
    goto $bb36;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i53;
    goto $bb36;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i53;
    goto $bb36;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i53;
    goto $bb36;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i53;
    goto $bb36;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i54, out_$i53;
    goto $bb36;

  $bb34:
    assume out_$i63 == 1;
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 4);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.11, out_$p61);
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p58, $mul.ref(out_$i59, 24));
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i54);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p20);
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 537} out_cmdloc_dummy_var_32 := $memset.i8(out_cmdloc_dummy_var_31, out_$p55, 0, 52, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_3001;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb38:
    assume out_$i69 == 1;
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 4);
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.11, out_$p67);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3018;

  $bb35:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41:
    assume out_$i75 == 1;
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 3);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.40, out_$p73);
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.11, out_$p71);
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3026;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3025;

  $bb39:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume out_$i87 == 1;
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 127);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.41, out_$p84);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3044;

  $bb44:
    assume out_$i83 == 1;
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 1);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i81);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.41, out_$p80);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p78);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.40, out_$p77);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_3034;

  $bb42:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume out_$i94 == 1;
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 1);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.40, out_$p92);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p90, $mul.ref(1, 24));
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.11, out_$p89);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3051;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb46;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb46;

  $bb65:
    assume !(out_$i129 == 1);
    goto corral_source_split_3131;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i8($M.0, out_$p126);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3114;

  $bb62:
    assume !(out_$i124 == 1);
    goto corral_source_split_3113;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 0);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out_$i123 := acpi_processor_ffh_cstate_probe(out_$i122, in_$p2, out_$p79);
    call {:si_unique_call 541} {:cexpr "tmp"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(16, 1));
    goto corral_source_split_3098;

  $bb59:
    assume out_$i120 == 1;
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 127);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.41, out_$p117);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p79, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p116, 0);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p115, out_$i114);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(9, 1));
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i8(out_$i113);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i112, 1);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i106);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, out_$i109);
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i64.i32(out_$i108);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.42, out_$p107);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p79, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3079;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i53;
    goto $bb58;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i105;
    goto $bb58;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i53, 1);
    call {:si_unique_call 539} {:cexpr "current_count"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3076;

  $bb56:
    assume out_$i104 == 1;
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 1);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3070;

  $bb53:
    assume out_$i100 == 1;
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i54, 1);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p99, out_$i98);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i64.i8(out_$i97);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i64($M.40, out_$p96);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_3061;

  $bb51:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb55;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb55;

  $bb77:
    assume out_$i160 == 1;
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i159, 1);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.40, out_$p158);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref(out_$p156, $mul.ref(2, 24));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.11, out_$p155);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p154, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3153;

  $bb75:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p153, 1);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  $bb74:
    assume out_$i152 == 1;
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 1);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i150);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.0, out_$p149);
    goto corral_source_split_3145;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3144;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_vslice_dummy_var_102 := snprintf.ref.i64.ref.i32(out_$p145, 32, .str.87, out_$i147);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} out_vslice_dummy_var_104 := snprintf.ref.i64.ref(out_$p142, 32, .str.86);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p140, 2);
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3138;

  $bb70:
    assume out_$i139 == 1;
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i64(out_$i138, 2);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.0, boot_option_idle_override);
    goto corral_source_split_3134;

  $bb67:
    assume out_$i137 == 1;
    goto corral_source_split_3133;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 1);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.0, out_$p134);
    goto corral_source_split_3120;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(1, 1));
    goto corral_source_split_3119;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p125, 1);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3110;

  $bb61:
    assume out_$i124 == 1;
    goto corral_source_split_3109;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} out_vslice_dummy_var_103 := snprintf.ref.i64.ref(out_$p132, 32, .str.86);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, 2);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3125;

  $bb64:
    assume out_$i129 == 1;
    goto corral_source_split_3124;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb69;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.0, out_$p146);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(17, 1));
    goto corral_source_split_3104;

  $bb60:
    assume !(out_$i120 == 1);
    goto corral_source_split_3103;

  $bb80:
    assume out_$i172 == 1;
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i171, 1);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.40, out_$p170);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p169);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref(out_$p168, $mul.ref(3, 24));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p168 := $load.ref($M.11, out_$p167);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(out_$p166, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p165, out_$i164);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$i164 := $trunc.i64.i32(out_$i163);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i64($M.40, out_$p162);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p161, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3164;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_3163;

  $bb78:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb87:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i188 := out_$i173;
    assume true;
    goto $bb87;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i187 := $sgt.i32(out_$i173, 6);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.0;
    out_cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 547} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p185, out_$p186, 52, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_38;
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 546} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p179, out_$p180, 52, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$p180 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref(out_$p177, $mul.ref(out_$i178, 1));
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i173);
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$p177 := $bitcast.ref.ref(out_$p176);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3183;

  $bb83:
    assume out_$i174 == 1;
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$i174 := $ugt.i64(52, 63);
    goto corral_source_split_3180;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i106, 1);
    call {:si_unique_call 545} {:cexpr "current_count"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_3179;

  $bb81:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$p186 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref(out_$p183, $mul.ref(out_$i184, 1));
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i173);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(out_$p182);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3191;

  $bb84:
    assume !(out_$i174 == 1);
    goto corral_source_split_3190;

  $bb90_dummy:
    call {:si_unique_call 1} out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p144, out_$p145, out_$p146, out_$i147, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p182, out_$p183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i64, out_$i65, out_$i192, out_$i193, out_$i194, out_$i53, out_$i54, out_$i195, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104 := acpi_processor_get_power_info_cst_loop_$bb32(in_$p0, in_$p2, in_$p20, in_$i37, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p144, out_$p145, out_$p146, out_$i147, out_$p149, out_$i150, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p182, out_$p183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i64, out_$i65, out_$i192, out_$i193, out_$i194, out_$i53, out_$i54, out_$i195, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure acpi_processor_get_power_info_cst_loop_$bb32(in_$p0: ref, in_$p2: ref, in_$p20: ref, in_$i37: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i8, in_$p99: ref, in_$i100: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i32, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i8, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i147: i32, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i32, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$p179: ref, in_$p180: ref, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p185: ref, in_$p186: ref, in_$i187: i1, in_$i188: i32, in_$i64: i32, in_$i65: i32, in_$i192: i32, in_$i193: i64, in_$i194: i1, in_$i53: i32, in_$i54: i32, in_$i195: i32, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i8, out_$p99: ref, out_$i100: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i32, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i8, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i147: i32, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i32, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$p179: ref, out_$p180: ref, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p185: ref, out_$p186: ref, out_$i187: i1, out_$i188: i32, out_$i64: i32, out_$i65: i32, out_$i192: i32, out_$i193: i64, out_$i194: i1, out_$i53: i32, out_$i54: i32, out_$i195: i32, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32);
  modifies $M.0;



implementation acpi_processor_power_verify_loop_$bb1(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i26: i32, in_$i31: i32, in_$i32: i1, in_$i3: i32, in_$i4: i32, in_$i34: i32, in_$i35: i1, in_$i33: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i26: i32, out_$i31: i32, out_$i32: i1, out_$i3: i32, out_$i4: i32, out_$i34: i32, out_$i35: i1, out_$i33: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i26, out_$i31, out_$i32, out_$i3, out_$i4, out_$i34, out_$i35, out_$i33 := in_$p6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i26, in_$i31, in_$i32, in_$i3, in_$i4, in_$i34, in_$i35, in_$i33;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;

  $bb22:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i26, out_$i31;
    goto $bb22_dummy;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i26;
    assume true;
    goto $bb22;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i32 := $ule.i32(out_$i31, 7);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i4, 1);
    call {:si_unique_call 555} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3372;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i30;
    goto $bb20;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i3;
    goto $bb20;

  $bb18:
    assume out_$i25 == 1;
    goto corral_source_split_3369;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_3360;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3359;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p17, 1);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  $bb11:
    assume out_$i16 == 1;
    goto corral_source_split_3355;

  $bb4:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb3:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(1, 1));
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 52));
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i4);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_3341;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3340;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb25:
    assume out_$i35 == 1;
    goto corral_source_split_3382;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i3;
    assume true;
    goto $bb25;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i35 := $ule.i32(out_$i4, out_$i34);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i34 := $M.39;
    goto corral_source_split_3337;

  $bb14:
    assume out_$i20 == 1;
    goto corral_source_split_3364;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(4, 1));
    goto corral_source_split_3348;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_3347;

  $bb5:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p21, 1);
    goto corral_source_split_3367;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(0, 1));
    goto corral_source_split_3366;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} acpi_processor_power_verify_c3(in_$p0, out_$p9);
    goto corral_source_split_3353;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_3352;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb10;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i3, 1);
    call {:si_unique_call 558} {:cexpr "working"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} tsc_check_state(out_$i29);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 52)), $mul.ref(1, 1));
    goto corral_source_split_3376;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} lapic_timer_check_state(out_$i4, in_$p0, out_$p9);
    goto corral_source_split_3375;

  $bb19:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i26, out_$i31, out_$i32, out_$i3, out_$i4, out_$i34, out_$i35, out_$i33 := acpi_processor_power_verify_loop_$bb1(in_$p0, out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i26, out_$i31, out_$i32, out_$i3, out_$i4, out_$i34, out_$i35, out_$i33);
    return;

  exit:
    return;
}



procedure acpi_processor_power_verify_loop_$bb1(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i26: i32, in_$i31: i32, in_$i32: i1, in_$i3: i32, in_$i4: i32, in_$i34: i32, in_$i35: i1, in_$i33: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i26: i32, out_$i31: i32, out_$i32: i1, out_$i3: i32, out_$i4: i32, out_$i34: i32, out_$i35: i1, out_$i33: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation acpi_processor_get_throttling_states_loop_$bb27(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p18: ref, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i58: i32) returns (out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i58: i32)
{

  entry:
    out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p85, out_$i86, out_$i87, out_$i93, out_$i94, out_$i95, out_$i58 := in_$p60, in_$p61, in_$i62, in_$p63, in_$p64, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p85, in_$i86, in_$i87, in_$i93, in_$i94, in_$i95, in_$i58;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;

  $bb41:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i93;
    goto $bb41_dummy;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i95 := $ult.i32(out_$i93, out_$i94);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, in_$p55);
    goto corral_source_split_4843;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i58, 1);
    call {:si_unique_call 726} {:cexpr "i"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_4842;

  $bb39:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i64(out_$i86, 0);
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_4832;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 40)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  $bb36:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb36;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} out_$i78 := acpi_extract_package(out_$p77, in_$p2, in_$p3);
    call {:si_unique_call 721} {:cexpr "status"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p75, $mul.ref(out_$i76, 24));
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i58);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4817;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p18);
    goto corral_source_split_4816;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} acpi_debug_print.i32.i32.ref.ref.i32.ref.i32(4, 589, .str.59, _acpi_module_name___0, 536870912, .str.60, out_$i58);
    goto corral_source_split_4814;

  $bb32:
    assume out_$i72 == 1;
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(out_$i70, 536870912);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, acpi_dbg_layer);
    goto corral_source_split_4809;

  $bb29:
    assume out_$i69 == 1;
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 4);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, acpi_dbg_level);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p66, out_$p63);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, out_$p64, 40);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p61, $mul.ref(out_$i62, 40));
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i58);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_4796;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb31;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p85, out_$i86, out_$i87, out_$i93, out_$i94, out_$i95, out_$i58 := acpi_processor_get_throttling_states_loop_$bb27(in_$p0, in_$p2, in_$p3, in_$p18, in_$p55, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p85, out_$i86, out_$i87, out_$i93, out_$i94, out_$i95, out_$i58);
    return;

  exit:
    return;
}



procedure acpi_processor_get_throttling_states_loop_$bb27(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p18: ref, in_$p55: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i58: i32) returns (out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i58: i32);
  modifies $M.15, $M.14;



implementation acpi_processor_get_fadt_info_loop_$bb26(in_$p0: ref, in_$i42: i32, in_$p44: ref, in_$i48: i16, in_$i49: i32, in_$i50: i16, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i64, in_$p59: ref, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i64, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i47: i32) returns (out_$i48: i16, out_$i49: i32, out_$i50: i16, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i64, out_$p59: ref, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i64, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i47: i32)
{

  entry:
    out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p71, out_$i72, out_$i73, out_$i74, out_$i47 := in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p71, in_$i72, in_$i73, in_$i74, in_$i47;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  $bb28:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i72;
    goto $bb28_dummy;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i72, out_$i73);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, in_$p44);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i47, 1);
    call {:si_unique_call 764} {:cexpr "i"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p71, out_$i66);
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref(out_$i67, 4)), $mul.ref(0, 1));
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i47);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    goto corral_source_split_5119;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(1000, out_$i64);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    out_$i64 := $mul.i32(out_$i61, out_$i63);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_5116;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i16(out_$i47);
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_5114;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i16(in_$i42);
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p59, out_$i54);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(132, 1)), $mul.ref(out_$i55, 4)), $mul.ref(2, 1));
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i47);
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(1000, out_$i52);
    goto corral_source_split_5108;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    out_$i52 := $mul.i32(out_$i49, out_$i51);
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_5106;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i16(out_$i47);
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_5104;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(in_$i42);
    goto corral_source_split_5103;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p71, out_$i72, out_$i73, out_$i74, out_$i47 := acpi_processor_get_fadt_info_loop_$bb26(in_$p0, in_$i42, in_$p44, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p71, out_$i72, out_$i73, out_$i74, out_$i47);
    return;

  exit:
    return;
}



procedure acpi_processor_get_fadt_info_loop_$bb26(in_$p0: ref, in_$i42: i32, in_$p44: ref, in_$i48: i16, in_$i49: i32, in_$i50: i16, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i64, in_$p59: ref, in_$i60: i16, in_$i61: i32, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i64, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i47: i32) returns (out_$i48: i16, out_$i49: i32, out_$i50: i16, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i64, out_$p59: ref, out_$i60: i16, out_$i61: i32, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i64, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i47: i32);
  modifies $M.0;



implementation paravirt_write_msr_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} paravirt_write_msr_loop_$bb3();
    return;

  exit:
    return;
}



procedure paravirt_write_msr_loop_$bb3();



implementation acpi_get_throttling_state_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i6 := in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i19, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i19 := $ult.i32(out_$i17, out_$i18);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5492;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i6, 1);
    call {:si_unique_call 834} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5491;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i13, in_$i1);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.0, out_$p12);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 40)), $mul.ref(24, 1));
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5480;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i6 := acpi_get_throttling_state_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i6);
    return;

  exit:
    return;
}



procedure acpi_get_throttling_state_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32);



implementation arch_local_irq_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_enable_loop_$bb3();



implementation main_loop_$bb1(in_$i0: i64, in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_vslice_dummy_var_159, out_vslice_dummy_var_160 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_vslice_dummy_var_159, in_vslice_dummy_var_160;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 925} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i4);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb43_dummy;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb21:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.58 := out_$i26;
    call {:si_unique_call 932} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 1);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i25 := $M.58;
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5871;

  $bb32:
    assume out_$i24 == 1;
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i23 := $M.63;
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.63 := out_$i22;
    call {:si_unique_call 930} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5866;

  SeqInstr_60:
    goto corral_source_split_5865;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_$i22 := acpi_processor_start(out_$p21);
    goto SeqInstr_59;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$p21 := $M.54;
    goto corral_source_split_5864;

  $bb30:
    assume out_$i20 == 1;
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i19 := $M.55;
    goto corral_source_split_5860;

  $bb28:
    assume out_$i18 == 1;
    goto corral_source_split_5859;

  $bb23:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 928} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i14 == 1;
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i13 := $M.55;
    goto corral_source_split_5850;

  $bb18:
    assume out_$i12 == 1;
    goto corral_source_split_5849;

  $bb14:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb38:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.58 := out_$i32;
    call {:si_unique_call 935} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i31, 1);
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i31 := $M.58;
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} out_vslice_dummy_var_159 := acpi_processor_stop(out_$p29);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$p29 := $M.54;
    goto corral_source_split_5877;

  $bb37:
    assume out_$i28 == 1;
    goto corral_source_split_5876;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 2);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i27 := $M.55;
    goto corral_source_split_5856;

  $bb25:
    assume out_$i17 == 1;
    goto corral_source_split_5855;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_stop();
    goto corral_source_split_5884;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb27;

  $bb45:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_main_exported_4();
    goto corral_source_split_5887;

  $bb44:
    assume out_$i34 == 1;
    goto corral_source_split_5886;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i33 := $M.56;
    goto corral_source_split_5842;

  $bb16:
    assume out_$i11 == 1;
    goto corral_source_split_5841;

  $bb15:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb48:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_main_exported_1();
    goto corral_source_split_5890;

  $bb47:
    assume out_$i36 == 1;
    goto corral_source_split_5889;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    out_$i35 := $M.57;
    goto corral_source_split_5846;

  $bb17:
    assume !(out_$i11 == 1);
    goto corral_source_split_5845;

  $bb51:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb62;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$i45 := $M.58;
    goto corral_source_split_5903;

  $bb60:
    assume out_$i44 == 1;
    goto corral_source_split_5902;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 2);
    goto corral_source_split_5900;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    out_$i43 := $M.59;
    goto corral_source_split_5899;

  $bb58:
    assume out_$i42 == 1;
    goto corral_source_split_5898;

  $bb53:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} out_$i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i39);
    call {:si_unique_call 941} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i39);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i38 == 1;
    goto corral_source_split_5892;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i37 := $M.59;
    goto corral_source_split_5834;

  $bb12:
    assume out_$i9 == 1;
    goto corral_source_split_5833;

  $bb5:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb69:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_initialize_device_driver_6();
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} ldv_initialize_thermal_cooling_device_ops_2();
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5925;

  $bb73:
    assume out_$i53 == 1;
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_5922;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i52 := $M.64;
    goto corral_source_split_5921;

  $bb71:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i50 := $M.64;
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.64 := out_$i49;
    call {:si_unique_call 946} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} out_$i49 := acpi_processor_driver_init();
    goto corral_source_split_5913;

  $bb68:
    assume out_$i48 == 1;
    goto corral_source_split_5912;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i47 := $M.59;
    goto corral_source_split_5895;

  $bb55:
    assume out_$i41 == 1;
    goto corral_source_split_5894;

  $bb54:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_stop();
    goto corral_source_split_5935;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb57;

  $bb81:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_main_exported_3();
    goto corral_source_split_5938;

  $bb80:
    assume out_$i55 == 1;
    goto corral_source_split_5937;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i54 := $M.60;
    goto corral_source_split_5838;

  $bb13:
    assume !(out_$i9 == 1);
    goto corral_source_split_5837;

  $bb84:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_main_exported_2();
    goto corral_source_split_5941;

  $bb83:
    assume out_$i57 == 1;
    goto corral_source_split_5940;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i56 := $M.61;
    goto corral_source_split_5826;

  $bb7:
    assume out_$i7 == 1;
    goto corral_source_split_5825;

  $bb6:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb87:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5951;

  SeqInstr_63:
    goto corral_source_split_5950;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} out_vslice_dummy_var_160 := acpi_cpu_soft_notify(in_$p3, in_$i0, in_$p1);
    goto SeqInstr_62;

  $bb91:
    assume out_$i63 == 1;
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i62 := $M.62;
    goto corral_source_split_5946;

  $bb89:
    assume out_$i61 == 1;
    goto corral_source_split_5945;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 961} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 962} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume out_$i59 == 1;
    goto corral_source_split_5943;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i58 := $M.62;
    goto corral_source_split_5830;

  $bb9:
    assume out_$i8 == 1;
    goto corral_source_split_5829;

  $bb8:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} ldv_stop();
    goto corral_source_split_5953;

  $bb90:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_stop();
    goto corral_source_split_5955;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb11;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_vslice_dummy_var_159, out_vslice_dummy_var_160 := main_loop_$bb1(in_$i0, in_$p1, in_$p3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_vslice_dummy_var_159, out_vslice_dummy_var_160);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i64, in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32);
  modifies $M.58, $M.55, $M.63, $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.1, $M.2, $M.3, $M.4, $M.5, $M.39, $M.44, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.28, $M.49, $M.50, $M.27, $M.52, $M.53, assertsPassed, $M.65, $M.56, $M.47, $M.8, $M.57, $M.54, $M.60, $M.66, $M.61, $M.62, $M.59, $M.64, $M.6;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation acpi_processor_update_tsd_coord_loop_$bb95(in_$i33: i32, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i1, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i152: i32) returns (out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i1, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i152: i32)
{

  entry:
    out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i152 := in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$p168, in_$p169, in_$p170, in_$p171, in_$p172, in_$i152;
    goto $bb95, exit;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_6396;

  $bb100:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i152 := out_$i163;
    goto $bb100_dummy;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i165 := $ugt.i32(out_$i164, out_$i163);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6412;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} out_$i163 := cpumask_next(out_$i152, out_$p162);
    call {:si_unique_call 1096} {:cexpr "i"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_6411;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6410;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume out_$i161 == 1;
    goto corral_source_split_6408;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i64(out_$i160, 0);
    goto corral_source_split_6406;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_6404;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    out_$p158 := $i2p.i64.ref(out_$i157);
    goto corral_source_split_6403;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i64(out_$i156, out_$i153);
    goto corral_source_split_6402;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i154, 8));
    goto corral_source_split_6400;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i32.i64(out_$i152);
    goto corral_source_split_6399;

  $bb96:
    call {:si_unique_call 1093} out_$i153 := devirtbounce(0, processors);
    call {:si_unique_call 1094} {:cexpr "__ptr___3"} boogie_si_record_i64(out_$i153);
    goto corral_source_split_6398;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb104:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p172, 252);
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} cpumask_set_cpu(out_$i152, out_$p171);
    out_$p172 := $add.ref($add.ref($add.ref(out_$p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(128, 1));
    goto corral_source_split_6424;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} cpumask_clear(out_$p169);
    out_$p170 := $add.ref($add.ref($add.ref(out_$p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6422;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    out_$p169 := $load.ref($M.0, out_$p168);
    goto corral_source_split_6421;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref($add.ref(out_$p159, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6420;

  $bb103:
    assume out_$i166 == 1;
    goto corral_source_split_6419;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i32(in_$i33, 0);
    goto corral_source_split_6417;

  $bb98:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100_dummy:
    call {:si_unique_call 1} out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i152 := acpi_processor_update_tsd_coord_loop_$bb95(in_$i33, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i152);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb95(in_$i33: i32, in_$i153: i64, in_$i154: i64, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i1, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i152: i32) returns (out_$i153: i64, out_$i154: i64, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i1, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i152: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.27;



implementation acpi_processor_update_tsd_coord_loop_$bb76(in_$p45: ref, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i64, in_$i128: i64, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i121: i32, in_$i38: i32) returns (out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i64, out_$i128: i64, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i121: i32)
{

  entry:
    out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121 := in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p145, in_$p146, in_$i121;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  $bb81:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := out_$i124;
    goto $bb81_dummy;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i126 := $ugt.i32(out_$i125, out_$i124);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$i124 := cpumask_next(out_$i121, out_$p123);
    call {:si_unique_call 1089} {:cexpr "j"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_6364;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6363;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i122 == 1;
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(in_$i38, out_$i121);
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb84:
    assume out_$i135 == 1;
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i64(out_$i134, 0);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$p132 := $i2p.i64.ref(out_$i131);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i64(out_$i130, out_$i127);
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i64($M.0, out_$p129);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i128, 8));
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i32.i64(out_$i121);
    goto corral_source_split_6371;

  $bb83:
    call {:si_unique_call 1090} out_$i127 := devirtbounce(0, processors);
    call {:si_unique_call 1091} {:cexpr "__ptr___2"} boogie_si_record_i64(out_$i127);
    goto corral_source_split_6370;

  $bb79:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume out_$i142 == 1;
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i139, out_$i141);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i64($M.0, out_$p140);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i64($M.0, out_$p138);
    out_$p140 := $add.ref($add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6383;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref($add.ref(out_$p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6382;

  $bb85:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} cpumask_copy(out_$p144, out_$p146);
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$p146 := $load.ref($M.0, out_$p145);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    out_$p145 := $add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6390;

  $bb89:
    out_$p143 := $add.ref($add.ref($add.ref(out_$p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6389;

  $bb88:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81_dummy:
    call {:si_unique_call 1} out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121 := acpi_processor_update_tsd_coord_loop_$bb76(in_$p45, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121, in_$i38);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb76(in_$p45: ref, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i64, in_$i128: i64, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i121: i32, in_$i38: i32) returns (out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i64, out_$i128: i64, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i121: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.28;



implementation acpi_processor_update_tsd_coord_loop_$bb70(in_$p45: ref, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$i77: i32, in_$i38: i32) returns (out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$i77: i32)
{

  entry:
    out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77 := in_$i76, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i77;
    goto $bb70, exit;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  $bb53:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i79;
    goto $bb53_dummy;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, out_$i79);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_$i79 := cpumask_next(out_$i77, out_$p78);
    call {:si_unique_call 1078} {:cexpr "j"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6296;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6295;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i76 == 1;
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(in_$i38, out_$i77);
    goto corral_source_split_6291;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb56:
    assume out_$i90 == 1;
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, out_$i82);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i83, 8));
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i32.i64(out_$i77);
    goto corral_source_split_6303;

  $bb55:
    call {:si_unique_call 1079} out_$i82 := devirtbounce(0, processors);
    call {:si_unique_call 1080} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_6302;

  $bb51:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb59:
    assume out_$i97 == 1;
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i77, out_$p92;
    assume true;
    goto $bb59;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i94, out_$i96);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.0, out_$p95);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.0, out_$p93);
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6315;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1));
    out_$p93 := $add.ref($add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6314;

  $bb57:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77 := acpi_processor_update_tsd_coord_loop_$bb70(in_$p45, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77, in_$i38);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb70(in_$p45: ref, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$i77: i32, in_$i38: i32) returns (out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$i77: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_update_tsd_coord_loop_$bb48(in_$p0: ref, in_$p45: ref, in_$i69: i32, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i74: i32, in_$i75: i32, in_$i77: i32, in_$i38: i32) returns (out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i74: i32, out_$i75: i32, out_$i77: i32)
{

  entry:
    out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77 := in_$i76, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i74, in_$i75, in_$i77;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  $bb68:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i74, out_$i75 := out_$i114, out_$i112;
    goto $bb68_dummy;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$i116 := $ugt.i32(out_$i115, out_$i114);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} out_$i114 := cpumask_next(out_$i98, out_$p113);
    call {:si_unique_call 1085} {:cexpr "j"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i75, 1);
    call {:si_unique_call 1083} {:cexpr "count"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} cpumask_set_cpu(out_$i98, out_$p111);
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} cpumask_set_cpu(out_$i98, out_$p109);
    out_$p110 := $add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6337;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.26, in_$p0);
    goto corral_source_split_6336;

  $bb66:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i105, out_$i107);
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i64($M.0, out_$p106);
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_6329;

  $bb64:
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_6328;

  $bb63:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i101, out_$i102);
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(in_$i69);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.0, out_$p100);
    goto corral_source_split_6322;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6321;

  $bb60:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i77, out_$p92;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i94, out_$i96);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.0, out_$p95);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.0, out_$p93);
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(in_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6315;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1));
    out_$p93 := $add.ref($add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6314;

  $bb57:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, out_$i82);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i83, 8));
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i32.i64(out_$i77);
    goto corral_source_split_6303;

  $bb55:
    call {:si_unique_call 1079} out_$i82 := devirtbounce(0, processors);
    call {:si_unique_call 1080} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_6302;

  $bb51:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(in_$i38, out_$i77);
    goto corral_source_split_6291;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb70:
    call out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77 := acpi_processor_update_tsd_coord_loop_$bb70(in_$p45, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77, in_$i38);
    goto $bb70_last;

  $bb70_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i74;
    goto $bb70;

  $bb53:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i79;
    assume false;
    return;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, out_$i79);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_$i79 := cpumask_next(out_$i77, out_$p78);
    call {:si_unique_call 1078} {:cexpr "j"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6296;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6295;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i76 == 1;
    goto corral_source_split_6293;

  $bb56:
    assume out_$i90 == 1;
    goto corral_source_split_6312;

  $bb59:
    assume out_$i97 == 1;
    goto corral_source_split_6319;

  $bb68_dummy:
    call {:si_unique_call 1} out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77 := acpi_processor_update_tsd_coord_loop_$bb48(in_$p0, in_$p45, in_$i69, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77, in_$i38);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb48(in_$p0: ref, in_$p45: ref, in_$i69: i32, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i74: i32, in_$i75: i32, in_$i77: i32, in_$i38: i32) returns (out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i74: i32, out_$i75: i32, out_$i77: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation acpi_processor_update_tsd_coord_loop_$bb31(in_$p0: ref, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i74: i32, in_$i75: i32, in_$i77: i32, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i64, in_$i128: i64, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i121: i32, in_$i38: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i74: i32, out_$i75: i32, out_$i77: i32, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i64, out_$i128: i64, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i121: i32, out_$i38: i32)
{

  entry:
    out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77, out_$p117, out_$i118, out_$i119, out_$i120, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121, out_$i38 := in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i76, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i74, in_$i75, in_$i77, in_$p117, in_$i118, in_$i119, in_$i120, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p145, in_$p146, in_$i121, in_$i38;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  $bb36:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i49;
    goto $bb36_dummy;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    out_$i51 := $ugt.i32(out_$i50, out_$i49);
    goto corral_source_split_6255;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_$i49 := cpumask_next(out_$i38, out_$p48);
    call {:si_unique_call 1067} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6253;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6252;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i47 == 1;
    goto corral_source_split_6250;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_6246;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    out_$p44 := $i2p.i64.ref(out_$i43);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, out_$i39);
    goto corral_source_split_6244;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i40, 8));
    goto corral_source_split_6242;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i38);
    goto corral_source_split_6241;

  $bb32:
    call {:si_unique_call 1064} out_$i39 := devirtbounce(0, processors);
    call {:si_unique_call 1065} {:cexpr "__ptr___0"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume out_$i58 == 1;
    goto corral_source_split_6267;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_6265;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} out_$i57 := variable_test_bit(out_$i53, out_$p56);
    call {:si_unique_call 1071} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_6264;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_6263;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_6262;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.26, in_$p0);
    goto corral_source_split_6261;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(out_$i52);
    goto corral_source_split_6260;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} out_$i52 := cpumask_check(out_$i38);
    call {:si_unique_call 1069} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_6259;

  $bb34:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume out_$i66 == 1;
    goto corral_source_split_6277;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$i66 := $ule.i64(out_$i65, 1);
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} cpumask_set_cpu(out_$i38, out_$p63);
    out_$p64 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_6273;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.26, in_$p0);
    goto corral_source_split_6272;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} cpumask_set_cpu(out_$i38, out_$p62);
    goto corral_source_split_6271;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_6270;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6269;

  $bb40:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i120 == 1);
    goto $bb75;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb82:
    assume !(out_$i126 == 1);
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i126 := $ugt.i32(out_$i125, out_$i124);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$i124 := cpumask_next(out_$i121, out_$p123);
    call {:si_unique_call 1089} {:cexpr "j"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_6364;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6363;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i122 == 1;
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i38, out_$i121);
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    call out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121 := acpi_processor_update_tsd_coord_loop_$bb76(out_$p45, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121, out_$i38);
    goto $bb76_last;

  $bb76_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i118;
    goto $bb76;

  $bb81:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := out_$i124;
    assume false;
    return;

  $bb73:
    assume out_$i120 == 1;
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$i120 := $ugt.i32(out_$i119, out_$i118);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} out_$i118 := cpumask_next($sub.i32(0, 1), out_$p117);
    call {:si_unique_call 1087} {:cexpr "j"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_6351;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6350;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb54:
    assume !(out_$i81 == 1);
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, out_$i79);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_$i79 := cpumask_next(out_$i77, out_$p78);
    call {:si_unique_call 1078} {:cexpr "j"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6296;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6295;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i76 == 1;
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i38, out_$i77);
    goto corral_source_split_6291;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb70:
    call out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77 := acpi_processor_update_tsd_coord_loop_$bb70(out_$p45, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i77, out_$i38);
    goto $bb70_last;

  $bb70_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i74;
    goto $bb70;

  $bb53:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i79;
    assume false;
    return;

  $bb48:
    call out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77 := acpi_processor_update_tsd_coord_loop_$bb48(in_$p0, out_$p45, out_$i69, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77, out_$i38);
    goto $bb48_last;

  $bb48_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75 := out_$i71, 1;
    goto $bb48;

  $bb68:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i74, out_$i75 := out_$i114, out_$i112;
    assume false;
    return;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$i116 := $ugt.i32(out_$i115, out_$i114);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} out_$i114 := cpumask_next(out_$i98, out_$p113);
    call {:si_unique_call 1085} {:cexpr "j"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i75, 1);
    call {:si_unique_call 1083} {:cexpr "count"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} cpumask_set_cpu(out_$i98, out_$p111);
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} cpumask_set_cpu(out_$i98, out_$p109);
    out_$p110 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6337;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.26, in_$p0);
    goto corral_source_split_6336;

  $bb66:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i105, out_$i107);
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i64($M.0, out_$p106);
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_6329;

  $bb64:
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_6328;

  $bb63:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i101, out_$i102);
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i69);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.0, out_$p100);
    goto corral_source_split_6322;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6321;

  $bb60:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i98, out_$p99 := out_$i77, out_$p92;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i94, out_$i96);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.0, out_$p95);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.0, out_$p93);
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6315;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1));
    out_$p93 := $add.ref($add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6314;

  $bb57:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, out_$i82);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i83, 8));
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i32.i64(out_$i77);
    goto corral_source_split_6303;

  $bb55:
    call {:si_unique_call 1079} out_$i82 := devirtbounce(0, processors);
    call {:si_unique_call 1080} {:cexpr "__ptr___1"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_6302;

  $bb51:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume out_$i73 == 1;
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i73 := $ugt.i32(out_$i72, out_$i71);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} out_$i71 := cpumask_next($sub.i32(0, 1), out_$p70);
    call {:si_unique_call 1076} {:cexpr "j"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i64.i32(out_$i68);
    call {:si_unique_call 1074} {:cexpr "count_target"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i64($M.0, out_$p67);
    goto corral_source_split_6280;

  $bb44:
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_6279;

  $bb43:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb56:
    assume out_$i90 == 1;
    goto corral_source_split_6312;

  $bb59:
    assume out_$i97 == 1;
    goto corral_source_split_6319;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb47;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb69:
    assume !(out_$i116 == 1);
    goto corral_source_split_6346;

  $bb84:
    assume out_$i135 == 1;
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i64(out_$i134, 0);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$p132 := $i2p.i64.ref(out_$i131);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i64(out_$i130, out_$i127);
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i64($M.0, out_$p129);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i128, 8));
    goto corral_source_split_6372;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i32.i64(out_$i121);
    goto corral_source_split_6371;

  $bb83:
    call {:si_unique_call 1090} out_$i127 := devirtbounce(0, processors);
    call {:si_unique_call 1091} {:cexpr "__ptr___2"} boogie_si_record_i64(out_$i127);
    goto corral_source_split_6370;

  $bb79:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume out_$i142 == 1;
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i139, out_$i141);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i64($M.0, out_$p140);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i64($M.0, out_$p138);
    out_$p140 := $add.ref($add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6383;

  $bb86:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref($add.ref(out_$p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_6382;

  $bb85:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} cpumask_copy(out_$p144, out_$p146);
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$p146 := $load.ref($M.0, out_$p145);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    out_$p145 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6390;

  $bb89:
    out_$p143 := $add.ref($add.ref($add.ref(out_$p133, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(96, 1));
    goto corral_source_split_6389;

  $bb88:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77, out_$p117, out_$i118, out_$i119, out_$i120, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121, out_$i38 := acpi_processor_update_tsd_coord_loop_$bb31(in_$p0, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i76, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i74, out_$i75, out_$i77, out_$p117, out_$i118, out_$i119, out_$i120, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$p146, out_$i121, out_$i38);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb31(in_$p0: ref, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i74: i32, in_$i75: i32, in_$i77: i32, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i64, in_$i128: i64, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$i121: i32, in_$i38: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i74: i32, out_$i75: i32, out_$i77: i32, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i64, out_$i128: i64, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$i121: i32, out_$i38: i32);
  modifies $M.0, $M.50, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.28;



implementation acpi_processor_update_tsd_coord_loop_$bb11(in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i12: i32) returns (out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i12: i32)
{

  entry:
    out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i12 := in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;

  $bb16:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i23;
    goto $bb16_dummy;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i32(out_$i24, out_$i23);
    goto corral_source_split_6207;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6206;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} out_$i23 := cpumask_next(out_$i12, out_$p22);
    call {:si_unique_call 1058} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_6205;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_6204;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i21 == 1;
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p18 := $i2p.i64.ref(out_$i17);
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i64(out_$i16, out_$i13);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i64($M.0, out_$p15);
    goto corral_source_split_6195;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i14, 8));
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i32.i64(out_$i12);
    goto corral_source_split_6193;

  $bb12:
    call {:si_unique_call 1055} out_$i13 := devirtbounce(0, processors);
    call {:si_unique_call 1056} {:cexpr "__ptr"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_6212;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 736)), $mul.ref(496, 1)), $mul.ref(126, 1));
    goto corral_source_split_6211;

  $bb14:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i12 := acpi_processor_update_tsd_coord_loop_$bb11(out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i12);
    return;

  exit:
    return;
}



procedure acpi_processor_update_tsd_coord_loop_$bb11(in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i12: i32) returns (out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i12: i32);
  modifies $M.0, $M.50, $CurrAddr;


