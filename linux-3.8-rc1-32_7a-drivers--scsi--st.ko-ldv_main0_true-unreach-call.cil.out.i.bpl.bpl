var $M.0: [ref]i8;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: [ref]i8;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: [ref]ref;

var $M.14: i32;

var $M.15: i32;

var $M.16: [ref]i32;

var $M.17: [ref]i8;

var $M.18: i32;

var $M.30: [ref]i32;

var $M.31: [ref]i8;

var $M.32: i32;

var $M.33: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 421968);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const try_wdio: ref;

axiom try_wdio == $sub.ref(0, 2056);

const try_rdio: ref;

axiom try_rdio == $sub.ref(0, 3084);

const modes_defined: ref;

axiom modes_defined == $sub.ref(0, 4112);

const debugging: ref;

axiom debugging == $sub.ref(0, 5140);

const st_use_lock: ref;

axiom st_use_lock == $sub.ref(0, 6236);

const st_ref_mutex: ref;

axiom st_ref_mutex == $sub.ref(0, 7428);

const {:count 16} st_formats: ref;

axiom st_formats == $sub.ref(0, 8580);

const st_fops: ref;

axiom st_fops == $sub.ref(0, 9820);

const st_index_idr: ref;

axiom st_index_idr == $sub.ref(0, 10956);

const st_index_lock: ref;

axiom st_index_lock == $sub.ref(0, 12052);

const {:count 6} reject_list: ref;

axiom reject_list == $sub.ref(0, 13268);

const driver_attr_version: ref;

axiom driver_attr_version == $sub.ref(0, 14340);

const driver_attr_max_sg_segs: ref;

axiom driver_attr_max_sg_segs == $sub.ref(0, 15412);

const driver_attr_fixed_buffer_size: ref;

axiom driver_attr_fixed_buffer_size == $sub.ref(0, 16484);

const try_direct_io: ref;

axiom try_direct_io == $sub.ref(0, 17512);

const driver_attr_try_direct_io: ref;

axiom driver_attr_try_direct_io == $sub.ref(0, 18584);

const st_template: ref;

axiom st_template == $sub.ref(0, 19760);

const {:count 6} st_dev_attrs: ref;

axiom st_dev_attrs == $sub.ref(0, 21072);

const st_sysfs_class: ref;

axiom st_sysfs_class == $sub.ref(0, 22224);

const st_max_sg_segs: ref;

axiom st_max_sg_segs == $sub.ref(0, 23252);

const st_fixed_buffer_size: ref;

axiom st_fixed_buffer_size == $sub.ref(0, 24280);

const verstr: ref;

axiom verstr == $sub.ref(0, 25312);

const max_sg_segs: ref;

axiom max_sg_segs == $sub.ref(0, 26340);

const buffer_kbs: ref;

axiom buffer_kbs == $sub.ref(0, 27368);

const ldv_mutex_st_ref_mutex: ref;

axiom ldv_mutex_st_ref_mutex == $sub.ref(0, 28396);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 29424);

const ldv_mutex_lock_of_scsi_tape: ref;

axiom ldv_mutex_lock_of_scsi_tape == $sub.ref(0, 30452);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 31480);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 32513);

const {:count 10} .str.5: ref;

axiom .str.5 == $sub.ref(0, 33547);

const {:count 8} .str.6: ref;

axiom .str.6 == $sub.ref(0, 34579);

const {:count 16} .str.7: ref;

axiom .str.7 == $sub.ref(0, 35619);

const {:count 16} .str.8: ref;

axiom .str.8 == $sub.ref(0, 36659);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 37703);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 38735);

const {:count 8} .str.13: ref;

axiom .str.13 == $sub.ref(0, 39767);

const {:count 4} .str.11: ref;

axiom .str.11 == $sub.ref(0, 40795);

const {:count 8} .str.12: ref;

axiom .str.12 == $sub.ref(0, 41827);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 3} .str.2: ref;

axiom .str.2 == $sub.ref(0, 42854);

const {:count 21} .str.73: ref;

axiom .str.73 == $sub.ref(0, 43899);

const {:count 5} .str.45: ref;

axiom .str.45 == $sub.ref(0, 44928);

const {:count 2} .str.19: ref;

axiom .str.19 == $sub.ref(0, 45954);

const {:count 25} .str.20: ref;

axiom .str.20 == $sub.ref(0, 47003);

const {:count 34} .str.21: ref;

axiom .str.21 == $sub.ref(0, 48061);

const {:count 59} .str.22: ref;

axiom .str.22 == $sub.ref(0, 49144);

const {:count 42} .str.23: ref;

axiom .str.23 == $sub.ref(0, 50210);

const {:count 40} .str.24: ref;

axiom .str.24 == $sub.ref(0, 51274);

const {:count 12} .str.25: ref;

axiom .str.25 == $sub.ref(0, 52310);

const {:count 32} .str.26: ref;

axiom .str.26 == $sub.ref(0, 53366);

const {:count 5} .str.27: ref;

axiom .str.27 == $sub.ref(0, 54395);

const {:count 2} .str.28: ref;

axiom .str.28 == $sub.ref(0, 55421);

const {:count 23} .str.29: ref;

axiom .str.29 == $sub.ref(0, 56468);

const {:count 4} .str.31: ref;

axiom .str.31 == $sub.ref(0, 57496);

const {:count 3} .str.32: ref;

axiom .str.32 == $sub.ref(0, 58523);

const {:count 41} .str.30: ref;

axiom .str.30 == $sub.ref(0, 59588);

const {:count 44} .str.46: ref;

axiom .str.46 == $sub.ref(0, 60656);

const {:count 4} .str.48: ref;

axiom .str.48 == $sub.ref(0, 61684);

const {:count 5} .str.49: ref;

axiom .str.49 == $sub.ref(0, 62713);

const {:count 36} .str.47: ref;

axiom .str.47 == $sub.ref(0, 63773);

const {:count 29} .str.50: ref;

axiom .str.50 == $sub.ref(0, 64826);

const {:count 2} .str.52: ref;

axiom .str.52 == $sub.ref(0, 65852);

const .str.36: ref;

axiom .str.36 == $sub.ref(0, 66877);

const {:count 7} .str.51: ref;

axiom .str.51 == $sub.ref(0, 67908);

const {:count 3} .str.53: ref;

axiom .str.53 == $sub.ref(0, 68935);

const {:count 29} .str.54: ref;

axiom .str.54 == $sub.ref(0, 69988);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 71050);

const {:count 8} .str.33: ref;

axiom .str.33 == $sub.ref(0, 72082);

const {:count 14} .str.14: ref;

axiom .str.14 == $sub.ref(0, 73120);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 74162);

const {:count 12} .str.16: ref;

axiom .str.16 == $sub.ref(0, 75198);

const {:count 8} .str.17: ref;

axiom .str.17 == $sub.ref(0, 76230);

const {:count 6} .str.18: ref;

axiom .str.18 == $sub.ref(0, 77260);

const {:count 9} .str.34: ref;

axiom .str.34 == $sub.ref(0, 78293);

const {:count 4} .str.35: ref;

axiom .str.35 == $sub.ref(0, 79321);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 80350);

const {:count 4} .str.38: ref;

axiom .str.38 == $sub.ref(0, 81378);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 82406);

const {:count 4} .str.40: ref;

axiom .str.40 == $sub.ref(0, 83434);

const {:count 4} .str.41: ref;

axiom .str.41 == $sub.ref(0, 84462);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 85500);

const {:count 18} .str.44: ref;

axiom .str.44 == $sub.ref(0, 86542);

const {:count 31} .str.101: ref;

axiom .str.101 == $sub.ref(0, 87597);

const {:count 194} .str.83: ref;

axiom .str.83 == $sub.ref(0, 88815);

const {:count 26} .str.84: ref;

axiom .str.84 == $sub.ref(0, 89865);

const {:count 8} .str.87: ref;

axiom .str.87 == $sub.ref(0, 90897);

const {:count 9} .str.88: ref;

axiom .str.88 == $sub.ref(0, 91930);

const {:count 40} .str.86: ref;

axiom .str.86 == $sub.ref(0, 92994);

const {:count 36} .str.79: ref;

axiom .str.79 == $sub.ref(0, 94054);

const {:count 47} .str.81: ref;

axiom .str.81 == $sub.ref(0, 95125);

const scsi_command_size_tbl: ref;

axiom scsi_command_size_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 9} .str.80: ref;

axiom .str.80 == $sub.ref(0, 96158);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 22} .str.85: ref;

axiom .str.85 == $sub.ref(0, 97204);

const {:count 43} .str.74: ref;

axiom .str.74 == $sub.ref(0, 98271);

const {:count 34} .str.76: ref;

axiom .str.76 == $sub.ref(0, 99329);

const {:count 63} .str.77: ref;

axiom .str.77 == $sub.ref(0, 100416);

const {:count 47} .str.78: ref;

axiom .str.78 == $sub.ref(0, 101487);

const {:count 63} .str.82: ref;

axiom .str.82 == $sub.ref(0, 102574);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 44} .str.98: ref;

axiom .str.98 == $sub.ref(0, 103642);

const {:count 35} .str.100: ref;

axiom .str.100 == $sub.ref(0, 104701);

const {:count 54} .str.99: ref;

axiom .str.99 == $sub.ref(0, 105779);

const {:count 109} .str.90: ref;

axiom .str.90 == $sub.ref(0, 106912);

const {:count 27} .str.91: ref;

axiom .str.91 == $sub.ref(0, 107963);

const {:count 45} .str.95: ref;

axiom .str.95 == $sub.ref(0, 109032);

const {:count 37} .str.96: ref;

axiom .str.96 == $sub.ref(0, 110093);

const {:count 40} .str.97: ref;

axiom .str.97 == $sub.ref(0, 111157);

const {:count 42} .str.89: ref;

axiom .str.89 == $sub.ref(0, 112223);

const {:count 35} .str.94: ref;

axiom .str.94 == $sub.ref(0, 113282);

const {:count 58} .str.92: ref;

axiom .str.92 == $sub.ref(0, 114364);

const {:count 28} .str.93: ref;

axiom .str.93 == $sub.ref(0, 115416);

const {:count 2} .str.56: ref;

axiom .str.56 == $sub.ref(0, 116442);

const {:count 2} .str.57: ref;

axiom .str.57 == $sub.ref(0, 117468);

const {:count 2} .str.58: ref;

axiom .str.58 == $sub.ref(0, 118494);

const {:count 2} .str.59: ref;

axiom .str.59 == $sub.ref(0, 119520);

const {:count 2} .str.60: ref;

axiom .str.60 == $sub.ref(0, 120546);

const {:count 2} .str.61: ref;

axiom .str.61 == $sub.ref(0, 121572);

const {:count 2} .str.62: ref;

axiom .str.62 == $sub.ref(0, 122598);

const {:count 2} .str.63: ref;

axiom .str.63 == $sub.ref(0, 123624);

const {:count 2} .str.64: ref;

axiom .str.64 == $sub.ref(0, 124650);

const {:count 2} .str.65: ref;

axiom .str.65 == $sub.ref(0, 125676);

const {:count 2} .str.66: ref;

axiom .str.66 == $sub.ref(0, 126702);

const {:count 2} .str.67: ref;

axiom .str.67 == $sub.ref(0, 127728);

const {:count 2} .str.68: ref;

axiom .str.68 == $sub.ref(0, 128754);

const {:count 2} .str.69: ref;

axiom .str.69 == $sub.ref(0, 129780);

const {:count 2} .str.70: ref;

axiom .str.70 == $sub.ref(0, 130806);

const {:count 23} .str.71: ref;

axiom .str.71 == $sub.ref(0, 131853);

const {:count 13} .str.72: ref;

axiom .str.72 == $sub.ref(0, 132890);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 133926);

const {:count 16} .str.102: ref;

axiom .str.102 == $sub.ref(0, 134966);

const .str: ref;

axiom .str == $sub.ref(0, 136038);

const {:count 45} .str.1: ref;

axiom .str.1 == $sub.ref(0, 137107);

const {:count 40} .str.3: ref;

axiom .str.3 == $sub.ref(0, 138171);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 139203);

const {:count 3} .str.1.169: ref;

axiom .str.1.169 == $sub.ref(0, 140230);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 141268);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 142296);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 143328);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 144360);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const defined_show: ref;

axiom defined_show == $sub.ref(0, 145392);

procedure defined_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const default_blksize_show: ref;

axiom default_blksize_show == $sub.ref(0, 146424);

procedure default_blksize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const default_density_show: ref;

axiom default_density_show == $sub.ref(0, 147456);

procedure default_density_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const default_compression_show: ref;

axiom default_compression_show == $sub.ref(0, 148488);

procedure default_compression_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const options_show: ref;

axiom options_show == $sub.ref(0, 149520);

procedure options_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 150552);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := external_alloc();
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 151584);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 152616);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const st_probe: ref;

axiom st_probe == $sub.ref(0, 153648);

procedure st_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i16;
  var $i28: i16;
  var $i29: i8;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i16;
  var $i80: i16;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i1;
  var $i117: i1;
  var $i125: i32;
  var $i126: i8;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $p166: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $p185: ref;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i8: i32;
  var $p191: ref;
  var $p192: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 432), 2896));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(232, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p9 := st_incompatible($p3);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(8, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i17 := queue_max_segments($p16);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i16($i17);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    call {:si_unique_call 9} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i19 := $M.2;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, $i18);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(0, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3032)), $mul.ref(624, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i16($i26, 2);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i28 := $and.i16($i27, 1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i16.i8($i28);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p31 := new_tape_buffer($i30, $i22);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p35 := alloc_disk(1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p39 := kzalloc(688, 32);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(680, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} kref_init($p44);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p35);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p39);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(8, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p50);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i54 := blk_get_queue($p53);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 22} {:cexpr "tmp___1"} boogie_si_record_i8($i55);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, st_template);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p3);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(233, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i62);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 2);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i64 == 1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(312, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 114);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p31);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $0.ref);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(645, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(636, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 3032)), $mul.ref(624, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i79 := $lshr.i16($i78, 2);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i80 := $and.i16($i79, 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i16.i8($i80);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(299, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i81);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(233, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i85 := $sext.i8.i32($i84);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i85, 2);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(305, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i88);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(293, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(233, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i94 := $sext.i8.i32($i93);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 2);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(294, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $i97);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(296, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(297, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(300, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $sub.i8(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} blk_queue_rq_timeout($p113, 225000);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 3500000);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i115 := $M.3;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i117 := 0;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i117);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(306, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, $i126);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(1, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(5, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(2, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(3, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 1);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(6, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $sub.i32(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p138, $sub.i16(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p129, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p39);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p221, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(1, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p222, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(5, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p223, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(2, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p224, 1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(3, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(4, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, 1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(6, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p227, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(12, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, $sub.i32(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, $sub.i16(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p219, $mul.ref(1, 56)), $mul.ref(16, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p230, $p39);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p231);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(1, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(5, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p236, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(2, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, 1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(3, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p238, 1);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(4, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p239, 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(6, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(12, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $sub.i32(0, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p242, $sub.i16(0, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p232, $mul.ref(2, 56)), $mul.ref(16, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p243, $p39);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p247, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(1, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p248, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(5, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p249, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(2, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p250, 1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(3, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p251, 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(4, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p252, 1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(6, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p253, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(12, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, $sub.i32(0, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(8, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p255, $sub.i16(0, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p245, $mul.ref(3, 56)), $mul.ref(16, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p256, $p39);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $sub.i32(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, $sub.i32(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p194, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p195, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p196, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $sub.i32(0, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p192, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, $sub.i32(0, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, $sub.i32(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p201, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p208, $sub.i32(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p212, 0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $sub.i32(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p210, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(328, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(637, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(639, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, 0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(638, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} __mutex_init($p155, .str.25, $p1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} idr_preload(208);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} spin_lock(st_index_lock);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p40);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i157 := idr_alloc(st_index_idr, $p156, 0, 131073, 0);
    call {:si_unique_call 28} {:cexpr "error"} boogie_si_record_i32($i157);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} spin_unlock(st_index_lock);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} idr_preload_end();
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i157, 0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(288, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i157);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(288, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_57 := sprintf.ref.ref.i32($p162, .str.27, $i164);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p40);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_58 := dev_set_drvdata($p0, $p166);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i168 := create_cdevs($p40);
    call {:si_unique_call 36} {:cexpr "error"} boogie_si_record_i32($i168);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} scsi_autopm_put_device($p3);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p170 := tape_name($p40);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(432, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_59 := dev_printk.ref.ref.ref.ref(.str.28, $p171, .str.29, $p170);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(8, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i175 := queue_dma_alignment($p174);
    call {:si_unique_call 45} {:cexpr "tmp___6"} boogie_si_record_i32($i175);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p176 := tape_name($p40);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(432, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(306, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p182 := (if $i181 == 1 then .str.31 else .str.32);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i175, 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_60 := dev_printk.ref.ref.ref.ref.ref.i32(.str.19, $p177, .str.30, $p176, $p182, $i183);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb47:
    assume $i169 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} remove_cdevs($p40);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} spin_lock(st_index_lock);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(288, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} idr_remove(st_index_idr, $i186);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} spin_unlock(st_index_lock);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p35, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} blk_put_queue($p188);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} put_disk($p35);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p40);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} kfree($p189);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p31);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} kfree($p190);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb43:
    assume $i158 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_56 := printk.ref.i32(.str.26, $i157);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32:
    assume $i116 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(624, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    assume {:verifier.code 0} true;
    $i117 := $i124;
    goto $bb34;

  $bb29:
    assume $i64 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p40, $mul.ref(0, 688)), $mul.ref(312, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 113);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i58 == 1;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_55 := printk.ref(.str.24);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_54 := printk.ref(.str.23);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_53 := printk.ref(.str.22);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i21 := $M.2;
    call {:si_unique_call 10} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 432), 2896)), $mul.ref(432, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vslice_dummy_var_51 := dev_printk.ref.ref.ref(.str.19, $p12, .str.20);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} vslice_dummy_var_52 := printk.ref.ref(.str.21, $p9);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const st_remove: ref;

axiom st_remove == $sub.ref(0, 154680);

procedure st_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, assertsPassed, $M.0, $CurrAddr;



implementation st_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(288, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 49} {:cexpr "index"} boogie_si_record_i32($i4);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 432), 2896));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_61 := scsi_autopm_get_device($p6);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} remove_cdevs($p2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ldv_mutex_lock_17(st_ref_mutex);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(680, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_62 := kref_put($p8, scsi_tape_release);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_mutex_unlock_18(st_ref_mutex);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} spin_lock(st_index_lock);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} idr_remove(st_index_idr, $i4);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} spin_unlock(st_index_lock);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const scsi_autopm_get_device: ref;

axiom scsi_autopm_get_device == $sub.ref(0, 155712);

procedure scsi_autopm_get_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_autopm_get_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const remove_cdevs: ref;

axiom remove_cdevs == $sub.ref(0, 156744);

procedure remove_cdevs($p0: ref);
  free requires assertsPassed;



implementation remove_cdevs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i10: i32;
  var $i33: i32;
  var $i34: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2896)), $mul.ref(432, 1)), $mul.ref(16, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} sysfs_remove_link($p4, .str.45);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb1;

  $bb1:
    call $p6, $p7, $i8, $i11, $p13, $p14, $i15, $i16, $i17, $p19, $p20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $i31, $i32, $i10, $i33, $i34, $i5 := remove_cdevs_loop_$bb1($p0, $p6, $p7, $i8, $i11, $p13, $p14, $i15, $i16, $i17, $p19, $p20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $i31, $i32, $i10, $i33, $i34, $i5);
    goto $bb1_last;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    call $i11, $p13, $p14, $i15, $i16, $i17, $p19, $p20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $i31, $i32, $i10 := remove_cdevs_loop_$bb3($p7, $i8, $i11, $p13, $p14, $i15, $i16, $i17, $p19, $p20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $i31, $i32, $i10);
    goto $bb3_last;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 56)), $mul.ref(40, 1)), $mul.ref($i11, 8));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i10);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 56)), $mul.ref(24, 1)), $mul.ref($i21, 8));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i10, 1);
    call {:si_unique_call 63} {:cexpr "rew"} boogie_si_record_i32($i31);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i32 := $sle.i32($i31, 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i5, 1);
    call {:si_unique_call 64} {:cexpr "mode"} boogie_si_record_i32($i33);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i34 := $sle.i32($i33, 3);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i33;
    goto $bb14_dummy;

  $bb11:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i31;
    goto $bb11_dummy;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i10);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 56)), $mul.ref(24, 1)), $mul.ref($i27, 8));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} device_unregister($p30);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i10);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 56)), $mul.ref(40, 1)), $mul.ref($i17, 8));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} cdev_del($p20);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  $bb14_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;
}



const ldv_mutex_lock_17: ref;

axiom ldv_mutex_lock_17 == $sub.ref(0, 157776);

procedure ldv_mutex_lock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} ldv_mutex_lock_st_ref_mutex($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} mutex_lock($p0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const scsi_tape_release: ref;

axiom scsi_tape_release == $sub.ref(0, 158808);

procedure scsi_tape_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation scsi_tape_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 680), 688));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(672, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(8, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(280, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1424)), $mul.ref(1352, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} put_disk($p4);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} kfree($p21);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(280, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} normalize_buffer($p11);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(280, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} kfree($p16);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 680), 688)), $mul.ref(280, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} kfree($p19);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 159840);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i2 := kref_sub($p0, 1, $p1);
    call {:si_unique_call 73} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 160872);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} ldv_mutex_unlock_st_ref_mutex($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} mutex_unlock($p0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 161904);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} _raw_spin_lock($p2);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 162936);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 163968);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} _raw_spin_unlock($p2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 165000);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 166032);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_st_ref_mutex: ref;

axiom ldv_mutex_unlock_st_ref_mutex == $sub.ref(0, 167064);

procedure ldv_mutex_unlock_st_ref_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_st_ref_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 80} {:cexpr "ldv_mutex_st_ref_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 168096);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 169128);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} __VERIFIER_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 170160);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 83} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_63 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 89} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 90} devirtbounce($p2, $p0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} warn_slowpath_null(.str.73, 70);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 171192);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 92} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 172224);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 173256);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 95} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 96} devirtbounce.1(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.5, $p2);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const normalize_buffer: ref;

axiom normalize_buffer == $sub.ref(0, 174288);

procedure normalize_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation normalize_buffer($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 97} {:cexpr "order"} boogie_si_record_i32($i2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(146, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i7 := normalize_buffer_loop_$bb4($p0, $i2, $p3, $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i7);
    goto $bb4_last;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 8));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __free_pages($p12, $i2);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i16 := $shl.i64(4096, $i15);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i14, $i17);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, 1);
    call {:si_unique_call 99} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p3);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, $i20);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 175320);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} free_($p0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 176352);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 177384);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 101} $free($p0);
    return;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 178416);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_st_ref_mutex: ref;

axiom ldv_mutex_lock_st_ref_mutex == $sub.ref(0, 179448);

procedure ldv_mutex_lock_st_ref_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_st_ref_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.4 := 2;
    call {:si_unique_call 104} {:cexpr "ldv_mutex_st_ref_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 180480);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_link: ref;

axiom sysfs_remove_link == $sub.ref(0, 181512);

procedure sysfs_remove_link($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_link($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 182544);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 183576);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    return;
}



const st_incompatible: ref;

axiom st_incompatible == $sub.ref(0, 184608);

procedure st_incompatible($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation st_incompatible($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p4: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.6, reject_list);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $p39;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p4 := reject_list;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p40, $p41, $p42, $i43, $i44, $p4 := st_incompatible_loop_$bb4($p0, $p5, $p6, $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p40, $p41, $p42, $i43, $i44, $p4);
    goto $bb4_last;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i7 := strlen($p6);
    call {:si_unique_call 106} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(248, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i12 := strncmp($p9, $p11, $i7);
    call {:si_unique_call 108} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p4, $mul.ref(1, 32));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p40;
    goto $bb18_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i16 := strlen($p15);
    call {:si_unique_call 110} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(256, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i21 := strncmp($p18, $p20, $i16);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.8, $p23);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i25 := strlen($p24);
    call {:si_unique_call 114} {:cexpr "tmp___3"} boogie_si_record_i64($i25);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.8, $p26);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2896)), $mul.ref(264, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i30 := strncmp($p27, $p29, $i25);
    call {:si_unique_call 116} {:cexpr "tmp___4"} boogie_si_record_i32($i30);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p32 := $p4;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.9, $p33);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p39 := .str.33;
    goto $bb14;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.9, $p37);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p39 := $p38;
    goto $bb14;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 185640);

procedure dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 186672);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const queue_max_segments: ref;

axiom queue_max_segments == $sub.ref(0, 187704);

procedure queue_max_segments($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_max_segments($p0: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3200)), $mul.ref(2392, 1)), $mul.ref(62, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const new_tape_buffer: ref;

axiom new_tape_buffer == $sub.ref(0, 188736);

procedure new_tape_buffer($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation new_tape_buffer($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p7: ref;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "new_tape_buffer:arg:need_dma"} boogie_si_record_i32($i0);
    call {:si_unique_call 140} {:cexpr "new_tape_buffer:arg:max_sg"} boogie_si_record_i32($i1);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p2 := kzalloc(152, 32);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i15 := $mul.i64($i14, 8);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p16 := kzalloc($i15, 32);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p16);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} kfree($p23);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_64 := printk.ref(.str.42);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 189768);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p1 := external_alloc();
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 190800);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 148} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 191832);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} atomic_set($p1, 1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    return;
}



const blk_get_queue: ref;

axiom blk_get_queue == $sub.ref(0, 192864);

procedure blk_get_queue($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation blk_get_queue($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_queue_rq_timeout: ref;

axiom blk_queue_rq_timeout == $sub.ref(0, 193896);

procedure blk_queue_rq_timeout($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_rq_timeout($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "blk_queue_rq_timeout:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 194928);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    return;
}



const idr_preload: ref;

axiom idr_preload == $sub.ref(0, 195960);

procedure idr_preload($i0: i32);
  free requires assertsPassed;



implementation idr_preload($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "idr_preload:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 196992);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 155} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 156} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 157} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 158} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const idr_preload_end: ref;

axiom idr_preload_end == $sub.ref(0, 198024);

procedure idr_preload_end();
  free requires assertsPassed;
  modifies $M.0;



implementation idr_preload_end()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} devirtbounce.2(0);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p0 := current_thread_info();
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    call {:si_unique_call 162} devirtbounce.2(0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 199056);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 200088);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const create_cdevs: ref;

axiom create_cdevs == $sub.ref(0, 201120);

procedure create_cdevs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation create_cdevs($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i4: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i1 := create_one_cdev($p0, 0, 0);
    call {:si_unique_call 166} {:cexpr "error"} boogie_si_record_i32($i1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i5 := create_one_cdev($p0, 0, 1);
    call {:si_unique_call 168} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i19 := create_one_cdev($p0, 1, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i3 := $i19;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i21 := create_one_cdev($p0, 1, 1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i23 := create_one_cdev($p0, 2, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i3 := $i23;
    assume {:branchcond $i24} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i25 := create_one_cdev($p0, 2, 1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i7 := $i25;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i27 := create_one_cdev($p0, 3, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i3 := $i27;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i29 := create_one_cdev($p0, 3, 1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2896)), $mul.ref(432, 1)), $mul.ref(16, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1)), $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i18 := sysfs_create_link($p11, $p17, .str.45);
    call {:si_unique_call 171} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i4 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb6;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb6;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb9;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb4;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb4;
}



const scsi_autopm_put_device: ref;

axiom scsi_autopm_put_device == $sub.ref(0, 202152);

procedure scsi_autopm_put_device($p0: ref);
  free requires assertsPassed;



implementation scsi_autopm_put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    return;
}



const tape_name: ref;

axiom tape_name == $sub.ref(0, 203184);

procedure tape_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tape_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const queue_dma_alignment: ref;

axiom queue_dma_alignment == $sub.ref(0, 204216);

procedure queue_dma_alignment($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queue_dma_alignment($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i5 := 511;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3200)), $mul.ref(2148, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const blk_put_queue: ref;

axiom blk_put_queue == $sub.ref(0, 205248);

procedure blk_put_queue($p0: ref);
  free requires assertsPassed;



implementation blk_put_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;
}



const create_one_cdev: ref;

axiom create_one_cdev == $sub.ref(0, 206280);

procedure create_one_cdev($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation create_one_cdev($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $i65: i64;
  var $p67: ref;
  var $i33: i32;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i24: i32;
  var $i68: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p3 := $alloc($mul.ref(10, $zext.i32.i64(1)));
    call {:si_unique_call 178} {:cexpr "create_one_cdev:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 179} {:cexpr "create_one_cdev:arg:rew"} boogie_si_record_i32($i2);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(288, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 180} {:cexpr "dev_num"} boogie_si_record_i32($i9);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 32));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 3);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, 31);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i11, $i12);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i1, 5);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i17 := (if $i16 == 1 then 128 else 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i15, $i17);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 9437184);
    call {:si_unique_call 181} {:cexpr "cdev_devno"} boogie_si_record_i32($i19);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p20 := cdev_alloc();
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, __this_module);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, st_fops);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i27 := cdev_add($p20, $i19, 1);
    call {:si_unique_call 185} {:cexpr "error"} boogie_si_record_i32($i27);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref($i6, 56)), $mul.ref(40, 1)), $mul.ref($i34, 8));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p20);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i1, 2);
    call {:si_unique_call 189} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i2, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p40 := (if $i39 == 1 then .str.52 else .str.36);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1424)), $mul.ref(12, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i37);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref($i45, 8));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.10, $p46);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_68 := snprintf.ref.i64.ref.ref.ref.ref($p38, 10, .str.51, $p40, $p44, $p47);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2896)), $mul.ref(432, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p3);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p57 := device_create.ref.ref.i32.ref.ref.ref(st_sysfs_class, $p51, $i19, $p55, .str.53, $p56);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i59 := IS_ERR($p58);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i2);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref($i6, 56)), $mul.ref(24, 1)), $mul.ref($i65, 8));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p57);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;

  $bb9:
    assume $i60 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_69 := printk.ref.i32(.str.54, $i9);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p57);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i63 := PTR_ERR($p62);
    call {:si_unique_call 196} {:cexpr "tmp"} boogie_si_record_i64($i63);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    call {:si_unique_call 197} {:cexpr "error"} boogie_si_record_i32($i64);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i33 := $i64;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i2);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p5, $mul.ref($i6, 56)), $mul.ref(40, 1)), $mul.ref($i69, 8));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} cdev_del($p72);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i2);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref($i6, 56)), $mul.ref(40, 1)), $mul.ref($i73, 8));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $0.ref);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i24 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i68 := $i24;
    goto $bb12;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i2, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p30 := (if $i29 == 1 then .str.48 else .str.49);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_66 := printk.ref.i32.ref.i32(.str.47, $i9, $p30, $i1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_67 := printk.ref.i32(.str.50, $i9);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i33 := $i27;
    goto $bb7;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_65 := printk.ref.i32(.str.46, $i9);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb3;
}



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 207312);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cdev_alloc: ref;

axiom cdev_alloc == $sub.ref(0, 208344);

procedure cdev_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation cdev_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p0 := external_alloc();
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 209376);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 201} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 202} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 1} true;
    call {:si_unique_call 203} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 204} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 210408);

procedure device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p5 := external_alloc();
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 211440);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 212472);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 213504);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i0 := devirtbounce.3(0, kernel_stack);
    call {:si_unique_call 210} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 214536);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 215568);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 213} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 216600);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 216} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p2 := ldv_malloc($i0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 217632);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p3 := malloc($i0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i4 := ldv_is_err($p3);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} __VERIFIER_assume($i7);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 218664);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 224} $r := $malloc($i0);
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 219696);

procedure strlen($p0: ref) returns ($r: i64);



const strncmp: ref;

axiom strncmp == $sub.ref(0, 220728);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const st_try_direct_io_show: ref;

axiom st_try_direct_io_show == $sub.ref(0, 221760);

procedure st_try_direct_io_show($p0: ref, $p1: ref) returns ($r: i64);



const st_fixed_buffer_size_show: ref;

axiom st_fixed_buffer_size_show == $sub.ref(0, 222792);

procedure st_fixed_buffer_size_show($p0: ref, $p1: ref) returns ($r: i64);



const st_max_sg_segs_show: ref;

axiom st_max_sg_segs_show == $sub.ref(0, 223824);

procedure st_max_sg_segs_show($p0: ref, $p1: ref) returns ($r: i64);



const st_version_show: ref;

axiom st_version_show == $sub.ref(0, 224856);

procedure st_version_show($p0: ref, $p1: ref) returns ($r: i64);



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 225888);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const st_read: ref;

axiom st_read == $sub.ref(0, 226920);

procedure st_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.32, $CurrAddr, assertsPassed, $M.30, $M.16;



implementation st_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i64;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $i121: i64;
  var $i120: i64;
  var $i122: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $i138: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $i140: i1;
  var $i141: i64;
  var $i139: i64;
  var $i95: i64;
  var $i137: i64;
  var $i142: i1;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i18: i64;
  var $i19: i32;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 227} {:cexpr "st_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, $0.ref);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i12 := ldv_mutex_lock_interruptible_12($p11);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i15 := rw_checks($p8, $p0, $i2);
    call {:si_unique_call 231} {:cexpr "retval"} boogie_si_record_i64($i15);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i2, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(0, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i53 := setup_buffering($p8, $p1, $i2, 1);
    call {:si_unique_call 236} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    call {:si_unique_call 237} {:cexpr "retval"} boogie_si_record_i64($i54);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    call {:si_unique_call 238} {:cexpr "do_dio"} boogie_si_record_i32($i58);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i58, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(0, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i94 := $ult.i64(0, $i2);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i95 := 0;
    assume {:branchcond $i94} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i137 := $i95;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i137, 0);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i142 == 1);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i137, $i58;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.13, $p5);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i19, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} ldv_mutex_unlock_13($p185);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i183 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} release_buffering($p8, 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i181 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.13, $p5);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} st_release_request($p182);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, $0.ref);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i177 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p178, 0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb86:
    assume $i142 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i146 == 1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 5);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i159 == 1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 6);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i172 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, 7);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb94:
    assume $i159 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, 6);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(8, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i164 := $sge.i32($i163, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i164 == 1;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i166, 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb88:
    assume $i146 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 2);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(8, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i151 := $sge.i32($i150, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb90:
    assume $i151 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i153, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(12, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i154);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb54:
    assume $i94 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p96, $i97, $i98 := $p1, 0, 0;
    goto $bb57;

  $bb57:
    call $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $i121, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $i136, $i138, $p96, $i97, $i98, $i140, $i141, $i139 := st_read_loop_$bb57($i2, $p4, $p5, $p8, $p10, $i58, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $i121, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $p129, $i130, $i131, $p132, $p133, $i134, $i135, $i136, $i138, $p96, $i97, $i98, $i140, $i141, $i139);
    goto $bb57_last;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i97, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i141 := $i98;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i95 := $i141;
    goto $bb56;

  $bb83:
    assume $i140 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i108 := $i97;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i111 := $sgt.i32($i110, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i131, $p132 := $i98, $p96;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i136 := $i131;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i138 := $ult.i64($i131, $i2);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i139 := $i131;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i95 := $i139;
    goto $bb56;

  $bb81:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $p96, $i97, $i98 := $p132, $i108, $i131;
    goto $bb81_dummy;

  $bb77:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i137 := $i136;
    goto $bb79;

  $bb65:
    assume $i111 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i115 := $sub.i64($i2, $i98);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i116 := $ult.i64($i114, $i115);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i116 == 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i121 := $sub.i64($i2, $i98);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i120 := $i121;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i58, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p96, $mul.ref($i120, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i98, $i120);
    call {:si_unique_call 254} {:cexpr "total"} boogie_si_record_i64($i130);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i131, $p132 := $i130, $p129;
    goto $bb76;

  $bb70:
    assume $i122 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i32($i120);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i124 := from_buffer($p10, $p96, $i123);
    call {:si_unique_call 252} {:cexpr "tmp___7"} boogie_si_record_i32($i124);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i125);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.0, $p4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i127 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p4);
    call {:si_unique_call 253} {:cexpr "retval"} boogie_si_record_i64($i128);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i128, $i58;
    goto $bb10;

  $bb67:
    assume $i116 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb69;

  $bb59:
    assume $i101 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i102 := $sub.i64($i2, $i98);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i103 := read_tape($p8, $i102, $p5);
    call {:si_unique_call 248} {:cexpr "tmp___6"} boogie_si_record_i64($i103);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    call {:si_unique_call 249} {:cexpr "special"} boogie_si_record_i32($i104);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i106 := $i104;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i108 := $i104;
    goto $bb64;

  $bb61:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i106);
    call {:si_unique_call 250} {:cexpr "retval"} boogie_si_record_i64($i107);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i107, $i58;
    goto $bb10;

  $bb39:
    assume $i76 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p4);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i78 := copy_from_user($p77, $p1, 1);
    call {:si_unique_call 240} {:cexpr "tmp___2"} boogie_si_record_i64($i78);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p4);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i81 := copy_to_user($p1, $p80, 1);
    call {:si_unique_call 242} {:cexpr "tmp___3"} boogie_si_record_i32($i81);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i82 == 1);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p4);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p1, $mul.ref($i84, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i86 := copy_from_user($p83, $p85, 1);
    call {:si_unique_call 244} {:cexpr "tmp___4"} boogie_si_record_i64($i86);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i87 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p1, $mul.ref($i88, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p4);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i91 := copy_to_user($p89, $p90, 1);
    call {:si_unique_call 246} {:cexpr "tmp___5"} boogie_si_record_i32($i91);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i92 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 14), $i58;
    goto $bb10;

  $bb45:
    assume $i87 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 14), $i58;
    goto $bb10;

  $bb43:
    assume $i82 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 14), $i58;
    goto $bb10;

  $bb41:
    assume $i79 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 14), $i58;
    goto $bb10;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i32($i64, 4);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb32;

  $bb33:
    assume $i65 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i69 := $ule.i32($i68, 6);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 5), $i58;
    goto $bb10;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(1, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i74);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i18, $i19 := 0, $i58;
    goto $bb10;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i54, 0;
    goto $bb10;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i49 := flush_buffer($p8, 0);
    call {:si_unique_call 233} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    call {:si_unique_call 234} {:cexpr "retval"} boogie_si_record_i64($i50);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p40, $mul.ref($i43, 16)), $mul.ref(0, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i50, 0;
    goto $bb10;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i32 := $urem.i64($i2, $i31);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref($i24, 56)), $mul.ref(4, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i64(0, 22), 0;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i15, 0;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb81_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;
}



const st_write: ref;

axiom st_write == $sub.ref(0, 227952);

procedure st_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.32, $CurrAddr, assertsPassed, $M.30, $M.16;



implementation st_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $i117: i32;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i8;
  var $p127: ref;
  var $p128: ref;
  var $i129: i1;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i64;
  var $i156: i1;
  var $i157: i64;
  var $i146: i64;
  var $i158: i32;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i64;
  var $p141: ref;
  var $i142: i64;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i8;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i1;
  var $i170: i1;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i1;
  var $i209: i1;
  var $p210: ref;
  var $i211: i64;
  var $p187: ref;
  var $p214: ref;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p222: ref;
  var $i223: i16;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i64;
  var $i229: i64;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $i235: i32;
  var $i236: i64;
  var $i237: i64;
  var $i220: i64;
  var $i221: i64;
  var $i238: i64;
  var $i239: i8;
  var $p240: ref;
  var $i241: i64;
  var $i242: i8;
  var $p243: ref;
  var $i244: i8;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i64;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $i267: i64;
  var $i268: i64;
  var $i269: i32;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i8;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p285: ref;
  var $p286: ref;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $p294: ref;
  var $i295: i8;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $p300: ref;
  var $i301: i8;
  var $i302: i32;
  var $p303: ref;
  var $i304: i8;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i64;
  var $i309: i32;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $i314: i1;
  var $i315: i32;
  var $i316: i32;
  var $i310: i32;
  var $p317: ref;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i321: i32;
  var $i322: i32;
  var $i323: i32;
  var $i324: i64;
  var $i325: i1;
  var $i326: i32;
  var $i327: i64;
  var $i328: i64;
  var $p329: ref;
  var $i330: i32;
  var $i331: i64;
  var $i332: i64;
  var $i333: i64;
  var $i334: i64;
  var $i335: i64;
  var $p336: ref;
  var $i337: i64;
  var $i338: i64;
  var $p339: ref;
  var $i340: i32;
  var $i341: i1;
  var $i342: i64;
  var $i343: i64;
  var $p344: ref;
  var $i345: i32;
  var $i346: i64;
  var $i347: i64;
  var $i348: i64;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i1;
  var $i353: i1;
  var $i354: i1;
  var $i355: i64;
  var $i363: i1;
  var $p366: ref;
  var $i367: i8;
  var $i368: i32;
  var $i369: i1;
  var $i370: i1;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $p376: ref;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $i380: i32;
  var $i381: i64;
  var $i382: i64;
  var $p383: ref;
  var $i384: i32;
  var $i385: i64;
  var $i386: i64;
  var $i387: i32;
  var $i388: i32;
  var $p389: ref;
  var $p390: ref;
  var $i364: i32;
  var $p365: ref;
  var $i391: i64;
  var $p392: ref;
  var $p393: ref;
  var $i356: i32;
  var $p357: ref;
  var $i358: i64;
  var $i359: i64;
  var $i360: i64;
  var $i361: i64;
  var $p362: ref;
  var $i291: i32;
  var $i292: i64;
  var $p293: ref;
  var $i401: i64;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $i394: i32;
  var $p395: ref;
  var $i396: i64;
  var $i397: i64;
  var $i398: i64;
  var $i399: i64;
  var $p400: ref;
  var $i282: i32;
  var $i283: i64;
  var $p284: ref;
  var $i406: i32;
  var $p407: ref;
  var $i408: i64;
  var $i409: i64;
  var $i410: i64;
  var $i411: i64;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i420: i32;
  var $i421: i1;
  var $i422: i32;
  var $i423: i32;
  var $p424: ref;
  var $p425: ref;
  var $i426: i32;
  var $i427: i32;
  var $i428: i32;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $i432: i1;
  var $i436: i1;
  var $i433: i64;
  var $i434: i64;
  var $p435: ref;
  var $i437: i1;
  var $i438: i64;
  var $i439: i64;
  var $i440: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i32;
  var $i136: i64;
  var $i443: i1;
  var $i444: i64;
  var $p445: ref;
  var $i441: i64;
  var $p442: ref;
  var $i130: i64;
  var $p131: ref;
  var $i212: i64;
  var $p213: ref;
  var $p446: ref;
  var $i447: i8;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $p451: ref;
  var $i452: i8;
  var $i453: i32;
  var $i454: i1;
  var $p455: ref;
  var $i456: i64;
  var $i17: i64;
  var $p18: ref;
  var $i457: i64;
  var $i458: i1;
  var $p459: ref;
  var $i13: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 260} {:cexpr "st_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p9 := tape_name($p8);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i11 := ldv_mutex_lock_interruptible_10($p10);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 263} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i14 := rw_checks($p8, $p0, $i2);
    call {:si_unique_call 265} {:cexpr "retval"} boogie_si_record_i64($i14);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i2, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p29, $mul.ref($i32, 56));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 2);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i85 := write_behind_check($p8);
    call {:si_unique_call 271} {:cexpr "tmp___4"} boogie_si_record_i32($i85);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i86);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p4);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 3);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i96 == 1);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 4);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i117 := setup_buffering($p8, $p1, $i2, 0);
    call {:si_unique_call 283} {:cexpr "tmp___7"} boogie_si_record_i32($i117);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i117);
    call {:si_unique_call 284} {:cexpr "retval"} boogie_si_record_i64($i118);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    call {:si_unique_call 285} {:cexpr "st_write:arg:total"} boogie_si_record_i64($i2);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p5);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 286} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p120, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 10);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, $i126);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, 2);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i2, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i130, $p131 := $i2, $0.ref;
    assume {:branchcond $i129} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i212, $p213 := $i130, $p131;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.0, $p446);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i448 := $zext.i8.i32($i447);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 5);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i449 == 1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i452 := $load.i8($M.0, $p451);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i453 := $zext.i8.i32($i452);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i454 := $ne.i32($i453, 3);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i456 := $sub.i64($i2, $i212);
    call {:si_unique_call 310} {:cexpr "retval"} boogie_si_record_i64($i456);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i456, $p213;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p18);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i458 := $ne.i64($i457, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} release_buffering($p8, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_mutex_unlock_11($p459);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb214:
    assume $i458 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} st_release_request($p18);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb211:
    assume $i454 == 1;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p455, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume $i449 == 1;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p450, 3);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb77:
    assume $i129 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p132, $p133, $i134, $i135, $i136 := $0.ref, $p1, $i2, 0, $i118;
    goto $bb80;

  $bb80:
    call $p137, $i138, $i139, $i140, $p143, $i144, $i145, $p147, $i148, $p149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i146, $i158, $i159, $i160, $i161, $i162, $p163, $p141, $i142, $i165, $p166, $p167, $i168, $i169, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $i182, $i170, $i183, $p184, $i185, $i186, $p188, $i189, $i190, $i191, $p192, $i193, $i194, $i195, $i196, $i197, $p198, $i199, $i200, $i201, $p202, $i203, $p204, $i205, $i206, $p207, $i208, $i209, $p210, $i211, $p187, $p214, $i215, $p216, $p217, $i218, $i219, $p222, $i223, $i224, $i225, $p226, $i227, $i228, $i229, $p230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $i220, $i221, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $p245, $p246, $i247, $p248, $p249, $p250, $p251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i263, $p264, $i265, $i266, $i267, $i268, $p279, $i280, $i281, $p285, $p286, $p288, $i289, $i290, $p294, $i295, $i296, $i297, $i298, $p300, $i301, $i302, $p303, $i304, $i305, $i306, $p307, $i308, $i309, $p311, $i312, $i313, $i314, $i315, $i316, $i310, $p317, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $i330, $i331, $i332, $i333, $i334, $i335, $p336, $i337, $i338, $p339, $i340, $i341, $i342, $i343, $p344, $i345, $i346, $i347, $i348, $p349, $p350, $i351, $i352, $i353, $i354, $i355, $i363, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $p373, $i374, $i375, $p376, $i377, $i378, $p379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $p389, $p390, $i364, $p365, $i391, $p392, $p393, $i356, $p357, $i358, $i359, $i360, $i361, $p362, $i291, $i292, $p293, $i401, $p402, $p403, $i404, $i405, $i394, $p395, $i396, $i397, $i398, $i399, $p400, $i282, $i283, $p284, $i406, $p407, $i408, $i409, $i410, $i411, $p412, $p413, $i414, $i415, $p416, $i417, $i418, $p419, $i420, $i421, $i422, $i423, $p424, $p425, $i426, $i427, $i428, $p429, $p430, $p431, $i432, $i436, $i433, $i434, $p435, $i440, $p132, $p133, $i134, $i135, $i136, $i443, $i444, $p445, $i441, $p442 := st_write_loop_$bb80($p4, $p5, $p8, $p29, $i32, $p35, $i38, $p84, $p137, $i138, $i139, $i140, $p143, $i144, $i145, $p147, $i148, $p149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i146, $i158, $i159, $i160, $i161, $i162, $p163, $p141, $i142, $i165, $p166, $p167, $i168, $i169, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $p179, $i180, $i181, $i182, $i170, $i183, $p184, $i185, $i186, $p188, $i189, $i190, $i191, $p192, $i193, $i194, $i195, $i196, $i197, $p198, $i199, $i200, $i201, $p202, $i203, $p204, $i205, $i206, $p207, $i208, $i209, $p210, $i211, $p187, $p214, $i215, $p216, $p217, $i218, $i219, $p222, $i223, $i224, $i225, $p226, $i227, $i228, $i229, $p230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $i220, $i221, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $p245, $p246, $i247, $p248, $p249, $p250, $p251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i263, $p264, $i265, $i266, $i267, $i268, $p279, $i280, $i281, $p285, $p286, $p288, $i289, $i290, $p294, $i295, $i296, $i297, $i298, $p300, $i301, $i302, $p303, $i304, $i305, $i306, $p307, $i308, $i309, $p311, $i312, $i313, $i314, $i315, $i316, $i310, $p317, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $i330, $i331, $i332, $i333, $i334, $i335, $p336, $i337, $i338, $p339, $i340, $i341, $i342, $i343, $p344, $i345, $i346, $i347, $i348, $p349, $p350, $i351, $i352, $i353, $i354, $i355, $i363, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $p373, $i374, $i375, $p376, $i377, $i378, $p379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $p389, $p390, $i364, $p365, $i391, $p392, $p393, $i356, $p357, $i358, $i359, $i360, $i361, $p362, $i291, $i292, $p293, $i401, $p402, $p403, $i404, $i405, $i394, $p395, $i396, $i397, $i398, $i399, $p400, $i282, $i283, $p284, $i406, $p407, $i408, $i409, $i410, $i411, $p412, $p413, $i414, $i415, $p416, $i417, $i418, $p419, $i420, $i421, $i422, $i423, $p424, $p425, $i426, $i427, $i428, $p429, $p430, $p431, $i432, $i436, $i433, $i434, $p435, $i440, $p132, $p133, $i134, $i135, $i136, $i443, $i444, $p445, $i441, $p442);
    goto $bb80_last;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i135, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i444, $p445 := $i134, $p132;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i130, $p131 := $i444, $p445;
    goto $bb79;

  $bb205:
    assume $i443 == 1;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i140 == 1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i145 == 1);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i151 := $mul.i32($i148, $i150);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i154 := $sub.i32($i151, $i153);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i154);
    call {:si_unique_call 288} {:cexpr "do_count"} boogie_si_record_i64($i155);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i156 := $ugt.i64($i155, $i134);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $i155;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i146 := $i157;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i64.i32($i146);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i159 := append_to_buffer($p133, $p84, $i158);
    call {:si_unique_call 290} {:cexpr "tmp___8"} boogie_si_record_i32($i159);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i159);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i160);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i161 := $load.i64($M.0, $p4);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i161, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p163 := $p132;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p141, $i142 := $p133, $i146;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i165 := $sub.i64($i134, $i142);
    call {:si_unique_call 287} {:cexpr "count"} boogie_si_record_i64($i165);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p141, $mul.ref($i142, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i170 := 0;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i183 := $zext.i1.i32($i170);
    call {:si_unique_call 292} {:cexpr "async_write"} boogie_si_record_i32($i183);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p187 := $p132;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p214 := $p187;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i215, $p216 := $i135, $p214;
    goto $bb123;

  $bb123:
    call $i215, $p216, $p217, $i218, $i219, $p222, $i223, $i224, $i225, $p226, $i227, $i228, $i229, $p230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $i220, $i221, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $p245, $p246, $i247, $p248, $p249, $p250, $p251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i263, $p264, $i265, $i266, $i267, $i268, $p279, $i280, $i281, $p285, $p286, $p288, $i289, $i290, $p294, $i295, $i296, $i297, $i298, $p300, $i301, $i302, $p303, $i304, $i305, $i306, $p307, $i308, $i309, $p311, $i312, $i313, $i314, $i315, $i316, $i310, $p317, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $i330, $i363, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $p373, $i374, $i375, $p376, $i377, $i378, $p379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $p389, $p390, $i364, $p365, $i291, $i292, $p293, $i282, $i283, $p284 := st_write_loop_$bb123($p5, $p8, $p35, $i38, $p84, $i142, $i165, $i183, $i215, $p216, $p217, $i218, $i219, $p222, $i223, $i224, $i225, $p226, $i227, $i228, $i229, $p230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $i220, $i221, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $p245, $p246, $i247, $p248, $p249, $p250, $p251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i263, $p264, $i265, $i266, $i267, $i268, $p279, $i280, $i281, $p285, $p286, $p288, $i289, $i290, $p294, $i295, $i296, $i297, $i298, $p300, $i301, $i302, $p303, $i304, $i305, $i306, $p307, $i308, $i309, $p311, $i312, $i313, $i314, $i315, $i316, $i310, $p317, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $i330, $i363, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $p373, $i374, $i375, $p376, $i377, $i378, $p379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $p389, $p390, $i364, $p365, $i291, $i292, $p293, $i282, $i283, $p284);
    goto $bb123_last;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i219 == 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i223 := $load.i16($M.0, $p222);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i223);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i229 := $i142;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i231);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i233 := $sdiv.i64($i229, $i232);
    call {:si_unique_call 295} {:cexpr "blks"} boogie_si_record_i64($i233);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i235);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i237 := $mul.i64($i236, $i233);
    call {:si_unique_call 296} {:cexpr "transfer"} boogie_si_record_i64($i237);
    assume {:verifier.code 0} true;
    $i220, $i221 := $i237, $i233;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i238 := $ashr.i64($i221, 16);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i64.i8($i238);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, $i239);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i241 := $ashr.i64($i221, 8);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i64.i8($i241);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p243, $i242);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i64.i8($i221);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p245, $i244);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p5);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i64.i32($i220);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i183, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i255 := $zext.i1.i32($i254);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p256 := st_do_scsi($p216, $p8, $p246, $i247, 1, $i253, 0, $i255);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i258 := $eq.i64($i257, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p259 := $p256;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i183, 0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i282, $i283, $p284 := $i215, $i221, $p256;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i406, $p407, $i408, $i409, $i410, $i411, $p412 := $i282, $p284, $i136, $i283, $i142, $i165, $p166;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i415 := $sge.i32($i414, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p430, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p431, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i432 := $ne.i64($i408, 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i433, $i434, $p435 := $i408, $i411, $p407;
    assume true;
    goto $bb194, $bb196;

  $bb196:
    assume !($i432 == 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i436 := $ne.i32($i406, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i433, $i434, $p435 := $i408, $i411, $p407;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i440 := $ne.i64($i411, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i441, $p442 := $i411, $p407;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i130, $p131 := $i441, $p442;
    goto $bb79;

  $bb203:
    assume $i440 == 1;
    assume {:verifier.code 0} true;
    $p132, $p133, $i134, $i135, $i136 := $p407, $p412, $i411, $i406, $i408;
    goto $bb203_dummy;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i436 == 1;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i437 := $ugt.i64($i2, $i434);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    $i439 := $i433;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i439, $p435;
    goto $bb10;

  $bb199:
    assume $i437 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i438 := $sub.i64($i2, $i434);
    call {:si_unique_call 309} {:cexpr "retval"} boogie_si_record_i64($i438);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i439 := $i438;
    goto $bb201;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb195;

  $bb188:
    assume $i415 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.0, $p416);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 0);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i418 == 1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.0, $p425);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i64.i32($i409);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i426, $i427);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p429, $i428);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb190:
    assume $i418 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i420 := $load.i32($M.0, $p419);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i421 := $sgt.i64($i410, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i422 := $zext.i1.i32($i421);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i423 := $add.i32($i420, $i422);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p424, $i423);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb139:
    assume $i281 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.0, $p285);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p288);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i291, $i292, $p293 := $i215, $i221, $p256;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i401 := $add.i64($i165, $i142);
    call {:si_unique_call 298} {:cexpr "count"} boogie_si_record_i64($i401);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p402, $sub.i32(0, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.0, $p403);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i405 := $sext.i32.i64($i404);
    call {:si_unique_call 299} {:cexpr "retval"} boogie_si_record_i64($i405);
    assume {:verifier.code 0} true;
    $i394, $p395, $i396, $i397, $i398, $i399, $p400 := $i291, $p293, $i405, $i292, $i142, $i401, $p166;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i406, $p407, $i408, $i409, $i410, $i411, $p412 := $i394, $p395, $i396, $i397, $i398, $i399, $p400;
    goto $bb187;

  $bb141:
    assume $i290 == 1;
    $p294 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.0, $p294);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i295);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i297 := $and.i32($i296, 64);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i291, $i292, $p293 := $i215, $i221, $p256;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb143;

  $bb144:
    assume $i298 == 1;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.0, $p300);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    call {:si_unique_call 300} {:cexpr "scode"} boogie_si_record_i32($i302);
    $p303 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.0, $p303);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i305 := $zext.i8.i32($i304);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i306 == 1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i316 := 0;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i310 := $i316;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.0, $p317);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i323 := $i310;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i324 := $sext.i32.i64($i323);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i325 := $sle.i64($i324, $i142);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i326, $i327, $i328, $p329, $i330 := $i215, $i220, $i221, $p256, $i323;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i325 == 1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i215, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i364, $p365 := $i215, $p256;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i363 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i391 := $sub.i64($i165, $i142);
    call {:si_unique_call 307} {:cexpr "count"} boogie_si_record_i64($i391);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p392, 4);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p393, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i356, $p357, $i358, $i359, $i360, $i361, $p362 := $i364, $p365, $sub.i64(0, 5), 0, 0, $i391, $p166;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i394, $p395, $i396, $i397, $i398, $i399, $p400 := $i356, $p357, $i358, $i359, $i360, $i361, $p362;
    goto $bb186;

  $bb172:
    assume $i363 == 1;
    $p366 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.0, $p366);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i32($i367);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i364, $p365 := $i215, $p256;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i369 == 1);
    goto $bb174;

  $bb175:
    assume $i369 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i302, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb179;

  $bb179:
    assume !($i370 == 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i302, 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i364, $p365 := $i215, $p256;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb174;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i374 := $trunc.i64.i32($i220);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i375 := $sub.i32($i374, $i323);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} move_buffer_data($p373, $i375);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.0, $p376);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i378 := $sge.i32($i377, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p390, 3);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i215, $p216 := 1, $p256;
    goto corral_source_split_1895_dummy;

  $bb182:
    assume $i378 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.0, $p379);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i381 := $sext.i32.i64($i323);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i382 := $sub.i64($i220, $i381);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i386 := $sdiv.i64($i382, $i385);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i64.i32($i386);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i388 := $add.i32($i380, $i387);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p389, $i388);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb178;

  $bb158:
    assume $i325 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i331 := $sext.i32.i64($i330);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i332 := $add.i64($i331, $i165);
    call {:si_unique_call 304} {:cexpr "count"} boogie_si_record_i64($i332);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i333 := $sext.i32.i64($i330);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i334 := $sub.i64(0, $i333);
    $i335 := $add.i64($i142, $i334);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p141, $mul.ref($i335, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i330);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i338 := $sub.i64($i142, $i337);
    call {:si_unique_call 305} {:cexpr "do_count"} boogie_si_record_i64($i338);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i348 := $i328;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p349, 3);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i351 := $load.i32($M.0, $p350);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb165;

  $bb165:
    assume !($i352 == 1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i353 := $sgt.i32($i330, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i353 == 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i354 := $eq.i64($i332, 0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    $i355 := $i136;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i356, $p357, $i358, $i359, $i360, $i361, $p362 := $i326, $p329, $i355, $i348, $i338, $i332, $p336;
    goto $bb171;

  $bb168:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i355 := $sub.i64(0, 28);
    goto $bb170;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb164;

  $bb160:
    assume $i341 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i342 := $sext.i32.i64($i330);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i343 := $sub.i64($i327, $i342);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i346 := $sext.i32.i64($i345);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i347 := $sdiv.i64($i343, $i346);
    call {:si_unique_call 306} {:cexpr "blks"} boogie_si_record_i64($i347);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i348 := $i347;
    goto $bb162;

  $bb155:
    assume $i319 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.0, $p320);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i322 := $mul.i32($i321, $i310);
    call {:si_unique_call 303} {:cexpr "undone"} boogie_si_record_i32($i322);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i323 := $i322;
    goto $bb157;

  $bb149:
    assume $i313 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i302, 13);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb151;

  $bb152:
    assume $i314 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i64.i32($i220);
    call {:si_unique_call 302} {:cexpr "undone"} boogie_si_record_i32($i315);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i316 := $i315;
    goto $bb154;

  $bb146:
    assume $i306 == 1;
    $p307 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i308 := $load.i64($M.0, $p307);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i64.i32($i308);
    call {:si_unique_call 301} {:cexpr "undone"} boogie_si_record_i32($i309);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i310 := $i309;
    goto $bb148;

  $bb133:
    assume $i263 == 1;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i267, $i268 := $i165, $i220;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb135;

  $bb136:
    assume $i266 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i64.i32($i268);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, $i269);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i272, $i274);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i276 := $zext.i1.i32($i275);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, $i277);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i212, $p213 := $i267, $0.ref;
    goto $bb120;

  $bb130:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i262 := $sext.i32.i64($i261);
    call {:si_unique_call 297} {:cexpr "retval"} boogie_si_record_i64($i262);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i262, $p259;
    goto $bb10;

  $bb127:
    assume $i225 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i227);
    call {:si_unique_call 294} {:cexpr "blks"} boogie_si_record_i64($i228);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i229 := $i228;
    goto $bb129;

  $bb124:
    assume $i219 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i220, $i221 := $i142, $i142;
    goto $bb126;

  $bb101:
    assume $i186 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(3, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p187 := $p132;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb103;

  $bb104:
    assume $i191 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb108;

  $bb108:
    assume !($i195 == 1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i196 := $M.15;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p187 := $p132;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb103;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p198);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i201 := $ule.i32($i200, 2);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p187 := $p132;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb103;

  $bb111:
    assume $i201 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i203, $i205);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p187 := $p132;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb103;

  $bb113:
    assume $i206 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i183, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p214 := $p132;
    goto $bb122;

  $bb115:
    assume $i208 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i209 := $eq.i64($i165, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p210, $i211 := $p132, $i165;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb117;

  $bb118:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i212, $p213 := $i211, $p210;
    goto $bb120;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb107;

  $bb94:
    assume $i169 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i170 := 0;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb96;

  $bb97:
    assume $i174 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(2, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.0, $p175);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i170 := 0;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb96;

  $bb99:
    assume $i178 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i182 := $ule.i32($i181, 2);
    assume {:verifier.code 0} true;
    $i170 := $i182;
    goto $bb96;

  $bb91:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i164 := $load.i64($M.0, $p4);
    call {:si_unique_call 291} {:cexpr "retval"} boogie_si_record_i64($i164);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i164, $p163;
    goto $bb10;

  $bb88:
    assume $i156 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i157 := $i134;
    goto $bb90;

  $bb85:
    assume $i145 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i146 := $i134;
    goto $bb87;

  $bb82:
    assume $i140 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p141, $i142 := $p133, $i134;
    goto $bb84;

  $bb74:
    assume $i119 == 1;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i118, $0.ref;
    goto $bb10;

  $bb62:
    assume $i104 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb64;

  $bb65:
    assume $i108 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p4);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i110 := copy_from_user($p109, $p1, 1);
    call {:si_unique_call 279} {:cexpr "tmp___5"} boogie_si_record_i64($i110);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i111 == 1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p4);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p1, $mul.ref($i113, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i115 := copy_from_user($p112, $p114, 1);
    call {:si_unique_call 281} {:cexpr "tmp___6"} boogie_si_record_i64($i115);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb69:
    assume $i116 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 14), $0.ref;
    goto $bb10;

  $bb67:
    assume $i111 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 14), $0.ref;
    goto $bb10;

  $bb58:
    assume $i101 == 1;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 5), $0.ref;
    goto $bb10;

  $bb56:
    assume $i96 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 5);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 28), $0.ref;
    goto $bb10;

  $bb50:
    assume $i88 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p4);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, $sub.i64(0, 28));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i90 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 4);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i90 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 3);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(12, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb29;

  $bb30:
    assume $i58 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb29;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i62 := set_mode_densblk($p8, $p33);
    call {:si_unique_call 273} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    call {:si_unique_call 274} {:cexpr "retval"} boogie_si_record_i64($i63);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i64 := $slt.i64($i63, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(6, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb37:
    assume $i68 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(639, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb39;

  $bb40:
    assume $i72 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(6, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i78 := st_compression($p8, $i77);
    call {:si_unique_call 276} {:cexpr "tmp___3"} boogie_si_record_i32($i78);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume $i79 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_71 := printk.ref.ref(.str.96, $p9);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i81 := $M.14;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i82 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 22), $0.ref;
    goto $bb10;

  $bb34:
    assume $i64 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i63, $0.ref;
    goto $bb10;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i48 := flush_buffer($p8, 0);
    call {:si_unique_call 268} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    call {:si_unique_call 269} {:cexpr "retval"} boogie_si_record_i64($i49);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p35, $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 2);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i49, $0.ref;
    goto $bb10;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 13), $0.ref;
    goto $bb10;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i25 := $urem.i64($i2, $i24);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_70 := printk.ref.ref(.str.95, $p9);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i64(0, 22), $0.ref;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i14, $0.ref;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  corral_source_split_1895_dummy:
    assume false;
    return;

  $bb123_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  $bb203_dummy:
    assume false;
    return;

  $bb80_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;
}



const st_ioctl: ref;

axiom st_ioctl == $sub.ref(0, 228984);

procedure st_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $M.14, $CurrAddr, $M.32, assertsPassed;



implementation st_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i1;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i133: i1;
  var $i139: i32;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i16;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i16;
  var $i184: i32;
  var $i185: i1;
  var $i145: i1;
  var $i186: i32;
  var $i140: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i16;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i16;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i16;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i16;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i16;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i16;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i16;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i16;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i16;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i64;
  var $p258: ref;
  var $i259: i16;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i16;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i16;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i16;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i16;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $i284: i16;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i8;
  var $i289: i32;
  var $i290: i1;
  var $p292: ref;
  var $i293: i16;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i32;
  var $i302: i64;
  var $i303: i32;
  var $p304: ref;
  var $i305: i16;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $p324: ref;
  var $i325: i1;
  var $p326: ref;
  var $i327: i32;
  var $p328: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $p333: ref;
  var $p334: ref;
  var $i335: i16;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i1;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i345: i32;
  var $i346: i32;
  var $i347: i1;
  var $p350: ref;
  var $p353: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i16;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $p368: ref;
  var $i369: i32;
  var $i370: i32;
  var $p371: ref;
  var $i372: i8;
  var $i373: i32;
  var $i374: i1;
  var $p377: ref;
  var $p378: ref;
  var $i379: i16;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i383: i16;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $p387: ref;
  var $i388: i16;
  var $i389: i32;
  var $i390: i1;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i395: i32;
  var $p396: ref;
  var $i397: i16;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $i401: i16;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $i405: i16;
  var $i406: i32;
  var $i407: i1;
  var $i408: i32;
  var $i409: i32;
  var $p410: ref;
  var $i411: i8;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $i415: i8;
  var $i416: i32;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $i421: i16;
  var $i422: i32;
  var $i423: i1;
  var $p424: ref;
  var $i425: i32;
  var $i426: i32;
  var $i427: i32;
  var $p429: ref;
  var $i430: i16;
  var $i431: i32;
  var $p432: ref;
  var $i433: i32;
  var $i434: i64;
  var $i435: i32;
  var $i428: i32;
  var $p436: ref;
  var $i437: i8;
  var $i438: i32;
  var $i439: i1;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $i443: i8;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i1;
  var $i448: i1;
  var $i449: i1;
  var $i450: i32;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i454: i32;
  var $i455: i64;
  var $p456: ref;
  var $p457: ref;
  var $i458: i32;
  var $i459: i32;
  var $p460: ref;
  var $i461: i8;
  var $i462: i32;
  var $i463: i32;
  var $i464: i32;
  var $i465: i64;
  var $p466: ref;
  var $p467: ref;
  var $i468: i32;
  var $p469: ref;
  var $p470: ref;
  var $i471: i32;
  var $p472: ref;
  var $p473: ref;
  var $i474: i32;
  var $i475: i1;
  var $p476: ref;
  var $i477: i8;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $i481: i32;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $i485: i32;
  var $p486: ref;
  var $i487: i32;
  var $i488: i32;
  var $i489: i32;
  var $p490: ref;
  var $p491: ref;
  var $i492: i8;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $i496: i32;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $i500: i32;
  var $p501: ref;
  var $i502: i32;
  var $i503: i32;
  var $i504: i32;
  var $p505: ref;
  var $i506: i32;
  var $i507: i32;
  var $i508: i32;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i8;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $i516: i64;
  var $i517: i64;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i1;
  var $p522: ref;
  var $i523: i32;
  var $i524: i1;
  var $p525: ref;
  var $i526: i64;
  var $i527: i64;
  var $p528: ref;
  var $p529: ref;
  var $i530: i64;
  var $i531: i64;
  var $p532: ref;
  var $p533: ref;
  var $i534: i32;
  var $i535: i64;
  var $p536: ref;
  var $p537: ref;
  var $i538: i32;
  var $i539: i64;
  var $p540: ref;
  var $p541: ref;
  var $i542: i8;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $i546: i8;
  var $i547: i32;
  var $i548: i1;
  var $p549: ref;
  var $i550: i64;
  var $i551: i64;
  var $p552: ref;
  var $p553: ref;
  var $i554: i8;
  var $i555: i32;
  var $i556: i1;
  var $p557: ref;
  var $i558: i64;
  var $i559: i64;
  var $p560: ref;
  var $p561: ref;
  var $i562: i8;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $i566: i64;
  var $i567: i64;
  var $p568: ref;
  var $p569: ref;
  var $i570: i8;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $i574: i64;
  var $i575: i64;
  var $p576: ref;
  var $p577: ref;
  var $i578: i8;
  var $i579: i32;
  var $i580: i1;
  var $p581: ref;
  var $i582: i64;
  var $i583: i64;
  var $p584: ref;
  var $p585: ref;
  var $i586: i8;
  var $i587: i32;
  var $i588: i1;
  var $p589: ref;
  var $i590: i64;
  var $i591: i64;
  var $p592: ref;
  var $p593: ref;
  var $i594: i8;
  var $i595: i32;
  var $i596: i1;
  var $p597: ref;
  var $i598: i64;
  var $i599: i64;
  var $p600: ref;
  var $p601: ref;
  var $i602: i8;
  var $i603: i32;
  var $i604: i1;
  var $p605: ref;
  var $i606: i64;
  var $i607: i64;
  var $p608: ref;
  var $p609: ref;
  var $i610: i8;
  var $i611: i32;
  var $i612: i1;
  var $p613: ref;
  var $i614: i8;
  var $i615: i32;
  var $i616: i1;
  var $p617: ref;
  var $i618: i32;
  var $i619: i1;
  var $p620: ref;
  var $i621: i8;
  var $i622: i32;
  var $i623: i1;
  var $p624: ref;
  var $i625: i64;
  var $i626: i64;
  var $p627: ref;
  var $p628: ref;
  var $i629: i8;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $i633: i64;
  var $i634: i64;
  var $p635: ref;
  var $p636: ref;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $i640: i1;
  var $i641: i1;
  var $i642: i32;
  var $i643: i32;
  var $i644: i1;
  var $i645: i32;
  var $i646: i1;
  var $i647: i32;
  var $i648: i64;
  var $p649: ref;
  var $p650: ref;
  var $i651: i32;
  var $i652: i1;
  var $i653: i32;
  var $p654: ref;
  var $i655: i1;
  var $i656: i1;
  var $i657: i1;
  var $i658: i1;
  var $i659: i1;
  var $i660: i1;
  var $i661: i1;
  var $i662: i8;
  var $i663: i1;
  var $i664: i32;
  var $i665: i1;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $i674: i32;
  var $i675: i32;
  var $i666: i32;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $i684: i32;
  var $i685: i32;
  var $i676: i32;
  var $i686: i1;
  var $i687: i64;
  var $p688: ref;
  var $p689: ref;
  var $i690: i32;
  var $i691: i1;
  var $i692: i1;
  var $p693: ref;
  var $p694: ref;
  var $i695: i64;
  var $i40: i32;
  var $p696: ref;
  var $i697: i64;
  var $i16: i64;
  var $p700: ref;
  var $p703: ref;
  var $p706: ref;
  var $p709: ref;
  var $p712: ref;
  var $p715: ref;
  var $p718: ref;
  var $p721: ref;
  var $p724: ref;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p6 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 319} {:cexpr "st_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 320} {:cexpr "st_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p11 := tape_name($p10);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i2);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i14 := ldv_mutex_lock_interruptible_14($p13);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 323} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 2048);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i34 := scsi_nonblockable_ioctl($p30, $i1, $p12, $i33);
    call {:si_unique_call 325} {:cexpr "retval"} boogie_si_record_i32($i34);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i37 := scsi_block_when_processing_errors($p36);
    call {:si_unique_call 327} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i38 == 1);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i34, $sub.i32(0, 19));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $lshr.i32($i1, 8);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 255);
    call {:si_unique_call 329} {:cexpr "cmd_type"} boogie_si_record_i32($i42);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i1, 255);
    call {:si_unique_call 330} {:cexpr "cmd_nr"} boogie_si_record_i32($i43);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i42, 109);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.0, $p436);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i438, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i440 := flush_buffer($p10, 0);
    call {:si_unique_call 369} {:cexpr "i"} boogie_si_record_i32($i440);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i441 := $slt.i32($i440, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i443 := $load.i8($M.0, $p442);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i444 := $zext.i8.i32($i443);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i42, 109);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb245, $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume !($i448 == 1);
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $i640 := $eq.i32($i42, 109);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i640} true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i640 == 1);
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_mutex_unlock_15($p654);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $i655 := $slt.i32($i1, 21382);
    assume {:verifier.code 0} true;
    assume {:branchcond $i655} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i1, 21382);
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb334, $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    assume !($i656 == 1);
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $i658 := $eq.i32($i1, 8837);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb342, $bb344;

  $bb344:
    assume !($i658 == 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i1, 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i659 == 1);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i1, 21395);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i660} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i660 == 1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p678, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.0, $p681);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(140, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i684 := $load.i32($M.0, $p683);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i685 := scsi_cmd_ioctl($p680, $p682, $i684, $i1, $p12);
    call {:si_unique_call 384} {:cexpr "i"} boogie_si_record_i32($i685);
    assume {:verifier.code 0} true;
    $i676 := $i685;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i686 := $ne.i32($i676, $sub.i32(0, 25));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.0, $p688);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i690 := scsi_ioctl($p689, $i1, $p12);
    call {:si_unique_call 380} {:cexpr "retval"} boogie_si_record_i32($i690);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i691 := $eq.i32($i690, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i691} true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i691 == 1);
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i695 := $sext.i32.i64($i690);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i16 := $i695;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb359:
    assume $i691 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i1, 6);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb362, $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb361;

  $bb362:
    assume $i692 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p693, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p694, 2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb356:
    assume $i686 == 1;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i687 := $sext.i32.i64($i676);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i16 := $i687;
    goto $bb3;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i660 == 1;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i661 := capable(17);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i662 := $zext.i1.i8($i661);
    call {:si_unique_call 382} {:cexpr "tmp___8"} boogie_si_record_i8($i662);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i663 := $trunc.i8.i1($i662);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    $i664 := 1;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i665 := $ne.i32($i664, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i665 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p668, $mul.ref(0, 1424)), $mul.ref(1344, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(672, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.0, $p671);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(140, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i674 := $load.i32($M.0, $p673);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i675 := scsi_cmd_ioctl($p670, $p672, $i674, $i1, $p12);
    call {:si_unique_call 386} {:cexpr "i"} boogie_si_record_i32($i675);
    assume {:verifier.code 0} true;
    $i666 := $i675;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i676 := $i666;
    goto $bb355;

  $bb352:
    assume $i665 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i666 := $sub.i32(0, 1);
    goto $bb354;

  $bb349:
    assume $i663 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i664 := 0;
    goto $bb351;

  $bb345:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb343;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i658 == 1;
    goto $bb343;

  $bb334:
    assume {:verifier.code 0} true;
    assume $i656 == 1;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb332:
    assume $i655 == 1;
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i1, 21378);
    assume {:verifier.code 0} true;
    assume {:branchcond $i657} true;
    goto $bb338, $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    assume !($i657 == 1);
    goto $bb337;

  $bb338:
    assume $i657 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb335;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb316:
    assume $i640 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i43, 3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i641 == 1);
    goto $bb318;

  $bb319:
    assume $i641 == 1;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i642 := $lshr.i32($i1, 16);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i643 := $and.i32($i642, 16383);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i644 := $ne.i32($i643, 8);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i645 := get_location($p10, $p4, $p3, 0);
    call {:si_unique_call 375} {:cexpr "i"} boogie_si_record_i32($i645);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i646 := $slt.i32($i645, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i647 := $load.i32($M.16, $p4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i648 := $zext.i32.i64($i647);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p649, $i648);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p650 := $bitcast.ref.ref($p7);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i651 := copy_to_user($p12, $p650, 8);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32($i651);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i652 := $ne.i32($i651, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i652} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i652 == 1);
    assume {:verifier.code 0} true;
    $i653 := 0;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i40 := $i653;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(16, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_mutex_unlock_16($p696);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i697 := $sext.i32.i64($i40);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i16 := $i697;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb327:
    assume $i652 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i653 := $sub.i32(0, 14);
    goto $bb329;

  $bb324:
    assume $i646 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i40 := $i645;
    goto $bb10;

  $bb321:
    assume $i644 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb245:
    assume $i448 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i43, 2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb247;

  $bb248:
    assume $i449 == 1;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i450 := $lshr.i32($i1, 16);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i451 := $and.i32($i450, 16383);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i452 := $ne.i32($i451, 48);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(312, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.0, $p453);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i455 := $sext.i32.i64($i454);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p456, $i455);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i458 := $load.i32($M.0, $p457);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i459 := $and.i32($i458, 16777215);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.0, $p460);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i463 := $shl.i32($i462, 24);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i464 := $or.i32($i459, $i463);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i465 := $zext.i32.i64($i464);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p466, $i465);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i468 := $load.i32($M.0, $p467);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p469, $i468);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i471 := $load.i32($M.0, $p470);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p472, $i471);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i474 := $load.i32($M.0, $p473);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i475 := $ne.i32($i474, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p510, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(635, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i512 := $load.i8($M.0, $p511);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i513 := $zext.i8.i32($i512);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i514 := $ne.i32($i513, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.0, $p519);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i520, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(664, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i534 := $load.i32($M.0, $p533);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i535 := $sext.i32.i64($i534);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p536, $i535);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.0, $p537);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i539 := $sext.i32.i64($i538);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p540, $i539);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(1, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i542 := $load.i8($M.0, $p541);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i543 := $zext.i8.i32($i542);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i543, 3);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb271, $bb273;

  $bb273:
    assume !($i544 == 1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(1, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i546 := $load.i8($M.0, $p545);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i547 := $zext.i8.i32($i546);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i547, 4);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i548 == 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(1, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i554 := $load.i8($M.0, $p553);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i555 := $zext.i8.i32($i554);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i556 := $ugt.i32($i555, 2);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i562 := $load.i8($M.0, $p561);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i563 := $zext.i8.i32($i562);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i563, 1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i564 == 1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i570 := $load.i8($M.0, $p569);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i570);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i571, 2);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i572 == 1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i578 := $load.i8($M.0, $p577);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i579 := $zext.i8.i32($i578);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i580 := $eq.i32($i579, 3);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i580} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i586 := $load.i8($M.0, $p585);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i587 := $zext.i8.i32($i586);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i588 := $eq.i32($i587, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i594 := $load.i8($M.0, $p593);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i595 := $zext.i8.i32($i594);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i595, 2);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(2, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i602 := $load.i8($M.0, $p601);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i603 := $zext.i8.i32($i602);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i604 := $ne.i32($i603, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i604} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(2, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.0, $p609);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i611 := $zext.i8.i32($i610);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i612 := $ne.i32($i611, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i612} true;
    goto $bb298, $bb300;

  $bb300:
    assume !($i612 == 1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(3, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i614 := $load.i8($M.0, $p613);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i615 := $zext.i8.i32($i614);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i616 := $ne.i32($i615, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb301, $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume !($i616 == 1);
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.0, $p620);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i622 := $zext.i8.i32($i621);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i623 := $ne.i32($i622, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i629 := $load.i8($M.0, $p628);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i630 := $zext.i8.i32($i629);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i631 := $ne.i32($i630, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i631} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p636 := $bitcast.ref.ref($p6);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i637 := copy_to_user($p12, $p636, 48);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32($i637);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(664, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p639, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb10;

  $bb312:
    assume $i638 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 14);
    goto $bb10;

  $bb309:
    assume $i631 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i633 := $load.i64($M.0, $p632);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i634 := $or.i64($i633, 32768);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p635, $i634);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i625 := $load.i64($M.0, $p624);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i626 := $or.i64($i625, 65536);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p627, $i626);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb301:
    assume $i616 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i618 := $load.i32($M.0, $p617);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i619 := $ne.i32($i618, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !($i619 == 1);
    goto $bb303;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i619 == 1;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb299;

  $bb295:
    assume $i604 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i606 := $load.i64($M.0, $p605);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i607 := $or.i64($i606, 268435456);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p608, $i607);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb292:
    assume $i596 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i598 := $load.i64($M.0, $p597);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i599 := $or.i64($i598, 262144);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p600, $i599);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb289:
    assume $i588 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i590 := $load.i64($M.0, $p589);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i591 := $or.i64($i590, 16777216);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p592, $i591);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume $i580 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i582 := $load.i64($M.0, $p581);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i583 := $or.i64($i582, 8388608);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p584, $i583);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume $i572 == 1;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i574 := $load.i64($M.0, $p573);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i575 := $or.i64($i574, 4194304);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p576, $i575);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb280:
    assume $i564 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i566 := $load.i64($M.0, $p565);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i567 := $or.i64($i566, 2097152);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p568, $i567);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb277:
    assume $i556 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i558 := $load.i64($M.0, $p557);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i559 := $or.i64($i558, 134217728);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p560, $i559);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i548 == 1;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i550 := $load.i64($M.0, $p549);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i551 := $or.i64($i550, 536870912);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p552, $i551);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb272;

  $bb265:
    assume $i521 == 1;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i523 := $load.i32($M.0, $p522);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i523, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i524 == 1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i530 := $load.i64($M.0, $p529);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i531 := $or.i64($i530, 2147483648);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p532, $i531);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb267:
    assume $i524 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i526 := $load.i64($M.0, $p525);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i527 := $or.i64($i526, 1073741824);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p528, $i527);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb262:
    assume $i514 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i516 := $load.i64($M.0, $p515);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i517 := $or.i64($i516, 67108864);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p518, $i517);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb253:
    assume $i475 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.0, $p476);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 2);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i479 == 1);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.0, $p491);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i492);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb258:
    assume $i494 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p495);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.0, $p497);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p498, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i500 := $load.i32($M.0, $p499);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i502 := $load.i32($M.0, $p501);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i503 := $add.i32($i500, $i502);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i504 := $add.i32($i503, $sub.i32(0, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i506 := $load.i32($M.0, $p505);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i507 := $sdiv.i32($i504, $i506);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i508 := $sub.i32($i496, $i507);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p509, $i508);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume $i479 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.0, $p480);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p483 := $load.ref($M.0, $p482);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.0, $p484);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p486);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i488 := $sdiv.i32($i485, $i487);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i489 := $add.i32($i481, $i488);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p490, $i489);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb250:
    assume $i452 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb239:
    assume $i445 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i446 := switch_partition($p10);
    call {:si_unique_call 371} {:cexpr "i"} boogie_si_record_i32($i446);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i447 := $slt.i32($i446, 0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb241:
    assume $i447 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i40 := $i446;
    goto $bb10;

  $bb236:
    assume $i441 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i40 := $i440;
    goto $bb10;

  $bb233:
    assume $i439 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 6);
    goto $bb10;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i43, 1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb14;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i32($i1, 16);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 16383);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 8);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i50 := copy_from_user($p49, $p12, 8);
    call {:si_unique_call 332} {:cexpr "tmp___2"} boogie_si_record_i64($i50);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 333} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i55 := $sext.i16.i32($i54);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 24);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(0, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i78 == 1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.0, $p228);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i230 := $sext.i16.i32($i229);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 6);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} reset_state($p10);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p253, $mul.ref(0, 2896)), $mul.ref(292, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.0, $p255);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i257 := $and.i64($i256, $sub.i64(0, 32769));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p255, $i257);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i259 := $load.i16($M.0, $p258);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i260 := $sext.i16.i32($i259);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 8);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i284 := $load.i16($M.0, $p283);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i285 := $sext.i16.i32($i284);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 7);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i293 := $load.i16($M.0, $p292);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i294 := $sext.i16.i32($i293);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 24);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i305 := $load.i16($M.0, $p304);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i306 := $sext.i16.i32($i305);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 33);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i335 := $load.i16($M.0, $p334);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i336 := $sext.i16.i32($i335);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 34);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i363 := $load.i16($M.0, $p362);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i364 := $sext.i16.i32($i363);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 22);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i379 := $load.i16($M.0, $p378);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i380 := $sext.i16.i32($i379);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 31);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb202, $bb204;

  $bb204:
    assume !($i381 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i383 := $load.i16($M.0, $p382);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i384 := $sext.i16.i32($i383);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 7);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.0, $p387);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i389 := $sext.i16.i32($i388);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 30);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i397 := $load.i16($M.0, $p396);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i398 := $sext.i16.i32($i397);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i398, 28);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb214, $bb216;

  $bb216:
    assume !($i399 == 1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i401 := $load.i16($M.0, $p400);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i402 := $sext.i16.i32($i401);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 29);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.0, $p410);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i32($i411);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i421 := $load.i16($M.0, $p420);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i422 := $sext.i16.i32($i421);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 32);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i423 == 1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i430 := $load.i16($M.0, $p429);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i431 := $sext.i16.i32($i430);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.0, $p432);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i434 := $sext.i32.i64($i433);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i435 := st_int_ioctl($p10, $i431, $i434);
    call {:si_unique_call 367} {:cexpr "retval"} boogie_si_record_i32($i435);
    assume {:verifier.code 0} true;
    $i428 := $i435;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i40 := $i428;
    goto $bb10;

  $bb229:
    assume $i423 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.0, $p424);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i426 := $and.i32($i425, 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i427 := st_compression($p10, $i426);
    call {:si_unique_call 365} {:cexpr "retval"} boogie_si_record_i32($i427);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i428 := $i427;
    goto $bb231;

  $bb220:
    assume $i413 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i415 := $load.i8($M.0, $p414);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i416 := $zext.i8.i32($i415);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i417 == 1);
    goto $bb222;

  $bb223:
    assume $i417 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i418 := switch_partition($p10);
    call {:si_unique_call 363} {:cexpr "i"} boogie_si_record_i32($i418);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i418, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i419 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i40 := $i418;
    goto $bb10;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i405 := $load.i16($M.0, $p404);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i406 := $sext.i16.i32($i405);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 28);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i408 := $zext.i1.i32($i407);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i409 := do_door_lock($p10, $i408);
    call {:si_unique_call 361} {:cexpr "retval"} boogie_si_record_i32($i409);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i40 := $i409;
    goto $bb10;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb215;

  $bb208:
    assume $i390 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.0, $p391);
    call {:si_unique_call 357} {:cexpr "_max2"} boogie_si_record_i32($i392);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i393 := $sgt.i32(1, $i392);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i393 == 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i394 := $i392;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i395 := do_load_unload($p10, $p0, $i394);
    call {:si_unique_call 359} {:cexpr "retval"} boogie_si_record_i32($i395);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i40 := $i395;
    goto $bb10;

  $bb210:
    assume $i393 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i394 := 1;
    goto $bb212;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i386 := do_load_unload($p10, $p0, 0);
    call {:si_unique_call 356} {:cexpr "retval"} boogie_si_record_i32($i386);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i40 := $i386;
    goto $bb10;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb203;

  $bb196:
    assume $i365 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.0, $p366);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.0, $p368);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i370 := set_location($p10, $i367, $i369, 0);
    call {:si_unique_call 354} {:cexpr "i"} boogie_si_record_i32($i370);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i372 := $load.i8($M.0, $p371);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i372);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i40 := $i370;
    goto $bb10;

  $bb198:
    assume $i374 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p377, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb180:
    assume $i337 == 1;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i342 := st_int_ioctl($p10, 6, 0);
    call {:si_unique_call 350} {:cexpr "i"} boogie_si_record_i32($i342);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i342, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i343 == 1);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i346 := partition_tape($p10, $i345);
    call {:si_unique_call 352} {:cexpr "i"} boogie_si_record_i32($i346);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i347 := $slt.i32($i346, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p350, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p353, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p356, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p700, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p703, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p706, 0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p709, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p712, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p715, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p718, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p721, 0);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p724, 0);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, 0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p358, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p359, 1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p360, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p361, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb10;

  $bb187:
    assume $i347 == 1;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i40 := $i346;
    goto $bb10;

  $bb185:
    assume $i343 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i40 := $i342;
    goto $bb10;

  $bb182:
    assume $i341 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb160:
    assume $i307 == 1;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.0, $p308);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb162, $bb164;

  $bb164:
    assume !($i311 == 1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i314 := $slt.i32($i313, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i314 == 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i317 := $sgt.i32($i316, 3);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.0, $p320);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i322 := $sge.i32($i319, $i321);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.0, $p326);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i330 := $sge.i32($i327, $i329);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, $i332);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb10;

  $bb176:
    assume $i330 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb170:
    assume $i322 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i323 := nbr_partitions($p10);
    call {:si_unique_call 348} {:cexpr "tmp___5"} boogie_si_record_i32($i323);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p324, $i323);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i323, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i325 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 5);
    goto $bb10;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb163;

  $bb154:
    assume $i295 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, $sub.i32(0, 268435456));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb156;

  $bb157:
    assume $i299 == 1;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i302 := $sext.i32.i64($i301);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i303 := st_set_options($p10, $i302);
    call {:si_unique_call 346} {:cexpr "retval"} boogie_si_record_i32($i303);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i40 := $i303;
    goto $bb10;

  $bb148:
    assume $i286 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.0, $p287);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb150;

  $bb151:
    assume $i290 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_73 := do_door_lock($p10, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb134:
    assume $i261 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i263 := $load.i16($M.0, $p262);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i264 := $sext.i16.i32($i263);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 20);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb136;

  $bb137:
    assume $i265 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.0, $p266);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i268 := $sext.i16.i32($i267);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 21);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb136;

  $bb139:
    assume $i269 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.0, $p270);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i272 := $sext.i16.i32($i271);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 27);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb136;

  $bb141:
    assume $i273 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i275 := $load.i16($M.0, $p274);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i276 := $sext.i16.i32($i275);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 24);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb136;

  $bb143:
    assume $i277 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.0, $p278);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i280 := $sext.i16.i32($i279);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 33);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb136;

  $bb145:
    assume $i281 == 1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb120:
    assume $i231 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i233 := $load.i16($M.0, $p232);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i234 := $sext.i16.i32($i233);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 7);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb122;

  $bb123:
    assume $i235 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i237 := $load.i16($M.0, $p236);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i238 := $sext.i16.i32($i237);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 9);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb122;

  $bb125:
    assume $i239 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i241 := $load.i16($M.0, $p240);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i242 := $sext.i16.i32($i241);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i243 := $ne.i32($i242, 13);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb122;

  $bb127:
    assume $i243 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.0, $p244);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i246 := $sext.i16.i32($i245);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 22);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb122;

  $bb129:
    assume $i247 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i249 := $load.i16($M.0, $p248);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i250 := $sext.i16.i32($i249);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 12);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb122;

  $bb131:
    assume $i251 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 5);
    goto $bb10;

  $bb40:
    assume $i78 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(1, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.0, $p125);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i127 := $sext.i16.i32($i126);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 22);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i128 == 1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i143 := $sext.i16.i32($i142);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 6);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i144} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i144 == 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.0, $p146);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i148 := $sext.i16.i32($i147);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 7);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i149} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i149 == 1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i152 := $sext.i16.i32($i151);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 9);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i153} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i153 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.0, $p154);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i156 := $sext.i16.i32($i155);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 12);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i157} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i157 == 1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.0, $p158);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i160 := $sext.i16.i32($i159);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 28);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i161} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i161 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.0, $p162);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i164 := $sext.i16.i32($i163);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 30);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i165} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i165 == 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.0, $p166);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i168 := $sext.i16.i32($i167);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i169 == 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.0, $p170);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i172 := $sext.i16.i32($i171);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 11);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i173} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i173 == 1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.0, $p174);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i176 := $sext.i16.i32($i175);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i177} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i177 == 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.0, $p178);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i180 := $sext.i16.i32($i179);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 10);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i145 := 1;
    assume {:branchcond $i181} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i181 == 1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.0, $p182);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i184 := $sext.i16.i32($i183);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 32);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i145 := $i185;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i32($i145);
    call {:si_unique_call 340} {:cexpr "i"} boogie_si_record_i32($i186);
    assume {:verifier.code 0} true;
    $i140 := $i186;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i187 := flush_buffer($p10, $i140);
    call {:si_unique_call 339} {:cexpr "i"} boogie_si_record_i32($i187);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i187, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb95:
    assume $i192 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i195 := $sext.i16.i32($i194);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 6);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb98, $bb100;

  $bb100:
    assume !($i196 == 1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.0, $p197);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i199 := $sext.i16.i32($i198);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 7);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i200 == 1);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i202 := $load.i16($M.0, $p201);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i203 := $sext.i16.i32($i202);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 22);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i204 == 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.0, $p205);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i207 := $sext.i16.i32($i206);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 2);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i208 == 1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.0, $p209);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i211 := $sext.i16.i32($i210);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 10);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb97;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i213 := st_int_ioctl($p10, 5, 1);
    call {:si_unique_call 342} {:cexpr "i"} boogie_si_record_i32($i213);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i213, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.0, $p215);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i217 := $sext.i16.i32($i216);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb112, $bb114;

  $bb114:
    assume !($i218 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i220 := $load.i16($M.0, $p219);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i221 := $sext.i16.i32($i220);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 10);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p227, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i224, 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i225);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb113;

  $bb109:
    assume $i214 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i40 := $i213;
    goto $bb10;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb99;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb99;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb99;

  $bb92:
    assume $i188 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i40 := $i187;
    goto $bb10;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb72;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb72;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb72;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb72;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb72;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb72;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb72;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb72;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb72;

  $bb65:
    assume $i128 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i133 := 1;
    assume {:branchcond $i132} true;
    goto $bb67, $bb69;

  $bb69:
    assume !($i132 == 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p10, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i135, $i137);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i133 := $i138;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i139 := $zext.i1.i32($i133);
    call {:si_unique_call 337} {:cexpr "i"} boogie_si_record_i32($i139);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb70;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb68;

  $bb42:
    assume $i82 == 1;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i85 := $sext.i16.i32($i84);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i86 == 1);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i89 := $sext.i16.i32($i88);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 11);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i90 == 1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i93 := $sext.i16.i32($i92);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 12);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i94 == 1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i108 := $sext.i16.i32($i107);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 2);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb55, $bb57;

  $bb57:
    assume !($i109 == 1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.0, $p110);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i112 := $sext.i16.i32($i111);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 10);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i120 := $sge.i32($i119, 0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i120 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb56;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, $sub.i32(0, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i97);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i101 := $sge.i32($i100, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i101 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p24, $mul.ref($i27, 16)), $mul.ref(12, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i104);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb45;

  $bb32:
    assume $i66 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i69 := $sext.i16.i32($i68);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 24);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb34;

  $bb35:
    assume $i70 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $sub.i32(0, 268435456));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb34;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 6);
    goto $bb10;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i57 := capable(21);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i57);
    call {:si_unique_call 335} {:cexpr "tmp___3"} boogie_si_record_i8($i58);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_72 := printk.ref.ref(.str.98, $p11);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb10;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb27;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 14);
    goto $bb10;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i40 := $i34;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const st_compat_ioctl: ref;

axiom st_compat_ioctl == $sub.ref(0, 230016);

procedure st_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation st_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "st_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 388} {:cexpr "st_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2896)), $mul.ref(0, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3032)), $mul.ref(512, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 515);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 2896)), $mul.ref(0, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3032)), $mul.ref(512, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i2);
    call {:si_unique_call 389} $i23 := devirtbounce.4($p21, $p7, $i1, $p22);
    call {:si_unique_call 390} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const st_open: ref;

axiom st_open == $sub.ref(0, 231048);

procedure st_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $M.4, assertsPassed, $CurrAddr;



implementation st_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i35: i32;
  var $i36: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i15: i32;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i2 := iminor($p0);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i3 := iminor($p0);
    call {:si_unique_call 394} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, $sub.i32(0, 256));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 3);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 31);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    call {:si_unique_call 395} {:cexpr "dev"} boogie_si_record_i32($i7);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(140, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 25));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(140, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p12 := scsi_tape_get($i7);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p12);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p18 := tape_name($p12);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} spin_lock(st_use_lock);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(636, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(636, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} spin_unlock(st_use_lock);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i24 := iminor($p0);
    call {:si_unique_call 403} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 128);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 404} {:cexpr "tmp___1"} boogie_si_record_i8($i28);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(643, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i28);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i33 := scsi_autopm_get_device($p32);
    call {:si_unique_call 406} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i39 := scsi_block_when_processing_errors($p38);
    call {:si_unique_call 412} {:cexpr "tmp___4"} boogie_si_record_i32($i39);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(299, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i46 := enlarge_buffer($p42, 4096, $i45);
    call {:si_unique_call 414} {:cexpr "tmp___5"} boogie_si_record_i32($i46);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 152)), $mul.ref(1, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 3);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p92, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p100, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(306, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(660, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i73 := check_tape($p12, $p1);
    call {:si_unique_call 417} {:cexpr "retval"} boogie_si_record_i32($i73);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 2048);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb25:
    assume $i78 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i73, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb27;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 5);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i84, 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} normalize_buffer($p86);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} spin_lock(st_use_lock);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(636, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_unlock(st_use_lock);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} scsi_tape_put($p12);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i36, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb3;

  $bb34:
    assume $i88 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p12, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} scsi_autopm_put_device($p90);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i83 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 123);
    goto $bb32;

  $bb22:
    assume $i74 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i73, 1;
    goto $bb10;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_74 := printk.ref.ref(.str.74, $p18);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i35, $i36 := $sub.i32(0, 75), 1;
    goto $bb10;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i35, $i36 := $sub.i32(0, 6), 1;
    goto $bb10;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i35, $i36 := $sub.i32(0, 5), 0;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} spin_unlock(st_use_lock);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} scsi_tape_put($p12);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 6);
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const st_flush: ref;

axiom st_flush == $sub.ref(0, 232080);

procedure st_flush($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.30, $M.16;



implementation st_flush($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $i132: i1;
  var $i133: i32;
  var $i130: i32;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i158: i32;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i184: i32;
  var $p185: ref;
  var $i186: i8;
  var $i187: i32;
  var $i188: i1;
  var $i183: i32;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i176: i32;
  var $i199: i32;
  var $i134: i32;
  var $i34: i32;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i22: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p18 := tape_name($p5);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(128, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i20 := atomic_long_read($p19);
    call {:si_unique_call 422} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i64($i20, 1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i199 := $i35;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i134 := $i199;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i34 := $i134;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i207 := $i34;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i22 := $i207;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb102:
    assume $i203 == 1;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i204 := st_int_ioctl($p5, 6, 1);
    call {:si_unique_call 441} {:cexpr "result2"} boogie_si_record_i32($i204);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i34, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    $i206 := $i34;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i207 := $i206;
    goto $bb107;

  $bb104:
    assume $i205 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i206 := $i204;
    goto $bb106;

  $bb68:
    assume $i138 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i142);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p7, $mul.ref($i10, 56)), $mul.ref(1, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb70, $bb72;

  $bb72:
    assume !($i148 == 1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i152 == 1);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i180 == 1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i184 := $i35;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i186 := $load.i8($M.0, $p185);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i186);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    $i198 := $i184;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i176 := $i198;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i199 := $i176;
    goto $bb101;

  $bb94:
    assume $i188 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i183 := $i184;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i191 := $sge.i32($i190, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(8, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, 2);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i198 := $i183;
    goto $bb99;

  $bb96:
    assume $i191 == 1;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, 1);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, $i194);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb88:
    assume $i180 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i181 := cross_eof($p5, 1);
    call {:si_unique_call 439} {:cexpr "result"} boogie_si_record_i32($i181);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i182 == 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i184 := $i181;
    goto $bb93;

  $bb90:
    assume $i182 == 1;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i183 := $i181;
    goto $bb92;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(294, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i156 == 1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i175 := $i35;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i158 := $i175;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i176 := $i158;
    goto $bb87;

  $bb78:
    assume $i162 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i163 := cross_eof($p5, 0);
    call {:si_unique_call 437} {:cexpr "result"} boogie_si_record_i32($i163);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i164 == 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p174, 0);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i175 := $i163;
    goto $bb86;

  $bb80:
    assume $i164 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i167 := $sge.i32($i166, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(8, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(1, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, 2);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i167 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i169, 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p140, $mul.ref($i143, 16)), $mul.ref(12, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i170);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb75:
    assume $i156 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i157 := flush_buffer($p5, 0);
    call {:si_unique_call 435} {:cexpr "result"} boogie_si_record_i32($i157);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i158 := $i157;
    goto $bb77;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb71;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb29;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 427} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p55, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 16);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(296, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i66);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p2);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p75 := st_do_scsi($0.ref, $p5, $p68, 0, 3, $i74, 0, 1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i86 == 1);
    $p87 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} st_release_request($p75);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_75 := printk.ref.ref(.str.101, $p18);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i35, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $i35;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i130 := $i133;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i134 := $i130;
    goto $bb67;

  $bb64:
    assume $i132 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32(0, 5);
    goto $bb66;

  $bb41:
    assume $i89 == 1;
    $p90 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb43;

  $bb44:
    assume $i93 == 1;
    $p94 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 64);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb43;

  $bb46:
    assume $i98 == 1;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i103 == 1);
    $p105 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb43;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb49;

  $bb49:
    $p109 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i112 == 1);
    $p113 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb43;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} st_release_request($p75);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i118 := $sge.i32($i117, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(8, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(296, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(1, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 2);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i130 := $i35;
    goto $bb63;

  $bb60:
    assume $i127 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_76 := cross_eof($p5, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i118 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i120, 1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i121);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb39;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb49;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb39;

  $bb35:
    assume $i77 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    call {:si_unique_call 429} {:cexpr "result"} boogie_si_record_i32($i81);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i34 := $i81;
    goto $bb15;

  $bb32:
    assume $i60 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i40 := switch_partition($p5);
    call {:si_unique_call 426} {:cexpr "result2"} boogie_si_record_i32($i40);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i35, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i35;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i34 := $i43;
    goto $bb15;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb24;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i31 := st_flush_write_buffer($p5);
    call {:si_unique_call 424} {:cexpr "result"} boogie_si_record_i32($i31);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $i31;
    goto $bb17;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i31, $sub.i32(0, 28));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    goto $bb15;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;
}



const st_release: ref;

axiom st_release == $sub.ref(0, 233112);

procedure st_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed, $CurrAddr;



implementation st_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(304, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} normalize_buffer($p11);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} spin_lock(st_use_lock);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 688)), $mul.ref(636, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock(st_use_lock);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} scsi_autopm_put_device($p14);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} scsi_tape_put($p4);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_77 := do_door_lock($p4, 0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const do_door_lock: ref;

axiom do_door_lock == $sub.ref(0, 234144);

procedure do_door_lock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_door_lock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "do_door_lock:arg:do_lock"} boogie_si_record_i32($i1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i3 := (if $i2 == 1 then 21376 else 21377);
    call {:si_unique_call 449} {:cexpr "cmd"} boogie_si_record_i32($i3);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i6 := scsi_ioctl($p5, $i3, $0.ref);
    call {:si_unique_call 451} {:cexpr "retval"} boogie_si_record_i32($i6);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_tape_put: ref;

axiom scsi_tape_put == $sub.ref(0, 235176);

procedure scsi_tape_put($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed, $M.0, $CurrAddr;



implementation scsi_tape_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ldv_mutex_lock_8(st_ref_mutex);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(680, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_78 := kref_put($p3, scsi_tape_release);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} scsi_device_put($p2);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ldv_mutex_unlock_9(st_ref_mutex);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 236208);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_mutex_lock_st_ref_mutex($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} mutex_lock($p0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const scsi_device_put: ref;

axiom scsi_device_put == $sub.ref(0, 237240);

procedure scsi_device_put($p0: ref);
  free requires assertsPassed;



implementation scsi_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 238272);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} ldv_mutex_unlock_st_ref_mutex($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} mutex_unlock($p0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const scsi_ioctl: ref;

axiom scsi_ioctl == $sub.ref(0, 239304);

procedure scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 460} {:cexpr "scsi_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 462} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_long_read: ref;

axiom atomic_long_read == $sub.ref(0, 240336);

procedure atomic_long_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic_long_read($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i1 := atomic64_read($p0);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const st_flush_write_buffer: ref;

axiom st_flush_write_buffer == $sub.ref(0, 241368);

procedure st_flush_write_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_flush_write_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $i95: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i99: i32;
  var $i111: i32;
  var $i4: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i2 := write_behind_check($p0);
    call {:si_unique_call 467} {:cexpr "result"} boogie_si_record_i32($i2);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i4 := $i111;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 468} {:cexpr "transfer"} boogie_si_record_i32($i12);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 469} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p13, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 10);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i18 := $sdiv.i32($i12, $i17);
    call {:si_unique_call 470} {:cexpr "blks"} boogie_si_record_i32($i18);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 16);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i18, 8);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i18);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p34 := st_do_scsi($0.ref, $p0, $p27, $i12, 1, $i33, 0, 1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i102 := $sge.i32($i101, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 0);
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} st_release_request($p34);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i111 := $i99;
    goto $bb37;

  $bb34:
    assume $i102 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, $i18);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p96 := tape_name($p0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_79 := printk.ref.ref(.str.85, $p96);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i95 := $sub.i32(0, 5);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i99 := $i95;
    goto $bb33;

  $bb12:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb14;

  $bb15:
    assume $i61 == 1;
    $p62 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 64);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb14;

  $bb17:
    assume $i66 == 1;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i71 == 1);
    $p73 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb14;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb20;

  $bb20:
    $p77 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i80 == 1);
    $p81 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb14;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i90 := $sge.i32($i89, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32(0, 28);
    goto $bb32;

  $bb29:
    assume $i90 == 1;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, $i18);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p42, $mul.ref($i45, 16)), $mul.ref(8, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb25;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb20;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i4 := $i40;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const switch_partition: ref;

axiom switch_partition == $sub.ref(0, 242400);

procedure switch_partition($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation switch_partition($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, $i4);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref($i11, 16)), $mul.ref(3, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref($i11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i22 := set_location($p0, $i19, $i21, 1);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i6 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref($i11, 16)), $mul.ref(4, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 243432);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const st_do_scsi: ref;

axiom st_do_scsi == $sub.ref(0, 244464);

procedure st_do_scsi($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_do_scsi($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32) returns ($r: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p29: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "st_do_scsi:arg:bytes"} boogie_si_record_i32($i3);
    call {:si_unique_call 478} {:cexpr "st_do_scsi:arg:direction"} boogie_si_record_i32($i4);
    call {:si_unique_call 479} {:cexpr "st_do_scsi:arg:timeout"} boogie_si_record_i32($i5);
    call {:si_unique_call 480} {:cexpr "st_do_scsi:arg:retries"} boogie_si_record_i32($i6);
    call {:si_unique_call 481} {:cexpr "st_do_scsi:arg:do_wait"} boogie_si_record_i32($i7);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p35 := $p0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i7, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(184, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} init_completion($p40);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p35, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    $p64 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i3);
    $p66 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i67);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i69 := $shl.i64(4096, $i68);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i65, $i69);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i71 := $sub.i64($i70, 1);
    $p72 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 12);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i76 := $lshr.i64($i71, $i75);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    $p78 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(12, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    $p83 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p82);
    $p84 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, 0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i85 := $ugt.i64(16, 63);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i85 == 1);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p35, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 490} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p89, $p2, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i97 := st_scsi_execute($p35, $p2, $i4, $0.ref, $i3, $i5, $i6);
    call {:si_unique_call 492} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i98 == 1);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i7, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p29 := $p35;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $r := $p29;
    return;

  $bb29:
    assume $i105 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} wait_for_completion($p40);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p35, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $0.ref);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i107 := st_chk_result($p1, $p35);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i107);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i98 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $sub.i32(0, 16));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $0.ref);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i85 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p35, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 489} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p87, $p2, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i47 == 1;
    $p48 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 152)), $mul.ref(146, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    $p54 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(12, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    $p59 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p58);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p35);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p32 := st_allocate_request($p1);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $p32;
    goto $bb16;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p18 := tape_name($p1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_80 := printk.ref.ref(.str.79, $p18);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p20 := get_current();
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i21 := signal_pending($p20);
    call {:si_unique_call 486} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 16));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $sub.i32(0, 4));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const st_release_request: ref;

axiom st_release_request == $sub.ref(0, 245496);

procedure st_release_request($p0: ref);
  free requires assertsPassed;



implementation st_release_request($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} kfree($p1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    return;
}



const cross_eof: ref;

axiom cross_eof == $sub.ref(0, 246528);

procedure cross_eof($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cross_eof($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i33: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 497} {:cexpr "cross_eof:arg:forward"} boogie_si_record_i32($i1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 17);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p26 := st_do_scsi($0.ref, $p0, $p19, 0, 3, $i25, 0, 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} st_release_request($p26);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i33 := $i47;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p40 := tape_name($p0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i1, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p42 := (if $i41 == 1 then .str.87 else .str.88);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_81 := printk.ref.ref.ref(.str.86, $p40, $p42);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const flush_buffer: ref;

axiom flush_buffer == $sub.ref(0, 247560);

procedure flush_buffer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation flush_buffer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i64;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i77: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "flush_buffer:arg:seek_next"} boogie_si_record_i32($i1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(0, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i28, $i32);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i36 := $sdiv.i32($i33, $i35);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i40, $i42);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i47 := $sdiv.i32($i44, $i46);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i36, $i47);
    call {:si_unique_call 505} {:cexpr "backspace"} boogie_si_record_i32($i48);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i1, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(1, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i6 := $i77;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb32:
    assume $i81 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i84 := $sge.i32($i83, 0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 0);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(1, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i84 == 1;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(1, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i76 := $i71;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb31;

  $bb25:
    assume $i72 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i48, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb27;

  $bb28:
    assume $i73 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i48);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i75 := st_int_ioctl($p0, 4, $i74);
    call {:si_unique_call 509} {:cexpr "result"} boogie_si_record_i32($i75);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb30;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i60 := cross_eof($p0, 0);
    call {:si_unique_call 507} {:cexpr "result"} boogie_si_record_i32($i60);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i61 == 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i65 := $sge.i32($i64, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i71 := $i60;
    goto $bb24;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(12, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p12, $mul.ref($i15, 16)), $mul.ref(1, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i21 := st_flush_write_buffer($p0);
    call {:si_unique_call 504} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;
}



const st_int_ioctl: ref;

axiom st_int_ioctl == $sub.ref(0, 248592);

procedure st_int_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_int_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i72: i1;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i8;
  var $p78: ref;
  var $i79: i64;
  var $i80: i8;
  var $p81: ref;
  var $i82: i8;
  var $p83: ref;
  var $i84: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i71: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i8;
  var $p103: ref;
  var $i104: i64;
  var $i105: i8;
  var $p106: ref;
  var $i107: i8;
  var $p108: ref;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i8;
  var $p120: ref;
  var $i121: i64;
  var $i122: i8;
  var $p123: ref;
  var $i124: i8;
  var $p125: ref;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $i137: i8;
  var $p138: ref;
  var $i139: i64;
  var $i140: i8;
  var $p141: ref;
  var $i142: i8;
  var $p143: ref;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i8;
  var $p155: ref;
  var $i156: i64;
  var $i157: i8;
  var $p158: ref;
  var $i159: i8;
  var $p160: ref;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i64;
  var $i169: i8;
  var $p170: ref;
  var $i171: i64;
  var $i172: i8;
  var $p173: ref;
  var $i174: i8;
  var $p175: ref;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i1;
  var $p186: ref;
  var $i187: i1;
  var $i188: i1;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $p198: ref;
  var $i199: i64;
  var $i200: i8;
  var $p201: ref;
  var $i202: i64;
  var $i203: i8;
  var $p204: ref;
  var $i205: i8;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i8;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i8;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i1;
  var $i266: i32;
  var $i267: i8;
  var $p268: ref;
  var $p269: ref;
  var $i270: i8;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i32;
  var $i277: i8;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i285: i32;
  var $p289: ref;
  var $i290: i8;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i32;
  var $i297: i1;
  var $i298: i1;
  var $i299: i1;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $i303: i32;
  var $i304: i1;
  var $i305: i64;
  var $p306: ref;
  var $i307: i32;
  var $i308: i64;
  var $i309: i1;
  var $i310: i64;
  var $p311: ref;
  var $i312: i32;
  var $i313: i64;
  var $i314: i1;
  var $p316: ref;
  var $p317: ref;
  var $i318: i8;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i1;
  var $i329: i8;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i8;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $i340: i8;
  var $i341: i32;
  var $i342: i32;
  var $i343: i8;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i1;
  var $i355: i8;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $i362: i1;
  var $i363: i64;
  var $i364: i8;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $i371: i8;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i1;
  var $i378: i1;
  var $i379: i64;
  var $i380: i1;
  var $p381: ref;
  var $p383: ref;
  var $i384: i32;
  var $i385: i64;
  var $i382: i64;
  var $i386: i64;
  var $i387: i8;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $i393: i64;
  var $i394: i8;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i8;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $i411: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $i419: i32;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $i423: i32;
  var $i424: i1;
  var $p425: ref;
  var $p426: ref;
  var $i427: i8;
  var $p428: ref;
  var $i429: i1;
  var $i430: i32;
  var $i432: i1;
  var $i433: i32;
  var $i434: i32;
  var $i431: i32;
  var $i435: i1;
  var $i436: i1;
  var $i437: i32;
  var $i438: i32;
  var $p439: ref;
  var $p440: ref;
  var $i441: i32;
  var $i442: i1;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $i446: i32;
  var $p447: ref;
  var $i448: i32;
  var $i449: i32;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $i459: i1;
  var $i460: i64;
  var $i461: i8;
  var $p462: ref;
  var $i463: i1;
  var $i464: i8;
  var $i465: i32;
  var $i466: i32;
  var $i467: i8;
  var $p468: ref;
  var $i469: i1;
  var $i470: i8;
  var $p471: ref;
  var $i472: i1;
  var $p473: ref;
  var $i474: i1;
  var $p475: ref;
  var $i476: i1;
  var $p477: ref;
  var $i478: i1;
  var $i479: i1;
  var $p480: ref;
  var $p482: ref;
  var $p483: ref;
  var $p485: ref;
  var $i486: i8;
  var $i487: i32;
  var $i488: i32;
  var $i489: i1;
  var $i490: i1;
  var $i491: i1;
  var $i492: i1;
  var $i493: i1;
  var $p494: ref;
  var $p495: ref;
  var $p496: ref;
  var $i497: i8;
  var $i498: i32;
  var $i499: i1;
  var $p500: ref;
  var $i501: i64;
  var $i502: i32;
  var $i503: i32;
  var $i504: i1;
  var $i505: i1;
  var $p506: ref;
  var $i507: i32;
  var $i508: i1;
  var $p509: ref;
  var $i510: i8;
  var $i511: i32;
  var $i512: i32;
  var $i513: i1;
  var $p515: ref;
  var $i516: i8;
  var $i517: i32;
  var $i518: i1;
  var $p520: ref;
  var $i521: i8;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $i527: i1;
  var $i528: i32;
  var $i529: i32;
  var $i530: i64;
  var $i531: i1;
  var $p532: ref;
  var $i525: i32;
  var $i526: i32;
  var $p533: ref;
  var $i535: i1;
  var $i536: i1;
  var $i537: i1;
  var $i538: i32;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $i543: i1;
  var $i544: i1;
  var $i545: i1;
  var $i546: i1;
  var $i547: i32;
  var $i548: i32;
  var $p549: ref;
  var $i550: i32;
  var $i551: i1;
  var $i552: i32;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i1;
  var $p557: ref;
  var $i558: i8;
  var $i559: i32;
  var $i560: i1;
  var $p561: ref;
  var $i562: i32;
  var $i563: i1;
  var $p564: ref;
  var $i565: i32;
  var $i566: i32;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $i570: i1;
  var $i571: i32;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i575: i1;
  var $p576: ref;
  var $i577: i8;
  var $i578: i32;
  var $i579: i1;
  var $p580: ref;
  var $i581: i32;
  var $i582: i32;
  var $p583: ref;
  var $p584: ref;
  var $i585: i1;
  var $i586: i1;
  var $i587: i32;
  var $i588: i32;
  var $p589: ref;
  var $i590: i32;
  var $i591: i1;
  var $i592: i32;
  var $p593: ref;
  var $p594: ref;
  var $i595: i1;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $i599: i1;
  var $i600: i1;
  var $i601: i1;
  var $i602: i1;
  var $p604: ref;
  var $i605: i8;
  var $i606: i32;
  var $i607: i1;
  var $p608: ref;
  var $i609: i8;
  var $i610: i32;
  var $i611: i32;
  var $i612: i1;
  var $p613: ref;
  var $i614: i8;
  var $i615: i32;
  var $i616: i32;
  var $i617: i32;
  var $i618: i8;
  var $p619: ref;
  var $i620: i32;
  var $i621: i1;
  var $p622: ref;
  var $i534: i32;
  var $p624: ref;
  var $i625: i8;
  var $i626: i32;
  var $i627: i1;
  var $p628: ref;
  var $i481: i32;
  var $i29: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 511} {:cexpr "st_int_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 512} {:cexpr "st_int_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p4 := tape_name($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 514} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 516} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_82 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 519} {:cexpr "timeout"} boogie_si_record_i32($i31);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 520} {:cexpr "fileno"} boogie_si_record_i32($i39);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 521} {:cexpr "blkno"} boogie_si_record_i32($i41);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(2, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    call {:si_unique_call 522} {:cexpr "at_sm"} boogie_si_record_i32($i44);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 523} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p45, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i1, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i1, 65537);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i1, 65537);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 38);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.0, $p289);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb126, $bb128;

  $bb128:
    assume !($i292 == 1);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p294, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p295);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i297 := $ne.i32($i296, 0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i1, 20);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb134;

  $bb134:
    assume !($i298 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i1, 65537);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p316, 21);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(305, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i318 := $load.i8($M.0, $p317);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i319 := $zext.i8.i32($i318);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i320 := $and.i32($i319, 1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p323, 12);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 547} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p327, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i1, 24);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i328 == 1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.0, $p339);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i32($i340);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i342 := $shl.i32($i341, 4);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i342);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p345, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($p347, $mul.ref(2, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p348, $i343);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p350, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p352, $mul.ref(3, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p353, 8);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i1, 21);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i354 == 1);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i1, 65537);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i362 == 1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.0, $p370);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p373, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($p375, $mul.ref(4, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p376, $i371);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i1, 20);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb160, $bb162;

  $bb162:
    assume !($i377 == 1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i1, 65537);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i378 == 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    call {:si_unique_call 549} {:cexpr "ltmp"} boogie_si_record_i64($i385);
    assume {:verifier.code 0} true;
    $i382 := $i385;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i386 := $ashr.i64($i382, 16);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i64.i8($i386);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p389, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($p391, $mul.ref(9, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p392, $i387);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i393 := $ashr.i64($i382, 8);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i64.i8($i393);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.0, $p395);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p396, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($p398, $mul.ref(10, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p399, $i394);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i64.i8($i382);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p403);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($p404, $mul.ref(11, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p405, $i400);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.0, $p406);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p407, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p408);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p409, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i411 := $load.i32($M.0, $p410);
    call {:si_unique_call 550} {:cexpr "timeout"} boogie_si_record_i32($i411);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $i41, $i39, $i44, 0, $i411, 12, 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p412 := $bitcast.ref.ref($p3);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p413 := st_do_scsi($0.ref, $p0, $p412, $i96, $i97, $i95, 0, 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i415 := $eq.i64($i414, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.0, $p420);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i423 := $load.i32($M.0, $p422);
    call {:si_unique_call 551} {:cexpr "ioctl_result"} boogie_si_record_i32($i423);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i423, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i424 == 1);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p483 := $load.ref($M.0, $p482);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i486 := $load.i8($M.0, $p485);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i487 := $zext.i8.i32($i486);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i488 := $and.i32($i487, 64);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i489 := $ne.i32($i488, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    $p496 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.0, $p496);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i498 := $zext.i8.i32($i497);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i499 := $ne.i32($i498, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i499} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    $i503 := 0;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i1, 5);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb231, $bb233;

  $bb233:
    assume !($i504 == 1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i1, 35);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i505 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i535 := $eq.i32($i1, 1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i535} true;
    goto $bb254, $bb256;

  $bb256:
    assume !($i535 == 1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i1, 11);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i536 == 1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i1, 2);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb263, $bb265;

  $bb265:
    assume !($i543 == 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i1, 10);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i544 == 1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i556 := $eq.i32($i1, 3);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i556 == 1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i1, 4);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i575 == 1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i1, 12);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i595} true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i595 == 1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i1, 20);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb308, $bb310;

  $bb310:
    assume !($i599 == 1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i1, 21);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i600 == 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i601 := $eq.i32($i1, 24);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i601 == 1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i1, 65537);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i602 == 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i621 := $ne.i32($i94, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i534 := $i423;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i625 := $load.i8($M.0, $p624);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i626 := $zext.i8.i32($i625);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i626, 8);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} st_release_request($p413);
    assume {:verifier.code 0} true;
    $i481 := $i534;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i29 := $i481;
    goto $bb8;

  $bb327:
    assume $i627 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p628, 7);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb324:
    assume $i621 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p622, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb309;

  $bb309:
    $p604 := $add.ref($add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.0, $p604);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i32($i605);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i606, 5);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i607} true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i607 == 1);
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb317:
    assume $i607 == 1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(305, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.0, $p608);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i610 := $zext.i8.i32($i609);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i611 := $and.i32($i610, 2);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i611, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i612} true;
    goto $bb320, $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    assume !($i612 == 1);
    goto $bb319;

  $bb320:
    assume $i612 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(305, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i614 := $load.i8($M.0, $p613);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i615 := $zext.i8.i32($i614);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i616 := $xor.i32($i615, 1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i617 := $or.i32($i616, 2);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i618 := $trunc.i32.i8($i617);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(305, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p619, $i618);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} st_release_request($p413);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i620 := st_int_ioctl($p0, $i1, $i2);
    call {:si_unique_call 563} {:cexpr "tmp___2"} boogie_si_record_i32($i620);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i29 := $i620;
    goto $bb8;

  $bb313:
    assume {:verifier.code 0} true;
    assume $i601 == 1;
    goto $bb309;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb309;

  $bb308:
    assume {:verifier.code 0} true;
    assume $i599 == 1;
    goto $bb309;

  $bb305:
    assume $i595 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p596, $sub.i32(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p597, $sub.i32(0, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p598, 7);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb290:
    assume $i575 == 1;
    $p576 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i577 := $load.i8($M.0, $p576);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i578 := $sext.i8.i32($i577);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i579 := $slt.i32($i578, 0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i579 == 1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i585 := $ne.i64($i2, 0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i588 := $i503;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.0, $p589);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i591 := $sge.i32($i590, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i591} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p594, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb301:
    assume $i591 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i592 := $add.i32($i91, $i588);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p593, $i592);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb295:
    assume $i585 == 1;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i586 := $slt.i32($i503, 0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i586} true;
    goto $bb298, $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    assume !($i586 == 1);
    goto $bb297;

  $bb298:
    assume $i586 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i587 := $sub.i32(0, $i503);
    call {:si_unique_call 560} {:cexpr "undone"} boogie_si_record_i32($i587);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i588 := $i587;
    goto $bb300;

  $bb292:
    assume $i579 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i581 := $load.i32($M.0, $p580);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i582 := $sub.i32($i581, 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p583, $i582);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p584, $sub.i32(0, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb278:
    assume $i556 == 1;
    $p557 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i558 := $load.i8($M.0, $p557);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i559 := $sext.i8.i32($i558);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i560 := $slt.i32($i559, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i560 == 1);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i570 := $sge.i32($i91, $i503);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i570 == 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p573, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p574, 0);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb286:
    assume $i570 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i571 := $sub.i32($i91, $i503);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p572, $i571);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb280:
    assume $i560 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i562 := $load.i32($M.0, $p561);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i563 := $sge.i32($i562, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p568, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p569, 2);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb282:
    assume $i563 == 1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.0, $p564);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i566 := $add.i32($i565, 1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p567, $i566);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i545 := $ne.i64($i2, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i548 := $i503;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p549);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i551 := $sge.i32($i550, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p554, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p555, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb274:
    assume $i551 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i552 := $add.i32($i92, $i548);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p553, $i552);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb268:
    assume $i545 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i546 := $slt.i32($i503, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i546 == 1);
    goto $bb270;

  $bb271:
    assume $i546 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i547 := $sub.i32(0, $i503);
    call {:si_unique_call 559} {:cexpr "undone"} boogie_si_record_i32($i547);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i548 := $i547;
    goto $bb273;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i543 == 1;
    goto $bb264;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i536 == 1;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i537 := $sge.i32($i92, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i537} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i537 == 1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p540, $i92);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p541, $sub.i32(0, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p542, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb259:
    assume $i537 == 1;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i538 := $sub.i32($i92, $i503);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p539, $i538);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i535 == 1;
    goto $bb255;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb232;

  $bb232:
    $p506 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i507 := $load.i32($M.0, $p506);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i508 := $ne.i32($i507, 0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i508 == 1);
    goto $bb236;

  $bb237:
    assume $i508 == 1;
    $p509 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i510 := $load.i8($M.0, $p509);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i511 := $zext.i8.i32($i510);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i512 := $and.i32($i511, 64);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i513 == 1);
    goto $bb236;

  $bb239:
    assume $i513 == 1;
    $p515 := $add.ref($add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i516 := $load.i8($M.0, $p515);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i516);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, 0);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb241, $bb243;

  $bb243:
    assume !($i518 == 1);
    $p520 := $add.ref($add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i521 := $load.i8($M.0, $p520);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i522 := $zext.i8.i32($i521);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i523} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i523 == 1);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i527 := $sge.i32($i92, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    $i529 := $i92;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i530 := $sext.i32.i64($i503);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i531 := $ult.i64($i530, $i2);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i531} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i525, $i526 := $i529, $i423;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p533, $i525);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i534 := $i526;
    goto $bb253;

  $bb250:
    assume $i531 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p532, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb247:
    assume $i527 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i528 := $sub.i32($i92, $i503);
    call {:si_unique_call 558} {:cexpr "fileno"} boogie_si_record_i32($i528);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i529 := $i528;
    goto $bb249;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i523 == 1;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p524, 0);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i525, $i526 := $i92, 0;
    goto $bb246;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb242;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb232;

  $bb228:
    assume $i499 == 1;
    $p500 := $add.ref($add.ref($add.ref($p483, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i501 := $load.i64($M.0, $p500);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i502 := $trunc.i64.i32($i501);
    call {:si_unique_call 557} {:cexpr "undone"} boogie_si_record_i32($i502);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i503 := $i502;
    goto $bb230;

  $bb215:
    assume $i489 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i1, 2);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p495, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb217:
    assume $i490 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i491 := $ne.i32($i1, 10);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i491 == 1);
    goto $bb219;

  $bb220:
    assume $i491 == 1;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i492 := $ne.i32($i1, 4);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i492 == 1);
    goto $bb219;

  $bb222:
    assume $i492 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i493 := $ne.i32($i1, 26);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb219;

  $bb224:
    assume $i493 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p494, 3);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb173:
    assume $i424 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} st_release_request($p413);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(8, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p425, $i91);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p426, $i92);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i8($i93);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(2, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p428, $i427);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i1, 10);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i429 == 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i1, 11);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i434 := $i423;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i431 := $i434;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i1, 20);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb181, $bb183;

  $bb183:
    assume !($i435 == 1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i1, 65537);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i436 == 1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i463 := $eq.i32($i1, 24);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i463 == 1);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i1, 21);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i1, 12);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i472} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i472 == 1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i1, 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i474 == 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i94, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i478 := $eq.i32($i1, 5);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i478} true;
    goto $bb208, $bb210;

  $bb210:
    assume !($i478 == 1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i1, 35);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i481 := $i431;
    goto $bb214;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i479 == 1;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(0, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p480, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb209;

  $bb205:
    assume $i476 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p477, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb202:
    assume $i474 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p475, 2);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i472 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p473, 7);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb196:
    assume $i469 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i470 := $trunc.i64.i8($i2);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p471, $i470);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i463 == 1;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i464 := $trunc.i64.i8($i2);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i466 := $and.i32($i465, 7);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i467 := $trunc.i32.i8($i466);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p468, $i467);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i436 == 1;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i437 := $trunc.i64.i32($i2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i438 := $and.i32($i437, 16777215);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p439, $i438);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.0, $p440);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i442 := $ne.i32($i441, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i442} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.0, $p453);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p454, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p455, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p457, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p458, 0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i1, 65537);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i459 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i460 := $lshr.i64($i2, 24);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i461 := $trunc.i64.i8($i460);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p462, $i461);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb186:
    assume $i442 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p444, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i446 := $load.i32($M.0, $p445);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p447);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i449 := $sdiv.i32($i446, $i448);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p451, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p452, $i449);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb182;

  $bb178:
    assume $i432 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i433 := st_int_ioctl($p0, 2, 1);
    call {:si_unique_call 556} {:cexpr "ioctl_result"} boogie_si_record_i32($i433);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i434 := $i433;
    goto $bb180;

  $bb175:
    assume $i429 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i430 := st_int_ioctl($p0, 1, 1);
    call {:si_unique_call 554} {:cexpr "ioctl_result"} boogie_si_record_i32($i430);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i431 := $i430;
    goto $bb177;

  $bb170:
    assume $i415 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.0, $p416);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p417, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i29 := $i419;
    goto $bb8;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i379 := $and.i64($i2, 16777215);
    call {:si_unique_call 548} {:cexpr "ltmp"} boogie_si_record_i64($i379);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i1, 20);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i382 := $i379;
    goto $bb168;

  $bb165:
    assume $i380 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(637, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p381, 1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i377 == 1;
    goto $bb161;

  $bb157:
    assume $i362 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i363 := $lshr.i64($i2, 24);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i364 := $trunc.i64.i8($i363);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p366, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.0, $p367);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(4, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p369, $i364);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i354 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i64.i8($i2);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p357, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p359, $mul.ref(4, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p360, $i355);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(638, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p361, 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i328 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i64.i8($i2);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i330, 7);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i332 := $shl.i32($i331, 4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i8($i332);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p337, $mul.ref(2, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p338, $i333);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i321 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p322, 16);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i300 := $and.i64($i2, 16777215);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb137;

  $bb138:
    assume $i301 == 1;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p302);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i304 := $sgt.i32($i303, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb137;

  $bb140:
    assume $i304 == 1;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i305 := $and.i64($i2, 16777215);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i308 := $sext.i32.i64($i307);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i309 := $ult.i64($i305, $i308);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb142, $bb144;

  $bb144:
    assume !($i309 == 1);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i310 := $and.i64($i2, 16777215);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i313 := $sext.i32.i64($i312);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i314 := $ugt.i64($i310, $i313);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb137;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_83 := printk.ref.ref(.str.84, $p4);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb8;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb143;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb133;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 5);
    goto $bb8;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb127;

  $bb19:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i1, 35);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p184, 16);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i1, 27);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i1, 35);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb96, $bb98;

  $bb98:
    assume !($i187 == 1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i1, 5);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i199 := $lshr.i64($i2, 16);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i64.i8($i199);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p201, $i200);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i202 := $lshr.i64($i2, 8);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i64.i8($i202);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, $i203);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i64.i8($i2);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, $i205);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    call {:si_unique_call 536} {:cexpr "timeout"} boogie_si_record_i32($i212);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i213 := $sge.i32($i39, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i216 := $i39;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i1, 27);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i218 := $zext.i1.i32($i217);
    call {:si_unique_call 538} {:cexpr "at_sm"} boogie_si_record_i32($i218);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := 0, $i216, $i218, 1, $i212, 0, 3;
    goto $bb74;

  $bb105:
    assume $i213 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i64.i32($i2);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i214, $i39);
    call {:si_unique_call 537} {:cexpr "fileno"} boogie_si_record_i32($i215);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i216 := $i215;
    goto $bb107;

  $bb99:
    assume $i188 == 1;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb101;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i196 := $or.i32($i195, 1);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i8($i196);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p198, $i197);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb97;

  $bb93:
    assume $i185 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p186, 2);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i183 == 1;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 13);
    goto $bb8;

  $bb17:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb28, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb29;

  $bb15:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i1, 26);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, 17);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p166, 4);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i167 := $sub.i64(0, $i2);
    call {:si_unique_call 524} {:cexpr "ltmp"} boogie_si_record_i64($i167);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i168 := $ashr.i64($i167, 16);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i64.i8($i168);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, $i169);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i171 := $ashr.i64($i167, 8);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i64.i8($i171);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, $i172);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i64.i8($i167);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, $i174);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i176 := $ne.i64($i2, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177, $i178, $i179 := $i41, $i39, $i44;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $i177, $i178, $i179, 1, $i31, 0, 3;
    goto $bb74;

  $bb87:
    assume $i176 == 1;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i177, $i178, $i179 := $sub.i32(0, 1), $sub.i32(0, 1), 1;
    goto $bb89;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 17);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, 4);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i153 := $lshr.i64($i2, 16);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i64.i8($i153);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, $i154);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i156 := $lshr.i64($i2, 8);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i64.i8($i156);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p158, $i157);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i8($i2);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, $i159);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i2, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162, $i163, $i164 := $i41, $i39, $i44;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $i162, $i163, $i164, 1, $i31, 0, 3;
    goto $bb74;

  $bb84:
    assume $i161 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i162, $i163, $i164 := $sub.i32(0, 1), $sub.i32(0, 1), 1;
    goto $bb86;

  $bb13:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i1, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb37:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb40, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb24;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb35:
    assume $i56 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb24;

  $bb45:
    assume $i60 == 1;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.0, $p260);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, 25);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i265 := $ne.i64($i2, 0);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i266 := $zext.i1.i32($i265);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i8($i266);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p268, $i267);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i270 := $load.i8($M.0, $p269);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i271 := $zext.i8.i32($i270);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i272 == 1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i288 := $mul.i32($i287, 8);
    call {:si_unique_call 545} {:cexpr "timeout"} boogie_si_record_i32($i288);
    assume {:verifier.code 0} true;
    $i285 := $i288;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := 0, 0, 0, 1, $i285, 0, 3;
    goto $bb74;

  $bb123:
    assume $i272 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i276 := $or.i32($i275, 2);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, $i277);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p280, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p282, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    call {:si_unique_call 544} {:cexpr "timeout"} boogie_si_record_i32($i284);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i285 := $i284;
    goto $bb125;

  $bb120:
    assume $i263 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 13);
    goto $bb8;

  $bb43:
    assume $i59 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(297, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i257 := $sub.i32(0, 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p258, 17);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p259, 3);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $sub.i32(0, 1), $i257, 0, 1, $i31, 0, 3;
    goto $bb74;

  $bb114:
    assume $i249 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i250 := st_int_ioctl($p0, 1, 8388607);
    call {:si_unique_call 542} {:cexpr "ioctl_result"} boogie_si_record_i32($i250);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(12, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    call {:si_unique_call 543} {:cexpr "fileno"} boogie_si_record_i32($i252);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p33, $mul.ref($i36, 16)), $mul.ref(1, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i256 := $ugt.i32($i255, 4);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i257 := $i252;
    goto $bb119;

  $bb116:
    assume $i256 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb11:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i64 == 1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 17);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i76 := $lshr.i64($i2, 16);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i8($i76);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i79 := $lshr.i64($i2, 8);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i8($i79);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i80);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i8($i2);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, $i82);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i84 := $sge.i32($i39, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i39;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i2, 0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $i44);
    call {:si_unique_call 528} {:cexpr "at_sm"} boogie_si_record_i32($i90);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := 0, $i87, $i90, $i73, $i31, 0, 3;
    goto $bb74;

  $bb71:
    assume $i84 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, $i39);
    call {:si_unique_call 527} {:cexpr "fileno"} boogie_si_record_i32($i86);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb73;

  $bb53:
    assume $i64 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 17);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i100 := $sub.i64(0, $i2);
    call {:si_unique_call 526} {:cexpr "ltmp"} boogie_si_record_i64($i100);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i64($i100, 16);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i8($i101);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i102);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i104 := $ashr.i64($i100, 8);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i8($i104);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i105);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i8($i100);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $i107);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i109 := $sge.i32($i39, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i112 := $i39;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i2, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i114 := $zext.i1.i32($i113);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, $i44);
    call {:si_unique_call 531} {:cexpr "at_sm"} boogie_si_record_i32($i115);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $sub.i32(0, 1), $i112, $i115, $i71, $i31, 0, 3;
    goto $bb74;

  $bb75:
    assume $i109 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i2);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32($i39, $i110);
    call {:si_unique_call 530} {:cexpr "fileno"} boogie_si_record_i32($i111);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb77;

  $bb51:
    assume $i63 == 1;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 27);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.0, $p233);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i234);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i244 := $i31;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p245, 3);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := 0, 0, 0, 1, $i244, 0, 3;
    goto $bb74;

  $bb111:
    assume $i236 == 1;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, 1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p241, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    call {:si_unique_call 540} {:cexpr "timeout"} boogie_si_record_i32($i243);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i244 := $i243;
    goto $bb113;

  $bb49:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i65 == 1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb55:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb24;

  $bb57:
    assume $i66 == 1;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, 1);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    $i231 := $i31;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := 0, 0, 0, 1, $i231, 0, 3;
    goto $bb74;

  $bb108:
    assume $i223 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p224, 1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p228, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    call {:si_unique_call 539} {:cexpr "timeout"} boogie_si_record_i32($i230);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i231 := $i230;
    goto $bb110;

  $bb47:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i69 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb63:
    assume $i69 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 17);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, 0);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i135 := $sub.i64(0, $i2);
    call {:si_unique_call 525} {:cexpr "ltmp"} boogie_si_record_i64($i135);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i136 := $ashr.i64($i135, 16);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i64.i8($i136);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, $i137);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i139 := $ashr.i64($i135, 8);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i8($i139);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, $i140);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i64.i8($i135);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, $i142);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i144 := $sge.i32($i41, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i41;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i148 := $eq.i64($i2, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i149 := $zext.i1.i32($i148);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, $i44);
    call {:si_unique_call 535} {:cexpr "at_sm"} boogie_si_record_i32($i150);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $i147, $i39, $i150, 1, $i31, 0, 3;
    goto $bb74;

  $bb81:
    assume $i144 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i64.i32($i2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i41, $i145);
    call {:si_unique_call 534} {:cexpr "blkno"} boogie_si_record_i32($i146);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb83;

  $bb61:
    assume $i68 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 17);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i118 := $lshr.i64($i2, 16);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i8($i118);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i119);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i121 := $lshr.i64($i2, 8);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i8($i121);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, $i122);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i64.i8($i2);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, $i124);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i126 := $sge.i32($i41, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i41;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i2, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, $i44);
    call {:si_unique_call 533} {:cexpr "at_sm"} boogie_si_record_i32($i132);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i91, $i92, $i93, $i94, $i95, $i96, $i97 := $i129, $i39, $i132, 1, $i31, 0, 3;
    goto $bb74;

  $bb78:
    assume $i126 == 1;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i64.i32($i2);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, $i41);
    call {:si_unique_call 532} {:cexpr "blkno"} boogie_si_record_i32($i128);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb80;

  $bb59:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    $i71 := 1;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb67;

  $bb65:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    $i73 := 1;
    assume true;
    goto $bb68, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb24;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb69;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 5);
    goto $bb8;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 123);
    goto $bb8;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} warn_slowpath_null(.str.83, 2661);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 249624);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p0 := devirtbounce.5(0, current_task);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 250656);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 567} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 569} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const st_allocate_request: ref;

axiom st_allocate_request == $sub.ref(0, 251688);

procedure st_allocate_request($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_allocate_request($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p1 := kzalloc(144, 208);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p6 := get_current();
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i7 := signal_pending($p6);
    call {:si_unique_call 573} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $sub.i32(0, 16));
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 4));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 252720);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} __init_waitqueue_head($p3, .str.80, $p1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 253752);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const st_scsi_execute: ref;

axiom st_scsi_execute == $sub.ref(0, 254784);

procedure st_scsi_execute($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation st_scsi_execute($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i23: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "st_scsi_execute:arg:data_direction"} boogie_si_record_i32($i2);
    call {:si_unique_call 577} {:cexpr "st_scsi_execute:arg:bufflen"} boogie_si_record_i32($i4);
    call {:si_unique_call 578} {:cexpr "st_scsi_execute:arg:timeout"} boogie_si_record_i32($i5);
    call {:si_unique_call 579} {:cexpr "st_scsi_execute:arg:retries"} boogie_si_record_i32($i6);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(104, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 580} {:cexpr "write"} boogie_si_record_i32($i13);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p20 := blk_get_request($p19, $i13, 208);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(68, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 8388608);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i4, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(96, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i40, 5);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 7);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref(scsi_command_size_tbl, $mul.ref(0, 8)), $mul.ref($i43, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i16($i45);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(296, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i46);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(288, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 585} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p49, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(296, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i64($i51);
    call {:si_unique_call 586} {:cexpr "__len"} boogie_si_record_i64($i52);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(288, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 587} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p54, $p1, $i52, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(312, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p55);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(344, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i5);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(348, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i6);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(360, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(56, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} blk_execute_rq_nowait($p64, $0.ref, $p20, 1, st_scsi_execute_end);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 376)), $mul.ref(56, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i4);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i34 := blk_rq_map_user($p32, $p20, $p11, $0.ref, $i33, 208);
    call {:si_unique_call 583} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} blk_put_request($p20);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i23 := 67108864;
    goto $bb3;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i23 := 67108864;
    goto $bb3;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 255816);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    return;
}



const st_chk_result: ref;

axiom st_chk_result == $sub.ref(0, 256848);

procedure st_chk_result($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation st_chk_result($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i64;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i6: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 589} {:cexpr "result"} boogie_si_record_i32($i3);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p4 := tape_name($p0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} st_analyze_sense($p1, $p9);
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i20 := $M.18;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p52 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(34, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $p107 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 2896)), $mul.ref(292, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i129 := $lshr.i64($i128, 15);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i8($i130);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i123, $i132);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, $i134);
    $p136 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb47:
    assume $i138 == 1;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i19);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb49;

  $bb50:
    assume $i140 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(660, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(660, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(664, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, 1);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(664, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    $p149 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i152 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb39:
    assume $i109 == 1;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb41;

  $bb42:
    assume $i114 == 1;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 23);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb41;

  $bb44:
    assume $i119 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb30:
    assume $i55 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(302, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, 17);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb32;

  $bb33:
    assume $i59 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(303, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i89 := $sext.i8.i32($i88);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(302, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref($i93, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(304, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i97, $i100);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i89, $i103);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i105);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i63 == 1;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i66 := $sext.i8.i32($i65);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(302, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref($i70, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(304, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i74, $i77);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(303, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i78, $i81);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i66, $i83);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $i85);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb8:
    assume $i21 == 1;
    $p22 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i19);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i19);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb15;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i19);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 8);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i19);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 13);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 26);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb15;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb15;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __scsi_print_sense($p4, $p51, 96);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i3, 24);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i26 := $ashr.i32($i3, 16);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 255);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_84 := printk.ref.ref.i32.i32.i32(.str.81, $p4, $i3, $i25, $i27);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    call {:si_unique_call 592} {:cexpr "scode"} boogie_si_record_i8($i18);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const st_analyze_sense: ref;

axiom st_analyze_sense == $sub.ref(0, 257880);

procedure st_analyze_sense($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation st_analyze_sense($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i7 := scsi_normalize_sense($p5, 96, $p6);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i15 := scsi_get_sense_info_fld($p3, 96, $p14);
    call {:si_unique_call 597} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p3);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 127);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 114);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 115);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 115);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 1);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p36 := scsi_sense_desc_find($p3, 96, 4);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p36, $mul.ref(3, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 224);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb20;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb7;

  $bb4:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 113);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p3, $mul.ref(2, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 224);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 112);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;
}



const __scsi_print_sense: ref;

axiom __scsi_print_sense == $sub.ref(0, 258912);

procedure __scsi_print_sense($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __scsi_print_sense($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "__scsi_print_sense:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    return;
}



const scsi_normalize_sense: ref;

axiom scsi_normalize_sense == $sub.ref(0, 259944);

procedure scsi_normalize_sense($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_normalize_sense($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} {:cexpr "scsi_normalize_sense:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 601} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 602} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_get_sense_info_fld: ref;

axiom scsi_get_sense_info_fld == $sub.ref(0, 260976);

procedure scsi_get_sense_info_fld($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_get_sense_info_fld($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 603} {:cexpr "scsi_get_sense_info_fld:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_sense_desc_find: ref;

axiom scsi_sense_desc_find == $sub.ref(0, 262008);

procedure scsi_sense_desc_find($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_sense_desc_find($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "scsi_sense_desc_find:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 607} {:cexpr "scsi_sense_desc_find:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p3 := external_alloc();
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const blk_get_request: ref;

axiom blk_get_request == $sub.ref(0, 263040);

procedure blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "blk_get_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 610} {:cexpr "blk_get_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p3 := external_alloc();
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const blk_rq_map_user: ref;

axiom blk_rq_map_user == $sub.ref(0, 264072);

procedure blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 612} {:cexpr "blk_rq_map_user:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 613} {:cexpr "blk_rq_map_user:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const blk_put_request: ref;

axiom blk_put_request == $sub.ref(0, 265104);

procedure blk_put_request($p0: ref);
  free requires assertsPassed;



implementation blk_put_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    return;
}



const st_scsi_execute_end: ref;

axiom st_scsi_execute_end == $sub.ref(0, 266136);

procedure st_scsi_execute_end($p0: ref, $i1: i32);



const blk_execute_rq_nowait: ref;

axiom blk_execute_rq_nowait == $sub.ref(0, 267168);

procedure blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} {:cexpr "blk_execute_rq_nowait:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 268200);

procedure complete_($p0: ref);



const blk_rq_unmap_user: ref;

axiom blk_rq_unmap_user == $sub.ref(0, 269232);

procedure blk_rq_unmap_user($p0: ref) returns ($r: i32);



const __blk_put_request: ref;

axiom __blk_put_request == $sub.ref(0, 270264);

procedure __blk_put_request($p0: ref, $p1: ref);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 271296);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 272328);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9592)), $mul.ref(8, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 273360);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 622} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 274392);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 624} $i2 := devirtbounce.6(0, $p1, $i0);
    call {:si_unique_call 625} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_location: ref;

axiom set_location == $sub.ref(0, 275424);

procedure set_location($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation set_location($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $i62: i8;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $i79: i8;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $p128: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $p148: ref;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i129: i32;
  var $i11: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 629} {:cexpr "set_location:arg:block"} boogie_si_record_i32($i1);
    call {:si_unique_call 630} {:cexpr "set_location:arg:partition"} boogie_si_record_i32($i2);
    call {:si_unique_call 631} {:cexpr "set_location:arg:logical"} boogie_si_record_i32($i3);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 632} {:cexpr "timeout"} boogie_si_record_i32($i13);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 16));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i2, 3);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, $i2);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p6);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 635} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p35, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i41 := $sle.i32($i40, 2);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 43);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i32($i1, 24);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i54);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i56 := $lshr.i32($i1, 16);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i57);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i1, 8);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i1);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i3, 0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, $i2);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i13;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p6);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p99 := st_do_scsi($0.ref, $p0, $p98, 0, 3, $i97, 0, 1);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(12, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $sub.i32(0, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(8, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $sub.i32(0, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(1, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i113 == 1);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i133 == 1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(2, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 0);
    assume {:verifier.code 0} true;
    $p148 := $p19;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i1, 0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} st_release_request($p99);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i11 := $i129;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb59:
    assume $i150 == 1;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p148, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, 0);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p148, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb50:
    assume $i133 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i2);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i2);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p136, $mul.ref($i137, 16));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p136, $mul.ref($i137, 16)), $mul.ref(3, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i142 == 1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p136, $mul.ref($i137, 16)), $mul.ref(4, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, $i1);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p148 := $p138;
    goto $bb58;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p136, $mul.ref($i137, 16)), $mul.ref(2, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p146, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p136, $mul.ref($i137, 16)), $mul.ref(0, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 0);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb53;

  $bb38:
    assume $i113 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32(0, 5);
    goto $bb49;

  $bb40:
    assume $i117 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i122 := $sext.i8.i32($i121);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, 2);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb42;

  $bb43:
    assume $i123 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i124 := find_partition($p0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p4, $i124);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.30, $p4);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i126 := $sge.i32($i125, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i126 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.30, $p4);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume $i101 == 1;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i11 := $i105;
    goto $bb3;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i89);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    call {:si_unique_call 636} {:cexpr "timeout"} boogie_si_record_i32($i96);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb34;

  $bb29:
    assume $i72 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 2);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i2);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $i79);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(300, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb25;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 4);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 12);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i43 := $lshr.i32($i1, 16);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i44);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i32($i1, 8);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i47);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i29 := get_location($p0, $p5, $p4, 1);
    call {:si_unique_call 634} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(3, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 1);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.16, $p5);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(4, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(3, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i2, 0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 5);
    goto $bb3;
}



const get_location: ref;

axiom get_location == $sub.ref(0, 276456);

procedure get_location($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation get_location($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $p148: ref;
  var $p151: ref;
  var $i59: i32;
  var $i9: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 641} {:cexpr "get_location:arg:logical"} boogie_si_record_i32($i3);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 642} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p10, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 2);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 52);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p33 := st_do_scsi($0.ref, $p0, $p26, 20, 2, $i32, 0, 1);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 2);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i65 := $sle.i32($i64, 2);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(4, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i96, 24);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(5, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i105 := $shl.i32($i104, 16);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i97, $i105);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(6, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 8);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i106, $i114);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p119, $mul.ref(7, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i115, $i122);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i123);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(1, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p2, $i130);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i136 := $sext.i8.i32($i135);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} st_release_request($p33);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i9 := $i59;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb29:
    assume $i137 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p141, $mul.ref(1, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb31;

  $bb32:
    assume $i145 == 1;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, 0);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 16);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(1, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i80 := $shl.i32($i79, 8);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i72, $i80);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(2, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i81, $i88);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i89);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p2, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 4);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p2, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 5);
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb18;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i9 := $i39;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(300, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 2);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 3);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;
}



const find_partition: ref;

axiom find_partition == $sub.ref(0, 277488);

procedure find_partition($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation find_partition($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i3 := get_location($p0, $p2, $p1, 1);
    call {:si_unique_call 648} {:cexpr "i"} boogie_si_record_i32($i3);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.30, $p1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 3);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.30, $p1);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const write_behind_check: ref;

axiom write_behind_check == $sub.ref(0, 278520);

procedure write_behind_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation write_behind_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(184, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} wait_for_completion($p7);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i12 := st_chk_result($p0, $p9);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i12);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} st_release_request($p9);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, $i19);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i29, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i6 := $i84;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, 5);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, $sub.i32(0, 5));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i84 := $i81;
    goto $bb35;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $sub.i32(0, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb15;

  $bb16:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 64);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb15;

  $bb18:
    assume $i62 == 1;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i67 == 1);
    $p69 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb15;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb21;

  $bb21:
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i76 == 1);
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $sub.i32(0, 5);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb31;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32(0, 28);
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb26;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb21;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i44 := $sdiv.i32($i41, $i43);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i39, $i44);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 279552);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 280584);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(76, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_tape_get: ref;

axiom scsi_tape_get == $sub.ref(0, 281616);

procedure scsi_tape_get($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed, $M.0, $CurrAddr;



implementation scsi_tape_get($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p5: ref;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} {:cexpr "scsi_tape_get:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_mutex_lock_6(st_ref_mutex);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} spin_lock(st_index_lock);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p1 := idr_find(st_index_idr, $i0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(680, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} kref_get($p6);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i13 := scsi_device_get($p12);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} spin_unlock(st_index_lock);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_mutex_unlock_7(st_ref_mutex);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 688)), $mul.ref(680, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_85 := kref_put($p15, scsi_tape_release);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const scsi_block_when_processing_errors: ref;

axiom scsi_block_when_processing_errors == $sub.ref(0, 282648);

procedure scsi_block_when_processing_errors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_block_when_processing_errors($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 663} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const enlarge_buffer: ref;

axiom enlarge_buffer == $sub.ref(0, 283680);

procedure enlarge_buffer($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation enlarge_buffer($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i42: i32;
  var $i43: i32;
  var $p47: ref;
  var $i36: i32;
  var $i37: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i62: i32;
  var $i63: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i6: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} {:cexpr "enlarge_buffer:arg:new_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 665} {:cexpr "enlarge_buffer:arg:need_dma"} boogie_si_record_i32($i2);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, $i1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i8, 4096);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    call {:si_unique_call 667} {:cexpr "max_segs"} boogie_si_record_i32($i12);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i12, $i15);
    call {:si_unique_call 668} {:cexpr "nbr"} boogie_si_record_i32($i16);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := 720;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(1, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i12);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i38, 4096);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64($i44, $i45);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i42, $i43 := 4096, 0;
    assume {:branchcond $i46} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i43);
    assume {:verifier.code 0} true;
    $i36, $i37 := $i42, $i43;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i12);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i37);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i50 := $shl.i64(4096, $i49);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i51 := $mul.i64($i48, $i50);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i53 := $ult.i64($i51, $i52);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    call {:si_unique_call 676} {:cexpr "segs"} boogie_si_record_i32($i58);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 677} {:cexpr "got"} boogie_si_record_i32($i60);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i58, $i12);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p85 := lowmem_page_address($p84);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i60, $i58;
    goto $bb37;

  $bb37:
    call $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $i73, $p74, $p75, $p76, $i77, $p78, $i79, $i80, $i62, $i63, $i81 := enlarge_buffer_loop_$bb37($p0, $i1, $i12, $i26, $i36, $i37, $p64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $i73, $p74, $p75, $p76, $i77, $p78, $i79, $i80, $i62, $i63, $i81);
    goto $bb37_last;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i62, $i1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i81 == 1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb44:
    assume $i81 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p64 := alloc_pages($i26, $i37);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i62, $i36);
    call {:si_unique_call 680} {:cexpr "got"} boogie_si_record_i32($i73);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i63);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 8));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p64);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i63, 1);
    call {:si_unique_call 681} {:cexpr "segs"} boogie_si_record_i32($i79);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, $i12);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i80 == 1);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb42:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i62, $i63 := $i73, $i79;
    goto $bb42_dummy;

  $bb39:
    assume $i66 == 1;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} normalize_buffer($p0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i37, 6);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} normalize_buffer($p0);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i55 := enlarge_buffer($p0, $i1, $i2);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i32($i55);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    goto $bb3;

  $bb30:
    assume $i54 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $mul.i64($i38, 8192);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i41 := $ult.i64($i39, $i40);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i42, $i43 := 8192, 1;
    assume {:branchcond $i41} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb24;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i87 := $mul.i64($i38, 16384);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i89 := $ult.i64($i87, $i88);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i42, $i43 := 16384, 2;
    assume {:branchcond $i89} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb24;

  $bb48:
    assume $i89 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i90 := $mul.i64($i38, 32768);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i92 := $ult.i64($i90, $i91);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i42, $i43 := 32768, 3;
    assume {:branchcond $i92} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb24;

  $bb51:
    assume $i92 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i93 := $mul.i64($i38, 65536);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i95 := $ult.i64($i93, $i94);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i42, $i43 := 65536, 4;
    assume {:branchcond $i95} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb24;

  $bb54:
    assume $i95 == 1;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i96 := $mul.i64($i38, 131072);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i1);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i98 := $ult.i64($i96, $i97);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i42, $i43 := 131072, 5;
    assume {:branchcond $i98} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb24;

  $bb57:
    assume $i98 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i42, $i43 := 262144, 6;
    goto $bb24;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 671} {:cexpr "order"} boogie_si_record_i32($i32);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i34 := $shl.i64(4096, $i33);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 672} {:cexpr "b_size"} boogie_si_record_i32($i35);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i35, $i32;
    goto $bb19;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i20, 32768);
    call {:si_unique_call 670} {:cexpr "priority"} boogie_si_record_i32($i25);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb16;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i19 := $or.i32(720, 1);
    call {:si_unique_call 669} {:cexpr "priority"} boogie_si_record_i32($i19);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} normalize_buffer($p0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb42_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;
}



const check_tape: ref;

axiom check_tape == $sub.ref(0, 284712);

procedure check_tape($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation check_tape($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i51: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $p161: ref;
  var $p162: ref;
  var $p83: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i32;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i8;
  var $p252: ref;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i8;
  var $i259: i32;
  var $i260: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i32;
  var $p271: ref;
  var $i272: i32;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i8;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i1;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i8;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $p306: ref;
  var $i307: i1;
  var $p308: ref;
  var $i309: i32;
  var $p310: ref;
  var $i311: i32;
  var $p312: ref;
  var $p313: ref;
  var $i314: i1;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i8;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i329: i8;
  var $i330: i64;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i334: i8;
  var $i335: i32;
  var $i33: i32;
  var $i76: i32;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 684} {:cexpr "st_flags"} boogie_si_record_i16($i5);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p6 := tape_name($p0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p7 := file_inode($p1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i8 := iminor($p7);
    call {:si_unique_call 688} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 96);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 5);
    call {:si_unique_call 689} {:cexpr "mode"} boogie_si_record_i32($i10);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, $i10);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p18, $mul.ref($i21, 56));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    call {:si_unique_call 690} {:cexpr "saved_cleaning"} boogie_si_record_i8($i24);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2048);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 691} {:cexpr "do_wait"} boogie_si_record_i32($i30);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i31 := test_ready($p0, $i30);
    call {:si_unique_call 693} {:cexpr "retval"} boogie_si_record_i32($i31);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i24);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i54, $i55);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(646, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i57);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i31, 2);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i59 == 1);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i31, 3);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i51 := $i16;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(292, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 694} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p84, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 5);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p2);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p93 := st_do_scsi($0.ref, $p0, $p86, 6, 2, $i92, 0, 1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p93, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $sub.i32(0, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p83 := $p93;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p2);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 696} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p163, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p164, 26);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, 12);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p2);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p170, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p173 := st_do_scsi($p83, $p0, $p166, 12, 2, $i172, 0, 1);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i174, 0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i184 == 1);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(3, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i197 := $ugt.i32($i196, 7);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(2, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i248 := $sext.i8.i32($i247);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i248, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i250 := $zext.i1.i32($i249);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i8($i250);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(635, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p252, $i251);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} st_release_request($p173);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(645, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p263, 1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i266 := $sgt.i32($i265, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i266 == 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p279, 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.0, $p280);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p281, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p285, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(635, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p286);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.0, $p298);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i32($i299);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i51, 0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb82:
    assume $i314 == 1;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(637, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p315, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(638, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p316, 0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(639, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p317, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(5, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p318);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.0, $p324);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i325);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 255);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume $i327 == 1;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.0, $p328);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i64($i329);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i331 := st_int_ioctl($p0, 24, $i330);
    call {:si_unique_call 709} {:cexpr "tmp___10"} boogie_si_record_i32($i331);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i332 := $ne.i32($i331, 0);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i332 == 1;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_88 := printk.ref.ref.i32(.str.78, $p6, $i335);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb84:
    assume $i321 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i322 := set_mode_densblk($p0, $p22);
    call {:si_unique_call 707} {:cexpr "retval"} boogie_si_record_i32($i322);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i322, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i323 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i33 := $i322;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i76 := $i33;
    goto $bb26;

  $bb73:
    assume $i301 == 1;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p302);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i304 := $sle.i32($i303, 0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb75;

  $bb76:
    assume $i304 == 1;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i305 := find_partition($p0);
    call {:si_unique_call 704} {:cexpr "tmp___8"} boogie_si_record_i32($i305);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, $i305);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i307 := $slt.i32($i305, 0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.0, $p310);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p312, $i311);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p313, 1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i307 == 1;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.0, $p308);
    call {:si_unique_call 705} {:cexpr "retval"} boogie_si_record_i32($i309);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i33 := $i309;
    goto $bb6;

  $bb61:
    assume $i289 == 1;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p290, 1);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i30, 0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb63:
    assume $i291 == 1;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i292 := $zext.i16.i32($i5);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i293 := $and.i32($i292, 3);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i294 == 1);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i295 := $zext.i16.i32($i5);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i296 := $and.i32($i295, 3);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 2);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb65;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 30);
    goto $bb6;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb67;

  $bb58:
    assume $i266 == 1;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p268, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i273 := $sdiv.i32($i270, $i272);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p276, $i273);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb52:
    assume $i256 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.0, $p257);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i258);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb54;

  $bb55:
    assume $i260 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_87 := printk.ref.ref(.str.77, $p6);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p262, 0);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume $i197 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p201, $mul.ref(2, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i205 := $ashr.i32($i204, 4);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 7);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(640, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p208, $i207);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p212, $mul.ref(4, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, $i214);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p219, $mul.ref(9, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i223 := $mul.i32($i222, 256);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p227, $mul.ref(10, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.0, $p228);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i231 := $add.i32($i223, $i230);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i232 := $mul.i32($i231, 256);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref(11, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i232, $i239);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $i240);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i184 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(635, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i175 == 1;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    call {:si_unique_call 700} {:cexpr "retval"} boogie_si_record_i32($i179);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i33 := $i179;
    goto $bb6;

  $bb34:
    assume $i102 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p104, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb36;

  $bb37:
    assume $i108 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(1, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.0, $p113);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i116 := $shl.i32($i115, 16);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(2, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i124 := $shl.i32($i123, 8);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i116, $i124);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(3, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i125, $i132);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i133);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(4, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i142 := $shl.i32($i141, 8);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(5, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.0, $p147);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i142, $i149);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i150);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(645, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i155 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_86 := printk.ref.ref.i32.i32(.str.76, $p6, $i157, $i159);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i95 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    call {:si_unique_call 698} {:cexpr "retval"} boogie_si_record_i32($i99);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i33 := $i99;
    goto $bb6;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $sub.i32(0, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $sub.i32(0, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p83 := $0.ref;
    goto $bb30;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i31, 3);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i61 == 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(634, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $sub.i32(0, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $sub.i32(0, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i76 := 2;
    goto $bb26;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 2);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb19;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p338 := $bitcast.ref.ref($p337);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p340, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p341, 0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p342, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p343, 0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p344, 0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p338, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p347 := $bitcast.ref.ref($p346);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p349, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p350, 0);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p351, 0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p352, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p353, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p347, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p354, 0);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p356 := $bitcast.ref.ref($p355);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p358, 0);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p359, 0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p360, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p361, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p362, 0);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p356, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p363, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb17;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(564, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i10);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 285744);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(32, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const test_ready: ref;

axiom test_ready == $sub.ref(0, 286776);

procedure test_ready($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation test_ready($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p21: ref;
  var $p16: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i40: i32;
  var $p39: ref;
  var $i44: i1;
  var $i47: i1;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $p48: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i45: i32;
  var $p46: ref;
  var $i31: i32;
  var $p32: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p26: ref;
  var $i27: i32;
  var $i79: i64;
  var $i80: i1;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 712} {:cexpr "test_ready:arg:do_wait"} boogie_si_record_i32($i1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 120 else 0);
    call {:si_unique_call 713} {:cexpr "max_wait"} boogie_si_record_i32($i7);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 714} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p8, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p13 := st_do_scsi($0.ref, $p0, $p10, 0, 3, $i12, 0, 1);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p16 := $p13;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19, $i20 := $p13, 0, 0, 0;
    goto $bb4;

  $bb4:
    call $p21, $p17, $i18, $i19, $i20, $p28, $i29, $i30, $p34, $i35, $i36, $i37, $i38, $i40, $p39, $i44, $i47, $i49, $i50, $p51, $i52, $p48, $i45, $p46, $i31, $p32, $i41, $i42, $i43, $i75, $p76, $i77, $i78, cmdloc_dummy_var_31, cmdloc_dummy_var_32 := test_ready_loop_$bb4($p0, $p4, $i7, $p8, $p9, $p10, $p11, $p21, $p17, $i18, $i19, $i20, $p28, $i29, $i30, $p34, $i35, $i36, $i37, $i38, $i40, $p39, $i44, $i47, $i49, $i50, $p51, $i52, $p48, $i45, $p46, $i31, $p32, $i41, $i42, $i43, $i75, $p76, $i77, $i78, cmdloc_dummy_var_31, cmdloc_dummy_var_32);
    goto $bb4_last;

  $bb7:
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i31, $p32 := $i18, $p17;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i65, $p66 := $i31, $p32;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    call {:si_unique_call 724} {:cexpr "retval"} boogie_si_record_i32($i70);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i70;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p66, $i74;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p26);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb35:
    assume $i80 == 1;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} st_release_request($p26);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i65, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    call {:si_unique_call 725} {:cexpr "retval"} boogie_si_record_i32($i73);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb33;

  $bb8:
    assume $i30 == 1;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    call {:si_unique_call 717} {:cexpr "scode"} boogie_si_record_i32($i36);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 6);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i36, 2);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i45, $p46 := $i18, $p17;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65, $p66 := $i45, $p46;
    goto $bb30;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i20, $i7);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p48 := $p17;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i57 := $sext.i8.i32($i56);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 2);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i64 := 2;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p48, $i64;
    goto $bb6;

  $bb23:
    assume $i58 == 1;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 58);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb25;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i64 := 3;
    goto $bb28;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i49 := msleep_interruptible(1000);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i64($i49);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p51 := $p17;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i20, 1);
    call {:si_unique_call 723} {:cexpr "waits"} boogie_si_record_i32($i52);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43 := $i52, $i19, $i18;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 719} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p8, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p11);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p76 := st_do_scsi($p17, $p0, $p10, 0, 3, $i75, 0, 1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p21 := $p76;
    assume true;
    goto $bb5, $bb34;

  $bb34:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $p17, $i18, $i19, $i20 := $p76, $i43, $i42, $i41;
    goto $bb34_dummy;

  $bb5:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p16 := $p21;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 716} {:cexpr "retval"} boogie_si_record_i32($i25);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p16, $i25;
    goto $bb6;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p51, $sub.i32(0, 4);
    goto $bb6;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i38 := $sle.i32($i19, 9);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p39 := $p17;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p39, $sub.i32(0, 5);
    goto $bb6;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i19, 1);
    call {:si_unique_call 718} {:cexpr "attentions"} boogie_si_record_i32($i40);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43 := $i20, $i40, 1;
    goto $bb14;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb34_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const set_mode_densblk: ref;

axiom set_mode_densblk == $sub.ref(0, 287808);

procedure set_mode_densblk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_mode_densblk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i21: i32;
  var $i22: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i43: i32;
  var $i44: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p2 := tape_name($p0);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(638, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    call {:si_unique_call 728} {:cexpr "arg"} boogie_si_record_i64($i25);
    assume {:verifier.code 0} true;
    $i21, $i22 := 0, $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i26 := $shl.i64($i22, 24);
    call {:si_unique_call 730} {:cexpr "arg"} boogie_si_record_i64($i26);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(637, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i48 := $or.i64($i47, $i26);
    call {:si_unique_call 731} {:cexpr "arg"} boogie_si_record_i64($i48);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i21, $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i43, 0);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i50 := st_int_ioctl($p0, 65537, $i44);
    call {:si_unique_call 734} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i56 := $sext.i16.i32($i55);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_89 := printk.ref.ref.i32.i32(.str.82, $p2, $i53, $i56);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i58 := $M.14;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb23;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i33 := $sge.i32($i32, 0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, $i37);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb11;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i42 := $or.i64($i41, $i26);
    call {:si_unique_call 732} {:cexpr "arg"} boogie_si_record_i64($i42);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i43, $i44 := 1, $i42;
    goto $bb16;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i9 := $sext.i16.i32($i8);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i13 := $sext.i16.i32($i12);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(641, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, $i16);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i64($i19);
    call {:si_unique_call 729} {:cexpr "arg"} boogie_si_record_i64($i20);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i21, $i22 := 1, $i20;
    goto $bb8;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 288840);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 736} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 738} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 289872);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 740} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 290904);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 291936);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 743} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p2 := external_alloc();
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_6: ref;

axiom ldv_mutex_lock_6 == $sub.ref(0, 292968);

procedure ldv_mutex_lock_6($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_lock_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} ldv_mutex_lock_st_ref_mutex($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} mutex_lock($p0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 294000);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p26: ref;
  var $p25: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.31, $p2);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i4 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 749} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p26 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p25 := $p26;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2112)), $mul.ref(0, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, $i12);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2112)), $mul.ref(40, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 255);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p15, $mul.ref($i17, 8));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i20 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 752} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p25 := $p19;
    goto $bb18;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($u0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_91 := rcu_read_lock_held();
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($u0);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_90 := rcu_read_lock_held();
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 295032);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_92: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 756} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 757} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 759} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_92 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 760} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 762} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 765} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} warn_slowpath_null(.str.73, 46);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const scsi_device_get: ref;

axiom scsi_device_get == $sub.ref(0, 296064);

procedure scsi_device_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_device_get($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_7: ref;

axiom ldv_mutex_unlock_7 == $sub.ref(0, 297096);

procedure ldv_mutex_unlock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_mutex_unlock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_mutex_unlock_st_ref_mutex($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} mutex_unlock($p0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 298128);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 772} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 773} $i3 := devirtbounce.7(0, $p2, $i0, $p2);
    call {:si_unique_call 774} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 299160);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 300192);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i3 := rcu_is_cpu_idle();
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i5 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 782} {:cexpr "tmp___1"} boogie_si_record_i8($i6);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i10 := lock_is_held(rcu_lock_map);
    call {:si_unique_call 784} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i2 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb10;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 301224);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p2 := external_alloc();
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rcu_is_cpu_idle: ref;

axiom rcu_is_cpu_idle == $sub.ref(0, 302256);

procedure rcu_is_cpu_idle() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_is_cpu_idle() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 303288);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 789} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 790} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 304320);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 791} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 792} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_14: ref;

axiom ldv_mutex_lock_interruptible_14 == $sub.ref(0, 305352);

procedure ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 794} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i2 := ldv_mutex_lock_interruptible_lock_of_scsi_tape($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 796} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const scsi_nonblockable_ioctl: ref;

axiom scsi_nonblockable_ioctl == $sub.ref(0, 306384);

procedure scsi_nonblockable_ioctl($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_nonblockable_ioctl($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 797} {:cexpr "scsi_nonblockable_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 798} {:cexpr "scsi_nonblockable_ioctl:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 800} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 307416);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_93: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 803} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 804} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} might_fault();
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 807} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 811} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_93 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} warn_slowpath_fmt.ref.i32.ref(.str.90, 66, .str.91);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 813} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 809} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 308448);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 818} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 819} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 820} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const reset_state: ref;

axiom reset_state == $sub.ref(0, 309480);

procedure reset_state($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation reset_state($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $sub.i32(0, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 1));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $sub.i32(0, 1));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $sub.i32(0, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $sub.i32(0, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p33, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $sub.i32(0, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $sub.i32(0, 1));
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i14 := find_partition($p0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(560, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const st_set_options: ref;

axiom st_set_options == $sub.ref(0, 310512);

procedure st_set_options($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr;



implementation st_set_options($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i8;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $i106: i8;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i8;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $i124: i8;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $i128: i8;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $i132: i8;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $i136: i8;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $i140: i8;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $i144: i8;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $i148: i8;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $i152: i8;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i64;
  var $i161: i1;
  var $i162: i8;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $i166: i8;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $i170: i8;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $i174: i8;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $i178: i8;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $i182: i8;
  var $p183: ref;
  var $i184: i1;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i1;
  var $i215: i1;
  var $i217: i8;
  var $p218: ref;
  var $i219: i64;
  var $i220: i8;
  var $p221: ref;
  var $i222: i64;
  var $i223: i8;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i232: i1;
  var $i233: i64;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i1;
  var $p238: ref;
  var $i239: i16;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i1;
  var $i251: i1;
  var $p252: ref;
  var $i253: i8;
  var $i254: i32;
  var $i255: i32;
  var $i256: i8;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i8;
  var $i264: i64;
  var $i266: i1;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i32;
  var $i273: i8;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i8;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $p287: ref;
  var $i288: i8;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i216: i32;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "st_set_options:arg:options"} boogie_si_record_i64($i1);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p2 := tape_name($p0);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref($i7, 56));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(0, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i1, 4026531840);
    call {:si_unique_call 827} {:cexpr "code"} boogie_si_record_i64($i30);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 268435456);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i30, 805306368);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i113 == 1);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i30, 1073741824);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i114 == 1);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i184 := $eq.i64($i30, 536870912);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i184 == 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i30, 1342177280);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i185 == 1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i197 := $eq.i64($i30, 1879048192);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i197 == 1);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i210 := $eq.i64($i30, 2147483648);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i210 == 1);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i232 := $eq.i64($i30, 1610612736);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i232 == 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32(0, 5);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $r := $i216;
    return;

  $bb98:
    assume $i232 == 1;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i233 := $and.i64($i1, $sub.i64(0, 1048576));
    call {:si_unique_call 835} {:cexpr "code"} boogie_si_record_i64($i233);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i234 := $trunc.i64.i32($i1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 1048575);
    call {:si_unique_call 836} {:cexpr "value"} boogie_si_record_i32($i235);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i236 := $eq.i64($i233, 1611661312);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i236 == 1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i250 := $eq.i64($i233, 1613758464);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i250 == 1);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i266 := $eq.i64($i233, 1612709888);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i216 := 0;
    goto $bb95;

  $bb118:
    assume $i266 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i235, 1048575);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i267 == 1);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i235, 65280);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i235, 255);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 255);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb126:
    assume $i276 == 1;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i235, 1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i279 := (if $i278 == 1 then 2 else 1);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i32.i8($i279);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(6, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p281, $i280);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.0, $p282);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb128:
    assume $i285 == 1;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(639, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p286, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(6, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.0, $p287);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 2);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i291 := $zext.i1.i32($i290);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_98 := st_compression($p0, $i291);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb123:
    assume $i270 == 1;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i235, 65280);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i272 := $ashr.i32($i271, 8);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i8($i272);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(308, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p274, $i273);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i267 == 1;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(6, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p268, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb109:
    assume $i250 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i235, 1048575);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i251 == 1);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i8($i235);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 7);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i8($i255);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p257, $i256);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb114:
    assume $i261 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i64($i263);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_97 := st_int_ioctl($p0, 24, $i264);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume $i251 == 1;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(301, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p252, $sub.i8(0, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb100:
    assume $i236 == 1;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i235, 1048575);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i237 == 1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i16($i235);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i240 := $sext.i16.i32($i239);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i241 := $and.i32($i240, 255);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(8, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, $i242);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p244);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i247 == 1;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(638, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p248, 0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_96 := set_mode_densblk($p0, $p8);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i237 == 1;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(8, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p238, $sub.i16(0, 1));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb85:
    assume $i210 == 1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i64.i32($i1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i212 := $and.i32($i211, 255);
    call {:si_unique_call 833} {:cexpr "value"} boogie_si_record_i32($i212);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i8($i212);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(302, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p218, $i217);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i219 := $ashr.i64($i1, 8);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i64.i8($i219);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(304, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p221, $i220);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i222 := $ashr.i64($i1, 16);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i64.i8($i222);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(303, 1));
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p224, $i223);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(304, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(303, 1));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.0, $p228);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_95 := printk.ref.ref.i32.i32.i32(.str.99, $p2, $i212, $i227, $i230);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb87:
    assume $i213 == 1;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i214 := $sle.i32($i212, 17);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb90, $bb92;

  $bb92:
    assume !($i214 == 1);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i215 := $sgt.i32($i212, 95);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb89;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32(0, 22);
    goto $bb95;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb91;

  $bb79:
    assume $i197 == 1;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i64.i32($i1);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i198, 268435455);
    call {:si_unique_call 831} {:cexpr "value"} boogie_si_record_i32($i199);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i199, 1880096768);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i201 == 1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i209 := $mul.i32($i199, 250);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} blk_queue_rq_timeout($p208, $i209);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i201 == 1;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i199, $sub.i32(0, 1880096769));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i203 := $mul.i32($i202, 250);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p204, $i203);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb70:
    assume $i185 == 1;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i64.i32($i1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 268435455);
    call {:si_unique_call 829} {:cexpr "value"} boogie_si_record_i32($i187);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 268435455);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i188 == 1);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(12, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, $i187);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.0, $p191);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i194 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(637, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p195, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_94 := set_mode_densblk($p0, $p8);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i188 == 1;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(12, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, $sub.i32(0, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb67:
    assume $i184 == 1;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i30, 805306368);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 828} {:cexpr "value"} boogie_si_record_i32($i116);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i1);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i1, 2);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i1, 128);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i1, 4);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i134 := $and.i64($i1, 16);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i138 := $and.i64($i1, 32);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i1, 64);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i1, 256);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i150 := $and.i64($i1, 512);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i158 := $sext.i8.i32($i157);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i159 := $sgt.i32($i158, 2);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i164 := $and.i64($i1, 2048);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i168 := $and.i64($i1, 8192);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i172 := $and.i64($i1, 32768);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i176 := $and.i64($i1, 4096);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i180 := $and.i64($i1, 16384);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i181 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i116);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, $i182);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i177 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i8($i116);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(1, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, $i178);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i173 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i8($i116);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, $i174);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i169 == 1;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i116);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, $i170);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i165 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i116);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(300, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, $i166);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i159 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i160 := $and.i64($i1, 1024);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb47;

  $bb48:
    assume $i161 == 1;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i116);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, $i162);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i151 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i8($i116);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(292, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, $i152);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i147 == 1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i116);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(294, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $i148);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i143 == 1;
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i8($i116);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(293, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, $i144);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i139 == 1;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i116);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(297, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, $i140);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i135 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i116);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(296, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, $i136);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i131 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i116);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(4, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, $i132);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i127 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i116);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(5, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, $i128);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i123 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i116);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(2, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, $i124);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i119 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i116);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(3, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, $i120);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb14;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i8($i1);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(3, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i1, 2);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(2, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i1, 128);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(5, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i1, 4);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(4, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i1, 16);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(296, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i1, 32);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(297, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i1, 64);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(293, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i65);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i1, 256);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(294, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i1, 512);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(292, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i75);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2896)), $mul.ref(233, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i81 := $sext.i8.i32($i80);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 2);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i1, 2048);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(300, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i91);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i1, 8192);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i96);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i1, 32768);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(311, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $i101);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i1, 4096);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(1, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i106);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i1, 16384);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i110 := $zext.i1.i32($i109);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $i111);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i82 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i1, 1024);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i86);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(40, 1)), $mul.ref(0, 8));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(40, 1)), $mul.ref(1, 8));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64(56, 63);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p8);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 825} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p23, $p25, 56, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(40, 1)), $mul.ref(0, 8));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p15);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(40, 1)), $mul.ref(1, 8));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p18);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 826} {:cexpr "modes_defined"} boogie_si_record_i32(1);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p8);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 824} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p20, $p22, 56, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nbr_partitions: ref;

axiom nbr_partitions == $sub.ref(0, 311544);

procedure nbr_partitions($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nbr_partitions($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i8: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i6 := read_mode_page($p0, 17, 1);
    call {:si_unique_call 841} {:cexpr "result"} boogie_si_record_i32($i6);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(7, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    call {:si_unique_call 842} {:cexpr "result"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 5);
    goto $bb3;
}



const partition_tape: ref;

axiom partition_tape == $sub.ref(0, 312576);

procedure partition_tape($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation partition_tape($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i8;
  var $i59: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i5: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} {:cexpr "partition_tape:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p2 := tape_name($p0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i3 := read_mode_page($p0, 17, 0);
    call {:si_unique_call 846} {:cexpr "result"} boogie_si_record_i32($i3);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(3, 1));
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 4);
    call {:si_unique_call 847} {:cexpr "pgo"} boogie_si_record_i32($i13);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 1);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref($i15, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $sub.i32(0, 6));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i20 := $sdiv.i32($i19, 2);
    call {:si_unique_call 848} {:cexpr "psd_cnt"} boogie_si_record_i32($i20);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i13, 8);
    call {:si_unique_call 849} {:cexpr "psdo"} boogie_si_record_i32($i21);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i13);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p9, $mul.ref($i23, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $i20);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p9, $mul.ref($i35, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i13);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 3);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p9, $mul.ref($i38, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 2);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 851} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p36, 0, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i44 := $sle.i32($i1, 0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i57 := $ashr.i32($i1, 8);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i34);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p9, $mul.ref($i59, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i58);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i1);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i34);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p9, $mul.ref($i63, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i61);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i13);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 3);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p9, $mul.ref($i66, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 1);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i13);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p9, $mul.ref($i69, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i73 := $ule.i32($i72, 7);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i13);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 6);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p9, $mul.ref($i78, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i13);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 7);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p9, $mul.ref($i81, 1));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i13);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 4);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p9, $mul.ref($i84, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 48);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i86 := write_mode_page($p0, 17, 1);
    call {:si_unique_call 853} {:cexpr "result"} boogie_si_record_i32($i86);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i89 := $i86;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i5 := $i89;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i87 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_99 := printk.ref.ref(.str.100, $p2);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32(0, 5);
    goto $bb19;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i13);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 1);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p9, $mul.ref($i75, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 8);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i13);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 3);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p9, $mul.ref($i46, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i13);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 2);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p9, $mul.ref($i49, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i53 := $sge.i32($i52, $i20);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i13);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p9, $mul.ref($i55, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 6);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i21);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p9, $mul.ref($i29, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $sub.i8(0, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i21);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p9, $mul.ref($i31, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $sub.i8(0, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i21, 2);
    call {:si_unique_call 850} {:cexpr "psdo"} boogie_si_record_i32($i33);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const do_load_unload: ref;

axiom do_load_unload == $sub.ref(0, 313608);

procedure do_load_unload($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation do_load_unload($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i1;
  var $i24: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i41: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i60: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i67: i32;
  var $i13: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 856} {:cexpr "do_load_unload:arg:load_code"} boogie_si_record_i32($i2);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 857} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p14, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 27);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i2, 10000);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(298, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 859} {:cexpr "timeout"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p3);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p45 := st_do_scsi($0.ref, $p0, $p44, 0, 3, $i41, 0, 1);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 861} {:cexpr "retval"} boogie_si_record_i32($i55);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} st_release_request($p45);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p69, $mul.ref($i72, 16)), $mul.ref(8, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $sub.i32(0, 1));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p69, $mul.ref($i72, 16)), $mul.ref(12, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i67 := $i55;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i13 := $i67;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i2, 0);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(643, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i64 := check_tape($p0, $p1);
    call {:si_unique_call 864} {:cexpr "retval"} boogie_si_record_i32($i64);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i60 := $i66;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i67 := $i60;
    goto $bb33;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb32;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(644, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 2);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i60 := $i55;
    goto $bb29;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i13 := $i51;
    goto $bb8;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    call {:si_unique_call 858} {:cexpr "timeout"} boogie_si_record_i32($i40);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb21;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i2, 10006);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i2);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 240);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 1);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb8;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 123);
    goto $bb8;
}



const st_compression: ref;

axiom st_compression == $sub.ref(0, 314640);

procedure st_compression($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation st_compression($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} {:cexpr "st_compression:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i11 := read_mode_page($p0, 15, 0);
    call {:si_unique_call 867} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(3, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 4);
    call {:si_unique_call 868} {:cexpr "mpoffs"} boogie_si_record_i32($i16);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref($i18, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 64);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i1, 0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i16);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 2);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p5, $mul.ref($i45, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 127);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i16);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 2);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p5, $mul.ref($i52, 1));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i50);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(308, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i61 := write_mode_page($p0, 15, 0);
    call {:si_unique_call 870} {:cexpr "retval"} boogie_si_record_i32($i61);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(639, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 1);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i16);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 7);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p5, $mul.ref($i59, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i16);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 2);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p5, $mul.ref($i26, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 128);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i16);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 2);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p5, $mul.ref($i33, 1));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i31);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(308, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(308, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i16);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 7);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p5, $mul.ref($i42, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i40);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 315672);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} might_fault();
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 874} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 316704);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_mutex_unlock_lock_of_scsi_tape($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} mutex_unlock($p0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const scsi_cmd_ioctl: ref;

axiom scsi_cmd_ioctl == $sub.ref(0, 317736);

procedure scsi_cmd_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_cmd_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} {:cexpr "scsi_cmd_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 878} {:cexpr "scsi_cmd_ioctl:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 879} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 880} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 318768);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_mutex_unlock_lock_of_scsi_tape($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} mutex_unlock($p0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_lock_of_scsi_tape: ref;

axiom ldv_mutex_unlock_lock_of_scsi_tape == $sub.ref(0, 319800);

procedure ldv_mutex_unlock_lock_of_scsi_tape($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_lock_of_scsi_tape($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_error();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 884} {:cexpr "ldv_mutex_lock_of_scsi_tape"} boogie_si_record_i32(1);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 320832);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 321864);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const read_mode_page: ref;

axiom read_mode_page == $sub.ref(0, 322896);

procedure read_mode_page($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation read_mode_page($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i28: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 889} {:cexpr "read_mode_page:arg:page"} boogie_si_record_i32($i1);
    call {:si_unique_call 890} {:cexpr "read_mode_page:arg:omit_block_descs"} boogie_si_record_i32($i2);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 891} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p4, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 26);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i2, 0);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i1);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $sub.i8(0, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p21 := st_do_scsi($0.ref, $p0, $p11, $i14, 2, $i20, 0, 1);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} st_release_request($p21);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i28 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 8);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const write_mode_page: ref;

axiom write_mode_page == $sub.ref(0, 323928);

procedure write_mode_page($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation write_mode_page($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i72: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i90: i32;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 895} {:cexpr "write_mode_page:arg:page"} boogie_si_record_i32($i1);
    call {:si_unique_call 896} {:cexpr "write_mode_page:arg:slow"} boogie_si_record_i32($i2);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 897} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p4, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 21);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 16);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(3, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 4);
    call {:si_unique_call 898} {:cexpr "pgo"} boogie_si_record_i32($i14);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i14);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i14);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i23, $i25);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 2);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(1, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(2, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 127);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(2, 1));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i47);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i14);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 63);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i14);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p66, $mul.ref($i67, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i62);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i2, 0);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i69 == 1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i72 := $i78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p3);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p83 := st_do_scsi($0.ref, $p0, $p79, $i82, 1, $i72, 0, 1);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} st_release_request($p83);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i90 := $i94;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $r := $i90;
    return;

  $bb4:
    assume $i85 == 1;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb6;

  $bb1:
    assume $i69 == 1;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(316, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 324960);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 325992);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 327024);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 328056);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_lock_of_scsi_tape: ref;

axiom ldv_mutex_lock_interruptible_lock_of_scsi_tape == $sub.ref(0, 329088);

procedure ldv_mutex_lock_interruptible_lock_of_scsi_tape($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_lock_interruptible_lock_of_scsi_tape($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_error();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 909} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 910} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 911} {:cexpr "ldv_mutex_lock_of_scsi_tape"} boogie_si_record_i32(2);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_interruptible_10: ref;

axiom ldv_mutex_lock_interruptible_10 == $sub.ref(0, 330120);

procedure ldv_mutex_lock_interruptible_10($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_lock_interruptible_10($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 913} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i2 := ldv_mutex_lock_interruptible_lock_of_scsi_tape($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 915} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const rw_checks: ref;

axiom rw_checks == $sub.ref(0, 331152);

procedure rw_checks($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.16, $CurrAddr;



implementation rw_checks($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "rw_checks:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i5 := scsi_block_when_processing_errors($p4);
    call {:si_unique_call 918} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1)), $mul.ref($i19, 56)), $mul.ref(0, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(309, 1));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i2, 0);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(295, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(293, 1));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb39;

  $bb40:
    assume $i60 == 1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i61 := do_door_lock($p0, 1);
    call {:si_unique_call 923} {:cexpr "tmp___1"} boogie_si_record_i32($i61);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i62 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(642, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 2);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, 0);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb28;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(652, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i64($i47, $i2);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i48 == 1);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(656, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i52 := $ult.i64($i51, $i2);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb28;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb32;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i35 := switch_partition($p0);
    call {:si_unique_call 920} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 921} {:cexpr "retval"} boogie_si_record_i64($i36);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i37 := $slt.i64($i36, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb25;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i7 := $i36;
    goto $bb3;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 5);
    goto $bb3;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 6);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(633, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 2);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 5);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 123);
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 6);
    goto $bb3;
}



const setup_buffering: ref;

axiom setup_buffering == $sub.ref(0, 332184);

procedure setup_buffering($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation setup_buffering($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i11: i1;
  var $i14: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i20: i1;
  var $i23: i32;
  var $i15: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $i63: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i66: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i87: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "setup_buffering:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 925} {:cexpr "setup_buffering:arg:is_read"} boogie_si_record_i32($i3);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i3, 0);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i20 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i20);
    call {:si_unique_call 927} {:cexpr "i"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i15, 0);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 0);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i87 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $r := $i87;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i2);
    call {:si_unique_call 932} {:cexpr "bufsize"} boogie_si_record_i32($i67);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i3, 0);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, $i66);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i90 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i93 := $sdiv.i32($i66, $i92);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb35:
    assume $i79 == 1;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(299, 1));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i83 := enlarge_buffer($p5, $i66, $i82);
    call {:si_unique_call 935} {:cexpr "tmp___1"} boogie_si_record_i32($i83);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume $i84 == 1;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p85 := tape_name($p0);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_100 := printk.ref.ref.i32(.str.89, $p85, $i66);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32(0, 75);
    goto $bb39;

  $bb27:
    assume $i68 == 1;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb29;

  $bb30:
    assume $i72 == 1;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(1, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb29;

  $bb32:
    assume $i76 == 1;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} clear_buffer($p5);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i58 := $M.11;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i58, $i60);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i61 == 1);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i63 := $i65;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i66 := $i63;
    goto $bb26;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i62 := $M.11;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb25;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i29 := queue_dma_alignment($p28);
    call {:si_unique_call 929} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i30, $i31);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p1);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i3, 0);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i40 := sgl_map_user_pages($p5, $i36, $i37, $i2, $i39);
    call {:si_unique_call 931} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(146, 1));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $i47);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i40);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i21 := $M.15;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i11);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i12 := $M.33;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb5;
}



const append_to_buffer: ref;

axiom append_to_buffer == $sub.ref(0, 333216);

procedure append_to_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation append_to_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i18: i32;
  var $i19: i32;
  var $i27: i32;
  var $i28: i32;
  var $i16: i32;
  var $i17: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i52: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i72: i1;
  var $i73: i32;
  var $i71: i32;
  var $i39: i32;
  var $i74: i1;
  var $i34: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} {:cexpr "append_to_buffer:arg:do_count"} boogie_si_record_i32($i2);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i6 := $shl.i64(4096, $i5);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 939} {:cexpr "length"} boogie_si_record_i32($i7);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 940} {:cexpr "offset"} boogie_si_record_i32($i9);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i9, $i7);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i15 := $and.i1($i13, $i14);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, $i9;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, $i16);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i16);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i39 := $i2;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i39, 0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb11;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p40, $i41, $i42, $i43 := $p0, $i17, $i2, $i16;
    goto $bb16;

  $bb16:
    call $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i52, $i51, $p53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $p40, $i41, $i42, $i43, $i72, $i73, $i71 := append_to_buffer_loop_$bb16($p1, $i7, $p35, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i52, $i51, $p53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $p40, $i41, $i42, $i43, $i72, $i73, $i71);
    goto $bb16_last;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i42, 0);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i73 := $i42;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i39 := $i73;
    goto $bb15;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i43);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 8));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i7, $i41);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i42, $i49);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i7, $i41);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p53 := lowmem_page_address($p48);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i41);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i51);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i57 := copy_from_user($p55, $p40, $i56);
    call {:si_unique_call 946} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 947} {:cexpr "res"} boogie_si_record_i32($i58);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i42, $i51);
    call {:si_unique_call 948} {:cexpr "do_count"} boogie_si_record_i32($i60);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i51);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i51);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p40, $mul.ref($i65, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i43, 1);
    call {:si_unique_call 949} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p35);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, $i67);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i71 := $i60;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i39 := $i71;
    goto $bb15;

  $bb24:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p40, $i41, $i42, $i43 := $p66, 0, $i60, $i67;
    goto $bb24_dummy;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 14);
    goto $bb11;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i51 := $i42;
    goto $bb20;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_101 := printk.ref(.str.97);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i9, 0;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i18, $i19, $i27, $i28 := append_to_buffer_loop_$bb4($i7, $p10, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i18, $i19, $i27, $i28);
    goto $bb4_last;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i18, $i7);
    call {:si_unique_call 941} {:cexpr "offset"} boogie_si_record_i32($i20);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i19, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p10);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i21);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i20, $i7);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i26 := $and.i1($i24, $i25);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i21, $i20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i27, $i28;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i20, $i21;
    goto $bb6_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8624;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8595;
}



const move_buffer_data: ref;

axiom move_buffer_data == $sub.ref(0, 334248);

procedure move_buffer_data($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation move_buffer_data($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i17: i32;
  var $i18: i32;
  var $i29: i32;
  var $i30: i32;
  var $i15: i32;
  var $i16: i32;
  var $i22: i32;
  var $i23: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} {:cexpr "move_buffer_data:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64(4096, $i4);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 951} {:cexpr "length"} boogie_si_record_i32($i6);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, $i1);
    call {:si_unique_call 952} {:cexpr "total"} boogie_si_record_i32($i10);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i15, $i16 := 0, 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i16, $i15;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i10);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i10);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i10, 0);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i34, $i35, $i36, $i37, $i38 := $i10, $i22, 0, $i23, 0;
    goto $bb20;

  $bb20:
    call $p39, $p40, $i41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $i55, $p56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i34, $i35, $i36, $i37, $i38 := move_buffer_data_loop_$bb20($p0, $i6, $p39, $p40, $i41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $i55, $p56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i34, $i35, $i36, $i37, $i38);
    goto $bb20_last;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i36);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 8));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i35);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 8));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i6, $i38);
    call {:si_unique_call 955} {:cexpr "_min1"} boogie_si_record_i32($i49);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i6, $i37);
    call {:si_unique_call 956} {:cexpr "_min2"} boogie_si_record_i32($i50);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, $i50);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i52 := $i50;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p53 := lowmem_page_address($p48);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p54 := lowmem_page_address($p43);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i38);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 1));
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i37);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p53, $mul.ref($i57, 1));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i52);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} llvm.memmove.p0i8.p0i8.i64($p56, $p58, $i59, 1, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i37, $i52);
    call {:si_unique_call 960} {:cexpr "src_offset"} boogie_si_record_i32($i60);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i60, $i6);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i63, $i64 := $i60, $i35;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i38, $i52);
    call {:si_unique_call 962} {:cexpr "dst_offset"} boogie_si_record_i32($i65);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i66 := $sge.i32($i65, $i6);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i68, $i69 := $i65, $i36;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i34, $i52);
    call {:si_unique_call 964} {:cexpr "total"} boogie_si_record_i32($i70);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, 0);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35, $i36, $i37, $i38 := $i70, $i64, $i69, $i63, $i68;
    goto $bb31_dummy;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i36, 1);
    call {:si_unique_call 963} {:cexpr "dst_seg"} boogie_si_record_i32($i67);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i68, $i69 := 0, $i67;
    goto $bb30;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i35, 1);
    call {:si_unique_call 961} {:cexpr "src_seg"} boogie_si_record_i32($i62);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i63, $i64 := 0, $i62;
    goto $bb27;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i52 := $i49;
    goto $bb24;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i1, 0;
    goto $bb8;

  $bb8:
    call $i19, $i20, $i21, $i24, $i25, $i26, $i27, $i28, $i17, $i18, $i29, $i30 := move_buffer_data_loop_$bb8($i6, $p11, $i19, $i20, $i21, $i24, $i25, $i26, $i27, $i28, $i17, $i18, $i29, $i30);
    goto $bb8_last;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i6);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i18, $i17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i17, $i6);
    call {:si_unique_call 953} {:cexpr "offset"} boogie_si_record_i32($i24);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i18, 1);
    call {:si_unique_call 954} {:cexpr "src_seg"} boogie_si_record_i32($i25);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p11);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i25);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i17, $i25;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i29, $i30;
    goto $bb7;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i24, $i25;
    goto $bb14_dummy;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i20, $i21;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8717;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8694;
}



const release_buffering: ref;

axiom release_buffering == $sub.ref(0, 335280);

procedure release_buffering($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation release_buffering($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} {:cexpr "release_buffering:arg:is_read"} boogie_si_record_i32($i1);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_102 := sgl_unmap_user_pages($p3, $i10, $i1);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(146, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 0);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 336312);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} ldv_mutex_unlock_lock_of_scsi_tape($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} mutex_unlock($p0);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const sgl_unmap_user_pages: ref;

axiom sgl_unmap_user_pages == $sub.ref(0, 337344);

procedure sgl_unmap_user_pages($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sgl_unmap_user_pages($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i4: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "sgl_unmap_user_pages:arg:nr_pages"} boogie_si_record_i32($i1);
    call {:si_unique_call 970} {:cexpr "sgl_unmap_user_pages:arg:dirtied"} boogie_si_record_i32($i2);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i1);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} kfree($p15);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $i10, $i11, $i12, $i4 := sgl_unmap_user_pages_loop_$bb4($p0, $i1, $i2, $p5, $p6, $i7, $p8, $p9, $i10, $i11, $i12, $i4);
    goto $bb4_last;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 8));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i2, 0);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} put_page($p9);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 973} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i11, $i1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb9_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} SetPageDirty($p9);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8792;
}



const SetPageDirty: ref;

axiom SetPageDirty == $sub.ref(0, 338376);

procedure SetPageDirty($p0: ref);
  free requires assertsPassed;



implementation SetPageDirty($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} set_bit(4, $p1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 339408);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 340440);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 977} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 341472);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const sgl_map_user_pages: ref;

axiom sgl_map_user_pages == $sub.ref(0, 342504);

procedure sgl_map_user_pages($p0: ref, $i1: i32, $i2: i64, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sgl_map_user_pages($p0: ref, $i1: i32, $i2: i64, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i43: i32;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i1;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i51: i32;
  var $i57: i32;
  var $p58: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} {:cexpr "sgl_map_user_pages:arg:max_pages"} boogie_si_record_i32($i1);
    call {:si_unique_call 979} {:cexpr "sgl_map_user_pages:arg:uaddr"} boogie_si_record_i64($i2);
    call {:si_unique_call 980} {:cexpr "sgl_map_user_pages:arg:count"} boogie_si_record_i64($i3);
    call {:si_unique_call 981} {:cexpr "sgl_map_user_pages:arg:rw"} boogie_si_record_i32($i4);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i2, $i3);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 4095);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i6, 12);
    call {:si_unique_call 982} {:cexpr "end"} boogie_si_record_i64($i7);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i2, 12);
    call {:si_unique_call 983} {:cexpr "start"} boogie_si_record_i64($i8);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i7);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i8);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i9, $i10);
    call {:si_unique_call 984} {:cexpr "nr_pages"} boogie_si_record_i32($i11);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i2, $i3);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i13, $i2);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i11, $i1);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i3, 0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i1);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 8);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p20 := kmalloc($i19, 208);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p24 := get_current();
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 9592)), $mul.ref(1152, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.17, $p25);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1768)), $mul.ref(176, 1));
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} down_read($p27);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p28 := get_current();
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p29 := get_current();
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref(0, 9592)), $mul.ref(1152, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.17, $p30);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i11);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i4, 0);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i35 := get_user_pages($p29, $p31, $i2, $i32, $i34, 0, $p21, $0.ref);
    call {:si_unique_call 991} {:cexpr "tmp___3"} boogie_si_record_i64($i35);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 992} {:cexpr "res"} boogie_si_record_i32($i36);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p37 := get_current();
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 9592)), $mul.ref(1152, 1));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.17, $p38);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1768)), $mul.ref(176, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} up_read($p40);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i36, $i11);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32(0, $i11);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i2, 4095);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i46);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p20);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb21;

  $bb21:
    call $i44, $i45, $i43 := sgl_map_user_pages_loop_$bb21($i11, $i44, $i45, $i43);
    goto $bb21_last;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    call {:si_unique_call 995} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, $i11);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb23_dummy;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i36, 0);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i36;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p21);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} kfree($p58);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i15 := $i57;
    goto $bb3;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32(0, $i36);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb36;

  $bb28:
    assume $i50 == 1;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb31;

  $bb31:
    call $i52, $p53, $p54, $i55, $i56, $i51 := sgl_map_user_pages_loop_$bb31($p21, $i36, $i52, $p53, $p54, $i55, $i56, $i51);
    goto $bb31_last;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p21, $mul.ref($i52, 8));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} put_page($p54);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i51, 1);
    call {:si_unique_call 997} {:cexpr "j"} boogie_si_record_i32($i55);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, $i36);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i51 := $i55;
    goto $bb33_dummy;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8887;

  $bb33_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8904;
}



const clear_buffer: ref;

axiom clear_buffer == $sub.ref(0, 343536);

procedure clear_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_buffer($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i5: i32;
  var $p20: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(1, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i5, cmdloc_dummy_var_47, cmdloc_dummy_var_48 := clear_buffer_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i5, cmdloc_dummy_var_47, cmdloc_dummy_var_48);
    goto $bb4_last;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 8));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p11 := lowmem_page_address($p10);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64(4096, $i14);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 1000} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p11, 0, $i15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i5, 1);
    call {:si_unique_call 1001} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i16);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 344568);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    return;
}



const get_user_pages: ref;

axiom get_user_pages == $sub.ref(0, 345600);

procedure get_user_pages($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_user_pages($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i64)
{
  var $i8: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} {:cexpr "get_user_pages:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1003} {:cexpr "get_user_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1004} {:cexpr "get_user_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1005} {:cexpr "get_user_pages:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} $i8 := __VERIFIER_nondet_long();
    call {:si_unique_call 1007} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i8);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 346632);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_12: ref;

axiom ldv_mutex_lock_interruptible_12 == $sub.ref(0, 347664);

procedure ldv_mutex_lock_interruptible_12($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_lock_interruptible_12($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1009} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i2 := ldv_mutex_lock_interruptible_lock_of_scsi_tape($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 1011} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const read_tape: ref;

axiom read_tape == $sub.ref(0, 348696);

procedure read_tape($p0: ref, $i1: i64, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr;



implementation read_tape($p0: ref, $i1: i64, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i48: i32;
  var $i49: i32;
  var $i29: i32;
  var $i30: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i32;
  var $i94: i8;
  var $p95: ref;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i99: i8;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i64;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i32;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $p179: ref;
  var $i180: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $p190: ref;
  var $i192: i32;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i32;
  var $i246: i32;
  var $p259: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p264: ref;
  var $i265: i32;
  var $i263: i32;
  var $p267: ref;
  var $p268: ref;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $p280: ref;
  var $i266: i32;
  var $p281: ref;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $p290: ref;
  var $p291: ref;
  var $i292: i32;
  var $p293: ref;
  var $i294: i32;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $i300: i64;
  var $i6: i64;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1013} {:cexpr "read_tape:arg:count"} boogie_si_record_i64($i1);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p4 := tape_name($p0);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i1, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(552, 1));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(568, 1));
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(556, 1));
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i35 := $M.33;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i1);
    call {:si_unique_call 1017} {:cexpr "bytes"} boogie_si_record_i32($i50);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i64 := $i50;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i67 := $sdiv.i32($i64, $i66);
    call {:si_unique_call 1021} {:cexpr "blks"} boogie_si_record_i32($i67);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i69, $i67);
    call {:si_unique_call 1022} {:cexpr "bytes"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    $i48, $i49 := $i67, $i70;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29, $i30 := $i48, $i49;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p3);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 1016} cmdloc_dummy_var_50 := $memset.i8(cmdloc_dummy_var_49, $p71, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 8);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i93 := $ashr.i32($i29, 16);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $i94);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i96 := $ashr.i32($i29, 8);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $i97);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i29);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $i99);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.13, $p2);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p3);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p109 := st_do_scsi($p101, $p0, $p102, $i30, 2, $i108, 0, 1);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} release_buffering($p0, 1);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p2, $p109);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 0);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(2, 1));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 0);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i119 == 1);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, $i30);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.0, $p268);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i266 := 0;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i283 := $sge.i32($i282, 0);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i266);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i6 := $i300;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb113:
    assume $i283 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 0);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i286 == 1);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p295);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i297 := $sdiv.i32($i294, $i296);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i292, $i297);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, $i298);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i286 == 1;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.0, $p287);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i289 := $add.i32($i288, 1);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, $i289);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb110:
    assume $i271 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p275, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i279 := $sub.i32($i273, $i278);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, $i279);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb35:
    assume $i119 == 1;
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i125 == 1);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    call {:si_unique_call 1025} {:cexpr "retval"} boogie_si_record_i32($i265);
    assume {:verifier.code 0} true;
    $i263 := $i265;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i266 := $i263;
    goto $bb109;

  $bb37:
    assume $i125 == 1;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 8);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $p137 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i140 == 1);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, $sub.i32(0, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p248);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i258 := $sub.i32(0, 5);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i246 := $i258;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i260, 0);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i263 := $i246;
    goto $bb108;

  $bb105:
    assume $i261 == 1;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, 0);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i251 == 1;
    $p253 := $add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 8);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb101;

  $bb102:
    assume $i256 == 1;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p257, 6);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i258 := 1;
    goto $bb104;

  $bb42:
    assume $i140 == 1;
    $p141 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i148 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i157 := $i148;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 32);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i162 == 1);
    $p206 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.0, $p206);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i208 := $sext.i8.i32($i207);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i208, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i209 == 1);
    $p225 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, 64);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i246 := 1;
    goto $bb98;

  $bb89:
    assume $i229 == 1;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p230);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 2);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i233 == 1);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 3);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i238 == 1);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i243 := $mul.i32($i242, $i157);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i244 := $sub.i32($i30, $i243);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, $i244);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i238 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i239 := $sub.i32($i30, $i157);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i239);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i233 == 1;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, 5);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb80:
    assume $i209 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.0, $p210);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 1);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i213 == 1);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, 6);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 0);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i218 == 1);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i222 := $mul.i32($i221, $i157);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i223 := $sub.i32($i30, $i222);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p224, $i223);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i218 == 1;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i213 == 1;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(1, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p214, 1);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb53:
    assume $i162 == 1;
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i165 == 1);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} st_release_request($p109);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p2, $0.ref);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i157, $i29);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32($i29, $i157);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i195 := $mul.i32($i192, $i194);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, $i195);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i199 := $sge.i32($i198, 0);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i204 := st_int_ioctl($p0, 4, 1);
    call {:si_unique_call 1032} {:cexpr "tmp___1"} boogie_si_record_i32($i204);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i205 == 1;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 5);
    goto $bb3;

  $bb73:
    assume $i199 == 1;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i201, 1);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, $i202);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb67:
    assume $i180 == 1;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_104 := printk.ref.ref(.str.93, $p4);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i184 := $sge.i32($i183, 0);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_105 := st_int_ioctl($p0, 4, 1);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 5);
    goto $bb3;

  $bb69:
    assume $i184 == 1;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i187 := $sub.i32($i29, $i157);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i187, 1);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i186, $i188);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, $i189);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb55:
    assume $i165 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i166 := $sle.i32($i157, 0);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32($i30, $i157);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i178);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb57:
    assume $i166 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i157, 0);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i172 := $sge.i32($i171, 0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 0);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 12);
    goto $bb3;

  $bb62:
    assume $i172 == 1;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i174, 1);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p14, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i167 == 1;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32($i30, $i157);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_103 := printk.ref.ref.i32.i32(.str.92, $p4, $i168, $i30);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb47:
    assume $i151 == 1;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 3);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb49;

  $bb50:
    assume $i156 == 1;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i157 := $i30;
    goto $bb52;

  $bb44:
    assume $i144 == 1;
    $p145 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i64.i32($i146);
    call {:si_unique_call 1026} {:cexpr "transfer"} boogie_si_record_i32($i147);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i148 := $i147;
    goto $bb46;

  $bb39:
    assume $i130 == 1;
    $p131 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 207);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    $p136 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, $i135);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i6 := $i114;
    goto $bb3;

  $bb26:
    assume $i82 == 1;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(310, 1));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb28;

  $bb29:
    assume $i86 == 1;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 2);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i91);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, $i50);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb22;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 1020} {:cexpr "bytes"} boogie_si_record_i32($i63);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref($i11, 56)), $mul.ref(4, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb16;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 1018} {:cexpr "blks"} boogie_si_record_i32($i44);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i46, $i44);
    call {:si_unique_call 1019} {:cexpr "bytes"} boogie_si_record_i32($i47);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i44, $i47;
    goto $bb19;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb12;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i1);
    call {:si_unique_call 1015} {:cexpr "bytes"} boogie_si_record_i32($i28);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i28, $i28;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const from_buffer: ref;

axiom from_buffer == $sub.ref(0, 349728);

procedure from_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation from_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i18: i32;
  var $i19: i32;
  var $i27: i32;
  var $i28: i32;
  var $i16: i32;
  var $i17: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i52: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i1;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i74: i1;
  var $i75: i32;
  var $i73: i32;
  var $i39: i32;
  var $i76: i1;
  var $i34: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} {:cexpr "from_buffer:arg:do_count"} boogie_si_record_i32($i2);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i6 := $shl.i64(4096, $i5);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1034} {:cexpr "length"} boogie_si_record_i32($i7);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1035} {:cexpr "offset"} boogie_si_record_i32($i9);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i9, $i7);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i15 := $and.i1($i13, $i14);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, $i9;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, $i16);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i16);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i39 := $i2;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i39, 0);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb29:
    assume $i76 == 1;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb11;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i40, $p41, $i42, $i43 := $i17, $p1, $i2, $i16;
    goto $bb16;

  $bb16:
    call $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i52, $i51, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $i67, $p68, $i69, $i70, $i71, $i72, $i40, $p41, $i42, $i43, $i74, $i75, $i73 := from_buffer_loop_$bb16($p0, $i7, $p35, $p44, $p45, $i46, $p47, $p48, $i49, $i50, $i52, $i51, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $i67, $p68, $i69, $i70, $i71, $i72, $i40, $p41, $i42, $i43, $i74, $i75, $i73);
    goto $bb16_last;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i42, 0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i75 := $i42;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i39 := $i75;
    goto $bb15;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i43);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 8));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i7, $i40);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i42, $i49);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i7, $i40);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p53 := lowmem_page_address($p48);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i40);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i56 := copy_to_user($p41, $p55, $i51);
    call {:si_unique_call 1041} {:cexpr "res"} boogie_si_record_i32($i56);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i42, $i51);
    call {:si_unique_call 1042} {:cexpr "do_count"} boogie_si_record_i32($i58);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, $i51);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, $i51);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i51);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p41, $mul.ref($i67, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i43, 1);
    call {:si_unique_call 1043} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p35);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, $i69);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i73 := $i58;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i39 := $i73;
    goto $bb15;

  $bb24:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i40, $p41, $i42, $i43 := 0, $p68, $i58, $i69;
    goto $bb24_dummy;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 14);
    goto $bb11;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i51 := $i42;
    goto $bb20;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_106 := printk.ref(.str.94);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i9, 0;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i18, $i19, $i27, $i28 := from_buffer_loop_$bb4($i7, $p10, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i18, $i19, $i27, $i28);
    goto $bb4_last;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i18, $i7);
    call {:si_unique_call 1036} {:cexpr "offset"} boogie_si_record_i32($i20);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i19, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p10);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i21);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i20, $i7);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i26 := $and.i1($i24, $i25);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i21, $i20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i27, $i28;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i20, $i21;
    goto $bb6_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9439;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9410;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 350760);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_mutex_unlock_lock_of_scsi_tape($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} mutex_unlock($p0);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 351792);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.15, $M.33, $M.14, $M.18, $M.39, $M.10, $M.31, $M.6, $M.7, $M.8, $M.9, $M.40, $M.3, $M.41, $M.2, $M.11, $M.12, $M.38, $M.37, $M.4, $M.36, $M.32, $M.35, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $CurrAddr, $M.30, $M.16, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i20: i32;
  var $i21: i32;
  var $i2: i32;
  var $i3: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var vslice_dummy_var_107: i64;
  var vslice_dummy_var_108: i64;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    call {:si_unique_call 1046} $initialize();
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_initialize();
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_handler_precall();
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i0 := init_st();
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb5;

  $bb5:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i20, $i21, $i2, $i3, $i48, $i49, $i50, $i51, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111 := main_loop_$bb5($i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i20, $i21, $i2, $i3, $i48, $i49, $i50, $i51, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111);
    goto $bb5_last;

  corral_source_split_9508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i48);
    call {:si_unique_call 1056} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i49 == 1);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i2, 0);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i50 == 1);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i3, 0);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_handler_precall();
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} exit_st();
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_check_final_state();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i3;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i20, $i21;
    goto corral_source_split_9557_dummy;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} ldv_handler_precall();
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_109 := st_flush($u3, $u8);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i3;
    goto $bb36;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_handler_precall();
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_108 := st_compat_ioctl($u3, $u7, $u5);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i3;
    goto $bb36;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_handler_precall();
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_107 := st_ioctl($u3, $u7, $u5);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i3;
    goto $bb36;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i3, 3);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i3;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i44;
    goto $bb36;

  $bb58:
    assume $i42 == 1;
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_handler_precall();
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_111 := st_release($u2, $u3);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb60;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 2);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i3;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i41;
    goto $bb36;

  $bb52:
    assume $i36 == 1;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_handler_precall();
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i37 := st_write($u3, $u4, $u5, $u6);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 1087} {:cexpr "res_st_write_26"} boogie_si_record_i64($i37);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_check_return_value($i38);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i39 := $slt.i64($i37, 0);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i3, 1);
    call {:si_unique_call 1089} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32($i40);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb57;

  $bb54:
    assume $i39 == 1;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i3, 1);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i3;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i35;
    goto $bb36;

  $bb46:
    assume $i30 == 1;
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_handler_precall();
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i31 := st_read($u3, $u4, $u5, $u6);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 1082} {:cexpr "res_st_read_28"} boogie_si_record_i64($i31);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_check_return_value($i32);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i33 := $slt.i64($i31, 0);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i3, 1);
    call {:si_unique_call 1084} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32($i34);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb51;

  $bb48:
    assume $i33 == 1;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i3, 0);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i3;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i2, $i29;
    goto $bb36;

  $bb40:
    assume $i25 == 1;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_handler_precall();
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i26 := st_open($u2, $u3);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 1077} {:cexpr "res_st_open_20"} boogie_si_record_i32($i26);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_check_return_value($i26);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i3, 1);
    call {:si_unique_call 1079} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32($i28);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb45;

  $bb42:
    assume $i27 == 1;
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i2, 1);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i2;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i24, $i3;
    goto $bb36;

  $bb37:
    assume $i22 == 1;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} ldv_handler_precall();
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_110 := st_remove($u1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb39;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb18;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 0);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i19, $i3;
    goto $bb36;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i16 := st_probe($u1);
    call {:si_unique_call 1067} {:cexpr "res_st_probe_57"} boogie_si_record_i32($i16);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_check_return_value($i16);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_check_return_value_probe($i16);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i2, 1);
    call {:si_unique_call 1072} {:cexpr "ldv_s_st_template_scsi_driver"} boogie_si_record_i32($i18);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb35;

  $bb31:
    assume $i17 == 1;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb63;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_9557_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9508;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 352824);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.35, $M.32, $M.36, $M.4;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1092} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1093} {:cexpr "ldv_mutex_lock_of_scsi_tape"} boogie_si_record_i32(1);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1094} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1095} {:cexpr "ldv_mutex_st_ref_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 353856);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    return;
}



const init_st: ref;

axiom init_st == $sub.ref(0, 354888);

procedure init_st() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.2, $CurrAddr;



implementation init_st() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i15: i32;
  var $i12: i32;
  var $i8: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} validate_options();
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $p1 := $M.12;
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i2 := $M.11;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_112 := printk.ref.ref.i32.i32(.str, $p1, $i2, $i3);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i5 := __class_register(st_sysfs_class, $p0);
    call {:si_unique_call 1100} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i9 := register_chrdev_region(9437184, 1048576, .str.2);
    call {:si_unique_call 1103} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i13 := scsi_register_driver($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)));
    call {:si_unique_call 1107} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i16 := do_create_sysfs_files();
    call {:si_unique_call 1110} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} driver_unregister($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)));
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} unregister_chrdev_region(9437184, 1048576);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} class_unregister(st_sysfs_class);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb11;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_114 := printk.ref.i32(.str.3, 9);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_113 := printk.ref(.str.1);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 355920);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 356952);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    return;
}



const exit_st: ref;

axiom exit_st == $sub.ref(0, 357984);

procedure exit_st();
  free requires assertsPassed;



implementation exit_st()
{
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} do_remove_sysfs_files();
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} driver_unregister($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} unregister_chrdev_region(9437184, 1048576);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} class_unregister(st_sysfs_class);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_115 := printk.ref(.str.102);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 359016);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i0 := $M.35;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.32;
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_error();
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.36;
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_error();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_error();
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const do_remove_sysfs_files: ref;

axiom do_remove_sysfs_files == $sub.ref(0, 360048);

procedure do_remove_sysfs_files();
  free requires assertsPassed;



implementation do_remove_sysfs_files()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_version);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_max_sg_segs);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_fixed_buffer_size);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_try_direct_io);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 361080);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 362112);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1128} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    return;
}



const class_unregister: ref;

axiom class_unregister == $sub.ref(0, 363144);

procedure class_unregister($p0: ref);
  free requires assertsPassed;



implementation class_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    return;
}



const driver_remove_file: ref;

axiom driver_remove_file == $sub.ref(0, 364176);

procedure driver_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation driver_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    return;
}



const validate_options: ref;

axiom validate_options == $sub.ref(0, 365208);

procedure validate_options();
  free requires assertsPassed;
  modifies $M.11, $M.2;



implementation validate_options()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i0 := $M.37;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 7);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i6 := $M.38;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $M.2 := $i6;
    call {:si_unique_call 1130} {:cexpr "st_max_sg_segs"} boogie_si_record_i32($i6);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i2 := $M.37;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 1024);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $M.11 := $i3;
    call {:si_unique_call 1129} {:cexpr "st_fixed_buffer_size"} boogie_si_record_i32($i3);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __class_register: ref;

axiom __class_register == $sub.ref(0, 366240);

procedure __class_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __class_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1131} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_chrdev_region: ref;

axiom register_chrdev_region == $sub.ref(0, 367272);

procedure register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1133} {:cexpr "register_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1134} {:cexpr "register_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1135} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_register_driver: ref;

axiom scsi_register_driver == $sub.ref(0, 368304);

procedure scsi_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const do_create_sysfs_files: ref;

axiom do_create_sysfs_files == $sub.ref(0, 369336);

procedure do_create_sysfs_files() returns ($r: i32);
  free requires assertsPassed;



implementation do_create_sysfs_files() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i8: i32;
  var $i5: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i0 := driver_create_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_try_direct_io);
    call {:si_unique_call 1140} {:cexpr "err"} boogie_si_record_i32($i0);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i3 := driver_create_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_fixed_buffer_size);
    call {:si_unique_call 1142} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i6 := driver_create_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_max_sg_segs);
    call {:si_unique_call 1145} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i9 := driver_create_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_version);
    call {:si_unique_call 1148} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_max_sg_segs);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_fixed_buffer_size);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} driver_remove_file($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), driver_attr_try_direct_io);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb11;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const driver_create_file: ref;

axiom driver_create_file == $sub.ref(0, 370368);

procedure driver_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 371400);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 1} true;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 372432);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 373464);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 374496);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 375528);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 376560);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 377592);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 378624);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 379656);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 380688);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 381720);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 382752);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 383784);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 384816);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1153} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1154} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1155} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1156} __VERIFIER_assume($i4);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 385848);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 386880);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 387912);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 388944);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 389976);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1157} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1158} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1159} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1160} __VERIFIER_assume($i4);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 391008);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 392040);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 393072);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 394104);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 395136);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1161} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1162} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1163} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1166} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1168} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1169} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} __VERIFIER_assume($i7);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1171} __VERIFIER_assume($i11);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 396168);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 397200);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 398232);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 399264);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 400296);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 401328);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 402360);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 403392);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 404424);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1172} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1173} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1174} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1175} __VERIFIER_assume($i10);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 405456);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1177} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1178} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 406488);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1180} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 407520);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 408552);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1181} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1182} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 409584);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 410616);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 411648);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 412680);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.15, $M.33, $M.14, $M.18, $M.39, $M.0, $M.10, $M.31, $M.6, $M.7, $M.8, $M.9, $M.40, $M.3, $M.41, $M.2, $M.11, $M.12, $M.38, $M.37, $M.4, $M.36, $M.32, $M.35, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1183} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.15 := 1;
    call {:si_unique_call 1184} {:cexpr "try_wdio"} boogie_si_record_i32(1);
    $M.33 := 1;
    call {:si_unique_call 1185} {:cexpr "try_rdio"} boogie_si_record_i32(1);
    $M.14 := 0;
    call {:si_unique_call 1186} {:cexpr "modes_defined"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1187} {:cexpr "debugging"} boogie_si_record_i32(0);
    $M.39 := $store.i32($M.39, st_use_lock, 0);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.75);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_use_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, st_ref_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.71);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(st_ref_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(st_ref_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), st_ref_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(st_ref_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.10 := $store.ref($M.10, st_formats, .str.36);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(1, 8)), .str.56);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(2, 8)), .str.57);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(3, 8)), .str.58);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(4, 8)), .str.59);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(5, 8)), .str.60);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(6, 8)), .str.61);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(7, 8)), .str.62);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(8, 8)), .str.63);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(9, 8)), .str.64);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(10, 8)), .str.65);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(11, 8)), .str.66);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(12, 8)), .str.67);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(13, 8)), .str.68);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(14, 8)), .str.69);
    $M.10 := $store.ref($M.10, $add.ref($add.ref(st_formats, $mul.ref(0, 128)), $mul.ref(15, 8)), .str.70);
    $M.0 := $store.ref($M.0, st_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(8, 1)), noop_llseek);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(16, 1)), st_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(24, 1)), st_write);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(64, 1)), st_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(72, 1)), st_compat_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(88, 1)), st_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(96, 1)), st_flush);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(104, 1)), st_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_fops, $mul.ref(0, 216)), $mul.ref(208, 1)), $0.ref);
    $M.31 := $store.ref($M.31, st_index_idr, $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(16, 1)), $0.ref);
    $M.31 := $store.i32($M.31, $add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(28, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(32, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.44);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_idr, $mul.ref(0, 112)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i32($M.39, st_index_lock, 0);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.43);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(st_index_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, reject_list, .str.34);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), .str.35);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), .str.36);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), .str.37);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.34);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), .str.38);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), .str.36);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), .str.37);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), .str.34);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), .str.39);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), .str.36);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), .str.37);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), .str.34);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), .str.40);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), .str.36);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), .str.37);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), .str.34);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), .str.41);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), .str.36);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), .str.37);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref($add.ref(reject_list, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, driver_attr_version, .str.17);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(32, 1)), st_version_show);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.40 := $store.ref($M.40, driver_attr_max_sg_segs, .str.16);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(32, 1)), st_max_sg_segs_show);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_max_sg_segs, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.40 := $store.ref($M.40, driver_attr_fixed_buffer_size, .str.15);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(32, 1)), st_fixed_buffer_size_show);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_fixed_buffer_size, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.3 := 1;
    call {:si_unique_call 1188} {:cexpr "try_direct_io"} boogie_si_record_i32(1);
    $M.40 := $store.ref($M.40, driver_attr_try_direct_io, .str.14);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(32, 1)), st_try_direct_io_show);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(driver_attr_try_direct_io, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, st_template, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(0, 1)), .str.2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(56, 1)), st_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(64, 1)), st_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(8, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(st_template, $mul.ref(0, 152)), $mul.ref(144, 1)), $0.ref);
    $M.41 := $store.ref($M.41, st_dev_attrs, .str.6);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(32, 1)), defined_show);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.7);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(32, 1)), default_blksize_show);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(1, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.8);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(32, 1)), default_density_show);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(2, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.9);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(32, 1)), default_compression_show);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(3, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.10);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(32, 1)), options_show);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(4, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(32, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(st_dev_attrs, $mul.ref(0, 288)), $mul.ref(5, 48)), $mul.ref(40, 1)), $0.ref);
    $M.2 := 256;
    call {:si_unique_call 1189} {:cexpr "st_max_sg_segs"} boogie_si_record_i32(256);
    $M.11 := 32768;
    call {:si_unique_call 1190} {:cexpr "st_fixed_buffer_size"} boogie_si_record_i32(32768);
    $M.12 := .str.4;
    $M.38 := 0;
    call {:si_unique_call 1191} {:cexpr "max_sg_segs"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1192} {:cexpr "buffer_kbs"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 1193} {:cexpr "ldv_mutex_st_ref_mutex"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1194} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1195} {:cexpr "ldv_mutex_lock_of_scsi_tape"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1196} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.58 := $store.i8($M.58, .str.4, 50);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(1, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(2, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(3, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(5, 1)), 50);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(6, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(7, 1)), 57);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, .str.13, 48);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(4, 1)), 56);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(.str.13, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.60 := $store.i8($M.60, .str.11, 37);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.11, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.11, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.11, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.60 := $store.i8($M.60, .str.12, 48);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.60 := $store.i8($M.60, $add.ref($add.ref(.str.12, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 3)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.61 := $store.i8($M.61, .str.27, 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.27, $mul.ref(0, 5)), $mul.ref(1, 1)), 116);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.27, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.27, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(.str.27, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 3)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 0);
    $M.62 := $store.i8($M.62, .str.51, 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(3, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.63 := $store.i8($M.63, .str.18, 91);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(1, 1)), 37);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(2, 1)), 115);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(3, 1)), 93);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.64 := $store.i8($M.64, .str.34, 79);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(2, 1)), 83);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(3, 1)), 116);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(7, 1)), 109);
    $M.64 := $store.i8($M.64, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.65 := $store.i8($M.65, .str.35, 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.35, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, .str.38, 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, .str.39, 68);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(1, 1)), 80);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, .str.40, 70);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(1, 1)), 87);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, .str.41, 85);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(1, 1)), 83);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(2, 1)), 66);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(12, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    call {:si_unique_call 1197} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 413712);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(scsi_tape_release, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1198} scsi_tape_release(arg);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 414744);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 415776);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 416808);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 417840);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1199} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 418872);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 419904);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1200} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 420936);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1201} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 421968);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

const $u1: ref;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: i64;

const $u6: ref;

const $u7: i32;

const $u8: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.15, $M.33, $M.14, $M.18, $M.39, $M.0, $M.10, $M.31, $M.6, $M.7, $M.8, $M.9, $M.40, $M.3, $M.41, $M.2, $M.11, $M.12, $M.38, $M.37, $M.4, $M.36, $M.32, $M.35, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1202} __SMACK_static_init();
    call {:si_unique_call 1203} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.13, $M.15, $M.33, $M.14, $M.18, $M.39, $M.10, $M.31, $M.6, $M.7, $M.8, $M.9, $M.40, $M.3, $M.41, $M.2, $M.11, $M.12, $M.38, $M.37, $M.4, $M.36, $M.32, $M.35, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $CurrAddr, $M.30, $M.16;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation remove_cdevs_loop_$bb3(in_$p7: ref, in_$i8: i64, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i10: i32) returns (out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10 := in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p19, in_$p20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$i10;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  $bb11:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i31;
    goto $bb11_dummy;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i32 := $sle.i32(out_$i31, 1);
    goto corral_source_split_493;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i10, 1);
    call {:si_unique_call 63} {:cexpr "rew"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_492;

  $bb9:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} device_unregister(out_$p30);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(in_$i8, 56)), $mul.ref(24, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i10);
    goto corral_source_split_487;

  $bb8:
    assume out_$i26 == 1;
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(in_$i8, 56)), $mul.ref(24, 1)), $mul.ref(out_$i21, 8));
    goto corral_source_split_481;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i10);
    goto corral_source_split_480;

  $bb6:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} cdev_del(out_$p20);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(in_$i8, 56)), $mul.ref(40, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i10);
    goto corral_source_split_475;

  $bb5:
    assume out_$i16 == 1;
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(in_$i8, 56)), $mul.ref(40, 1)), $mul.ref(out_$i11, 8));
    goto corral_source_split_469;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10 := remove_cdevs_loop_$bb3(in_$p7, in_$i8, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10);
    return;

  exit:
    return;
}



procedure remove_cdevs_loop_$bb3(in_$p7: ref, in_$i8: i64, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i10: i32) returns (out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i10: i32);



implementation {:SIextraRecBound 4} remove_cdevs_loop_$bb1(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i10: i32, in_$i33: i32, in_$i34: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i10: i32, out_$i33: i32, out_$i34: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10, out_$i33, out_$i34, out_$i5 := in_$p6, in_$p7, in_$i8, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p19, in_$p20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$i10, in_$i33, in_$i34, in_$i5;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;

  $bb14:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i33;
    goto $bb14_dummy;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i34 := $sle.i32(out_$i33, 3);
    goto corral_source_split_496;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i5, 1);
    call {:si_unique_call 64} {:cexpr "mode"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_495;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i32 := $sle.i32(out_$i31, 1);
    goto corral_source_split_493;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i10, 1);
    call {:si_unique_call 63} {:cexpr "rew"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_492;

  $bb9:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} device_unregister(out_$p30);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 56)), $mul.ref(24, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i10);
    goto corral_source_split_487;

  $bb8:
    assume out_$i26 == 1;
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 56)), $mul.ref(24, 1)), $mul.ref(out_$i21, 8));
    goto corral_source_split_481;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i10);
    goto corral_source_split_480;

  $bb6:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} cdev_del(out_$p20);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 56)), $mul.ref(40, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i10);
    goto corral_source_split_475;

  $bb5:
    assume out_$i16 == 1;
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 56)), $mul.ref(40, 1)), $mul.ref(out_$i11, 8));
    goto corral_source_split_469;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb3:
    call out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10 := remove_cdevs_loop_$bb3(out_$p7, out_$i8, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10);
    goto $bb3_last;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i10 := 0;
    goto $bb3;

  $bb11:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i31;
    assume false;
    return;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_462;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 688)), $mul.ref(328, 1));
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10, out_$i33, out_$i34, out_$i5 := remove_cdevs_loop_$bb1(in_$p0, out_$p6, out_$p7, out_$i8, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i10, out_$i33, out_$i34, out_$i5);
    return;

  exit:
    return;
}



procedure remove_cdevs_loop_$bb1(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i10: i32, in_$i33: i32, in_$i34: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i10: i32, out_$i33: i32, out_$i34: i1, out_$i5: i32);



implementation normalize_buffer_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$i16: i64, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$i16: i64, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i20;
    goto $bb6_dummy;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, out_$i20);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.0, in_$p3);
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i7, 1);
    call {:si_unique_call 99} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p19, out_$i18);
    goto corral_source_split_633;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i14, out_$i17);
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i64.i32(out_$i16);
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$i16 := $shl.i64(4096, out_$i15);
    goto corral_source_split_629;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(in_$i2);
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_626;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __free_pages(out_$p12, in_$i2);
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 8));
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_621;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := normalize_buffer_loop_$bb4(in_$p0, in_$i2, in_$p3, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure normalize_buffer_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$i16: i64, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$i16: i64, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$i7: i32);
  modifies $M.0;



implementation st_incompatible_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  $bb18:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p40;
    goto $bb18_dummy;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, out_$p41);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p4, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_731;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p4, $mul.ref(1, 32));
    goto corral_source_split_730;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p4;
    assume true;
    goto $bb11;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} out_$i30 := strncmp(out_$p27, out_$p29, out_$i25);
    call {:si_unique_call 116} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2896)), $mul.ref(264, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.8, out_$p26);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} out_$i25 := strlen(out_$p24);
    call {:si_unique_call 114} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.8, out_$p23);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_706;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} out_$i21 := strncmp(out_$p18, out_$p20, out_$i16);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2896)), $mul.ref(256, 1));
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.7, out_$p17);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} out_$i16 := strlen(out_$p15);
    call {:si_unique_call 110} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.7, out_$p14);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_695;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} out_$i12 := strncmp(out_$p9, out_$p11, out_$i7);
    call {:si_unique_call 108} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2896)), $mul.ref(248, 1));
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.6, out_$p8);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} out_$i7 := strlen(out_$p6);
    call {:si_unique_call 106} {:cexpr "tmp"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.6, out_$p5);
    goto corral_source_split_685;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p4 := st_incompatible_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p4);
    return;

  exit:
    return;
}



procedure st_incompatible_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p4: ref);



implementation st_read_loop_$bb57(in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$i58: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i64, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$i121: i64, in_$i120: i64, in_$i122: i1, in_$i123: i32, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$i138: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$i140: i1, in_$i141: i64, in_$i139: i64) returns (out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i64, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i64, out_$i121: i64, out_$i120: i64, out_$i122: i1, out_$i123: i32, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$i138: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$i140: i1, out_$i141: i64, out_$i139: i64)
{

  entry:
    out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i121, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i138, out_$p96, out_$i97, out_$i98, out_$i140, out_$i141, out_$i139 := in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i121, in_$i120, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p129, in_$i130, in_$i131, in_$p132, in_$p133, in_$i134, in_$i135, in_$i136, in_$i138, in_$p96, in_$i97, in_$i98, in_$i140, in_$i141, in_$i139;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  $bb81:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$p96, out_$i97, out_$i98 := out_$p132, out_$i108, out_$i131;
    goto $bb81_dummy;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$i139 := out_$i131;
    assume true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i138 := $ult.i64(out_$i131, in_$i2);
    goto corral_source_split_1263;

  $bb78:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$i136 := out_$i131;
    assume true;
    goto $bb78;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1254;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  $bb66:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i131, out_$p132 := out_$i98, out_$p96;
    goto $bb76;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i131, out_$p132 := out_$i130, out_$p129;
    goto $bb76;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i64(out_$i98, out_$i120);
    call {:si_unique_call 254} {:cexpr "total"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_1251;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p96, $mul.ref(out_$i120, 1));
    goto corral_source_split_1250;

  $bb71:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.0, in_$p4);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p4, out_$i125);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i124);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} out_$i124 := from_buffer(in_$p10, out_$p96, out_$i123);
    call {:si_unique_call 252} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i64.i32(out_$i120);
    goto corral_source_split_1240;

  $bb70:
    assume out_$i122 == 1;
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(in_$i58, 0);
    goto corral_source_split_1237;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i121;
    goto $bb69;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i119;
    goto $bb69;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i118);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1229;

  $bb67:
    assume out_$i116 == 1;
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i116 := $ult.i64(out_$i114, out_$i115);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i115 := $sub.i64(in_$i2, out_$i98);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i113);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1222;

  $bb65:
    assume out_$i111 == 1;
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i111 := $sgt.i32(out_$i110, 0);
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1217;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  $bb60:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := out_$i97;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i104;
    goto $bb64;

  $bb62:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i104;
    assume true;
    goto $bb62;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, 0);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i104 := $trunc.i64.i32(out_$i103);
    call {:si_unique_call 249} {:cexpr "special"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} out_$i103 := read_tape(in_$p8, out_$i102, in_$p5);
    call {:si_unique_call 248} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i102 := $sub.i64(in_$i2, out_$i98);
    goto corral_source_split_1208;

  $bb59:
    assume out_$i101 == 1;
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 0);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_1204;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p10, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1203;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb83:
    assume out_$i140 == 1;
    goto corral_source_split_1267;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i98;
    assume true;
    goto $bb83;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i97, 0);
    goto corral_source_split_1201;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i121 := $sub.i64(in_$i2, out_$i98);
    goto corral_source_split_1234;

  $bb68:
    assume !(out_$i116 == 1);
    goto corral_source_split_1233;

  $bb81_dummy:
    call {:si_unique_call 1} out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i121, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i138, out_$p96, out_$i97, out_$i98, out_$i140, out_$i141, out_$i139 := st_read_loop_$bb57(in_$i2, in_$p4, in_$p5, in_$p8, in_$p10, in_$i58, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i121, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i138, out_$p96, out_$i97, out_$i98, out_$i140, out_$i141, out_$i139);
    return;

  exit:
    return;
}



procedure st_read_loop_$bb57(in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$i58: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i64, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i64, in_$i121: i64, in_$i120: i64, in_$i122: i1, in_$i123: i32, in_$i124: i32, in_$i125: i64, in_$i126: i64, in_$i127: i1, in_$p129: ref, in_$i130: i64, in_$i131: i64, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$i138: i1, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$i140: i1, in_$i141: i64, in_$i139: i64) returns (out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i64, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i64, out_$i121: i64, out_$i120: i64, out_$i122: i1, out_$i123: i32, out_$i124: i32, out_$i125: i64, out_$i126: i64, out_$i127: i1, out_$p129: ref, out_$i130: i64, out_$i131: i64, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$i138: i1, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$i140: i1, out_$i141: i64, out_$i139: i64);
  modifies $M.0, $M.13, $CurrAddr;



implementation st_write_loop_$bb123(in_$p5: ref, in_$p8: ref, in_$p35: ref, in_$i38: i64, in_$p84: ref, in_$i142: i64, in_$i165: i64, in_$i183: i32, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p222: ref, in_$i223: i16, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i64, in_$i237: i64, in_$i220: i64, in_$i221: i64, in_$i238: i64, in_$i239: i8, in_$p240: ref, in_$i241: i64, in_$i242: i8, in_$p243: ref, in_$i244: i8, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$p259: ref, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$i267: i64, in_$i268: i64, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p285: ref, in_$p286: ref, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p294: ref, in_$i295: i8, in_$i296: i32, in_$i297: i32, in_$i298: i1, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i64, in_$i309: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i1, in_$i315: i32, in_$i316: i32, in_$i310: i32, in_$p317: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$p329: ref, in_$i330: i32, in_$i363: i1, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_$i382: i64, in_$p383: ref, in_$i384: i32, in_$i385: i64, in_$i386: i64, in_$i387: i32, in_$i388: i32, in_$p389: ref, in_$p390: ref, in_$i364: i32, in_$p365: ref, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$i282: i32, in_$i283: i64, in_$p284: ref) returns (out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p222: ref, out_$i223: i16, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i64, out_$i237: i64, out_$i220: i64, out_$i221: i64, out_$i238: i64, out_$i239: i8, out_$p240: ref, out_$i241: i64, out_$i242: i8, out_$p243: ref, out_$i244: i8, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$p259: ref, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$i267: i64, out_$i268: i64, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p285: ref, out_$p286: ref, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p294: ref, out_$i295: i8, out_$i296: i32, out_$i297: i32, out_$i298: i1, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i64, out_$i309: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i1, out_$i315: i32, out_$i316: i32, out_$i310: i32, out_$p317: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$p329: ref, out_$i330: i32, out_$i363: i1, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_$i382: i64, out_$p383: ref, out_$i384: i32, out_$i385: i64, out_$i386: i64, out_$i387: i32, out_$i388: i32, out_$p389: ref, out_$p390: ref, out_$i364: i32, out_$p365: ref, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$i282: i32, out_$i283: i64, out_$p284: ref)
{

  entry:
    out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i291, out_$i292, out_$p293, out_$i282, out_$i283, out_$p284 := in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$p222, in_$i223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$i233, in_$p234, in_$i235, in_$i236, in_$i237, in_$i220, in_$i221, in_$i238, in_$i239, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$p245, in_$p246, in_$i247, in_$p248, in_$p249, in_$p250, in_$p251, in_$p252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$p259, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p279, in_$i280, in_$i281, in_$p285, in_$p286, in_$p288, in_$i289, in_$i290, in_$p294, in_$i295, in_$i296, in_$i297, in_$i298, in_$p300, in_$i301, in_$i302, in_$p303, in_$i304, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$p311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i310, in_$p317, in_$i318, in_$i319, in_$p320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$p329, in_$i330, in_$i363, in_$p366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$p372, in_$p373, in_$i374, in_$i375, in_$p376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$p389, in_$p390, in_$i364, in_$p365, in_$i291, in_$i292, in_$p293, in_$i282, in_$i283, in_$p284;
    goto $bb123, exit;

  $bb123:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i215, out_$p216 := 1, out_$p256;
    goto corral_source_split_1895_dummy;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p390, 3);
    goto corral_source_split_1895;

  $bb184:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1894;

  $bb183:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p389, out_$i388);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i388 := $add.i32(out_$i380, out_$i387);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i387 := $trunc.i64.i32(out_$i386);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i386 := $sdiv.i64(out_$i382, out_$i385);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i385 := $sext.i32.i64(out_$i384);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i32($M.0, out_$p383);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p383 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i382 := $sub.i64(out_$i220, out_$i381);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i381 := $sext.i32.i64(out_$i323);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i380 := $load.i32($M.0, out_$p379);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p379 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1881;

  $bb182:
    assume out_$i378 == 1;
    goto corral_source_split_1880;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i378 := $sge.i32(out_$i377, 0);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i377 := $load.i32($M.0, out_$p376);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} move_buffer_data(out_$p373, out_$i375);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i375 := $sub.i32(out_$i374, out_$i323);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i374 := $trunc.i64.i32(out_$i220);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p373 := $load.ref($M.0, out_$p372);
    goto corral_source_split_1869;

  $bb178:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1868;

  $bb180:
    assume {:verifier.code 0} true;
    assume out_$i371 == 1;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    assume out_$i370 == 1;
    goto $bb178;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb179;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i302, 0);
    goto corral_source_split_1866;

  $bb175:
    assume out_$i369 == 1;
    goto corral_source_split_1865;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb175;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 0);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i8.i32(out_$i367);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i8($M.0, out_$p366);
    goto corral_source_split_1855;

  $bb172:
    assume out_$i363 == 1;
    out_$p366 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_1854;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb172;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i215, 0);
    goto corral_source_split_1827;

  $bb159:
    assume !(out_$i325 == 1);
    goto corral_source_split_1826;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i326, out_$i327, out_$i328, out_$p329, out_$i330 := out_$i215, out_$i220, out_$i221, out_$p256, out_$i323;
    assume true;
    goto $bb159;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i325 := $sle.i64(out_$i324, in_$i142);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i324 := $sext.i32.i64(out_$i323);
    goto corral_source_split_1811;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  $bb156:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    out_$i323 := out_$i310;
    goto $bb157;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i323 := out_$i322;
    goto $bb157;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i322 := $mul.i32(out_$i321, out_$i310);
    call {:si_unique_call 303} {:cexpr "undone"} boogie_si_record_i32(out_$i322);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i32($M.0, out_$p320);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1806;

  $bb155:
    assume out_$i319 == 1;
    goto corral_source_split_1805;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i319 := $ne.i32(out_$i318, 0);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i318 := $load.i32($M.0, out_$p317);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p317 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1795;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i310 := out_$i316;
    goto $bb148;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$i310 := out_$i309;
    goto $bb148;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i309 := $trunc.i64.i32(out_$i308);
    call {:si_unique_call 301} {:cexpr "undone"} boogie_si_record_i32(out_$i309);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i64($M.0, out_$p307);
    goto corral_source_split_1786;

  $bb146:
    assume out_$i306 == 1;
    out_$p307 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i306 := $ne.i32(out_$i305, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i305 := $zext.i8.i32(out_$i304);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i8($M.0, out_$p303);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i8.i32(out_$i301);
    call {:si_unique_call 300} {:cexpr "scode"} boogie_si_record_i32(out_$i302);
    out_$p303 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i8($M.0, out_$p300);
    goto corral_source_split_1779;

  $bb144:
    assume out_$i298 == 1;
    out_$p300 := $add.ref($add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1778;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i291, out_$i292, out_$p293 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb144;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i298 := $ne.i32(out_$i297, 0);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i297 := $and.i32(out_$i296, 64);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i8.i32(out_$i295);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i8($M.0, out_$p294);
    goto corral_source_split_1766;

  $bb141:
    assume out_$i290 == 1;
    out_$p294 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i291, out_$i292, out_$p293 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb141;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i290 := $ne.i32(out_$i289, 0);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.0, out_$p288);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$p286 := $load.ref($M.0, out_$p285);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1759;

  $bb139:
    assume out_$i281 == 1;
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$i282, out_$i283, out_$p284 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb139;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.0, out_$p279);
    goto corral_source_split_1755;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1754;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb135;

  $bb137:
    assume {:verifier.code 0} true;
    assume !(out_$i266 == 1);
    goto $bb135;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i267, out_$i268 := in_$i165, out_$i220;
    assume true;
    goto $bb137;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 0);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i32($M.0, out_$p264);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  $bb133:
    assume out_$i263 == 1;
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i32(in_$i183, 0);
    goto corral_source_split_1733;

  $bb131:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p259 := out_$p256;
    assume true;
    goto $bb131;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i64(out_$i257, 0);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i257 := $p2i.ref.i64(out_$p256);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} out_$p256 := st_do_scsi(out_$p216, in_$p8, out_$p246, out_$i247, 1, out_$i253, 0, out_$i255);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i255 := $zext.i1.i32(out_$i254);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(in_$i183, 0);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i32($M.0, out_$p252);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(out_$p251, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$p251 := $load.ref($M.0, out_$p250);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(out_$p249, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p249 := $load.ref($M.0, out_$p248);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i247 := $trunc.i64.i32(out_$i220);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p246 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p245, out_$i244);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i244 := $trunc.i64.i8(out_$i221);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p243, out_$i242);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i242 := $trunc.i64.i8(out_$i241);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i241 := $ashr.i64(out_$i221, 8);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p240, out_$i239);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i239 := $trunc.i64.i8(out_$i238);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i238 := $ashr.i64(out_$i221, 16);
    goto corral_source_split_1689;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1688;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i237 := $mul.i64(out_$i236, out_$i233);
    call {:si_unique_call 296} {:cexpr "transfer"} boogie_si_record_i64(out_$i237);
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := out_$i237, out_$i233;
    goto $bb126;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := in_$i142, in_$i142;
    goto $bb126;

  $bb124:
    assume out_$i219 == 1;
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.0, out_$p217);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1676;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i236 := $sext.i32.i64(out_$i235);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.0, out_$p234);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$i233 := $sdiv.i64(out_$i229, out_$i232);
    call {:si_unique_call 295} {:cexpr "blks"} boogie_si_record_i64(out_$i233);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i231);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.0, out_$p230);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1720;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  $bb128:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    out_$i229 := in_$i142;
    goto $bb129;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i229 := out_$i228;
    goto $bb129;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i228 := $sext.i32.i64(out_$i227);
    call {:si_unique_call 294} {:cexpr "blks"} boogie_si_record_i64(out_$i228);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, out_$p226);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1715;

  $bb127:
    assume out_$i225 == 1;
    goto corral_source_split_1714;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i224 := $zext.i16.i32(out_$i223);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i16($M.0, out_$p222);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1683;

  $bb125:
    assume !(out_$i219 == 1);
    goto corral_source_split_1682;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i316 := 0;
    goto $bb154;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i316 := out_$i315;
    goto $bb154;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$i315 := $trunc.i64.i32(out_$i220);
    call {:si_unique_call 302} {:cexpr "undone"} boogie_si_record_i32(out_$i315);
    goto corral_source_split_1803;

  $bb152:
    assume out_$i314 == 1;
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i302, 13);
    goto corral_source_split_1800;

  $bb149:
    assume out_$i313 == 1;
    goto corral_source_split_1799;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 0);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i32($M.0, out_$p311);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1790;

  $bb147:
    assume !(out_$i306 == 1);
    goto corral_source_split_1789;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(out_$i313 == 1);
    goto $bb151;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i314 == 1);
    goto $bb151;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb180;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i302, 1);
    goto corral_source_split_1878;

  $bb179:
    assume !(out_$i370 == 1);
    goto corral_source_split_1877;

  corral_source_split_1895_dummy:
    call {:si_unique_call 1} out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i291, out_$i292, out_$p293, out_$i282, out_$i283, out_$p284 := st_write_loop_$bb123(in_$p5, in_$p8, in_$p35, in_$i38, in_$p84, in_$i142, in_$i165, in_$i183, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i291, out_$i292, out_$p293, out_$i282, out_$i283, out_$p284);
    return;

  exit:
    return;
}



procedure st_write_loop_$bb123(in_$p5: ref, in_$p8: ref, in_$p35: ref, in_$i38: i64, in_$p84: ref, in_$i142: i64, in_$i165: i64, in_$i183: i32, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p222: ref, in_$i223: i16, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i64, in_$i237: i64, in_$i220: i64, in_$i221: i64, in_$i238: i64, in_$i239: i8, in_$p240: ref, in_$i241: i64, in_$i242: i8, in_$p243: ref, in_$i244: i8, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$p259: ref, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$i267: i64, in_$i268: i64, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p285: ref, in_$p286: ref, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p294: ref, in_$i295: i8, in_$i296: i32, in_$i297: i32, in_$i298: i1, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i64, in_$i309: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i1, in_$i315: i32, in_$i316: i32, in_$i310: i32, in_$p317: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$p329: ref, in_$i330: i32, in_$i363: i1, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_$i382: i64, in_$p383: ref, in_$i384: i32, in_$i385: i64, in_$i386: i64, in_$i387: i32, in_$i388: i32, in_$p389: ref, in_$p390: ref, in_$i364: i32, in_$p365: ref, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$i282: i32, in_$i283: i64, in_$p284: ref) returns (out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p222: ref, out_$i223: i16, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i64, out_$i237: i64, out_$i220: i64, out_$i221: i64, out_$i238: i64, out_$i239: i8, out_$p240: ref, out_$i241: i64, out_$i242: i8, out_$p243: ref, out_$i244: i8, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$p259: ref, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$i267: i64, out_$i268: i64, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p285: ref, out_$p286: ref, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p294: ref, out_$i295: i8, out_$i296: i32, out_$i297: i32, out_$i298: i1, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i64, out_$i309: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i1, out_$i315: i32, out_$i316: i32, out_$i310: i32, out_$p317: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$p329: ref, out_$i330: i32, out_$i363: i1, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_$i382: i64, out_$p383: ref, out_$i384: i32, out_$i385: i64, out_$i386: i64, out_$i387: i32, out_$i388: i32, out_$p389: ref, out_$p390: ref, out_$i364: i32, out_$p365: ref, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$i282: i32, out_$i283: i64, out_$p284: ref);
  modifies $M.0, $CurrAddr;



implementation st_write_loop_$bb80(in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p29: ref, in_$i32: i64, in_$p35: ref, in_$i38: i64, in_$p84: ref, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p147: ref, in_$i148: i32, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i64, in_$i156: i1, in_$i157: i64, in_$i146: i64, in_$i158: i32, in_$i159: i32, in_$i160: i64, in_$i161: i64, in_$i162: i1, in_$p163: ref, in_$p141: ref, in_$i142: i64, in_$i165: i64, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i8, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i8, in_$i181: i32, in_$i182: i1, in_$i170: i1, in_$i183: i32, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p188: ref, in_$i189: i8, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i8, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i8, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i1, in_$i209: i1, in_$p210: ref, in_$i211: i64, in_$p187: ref, in_$p214: ref, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p222: ref, in_$i223: i16, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i64, in_$i237: i64, in_$i220: i64, in_$i221: i64, in_$i238: i64, in_$i239: i8, in_$p240: ref, in_$i241: i64, in_$i242: i8, in_$p243: ref, in_$i244: i8, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$p259: ref, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$i267: i64, in_$i268: i64, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p285: ref, in_$p286: ref, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p294: ref, in_$i295: i8, in_$i296: i32, in_$i297: i32, in_$i298: i1, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i64, in_$i309: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i1, in_$i315: i32, in_$i316: i32, in_$i310: i32, in_$p317: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$p329: ref, in_$i330: i32, in_$i331: i64, in_$i332: i64, in_$i333: i64, in_$i334: i64, in_$i335: i64, in_$p336: ref, in_$i337: i64, in_$i338: i64, in_$p339: ref, in_$i340: i32, in_$i341: i1, in_$i342: i64, in_$i343: i64, in_$p344: ref, in_$i345: i32, in_$i346: i64, in_$i347: i64, in_$i348: i64, in_$p349: ref, in_$p350: ref, in_$i351: i32, in_$i352: i1, in_$i353: i1, in_$i354: i1, in_$i355: i64, in_$i363: i1, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_$i382: i64, in_$p383: ref, in_$i384: i32, in_$i385: i64, in_$i386: i64, in_$i387: i32, in_$i388: i32, in_$p389: ref, in_$p390: ref, in_$i364: i32, in_$p365: ref, in_$i391: i64, in_$p392: ref, in_$p393: ref, in_$i356: i32, in_$p357: ref, in_$i358: i64, in_$i359: i64, in_$i360: i64, in_$i361: i64, in_$p362: ref, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$i401: i64, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i405: i64, in_$i394: i32, in_$p395: ref, in_$i396: i64, in_$i397: i64, in_$i398: i64, in_$i399: i64, in_$p400: ref, in_$i282: i32, in_$i283: i64, in_$p284: ref, in_$i406: i32, in_$p407: ref, in_$i408: i64, in_$i409: i64, in_$i410: i64, in_$i411: i64, in_$p412: ref, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i32, in_$p424: ref, in_$p425: ref, in_$i426: i32, in_$i427: i32, in_$i428: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$i432: i1, in_$i436: i1, in_$i433: i64, in_$i434: i64, in_$p435: ref, in_$i440: i1, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i32, in_$i136: i64, in_$i443: i1, in_$i444: i64, in_$p445: ref, in_$i441: i64, in_$p442: ref) returns (out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p147: ref, out_$i148: i32, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i64, out_$i156: i1, out_$i157: i64, out_$i146: i64, out_$i158: i32, out_$i159: i32, out_$i160: i64, out_$i161: i64, out_$i162: i1, out_$p163: ref, out_$p141: ref, out_$i142: i64, out_$i165: i64, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i8, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i8, out_$i181: i32, out_$i182: i1, out_$i170: i1, out_$i183: i32, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p188: ref, out_$i189: i8, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i8, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i8, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i1, out_$i209: i1, out_$p210: ref, out_$i211: i64, out_$p187: ref, out_$p214: ref, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p222: ref, out_$i223: i16, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i64, out_$i237: i64, out_$i220: i64, out_$i221: i64, out_$i238: i64, out_$i239: i8, out_$p240: ref, out_$i241: i64, out_$i242: i8, out_$p243: ref, out_$i244: i8, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$p259: ref, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$i267: i64, out_$i268: i64, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p285: ref, out_$p286: ref, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p294: ref, out_$i295: i8, out_$i296: i32, out_$i297: i32, out_$i298: i1, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i64, out_$i309: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i1, out_$i315: i32, out_$i316: i32, out_$i310: i32, out_$p317: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$p329: ref, out_$i330: i32, out_$i331: i64, out_$i332: i64, out_$i333: i64, out_$i334: i64, out_$i335: i64, out_$p336: ref, out_$i337: i64, out_$i338: i64, out_$p339: ref, out_$i340: i32, out_$i341: i1, out_$i342: i64, out_$i343: i64, out_$p344: ref, out_$i345: i32, out_$i346: i64, out_$i347: i64, out_$i348: i64, out_$p349: ref, out_$p350: ref, out_$i351: i32, out_$i352: i1, out_$i353: i1, out_$i354: i1, out_$i355: i64, out_$i363: i1, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_$i382: i64, out_$p383: ref, out_$i384: i32, out_$i385: i64, out_$i386: i64, out_$i387: i32, out_$i388: i32, out_$p389: ref, out_$p390: ref, out_$i364: i32, out_$p365: ref, out_$i391: i64, out_$p392: ref, out_$p393: ref, out_$i356: i32, out_$p357: ref, out_$i358: i64, out_$i359: i64, out_$i360: i64, out_$i361: i64, out_$p362: ref, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$i401: i64, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i405: i64, out_$i394: i32, out_$p395: ref, out_$i396: i64, out_$i397: i64, out_$i398: i64, out_$i399: i64, out_$p400: ref, out_$i282: i32, out_$i283: i64, out_$p284: ref, out_$i406: i32, out_$p407: ref, out_$i408: i64, out_$i409: i64, out_$i410: i64, out_$i411: i64, out_$p412: ref, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i32, out_$p424: ref, out_$p425: ref, out_$i426: i32, out_$i427: i32, out_$i428: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$i432: i1, out_$i436: i1, out_$i433: i64, out_$i434: i64, out_$p435: ref, out_$i440: i1, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i32, out_$i136: i64, out_$i443: i1, out_$i444: i64, out_$p445: ref, out_$i441: i64, out_$p442: ref)
{

  entry:
    out_$p137, out_$i138, out_$i139, out_$i140, out_$p143, out_$i144, out_$i145, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i146, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p141, out_$i142, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i170, out_$i183, out_$p184, out_$i185, out_$i186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$p187, out_$p214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i340, out_$i341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i391, out_$p392, out_$p393, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362, out_$i291, out_$i292, out_$p293, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$i282, out_$i283, out_$p284, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p425, out_$i426, out_$i427, out_$i428, out_$p429, out_$p430, out_$p431, out_$i432, out_$i436, out_$i433, out_$i434, out_$p435, out_$i440, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i443, out_$i444, out_$p445, out_$i441, out_$p442 := in_$p137, in_$i138, in_$i139, in_$i140, in_$p143, in_$i144, in_$i145, in_$p147, in_$i148, in_$p149, in_$i150, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i146, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$p141, in_$i142, in_$i165, in_$p166, in_$p167, in_$i168, in_$i169, in_$p171, in_$i172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$i182, in_$i170, in_$i183, in_$p184, in_$i185, in_$i186, in_$p188, in_$i189, in_$i190, in_$i191, in_$p192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$p198, in_$i199, in_$i200, in_$i201, in_$p202, in_$i203, in_$p204, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$p210, in_$i211, in_$p187, in_$p214, in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$p222, in_$i223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$i233, in_$p234, in_$i235, in_$i236, in_$i237, in_$i220, in_$i221, in_$i238, in_$i239, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$p245, in_$p246, in_$i247, in_$p248, in_$p249, in_$p250, in_$p251, in_$p252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$p259, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p279, in_$i280, in_$i281, in_$p285, in_$p286, in_$p288, in_$i289, in_$i290, in_$p294, in_$i295, in_$i296, in_$i297, in_$i298, in_$p300, in_$i301, in_$i302, in_$p303, in_$i304, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$p311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i310, in_$p317, in_$i318, in_$i319, in_$p320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$p329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$p336, in_$i337, in_$i338, in_$p339, in_$i340, in_$i341, in_$i342, in_$i343, in_$p344, in_$i345, in_$i346, in_$i347, in_$i348, in_$p349, in_$p350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i363, in_$p366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$p372, in_$p373, in_$i374, in_$i375, in_$p376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$p389, in_$p390, in_$i364, in_$p365, in_$i391, in_$p392, in_$p393, in_$i356, in_$p357, in_$i358, in_$i359, in_$i360, in_$i361, in_$p362, in_$i291, in_$i292, in_$p293, in_$i401, in_$p402, in_$p403, in_$i404, in_$i405, in_$i394, in_$p395, in_$i396, in_$i397, in_$i398, in_$i399, in_$p400, in_$i282, in_$i283, in_$p284, in_$i406, in_$p407, in_$i408, in_$i409, in_$i410, in_$i411, in_$p412, in_$p413, in_$i414, in_$i415, in_$p416, in_$i417, in_$i418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$p425, in_$i426, in_$i427, in_$i428, in_$p429, in_$p430, in_$p431, in_$i432, in_$i436, in_$i433, in_$i434, in_$p435, in_$i440, in_$p132, in_$p133, in_$i134, in_$i135, in_$i136, in_$i443, in_$i444, in_$p445, in_$i441, in_$p442;
    goto $bb80, exit;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  $bb203:
    assume out_$i440 == 1;
    assume {:verifier.code 0} true;
    out_$p132, out_$p133, out_$i134, out_$i135, out_$i136 := out_$p407, out_$p412, out_$i411, out_$i406, out_$i408;
    goto $bb203_dummy;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i441, out_$p442 := out_$i411, out_$p407;
    assume true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i440 := $ne.i64(out_$i411, 0);
    goto corral_source_split_1942;

  $bb198:
    assume !(out_$i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i433, out_$i434, out_$p435 := out_$i408, out_$i411, out_$p407;
    assume true;
    goto $bb198;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i436 := $ne.i32(out_$i406, 0);
    goto corral_source_split_1935;

  $bb196:
    assume !(out_$i432 == 1);
    goto corral_source_split_1934;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i433, out_$i434, out_$p435 := out_$i408, out_$i411, out_$p407;
    assume true;
    goto $bb196;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i432 := $ne.i64(out_$i408, 0);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p431, 0);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p431 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p430, 0);
    goto corral_source_split_1926;

  $bb193:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1925;

  $bb189:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p429, out_$i428);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p424, out_$i423);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i423 := $add.i32(out_$i420, out_$i422);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i422 := $zext.i1.i32(out_$i421);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i421 := $sgt.i64(out_$i410, 0);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i420 := $load.i32($M.0, out_$p419);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p419 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  $bb190:
    assume out_$i418 == 1;
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i418 := $eq.i32(out_$i417, 0);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i32($M.0, out_$p416);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1905;

  $bb188:
    assume out_$i415 == 1;
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i415 := $sge.i32(out_$i414, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i414 := $load.i32($M.0, out_$p413);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1900;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  $bb140:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$i411, out_$p412 := out_$i282, out_$p284, out_$i136, out_$i283, out_$i142, out_$i165, out_$p166;
    goto $bb187;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$i411, out_$p412 := out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i405 := $sext.i32.i64(out_$i404);
    call {:si_unique_call 299} {:cexpr "retval"} boogie_si_record_i64(out_$i405);
    assume {:verifier.code 0} true;
    out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400 := out_$i291, out_$p293, out_$i405, out_$i292, out_$i142, out_$i401, out_$p166;
    goto $bb186;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400 := out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362;
    goto $bb186;

  $bb171:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362 := out_$i364, out_$p365, $sub.i64(0, 5), 0, 0, out_$i391, out_$p166;
    goto $bb171;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362 := out_$i326, out_$p329, out_$i355, out_$i348, out_$i338, out_$i332, out_$p336;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  $bb169:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    out_$i355 := out_$i136;
    goto $bb170;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i355 := $sub.i64(0, 28);
    goto $bb170;

  $bb168:
    assume {:verifier.code 0} true;
    assume out_$i354 == 1;
    goto $bb164;

  $bb166:
    assume {:verifier.code 0} true;
    assume out_$i353 == 1;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    assume out_$i352 == 1;
    goto $bb164;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb165;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 0);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$i351 := $load.i32($M.0, out_$p350);
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p349, 3);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$p349 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1838;

  $bb162:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb161:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    out_$i348 := out_$i328;
    goto $bb162;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i348 := out_$i347;
    goto $bb162;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$i347 := $sdiv.i64(out_$i343, out_$i346);
    call {:si_unique_call 306} {:cexpr "blks"} boogie_si_record_i64(out_$i347);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i346 := $sext.i32.i64(out_$i345);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i32($M.0, out_$p344);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i343 := $sub.i64(out_$i327, out_$i342);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i342 := $sext.i32.i64(out_$i330);
    goto corral_source_split_1830;

  $bb160:
    assume out_$i341 == 1;
    goto corral_source_split_1829;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i341 := $ne.i32(out_$i340, 0);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i340 := $load.i32($M.0, out_$p339);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p339 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i338 := $sub.i64(out_$i142, out_$i337);
    call {:si_unique_call 305} {:cexpr "do_count"} boogie_si_record_i64(out_$i338);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i337 := $sext.i32.i64(out_$i330);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p336 := $add.ref(out_$p141, $mul.ref(out_$i335, 1));
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i334 := $sub.i64(0, out_$i333);
    out_$i335 := $add.i64(out_$i142, out_$i334);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i333 := $sext.i32.i64(out_$i330);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i332 := $add.i64(out_$i331, out_$i165);
    call {:si_unique_call 304} {:cexpr "count"} boogie_si_record_i64(out_$i332);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i331 := $sext.i32.i64(out_$i330);
    goto corral_source_split_1815;

  $bb158:
    assume out_$i325 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i326, out_$i327, out_$i328, out_$p329, out_$i330 := out_$i215, out_$i220, out_$i221, out_$p256, out_$i323;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i325 := $sle.i64(out_$i324, out_$i142);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i324 := $sext.i32.i64(out_$i323);
    goto corral_source_split_1811;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  $bb156:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    out_$i323 := out_$i310;
    goto $bb157;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i323 := out_$i322;
    goto $bb157;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i322 := $mul.i32(out_$i321, out_$i310);
    call {:si_unique_call 303} {:cexpr "undone"} boogie_si_record_i32(out_$i322);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i32($M.0, out_$p320);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$p320 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1806;

  $bb155:
    assume out_$i319 == 1;
    goto corral_source_split_1805;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i319 := $ne.i32(out_$i318, 0);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i318 := $load.i32($M.0, out_$p317);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p317 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1795;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i310 := out_$i316;
    goto $bb148;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$i310 := out_$i309;
    goto $bb148;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i309 := $trunc.i64.i32(out_$i308);
    call {:si_unique_call 301} {:cexpr "undone"} boogie_si_record_i32(out_$i309);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i64($M.0, out_$p307);
    goto corral_source_split_1786;

  $bb146:
    assume out_$i306 == 1;
    out_$p307 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i306 := $ne.i32(out_$i305, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i305 := $zext.i8.i32(out_$i304);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i8($M.0, out_$p303);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i302 := $zext.i8.i32(out_$i301);
    call {:si_unique_call 300} {:cexpr "scode"} boogie_si_record_i32(out_$i302);
    out_$p303 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(33, 1));
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i8($M.0, out_$p300);
    goto corral_source_split_1779;

  $bb144:
    assume out_$i298 == 1;
    out_$p300 := $add.ref($add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_1778;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i291, out_$i292, out_$p293 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i298 := $ne.i32(out_$i297, 0);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i297 := $and.i32(out_$i296, 64);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i8.i32(out_$i295);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i8($M.0, out_$p294);
    goto corral_source_split_1766;

  $bb141:
    assume out_$i290 == 1;
    out_$p294 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i291, out_$i292, out_$p293 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i290 := $ne.i32(out_$i289, 0);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.0, out_$p288);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$p286 := $load.ref($M.0, out_$p285);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1759;

  $bb139:
    assume out_$i281 == 1;
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$i282, out_$i283, out_$p284 := out_$i215, out_$i221, out_$p256;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.0, out_$p279);
    goto corral_source_split_1755;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1754;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb135;

  $bb137:
    assume {:verifier.code 0} true;
    assume !(out_$i266 == 1);
    goto $bb135;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i267, out_$i268 := out_$i165, out_$i220;
    assume true;
    goto $bb137;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 0);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i32($M.0, out_$p264);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  $bb133:
    assume out_$i263 == 1;
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i32(out_$i183, 0);
    goto corral_source_split_1733;

  $bb131:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p259 := out_$p256;
    assume true;
    goto $bb131;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i64(out_$i257, 0);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i257 := $p2i.ref.i64(out_$p256);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} out_$p256 := st_do_scsi(out_$p216, in_$p8, out_$p246, out_$i247, 1, out_$i253, 0, out_$i255);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i255 := $zext.i1.i32(out_$i254);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i183, 0);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i32($M.0, out_$p252);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(out_$p251, $mul.ref(0, 3200)), $mul.ref(2192, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$p251 := $load.ref($M.0, out_$p250);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(out_$p249, $mul.ref(0, 2896)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p249 := $load.ref($M.0, out_$p248);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(8, 1));
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i247 := $trunc.i64.i32(out_$i220);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p246 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p245, out_$i244);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i244 := $trunc.i64.i8(out_$i221);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p243, out_$i242);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i242 := $trunc.i64.i8(out_$i241);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i241 := $ashr.i64(out_$i221, 8);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p240, out_$i239);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i239 := $trunc.i64.i8(out_$i238);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i238 := $ashr.i64(out_$i221, 16);
    goto corral_source_split_1689;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1688;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i237 := $mul.i64(out_$i236, out_$i233);
    call {:si_unique_call 296} {:cexpr "transfer"} boogie_si_record_i64(out_$i237);
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := out_$i237, out_$i233;
    goto $bb126;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := out_$i142, out_$i142;
    goto $bb126;

  $bb124:
    assume out_$i219 == 1;
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.0, out_$p217);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1676;

  $bb123:
    call out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i291, out_$i292, out_$p293, out_$i282, out_$i283, out_$p284 := st_write_loop_$bb123(in_$p5, in_$p8, in_$p35, in_$i38, in_$p84, out_$i142, out_$i165, out_$i183, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i291, out_$i292, out_$p293, out_$i282, out_$i283, out_$p284);
    goto $bb123_last;

  $bb123_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i215, out_$p216 := out_$i135, out_$p214;
    goto $bb123;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i215, out_$p216 := 1, out_$p256;
    assume false;
    return;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p390, 3);
    goto corral_source_split_1895;

  $bb184:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1894;

  $bb183:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p389, out_$i388);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i388 := $add.i32(out_$i380, out_$i387);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i387 := $trunc.i64.i32(out_$i386);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i386 := $sdiv.i64(out_$i382, out_$i385);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i385 := $sext.i32.i64(out_$i384);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i32($M.0, out_$p383);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p383 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i382 := $sub.i64(out_$i220, out_$i381);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i381 := $sext.i32.i64(out_$i323);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i380 := $load.i32($M.0, out_$p379);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p379 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1881;

  $bb182:
    assume out_$i378 == 1;
    goto corral_source_split_1880;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i378 := $sge.i32(out_$i377, 0);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i377 := $load.i32($M.0, out_$p376);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} move_buffer_data(out_$p373, out_$i375);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i375 := $sub.i32(out_$i374, out_$i323);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i374 := $trunc.i64.i32(out_$i220);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p373 := $load.ref($M.0, out_$p372);
    goto corral_source_split_1869;

  $bb178:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(280, 1));
    goto corral_source_split_1868;

  $bb180:
    assume {:verifier.code 0} true;
    assume out_$i371 == 1;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    assume out_$i370 == 1;
    goto $bb178;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb179;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i302, 0);
    goto corral_source_split_1866;

  $bb175:
    assume out_$i369 == 1;
    goto corral_source_split_1865;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 0);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i8.i32(out_$i367);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i8($M.0, out_$p366);
    goto corral_source_split_1855;

  $bb172:
    assume out_$i363 == 1;
    out_$p366 := $add.ref($add.ref($add.ref(out_$p286, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(35, 1));
    goto corral_source_split_1854;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i215, 0);
    goto corral_source_split_1827;

  $bb159:
    assume !(out_$i325 == 1);
    goto corral_source_split_1826;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$i364, out_$p365 := out_$i215, out_$p256;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i302, 1);
    goto corral_source_split_1878;

  $bb179:
    assume !(out_$i370 == 1);
    goto corral_source_split_1877;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p214 := out_$p187;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    out_$p214 := out_$p132;
    goto $bb122;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb117;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i209 == 1);
    goto $bb117;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$p210, out_$i211 := out_$p132, out_$i165;
    assume true;
    goto $bb119;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i64(out_$i165, 0);
    goto corral_source_split_1663;

  $bb115:
    assume out_$i208 == 1;
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i183, 0);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p207, 1);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(632, 1));
    goto corral_source_split_1658;

  $bb113:
    assume out_$i206 == 1;
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$p187 := out_$p132;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i203, out_$i205);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i32($M.0, out_$p204);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.0, out_$p202);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1651;

  $bb111:
    assume out_$i201 == 1;
    goto corral_source_split_1650;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p187 := out_$p132;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$i201 := $ule.i32(out_$i200, 2);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i200 := $zext.i8.i32(out_$i199);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i8($M.0, out_$p198);
    goto corral_source_split_1642;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1641;

  $bb109:
    assume {:verifier.code 0} true;
    assume out_$i197 == 1;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    assume out_$i195 == 1;
    goto $bb107;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb108;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 0);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i8.i32(out_$i193);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i8($M.0, out_$p192);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(307, 1));
    goto corral_source_split_1636;

  $bb104:
    assume out_$i191 == 1;
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$p187 := out_$p132;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, 0);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i8.i32(out_$i189);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i8($M.0, out_$p188);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p29, $mul.ref(in_$i32, 56)), $mul.ref(3, 1));
    goto corral_source_split_1630;

  $bb101:
    assume out_$i186 == 1;
    goto corral_source_split_1629;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p187 := out_$p132;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.0, out_$p184);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i1.i32(out_$i170);
    call {:si_unique_call 292} {:cexpr "async_write"} boogie_si_record_i32(out_$i183);
    goto corral_source_split_1613;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i169 == 1);
    goto $bb96;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i174 == 1);
    goto $bb96;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i178 == 1);
    goto $bb96;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$i182 := $ule.i32(out_$i181, 2);
    assume {:verifier.code 0} true;
    out_$i170 := out_$i182;
    goto $bb96;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i181 := $zext.i8.i32(out_$i180);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i8($M.0, out_$p179);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1625;

  $bb99:
    assume out_$i178 == 1;
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i170 := 0;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i8.i32(out_$i176);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i8($M.0, out_$p175);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p29, $mul.ref(in_$i32, 56)), $mul.ref(2, 1));
    goto corral_source_split_1619;

  $bb97:
    assume out_$i174 == 1;
    goto corral_source_split_1618;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i170 := 0;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i16.i32(out_$i172);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i16($M.0, out_$p171);
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1607;

  $bb94:
    assume out_$i169 == 1;
    goto corral_source_split_1606;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i170 := 0;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.0, out_$p167);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref(out_$p141, $mul.ref(out_$i142, 1));
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i165 := $sub.i64(out_$i134, out_$i142);
    call {:si_unique_call 287} {:cexpr "count"} boogie_si_record_i64(out_$i165);
    goto corral_source_split_1573;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p141, out_$i142 := out_$p133, out_$i146;
    goto $bb84;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$p141, out_$i142 := out_$p133, out_$i134;
    goto $bb84;

  $bb82:
    assume out_$i140 == 1;
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(out_$i138);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i16($M.0, out_$p137);
    goto corral_source_split_1561;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1560;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb205:
    assume out_$i443 == 1;
    goto corral_source_split_1946;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i444, out_$p445 := out_$i134, out_$p132;
    assume true;
    goto $bb205;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i135, 0);
    goto corral_source_split_1558;

  $bb92:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$p163 := out_$p132;
    assume true;
    goto $bb92;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i64(out_$i161, 0);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i64($M.0, in_$p4);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p4, out_$i160);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i159);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$i159 := append_to_buffer(out_$p133, in_$p84, out_$i158);
    call {:si_unique_call 290} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$i158 := $trunc.i64.i32(out_$i146);
    goto corral_source_split_1594;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i146 := out_$i157;
    goto $bb87;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i146 := out_$i134;
    goto $bb87;

  $bb85:
    assume out_$i145 == 1;
    goto corral_source_split_1579;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.0, out_$p143);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1568;

  $bb83:
    assume !(out_$i140 == 1);
    goto corral_source_split_1567;

  $bb89:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := out_$i155;
    goto $bb90;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$i157 := out_$i134;
    goto $bb90;

  $bb88:
    assume out_$i156 == 1;
    goto corral_source_split_1601;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$i156 := $ugt.i64(out_$i155, out_$i134);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i155 := $sext.i32.i64(out_$i154);
    call {:si_unique_call 288} {:cexpr "do_count"} boogie_si_record_i64(out_$i155);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i154 := $sub.i32(out_$i151, out_$i153);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.0, out_$p152);
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$i151 := $mul.i32(out_$i148, out_$i150);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.0, out_$p149);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.0, out_$p147);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_1582;

  $bb86:
    assume !(out_$i145 == 1);
    goto corral_source_split_1581;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$p187 := out_$p132;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 0);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i196 := $M.15;
    goto corral_source_split_1647;

  $bb108:
    assume !(out_$i195 == 1);
    goto corral_source_split_1646;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i186 == 1);
    goto $bb103;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(out_$i191 == 1);
    goto $bb103;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb103;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i201 == 1);
    goto $bb103;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb103;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i236 := $sext.i32.i64(out_$i235);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.0, out_$p234);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$i233 := $sdiv.i64(out_$i229, out_$i232);
    call {:si_unique_call 295} {:cexpr "blks"} boogie_si_record_i64(out_$i233);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i231);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.0, out_$p230);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1720;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  $bb128:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    out_$i229 := out_$i142;
    goto $bb129;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i229 := out_$i228;
    goto $bb129;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i228 := $sext.i32.i64(out_$i227);
    call {:si_unique_call 294} {:cexpr "blks"} boogie_si_record_i64(out_$i228);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, out_$p226);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1715;

  $bb127:
    assume out_$i225 == 1;
    goto corral_source_split_1714;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i224 := $zext.i16.i32(out_$i223);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i16($M.0, out_$p222);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(2, 1));
    goto corral_source_split_1683;

  $bb125:
    assume !(out_$i219 == 1);
    goto corral_source_split_1682;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i316 := 0;
    goto $bb154;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i316 := out_$i315;
    goto $bb154;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$i315 := $trunc.i64.i32(out_$i220);
    call {:si_unique_call 302} {:cexpr "undone"} boogie_si_record_i32(out_$i315);
    goto corral_source_split_1803;

  $bb152:
    assume out_$i314 == 1;
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i302, 13);
    goto corral_source_split_1800;

  $bb149:
    assume out_$i313 == 1;
    goto corral_source_split_1799;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 0);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i32($M.0, out_$p311);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(in_$p8, $mul.ref(0, 688)), $mul.ref(648, 1));
    goto corral_source_split_1790;

  $bb147:
    assume !(out_$i306 == 1);
    goto corral_source_split_1789;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(out_$i313 == 1);
    goto $bb151;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i314 == 1);
    goto $bb151;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i353 := $sgt.i32(out_$i330, 0);
    goto corral_source_split_1845;

  $bb165:
    assume !(out_$i352 == 1);
    goto corral_source_split_1844;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i64(out_$i332, 0);
    goto corral_source_split_1848;

  $bb167:
    assume !(out_$i353 == 1);
    goto corral_source_split_1847;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p393, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$p393 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p392, 4);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$p392 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(1, 1));
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i391 := $sub.i64(out_$i165, out_$i142);
    call {:si_unique_call 307} {:cexpr "count"} boogie_si_record_i64(out_$i391);
    goto corral_source_split_1860;

  $bb174:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1859;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i363 == 1);
    goto $bb174;

  $bb176:
    assume {:verifier.code 0} true;
    assume !(out_$i369 == 1);
    goto $bb174;

  $bb181:
    assume {:verifier.code 0} true;
    assume !(out_$i371 == 1);
    goto $bb174;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i32($M.0, out_$p403);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(in_$p84, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p402, $sub.i32(0, 1));
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p402 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i401 := $add.i64(out_$i165, out_$i142);
    call {:si_unique_call 298} {:cexpr "count"} boogie_si_record_i64(out_$i401);
    goto corral_source_split_1772;

  $bb143:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i290 == 1);
    goto $bb143;

  $bb145:
    assume {:verifier.code 0} true;
    assume !(out_$i298 == 1);
    goto $bb143;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p429 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i428 := $add.i32(out_$i426, out_$i427);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i427 := $trunc.i64.i32(out_$i409);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i426 := $load.i32($M.0, out_$p425);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$p425 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i38, 16)), $mul.ref(8, 1));
    goto corral_source_split_1919;

  $bb191:
    assume !(out_$i418 == 1);
    goto corral_source_split_1918;

  $bb203_dummy:
    call {:si_unique_call 1} out_$p137, out_$i138, out_$i139, out_$i140, out_$p143, out_$i144, out_$i145, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i146, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p141, out_$i142, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i170, out_$i183, out_$p184, out_$i185, out_$i186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$p187, out_$p214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i340, out_$i341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i391, out_$p392, out_$p393, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362, out_$i291, out_$i292, out_$p293, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$i282, out_$i283, out_$p284, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p425, out_$i426, out_$i427, out_$i428, out_$p429, out_$p430, out_$p431, out_$i432, out_$i436, out_$i433, out_$i434, out_$p435, out_$i440, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i443, out_$i444, out_$p445, out_$i441, out_$p442 := st_write_loop_$bb80(in_$p4, in_$p5, in_$p8, in_$p29, in_$i32, in_$p35, in_$i38, in_$p84, out_$p137, out_$i138, out_$i139, out_$i140, out_$p143, out_$i144, out_$i145, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i146, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p141, out_$i142, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i170, out_$i183, out_$p184, out_$i185, out_$i186, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$p187, out_$p214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i220, out_$i221, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$p245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$p251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p279, out_$i280, out_$i281, out_$p285, out_$p286, out_$p288, out_$i289, out_$i290, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p300, out_$i301, out_$i302, out_$p303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i310, out_$p317, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i340, out_$i341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i363, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$p373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$p389, out_$p390, out_$i364, out_$p365, out_$i391, out_$p392, out_$p393, out_$i356, out_$p357, out_$i358, out_$i359, out_$i360, out_$i361, out_$p362, out_$i291, out_$i292, out_$p293, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$i282, out_$i283, out_$p284, out_$i406, out_$p407, out_$i408, out_$i409, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i417, out_$i418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$p425, out_$i426, out_$i427, out_$i428, out_$p429, out_$p430, out_$p431, out_$i432, out_$i436, out_$i433, out_$i434, out_$p435, out_$i440, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i443, out_$i444, out_$p445, out_$i441, out_$p442);
    return;

  exit:
    return;
}



procedure st_write_loop_$bb80(in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p29: ref, in_$i32: i64, in_$p35: ref, in_$i38: i64, in_$p84: ref, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p147: ref, in_$i148: i32, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i64, in_$i156: i1, in_$i157: i64, in_$i146: i64, in_$i158: i32, in_$i159: i32, in_$i160: i64, in_$i161: i64, in_$i162: i1, in_$p163: ref, in_$p141: ref, in_$i142: i64, in_$i165: i64, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i1, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i8, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i8, in_$i181: i32, in_$i182: i1, in_$i170: i1, in_$i183: i32, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p188: ref, in_$i189: i8, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i8, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i8, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i1, in_$i209: i1, in_$p210: ref, in_$i211: i64, in_$p187: ref, in_$p214: ref, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p222: ref, in_$i223: i16, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$i236: i64, in_$i237: i64, in_$i220: i64, in_$i221: i64, in_$i238: i64, in_$i239: i8, in_$p240: ref, in_$i241: i64, in_$i242: i8, in_$p243: ref, in_$i244: i8, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$p256: ref, in_$i257: i64, in_$i258: i1, in_$p259: ref, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$i267: i64, in_$i268: i64, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p285: ref, in_$p286: ref, in_$p288: ref, in_$i289: i32, in_$i290: i1, in_$p294: ref, in_$i295: i8, in_$i296: i32, in_$i297: i32, in_$i298: i1, in_$p300: ref, in_$i301: i8, in_$i302: i32, in_$p303: ref, in_$i304: i8, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i64, in_$i309: i32, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$i314: i1, in_$i315: i32, in_$i316: i32, in_$i310: i32, in_$p317: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i32, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$p329: ref, in_$i330: i32, in_$i331: i64, in_$i332: i64, in_$i333: i64, in_$i334: i64, in_$i335: i64, in_$p336: ref, in_$i337: i64, in_$i338: i64, in_$p339: ref, in_$i340: i32, in_$i341: i1, in_$i342: i64, in_$i343: i64, in_$p344: ref, in_$i345: i32, in_$i346: i64, in_$i347: i64, in_$i348: i64, in_$p349: ref, in_$p350: ref, in_$i351: i32, in_$i352: i1, in_$i353: i1, in_$i354: i1, in_$i355: i64, in_$i363: i1, in_$p366: ref, in_$i367: i8, in_$i368: i32, in_$i369: i1, in_$i370: i1, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_$i382: i64, in_$p383: ref, in_$i384: i32, in_$i385: i64, in_$i386: i64, in_$i387: i32, in_$i388: i32, in_$p389: ref, in_$p390: ref, in_$i364: i32, in_$p365: ref, in_$i391: i64, in_$p392: ref, in_$p393: ref, in_$i356: i32, in_$p357: ref, in_$i358: i64, in_$i359: i64, in_$i360: i64, in_$i361: i64, in_$p362: ref, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$i401: i64, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i405: i64, in_$i394: i32, in_$p395: ref, in_$i396: i64, in_$i397: i64, in_$i398: i64, in_$i399: i64, in_$p400: ref, in_$i282: i32, in_$i283: i64, in_$p284: ref, in_$i406: i32, in_$p407: ref, in_$i408: i64, in_$i409: i64, in_$i410: i64, in_$i411: i64, in_$p412: ref, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i32, in_$p424: ref, in_$p425: ref, in_$i426: i32, in_$i427: i32, in_$i428: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$i432: i1, in_$i436: i1, in_$i433: i64, in_$i434: i64, in_$p435: ref, in_$i440: i1, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i32, in_$i136: i64, in_$i443: i1, in_$i444: i64, in_$p445: ref, in_$i441: i64, in_$p442: ref) returns (out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p147: ref, out_$i148: i32, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i64, out_$i156: i1, out_$i157: i64, out_$i146: i64, out_$i158: i32, out_$i159: i32, out_$i160: i64, out_$i161: i64, out_$i162: i1, out_$p163: ref, out_$p141: ref, out_$i142: i64, out_$i165: i64, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i1, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i8, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i8, out_$i181: i32, out_$i182: i1, out_$i170: i1, out_$i183: i32, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p188: ref, out_$i189: i8, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i8, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i8, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i1, out_$i209: i1, out_$p210: ref, out_$i211: i64, out_$p187: ref, out_$p214: ref, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p222: ref, out_$i223: i16, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$i236: i64, out_$i237: i64, out_$i220: i64, out_$i221: i64, out_$i238: i64, out_$i239: i8, out_$p240: ref, out_$i241: i64, out_$i242: i8, out_$p243: ref, out_$i244: i8, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$p256: ref, out_$i257: i64, out_$i258: i1, out_$p259: ref, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$i267: i64, out_$i268: i64, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p285: ref, out_$p286: ref, out_$p288: ref, out_$i289: i32, out_$i290: i1, out_$p294: ref, out_$i295: i8, out_$i296: i32, out_$i297: i32, out_$i298: i1, out_$p300: ref, out_$i301: i8, out_$i302: i32, out_$p303: ref, out_$i304: i8, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i64, out_$i309: i32, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$i314: i1, out_$i315: i32, out_$i316: i32, out_$i310: i32, out_$p317: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i32, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$p329: ref, out_$i330: i32, out_$i331: i64, out_$i332: i64, out_$i333: i64, out_$i334: i64, out_$i335: i64, out_$p336: ref, out_$i337: i64, out_$i338: i64, out_$p339: ref, out_$i340: i32, out_$i341: i1, out_$i342: i64, out_$i343: i64, out_$p344: ref, out_$i345: i32, out_$i346: i64, out_$i347: i64, out_$i348: i64, out_$p349: ref, out_$p350: ref, out_$i351: i32, out_$i352: i1, out_$i353: i1, out_$i354: i1, out_$i355: i64, out_$i363: i1, out_$p366: ref, out_$i367: i8, out_$i368: i32, out_$i369: i1, out_$i370: i1, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_$i382: i64, out_$p383: ref, out_$i384: i32, out_$i385: i64, out_$i386: i64, out_$i387: i32, out_$i388: i32, out_$p389: ref, out_$p390: ref, out_$i364: i32, out_$p365: ref, out_$i391: i64, out_$p392: ref, out_$p393: ref, out_$i356: i32, out_$p357: ref, out_$i358: i64, out_$i359: i64, out_$i360: i64, out_$i361: i64, out_$p362: ref, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$i401: i64, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i405: i64, out_$i394: i32, out_$p395: ref, out_$i396: i64, out_$i397: i64, out_$i398: i64, out_$i399: i64, out_$p400: ref, out_$i282: i32, out_$i283: i64, out_$p284: ref, out_$i406: i32, out_$p407: ref, out_$i408: i64, out_$i409: i64, out_$i410: i64, out_$i411: i64, out_$p412: ref, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i32, out_$p424: ref, out_$p425: ref, out_$i426: i32, out_$i427: i32, out_$i428: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$i432: i1, out_$i436: i1, out_$i433: i64, out_$i434: i64, out_$p435: ref, out_$i440: i1, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i32, out_$i136: i64, out_$i443: i1, out_$i444: i64, out_$p445: ref, out_$i441: i64, out_$p442: ref);
  modifies $M.0, $CurrAddr;



implementation enlarge_buffer_loop_$bb37(in_$p0: ref, in_$i1: i32, in_$i12: i32, in_$i26: i32, in_$i36: i32, in_$i37: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i62: i32, in_$i63: i32, in_$i81: i1) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i62: i32, out_$i63: i32, out_$i81: i1)
{

  entry:
    out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i62, out_$i63, out_$i81 := in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i62, in_$i63, in_$i81;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;

  $bb42:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i73, out_$i79;
    goto $bb42_dummy;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i79, in_$i12);
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i63, 1);
    call {:si_unique_call 681} {:cexpr "segs"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p78, out_$p64);
    goto corral_source_split_6246;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p76, $mul.ref(out_$i77, 8));
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i63);
    goto corral_source_split_6244;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_6242;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, out_$i73);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i62, in_$i36);
    call {:si_unique_call 680} {:cexpr "got"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p72, out_$i71);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i32.i16(out_$i70);
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i69, 1);
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_6234;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.0, out_$p67);
    goto corral_source_split_6233;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(148, 1));
    goto corral_source_split_6232;

  $bb40:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_6226;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$p64 := alloc_pages(in_$i26, in_$i37);
    goto corral_source_split_6225;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume out_$i81 == 1;
    goto corral_source_split_6252;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i62, in_$i1);
    goto corral_source_split_6223;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i62, out_$i63, out_$i81 := enlarge_buffer_loop_$bb37(in_$p0, in_$i1, in_$i12, in_$i26, in_$i36, in_$i37, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i62, out_$i63, out_$i81);
    return;

  exit:
    return;
}



procedure enlarge_buffer_loop_$bb37(in_$p0: ref, in_$i1: i32, in_$i12: i32, in_$i26: i32, in_$i36: i32, in_$i37: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i62: i32, in_$i63: i32, in_$i81: i1) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i62: i32, out_$i63: i32, out_$i81: i1);
  modifies $M.0;



implementation test_ready_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p21: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i40: i32, in_$p39: ref, in_$i44: i1, in_$i47: i1, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$p48: ref, in_$i45: i32, in_$p46: ref, in_$i31: i32, in_$p32: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i75: i32, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8) returns (out_$p21: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i40: i32, out_$p39: ref, out_$i44: i1, out_$i47: i1, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$p48: ref, out_$i45: i32, out_$p46: ref, out_$i31: i32, out_$p32: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i75: i32, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8)
{

  entry:
    out_$p21, out_$p17, out_$i18, out_$i19, out_$i20, out_$p28, out_$i29, out_$i30, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p39, out_$i44, out_$i47, out_$i49, out_$i50, out_$p51, out_$i52, out_$p48, out_$i45, out_$p46, out_$i31, out_$p32, out_$i41, out_$i42, out_$i43, out_$i75, out_$p76, out_$i77, out_$i78, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32 := in_$p21, in_$p17, in_$i18, in_$i19, in_$i20, in_$p28, in_$i29, in_$i30, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i40, in_$p39, in_$i44, in_$i47, in_$i49, in_$i50, in_$p51, in_$i52, in_$p48, in_$i45, in_$p46, in_$i31, in_$p32, in_$i41, in_$i42, in_$i43, in_$i75, in_$p76, in_$i77, in_$i78, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb34:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$p17, out_$i18, out_$i19, out_$i20 := out_$p76, out_$i43, out_$i42, out_$i41;
    goto $bb34_dummy;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p76;
    assume true;
    goto $bb34;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i64(out_$i77, 0);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} out_$p76 := st_do_scsi(out_$p17, in_$p0, in_$p10, 0, 3, out_$i75, 0, 1);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p11);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p9, 0);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 719} out_cmdloc_dummy_var_32 := $memset.i8(out_cmdloc_dummy_var_31, in_$p8, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_6856;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43 := out_$i52, out_$i19, out_$i18;
    goto $bb14;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43 := out_$i20, out_$i40, 1;
    goto $bb14;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i19, 1);
    call {:si_unique_call 718} {:cexpr "attentions"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_6851;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p17;
    assume true;
    goto $bb12;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i38 := $sle.i32(out_$i19, 9);
    goto corral_source_split_6848;

  $bb10:
    assume out_$i37 == 1;
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 6);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    call {:si_unique_call 717} {:cexpr "scode"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_6843;

  $bb8:
    assume out_$i30 == 1;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i31, out_$p32 := out_$i18, out_$p17;
    assume true;
    goto $bb8;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_6839;

  $bb7:
    out_$p28 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_6838;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i20, 1);
    call {:si_unique_call 723} {:cexpr "waits"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_6882;

  $bb21:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p17;
    assume true;
    goto $bb21;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_$i49 := msleep_interruptible(1000);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_6869;

  $bb18:
    assume out_$i47 == 1;
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p17;
    assume true;
    goto $bb18;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i20, in_$i7);
    goto corral_source_split_6866;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i45, out_$p46 := out_$i18, out_$p17;
    assume true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i36, 2);
    goto corral_source_split_6863;

  $bb11:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p21, out_$p17, out_$i18, out_$i19, out_$i20, out_$p28, out_$i29, out_$i30, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p39, out_$i44, out_$i47, out_$i49, out_$i50, out_$p51, out_$i52, out_$p48, out_$i45, out_$p46, out_$i31, out_$p32, out_$i41, out_$i42, out_$i43, out_$i75, out_$p76, out_$i77, out_$i78, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32 := test_ready_loop_$bb4(in_$p0, in_$p4, in_$i7, in_$p8, in_$p9, in_$p10, in_$p11, out_$p21, out_$p17, out_$i18, out_$i19, out_$i20, out_$p28, out_$i29, out_$i30, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i40, out_$p39, out_$i44, out_$i47, out_$i49, out_$i50, out_$p51, out_$i52, out_$p48, out_$i45, out_$p46, out_$i31, out_$p32, out_$i41, out_$i42, out_$i43, out_$i75, out_$p76, out_$i77, out_$i78, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32);
    return;

  exit:
    return;
}



procedure test_ready_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p21: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i40: i32, in_$p39: ref, in_$i44: i1, in_$i47: i1, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$p48: ref, in_$i45: i32, in_$p46: ref, in_$i31: i32, in_$p32: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i75: i32, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8) returns (out_$p21: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i40: i32, out_$p39: ref, out_$i44: i1, out_$i47: i1, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$p48: ref, out_$i45: i32, out_$p46: ref, out_$i31: i32, out_$p32: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i75: i32, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8);
  modifies $M.0, $CurrAddr;



implementation append_to_buffer_loop_$bb16(in_$p1: ref, in_$i7: i32, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i51: i32, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i1, in_$i73: i32, in_$i71: i32) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i51: i32, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i1, out_$i73: i32, out_$i71: i32)
{

  entry:
    out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p40, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i71 := in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i52, in_$i51, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p40, in_$i41, in_$i42, in_$i43, in_$i72, in_$i73, in_$i71;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8624;

  $bb24:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p40, out_$i41, out_$i42, out_$i43 := out_$p66, 0, out_$i60, out_$i67;
    goto $bb24_dummy;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i60;
    assume true;
    goto $bb24;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i69, out_$i67);
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.0, in_$p35);
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i43, 1);
    call {:si_unique_call 949} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p40, $mul.ref(out_$i65, 1));
    goto corral_source_split_8658;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i63);
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, out_$i51);
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8652;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i42, out_$i51);
    call {:si_unique_call 948} {:cexpr "do_count"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_8651;

  $bb22:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i64.i32(out_$i57);
    call {:si_unique_call 947} {:cexpr "res"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} out_$i57 := copy_from_user(out_$p55, out_$p40, out_$i56);
    call {:si_unique_call 946} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p53, $mul.ref(out_$i54, 1));
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i41);
    goto corral_source_split_8642;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_$p53 := lowmem_page_address(out_$p48);
    goto corral_source_split_8641;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8640;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i52;
    goto $bb20;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i42;
    goto $bb20;

  $bb18:
    assume out_$i50 == 1;
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i42, out_$i49);
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(in_$i7, out_$i41);
    goto corral_source_split_8632;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(out_$i46, 8));
    goto corral_source_split_8630;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i43);
    goto corral_source_split_8629;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_8628;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8627;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb26:
    assume out_$i72 == 1;
    goto corral_source_split_8666;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i42;
    assume true;
    goto $bb26;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    out_$i72 := $sgt.i32(out_$i42, 0);
    goto corral_source_split_8625;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(in_$i7, out_$i41);
    goto corral_source_split_8638;

  $bb19:
    assume !(out_$i50 == 1);
    goto corral_source_split_8637;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p40, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i71 := append_to_buffer_loop_$bb16(in_$p1, in_$i7, in_$p35, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p40, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i71);
    return;

  exit:
    return;
}



procedure append_to_buffer_loop_$bb16(in_$p1: ref, in_$i7: i32, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i51: i32, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i1, in_$i73: i32, in_$i71: i32) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i51: i32, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i1, out_$i73: i32, out_$i71: i32);
  modifies $M.0;



implementation append_to_buffer_loop_$bb4(in_$i7: i32, in_$p10: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i18: i32, in_$i19: i32, in_$i27: i32, in_$i28: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i18: i32, out_$i19: i32, out_$i27: i32, out_$i28: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i18, in_$i19, in_$i27, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8595;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i20, out_$i21;
    goto $bb6_dummy;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i21, out_$i20;
    assume true;
    goto $bb6;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i1(out_$i24, out_$i25);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i25 := $sge.i32(out_$i20, in_$i7);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i21);
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, in_$p10);
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i19, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_8598;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i18, in_$i7);
    call {:si_unique_call 941} {:cexpr "offset"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28 := append_to_buffer_loop_$bb4(in_$i7, in_$p10, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure append_to_buffer_loop_$bb4(in_$i7: i32, in_$p10: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i18: i32, in_$i19: i32, in_$i27: i32, in_$i28: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i18: i32, out_$i19: i32, out_$i27: i32, out_$i28: i32);



implementation move_buffer_data_loop_$bb20(in_$p0: ref, in_$i6: i32, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := in_$p39, in_$p40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$p56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8717;

  $bb31:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := out_$i70, out_$i64, out_$i69, out_$i63, out_$i68;
    goto $bb31_dummy;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, 0);
    goto corral_source_split_8761;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(out_$i34, out_$i52);
    call {:si_unique_call 964} {:cexpr "total"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_8760;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8759;

  $bb29:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i65, out_$i36;
    goto $bb30;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := 0, out_$i67;
    goto $bb30;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i36, 1);
    call {:si_unique_call 963} {:cexpr "dst_seg"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_8757;

  $bb28:
    assume out_$i66 == 1;
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    out_$i66 := $sge.i32(out_$i65, in_$i6);
    goto corral_source_split_8754;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i38, out_$i52);
    call {:si_unique_call 962} {:cexpr "dst_offset"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_8753;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8752;

  $bb26:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i63, out_$i64 := out_$i60, out_$i35;
    goto $bb27;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    out_$i63, out_$i64 := 0, out_$i62;
    goto $bb27;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i35, 1);
    call {:si_unique_call 961} {:cexpr "src_seg"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_8750;

  $bb25:
    assume out_$i61 == 1;
    goto corral_source_split_8749;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    out_$i61 := $sge.i32(out_$i60, in_$i6);
    goto corral_source_split_8747;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i37, out_$i52);
    call {:si_unique_call 960} {:cexpr "src_offset"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_8746;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} llvm.memmove.p0i8.p0i8.i64(out_$p56, out_$p58, out_$i59, 1, 0);
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i52);
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p53, $mul.ref(out_$i57, 1));
    goto corral_source_split_8743;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i37);
    goto corral_source_split_8742;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p54, $mul.ref(out_$i55, 1));
    goto corral_source_split_8741;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i38);
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_$p54 := lowmem_page_address(out_$p43);
    goto corral_source_split_8739;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} out_$p53 := lowmem_page_address(out_$p48);
    goto corral_source_split_8738;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8737;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i50;
    goto $bb24;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i49;
    goto $bb24;

  $bb22:
    assume out_$i51 == 1;
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, out_$i50);
    goto corral_source_split_8731;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(in_$i6, out_$i37);
    call {:si_unique_call 956} {:cexpr "_min2"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_8730;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(in_$i6, out_$i38);
    call {:si_unique_call 955} {:cexpr "_min1"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_8729;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_8728;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(out_$i46, 8));
    goto corral_source_split_8727;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i35);
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_8725;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8724;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_8723;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(out_$i41, 8));
    goto corral_source_split_8722;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i36);
    goto corral_source_split_8721;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_8720;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8719;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume !(out_$i51 == 1);
    goto corral_source_split_8735;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := move_buffer_data_loop_$bb20(in_$p0, in_$i6, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure move_buffer_data_loop_$bb20(in_$p0: ref, in_$i6: i32, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32);



implementation move_buffer_data_loop_$bb8(in_$i6: i32, in_$p11: ref, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i17: i32, in_$i18: i32, in_$i29: i32, in_$i30: i32) returns (out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i17: i32, out_$i18: i32, out_$i29: i32, out_$i30: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i17, out_$i18, out_$i29, out_$i30 := in_$i19, in_$i20, in_$i21, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i17, in_$i18, in_$i29, in_$i30;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8694;

  $bb14:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i24, out_$i25;
    goto $bb14_dummy;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    out_$i29, out_$i30 := out_$i17, out_$i25;
    assume true;
    goto $bb14;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, out_$i25);
    goto corral_source_split_8711;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_8710;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, in_$p11);
    goto corral_source_split_8709;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i18, 1);
    call {:si_unique_call 954} {:cexpr "src_seg"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_8708;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i17, in_$i6);
    call {:si_unique_call 953} {:cexpr "offset"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_8707;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i18, out_$i17;
    assume true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i17, in_$i6);
    goto corral_source_split_8696;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i17, out_$i18, out_$i29, out_$i30 := move_buffer_data_loop_$bb8(in_$i6, in_$p11, out_$i19, out_$i20, out_$i21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i17, out_$i18, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure move_buffer_data_loop_$bb8(in_$i6: i32, in_$p11: ref, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i17: i32, in_$i18: i32, in_$i29: i32, in_$i30: i32) returns (out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i17: i32, out_$i18: i32, out_$i29: i32, out_$i30: i32);



implementation sgl_unmap_user_pages_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8792;

  $bb9:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb9_dummy;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i11, in_$i1);
    goto corral_source_split_8806;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 973} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_8805;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} put_page(out_$p9);
    goto corral_source_split_8804;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} SetPageDirty(out_$p9);
    goto corral_source_split_8802;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(in_$i2, 0);
    goto corral_source_split_8799;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 8));
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_8796;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_8795;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i4 := sgl_unmap_user_pages_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i4);
    return;

  exit:
    return;
}



procedure sgl_unmap_user_pages_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i4: i32);



implementation sgl_map_user_pages_loop_$bb21(in_$i11: i32, in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32)
{

  entry:
    out_$i44, out_$i45, out_$i43 := in_$i44, in_$i45, in_$i43;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8887;

  $bb23:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i44;
    goto $bb23_dummy;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, in_$i11);
    goto corral_source_split_8890;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    call {:si_unique_call 995} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_8889;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i43 := sgl_map_user_pages_loop_$bb21(in_$i11, out_$i44, out_$i45, out_$i43);
    return;

  exit:
    return;
}



procedure sgl_map_user_pages_loop_$bb21(in_$i11: i32, in_$i44: i32, in_$i45: i1, in_$i43: i32) returns (out_$i44: i32, out_$i45: i1, out_$i43: i32);



implementation sgl_map_user_pages_loop_$bb31(in_$p21: ref, in_$i36: i32, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i51: i32) returns (out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i51: i32)
{

  entry:
    out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i51 := in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i51;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8904;

  $bb33:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i55;
    goto $bb33_dummy;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, in_$i36);
    goto corral_source_split_8911;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i51, 1);
    call {:si_unique_call 997} {:cexpr "j"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} put_page(out_$p54);
    goto corral_source_split_8909;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_8908;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(in_$p21, $mul.ref(out_$i52, 8));
    goto corral_source_split_8907;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8906;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i51 := sgl_map_user_pages_loop_$bb31(in_$p21, in_$i36, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i51);
    return;

  exit:
    return;
}



procedure sgl_map_user_pages_loop_$bb31(in_$p21: ref, in_$i36: i32, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i51: i32) returns (out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i51: i32);



implementation clear_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i5: i32, in_cmdloc_dummy_var_47: [ref]i8, in_cmdloc_dummy_var_48: [ref]i8) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i5: i32, out_cmdloc_dummy_var_47: [ref]i8, out_cmdloc_dummy_var_48: [ref]i8)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i5, out_cmdloc_dummy_var_47, out_cmdloc_dummy_var_48 := in_$p6, in_$p7, in_$i8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i5, in_cmdloc_dummy_var_47, in_cmdloc_dummy_var_48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i16);
    goto corral_source_split_8943;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_8942;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, in_$p1);
    goto corral_source_split_8941;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1001} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_8940;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 1000} out_cmdloc_dummy_var_48 := $memset.i8(out_cmdloc_dummy_var_47, out_$p11, 0, out_$i15, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_48;
    goto corral_source_split_8939;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    out_$i15 := $shl.i64(4096, out_$i14);
    goto corral_source_split_8938;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i32.i64(out_$i13);
    goto corral_source_split_8937;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_8936;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_$p11 := lowmem_page_address(out_$p10);
    goto corral_source_split_8934;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_8933;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 8));
    goto corral_source_split_8932;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_8931;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_8930;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_8929;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i5, out_cmdloc_dummy_var_47, out_cmdloc_dummy_var_48 := clear_buffer_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i5, out_cmdloc_dummy_var_47, out_cmdloc_dummy_var_48);
    return;

  exit:
    return;
}



procedure clear_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i5: i32, in_cmdloc_dummy_var_47: [ref]i8, in_cmdloc_dummy_var_48: [ref]i8) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i5: i32, out_cmdloc_dummy_var_47: [ref]i8, out_cmdloc_dummy_var_48: [ref]i8);
  modifies $M.0;



implementation from_buffer_loop_$bb16(in_$p0: ref, in_$i7: i32, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i51: i32, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i1, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i74: i1, in_$i75: i32, in_$i73: i32) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i51: i32, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i1, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i74: i1, out_$i75: i32, out_$i73: i32)
{

  entry:
    out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i40, out_$p41, out_$i42, out_$i43, out_$i74, out_$i75, out_$i73 := in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i52, in_$i51, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i40, in_$p41, in_$i42, in_$i43, in_$i74, in_$i75, in_$i73;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9439;

  $bb24:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i40, out_$p41, out_$i42, out_$i43 := 0, out_$p68, out_$i58, out_$i69;
    goto $bb24_dummy;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i58;
    assume true;
    goto $bb24;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$i72 := $sgt.i32(out_$i71, out_$i69);
    goto corral_source_split_9480;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_9479;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i16($M.0, in_$p35);
    goto corral_source_split_9478;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i43, 1);
    call {:si_unique_call 1043} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_9477;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p41, $mul.ref(out_$i67, 1));
    goto corral_source_split_9476;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i51);
    goto corral_source_split_9475;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p66, out_$i65);
    goto corral_source_split_9474;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9473;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i64, out_$i51);
    goto corral_source_split_9472;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_9470;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i61);
    goto corral_source_split_9469;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9468;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i60, out_$i51);
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_9466;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_9465;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i42, out_$i51);
    call {:si_unique_call 1042} {:cexpr "do_count"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_9464;

  $bb22:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_9460;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} out_$i56 := copy_to_user(out_$p41, out_$p55, out_$i51);
    call {:si_unique_call 1041} {:cexpr "res"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_9459;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p53, $mul.ref(out_$i54, 1));
    goto corral_source_split_9458;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i40);
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_$p53 := lowmem_page_address(out_$p48);
    goto corral_source_split_9456;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9455;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i52;
    goto $bb20;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i42;
    goto $bb20;

  $bb18:
    assume out_$i50 == 1;
    goto corral_source_split_9450;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i42, out_$i49);
    goto corral_source_split_9448;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(in_$i7, out_$i40);
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_9446;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(out_$i46, 8));
    goto corral_source_split_9445;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i43);
    goto corral_source_split_9444;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_9443;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(80, 1));
    goto corral_source_split_9442;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb26:
    assume out_$i74 == 1;
    goto corral_source_split_9484;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i42;
    assume true;
    goto $bb26;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$i74 := $sgt.i32(out_$i42, 0);
    goto corral_source_split_9440;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(in_$i7, out_$i40);
    goto corral_source_split_9453;

  $bb19:
    assume !(out_$i50 == 1);
    goto corral_source_split_9452;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i40, out_$p41, out_$i42, out_$i43, out_$i74, out_$i75, out_$i73 := from_buffer_loop_$bb16(in_$p0, in_$i7, in_$p35, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i52, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i40, out_$p41, out_$i42, out_$i43, out_$i74, out_$i75, out_$i73);
    return;

  exit:
    return;
}



procedure from_buffer_loop_$bb16(in_$p0: ref, in_$i7: i32, in_$p35: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i52: i32, in_$i51: i32, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i1, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i74: i1, in_$i75: i32, in_$i73: i32) returns (out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i52: i32, out_$i51: i32, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i1, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i74: i1, out_$i75: i32, out_$i73: i32);
  modifies $M.0;



implementation from_buffer_loop_$bb4(in_$i7: i32, in_$p10: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i18: i32, in_$i19: i32, in_$i27: i32, in_$i28: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i18: i32, out_$i19: i32, out_$i27: i32, out_$i28: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i18, in_$i19, in_$i27, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9410;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i20, out_$i21;
    goto $bb6_dummy;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i21, out_$i20;
    assume true;
    goto $bb6;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i1(out_$i24, out_$i25);
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    out_$i25 := $sge.i32(out_$i20, in_$i7);
    goto corral_source_split_9417;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i21);
    goto corral_source_split_9416;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_9415;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, in_$p10);
    goto corral_source_split_9414;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_9413;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i18, in_$i7);
    call {:si_unique_call 1036} {:cexpr "offset"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_9412;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28 := from_buffer_loop_$bb4(in_$i7, in_$p10, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18, out_$i19, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure from_buffer_loop_$bb4(in_$i7: i32, in_$p10: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i18: i32, in_$i19: i32, in_$i27: i32, in_$i28: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i18: i32, out_$i19: i32, out_$i27: i32, out_$i28: i32);



implementation main_loop_$bb5(in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i22: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i44: i32, in_$i20: i32, in_$i21: i32, in_$i2: i32, in_$i3: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_vslice_dummy_var_107: i64, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i22: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i44: i32, out_$i20: i32, out_$i21: i32, out_$i2: i32, out_$i3: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_vslice_dummy_var_107: i64, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i20, out_$i21, out_$i2, out_$i3, out_$i48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i44, in_$i20, in_$i21, in_$i2, in_$i3, in_$i48, in_$i49, in_$i50, in_$i51, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9508;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i20, out_$i21;
    goto corral_source_split_9557_dummy;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9557;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i3;
    goto $bb36;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i3;
    goto $bb36;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i3;
    goto $bb36;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i3;
    goto $bb36;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i44;
    goto $bb36;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i41;
    goto $bb36;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i35;
    goto $bb36;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i2, out_$i29;
    goto $bb36;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i24, out_$i3;
    goto $bb36;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i19, out_$i3;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9555;

  $bb30:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb35;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1072} {:cexpr "ldv_s_st_template_scsi_driver"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_9553;

  $bb32:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_check_return_value_probe(out_$i16);
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_check_return_value(out_$i16);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_$i16 := st_probe($u1);
    call {:si_unique_call 1067} {:cexpr "res_st_probe_57"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9543;

  $bb29:
    assume out_$i15 == 1;
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i2, 0);
    goto corral_source_split_9540;

  $bb27:
    assume out_$i14 == 1;
    goto corral_source_split_9539;

  $bb25:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb21:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb8:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i4);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb67:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb63;

  $bb65:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb63;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb64;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_9510;

  corral_source_split_9508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} out_$i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i48);
    call {:si_unique_call 1056} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_9509;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i2, 0);
    goto corral_source_split_9610;

  $bb64:
    assume !(out_$i49 == 1);
    goto corral_source_split_9609;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i3, 0);
    goto corral_source_split_9613;

  $bb66:
    assume !(out_$i50 == 1);
    goto corral_source_split_9612;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_9563;

  $bb38:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i2;
    goto $bb39;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb39;

  SeqInstr_114:
    goto corral_source_split_9561;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_vslice_dummy_var_110 := st_remove($u1);
    goto SeqInstr_113;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} ldv_handler_precall();
    goto corral_source_split_9560;

  $bb37:
    assume out_$i22 == 1;
    goto corral_source_split_9559;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i2, 1);
    goto corral_source_split_9537;

  $bb26:
    assume !(out_$i13 == 1);
    goto corral_source_split_9536;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9575;

  $bb41:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i3;
    goto $bb45;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i28;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1079} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_9573;

  $bb43:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_check_return_value(out_$i26);
    goto corral_source_split_9568;

  SeqInstr_117:
    call {:si_unique_call 1077} {:cexpr "res_st_open_20"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_9567;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} out_$i26 := st_open($u2, $u3);
    goto SeqInstr_116;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_handler_precall();
    goto corral_source_split_9566;

  $bb40:
    assume out_$i25 == 1;
    goto corral_source_split_9565;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i3, 0);
    goto corral_source_split_9531;

  $bb23:
    assume out_$i12 == 1;
    goto corral_source_split_9530;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_9588;

  $bb47:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i3;
    goto $bb51;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1084} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_9586;

  $bb49:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i64(out_$i31, 0);
    goto corral_source_split_9582;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_check_return_value(out_$i32);
    goto corral_source_split_9581;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i64.i32(out_$i31);
    goto corral_source_split_9580;

  SeqInstr_120:
    call {:si_unique_call 1082} {:cexpr "res_st_read_28"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_9579;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_$i31 := st_read($u3, $u4, $u5, $u6);
    goto SeqInstr_119;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_handler_precall();
    goto corral_source_split_9578;

  $bb46:
    assume out_$i30 == 1;
    goto corral_source_split_9577;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i3, 1);
    goto corral_source_split_9534;

  $bb24:
    assume !(out_$i12 == 1);
    goto corral_source_split_9533;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_9601;

  $bb53:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i3;
    goto $bb57;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1089} {:cexpr "ldv_s_st_fops_file_operations"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_9599;

  $bb55:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i64(out_$i37, 0);
    goto corral_source_split_9595;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_check_return_value(out_$i38);
    goto corral_source_split_9594;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    goto corral_source_split_9593;

  SeqInstr_123:
    call {:si_unique_call 1087} {:cexpr "res_st_write_26"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_9592;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} out_$i37 := st_write($u3, $u4, $u5, $u6);
    goto SeqInstr_122;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_handler_precall();
    goto corral_source_split_9591;

  $bb52:
    assume out_$i36 == 1;
    goto corral_source_split_9590;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i3, 2);
    goto corral_source_split_9525;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_9524;

  $bb10:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb9:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  $bb59:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := out_$i3;
    goto $bb60;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    goto $bb60;

  SeqInstr_126:
    goto corral_source_split_9605;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_vslice_dummy_var_111 := st_release($u2, $u3);
    goto SeqInstr_125;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_handler_precall();
    goto corral_source_split_9604;

  $bb58:
    assume out_$i42 == 1;
    goto corral_source_split_9603;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i3, 3);
    goto corral_source_split_9528;

  $bb20:
    assume !(out_$i10 == 1);
    goto corral_source_split_9527;

  SeqInstr_111:
    goto corral_source_split_9514;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_vslice_dummy_var_107 := st_ioctl($u3, $u7, $u5);
    goto SeqInstr_110;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_handler_precall();
    goto corral_source_split_9513;

  $bb12:
    assume out_$i7 == 1;
    goto corral_source_split_9512;

  $bb11:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i4, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_vslice_dummy_var_108 := st_compat_ioctl($u3, $u7, $u5);
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_handler_precall();
    goto corral_source_split_9517;

  $bb14:
    assume out_$i8 == 1;
    goto corral_source_split_9516;

  $bb13:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_vslice_dummy_var_109 := st_flush($u3, $u8);
    goto corral_source_split_9522;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} ldv_handler_precall();
    goto corral_source_split_9521;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_9520;

  $bb15:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb18;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb18;

  corral_source_split_9557_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i20, out_$i21, out_$i2, out_$i3, out_$i48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := main_loop_$bb5(out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i20, out_$i21, out_$i2, out_$i3, out_$i48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i22: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i44: i32, in_$i20: i32, in_$i21: i32, in_$i2: i32, in_$i3: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_vslice_dummy_var_107: i64, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i22: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i44: i32, out_$i20: i32, out_$i21: i32, out_$i2: i32, out_$i3: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_vslice_dummy_var_107: i64, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32);
  modifies $M.0, $CurrAddr, $M.4, assertsPassed, $M.30, $M.16, $M.13, $M.32, $M.14;


